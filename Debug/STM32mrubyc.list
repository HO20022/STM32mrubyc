
STM32mrubyc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018624  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bf0  080187c8  080187c8  000287c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c3b8  0801c3b8  0003077c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c3b8  0801c3b8  0002c3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c3c0  0801c3c0  0003077c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c3c0  0801c3c0  0002c3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c3c4  0801c3c4  0002c3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000077c  20000000  0801c3c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008228  2000077c  0801cb44  0003077c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200089a4  0801cb44  000389a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003077c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000307ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002abbf  00000000  00000000  000307ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005bd2  00000000  00000000  0005b3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002058  00000000  00000000  00060f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a6c  00000000  00000000  00062fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a52f  00000000  00000000  00064a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002178b  00000000  00000000  0007ef73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096d63  00000000  00000000  000a06fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009e40  00000000  00000000  00137464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001412a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000077c 	.word	0x2000077c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080187ac 	.word	0x080187ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000780 	.word	0x20000780
 80001dc:	080187ac 	.word	0x080187ac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b9a6 	b.w	8000f50 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f83c 	bl	8000c88 <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2lz>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	460d      	mov	r5, r1
 8000c26:	f7ff ff71 	bl	8000b0c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x1c>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b80a 	b.w	8000c4c <__aeabi_d2ulz>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3e:	f000 f805 	bl	8000c4c <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2ulz>:
 8000c4c:	b5d0      	push	{r4, r6, r7, lr}
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__aeabi_d2ulz+0x34>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	f7ff fce7 	bl	8000628 <__aeabi_dmul>
 8000c5a:	f7ff ffa7 	bl	8000bac <__aeabi_d2uiz>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fc68 	bl	8000534 <__aeabi_ui2d>
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <__aeabi_d2ulz+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f7ff fcde 	bl	8000628 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fb20 	bl	80002b8 <__aeabi_dsub>
 8000c78:	f7ff ff98 	bl	8000bac <__aeabi_d2uiz>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c80:	3df00000 	.word	0x3df00000
 8000c84:	41f00000 	.word	0x41f00000

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void start_mrubyc(void);
extern void mrbc_tick(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d101      	bne.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0x14>
		mrbc_tick();
 8000f64:	f00b fcb0 	bl	800c8c8 <mrbc_tick>
    }
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000798 	.word	0x20000798

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f012 fb20 	bl	80135bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f822 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 f904 	bl	800118c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f84:	f000 f8d8 	bl	8001138 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f88:	f000 f888 	bl	800109c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <main+0x48>)
 8000f8e:	f013 fb63 	bl	8014658 <HAL_TIM_Base_Start_IT>
  start_mrubyc();
 8000f92:	f000 f985 	bl	80012a0 <start_mrubyc>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2120      	movs	r1, #32
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <main+0x4c>)
 8000f9c:	f012 fe3a 	bl	8013c14 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000fa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa4:	f012 fb7c 	bl	80136a0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2120      	movs	r1, #32
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <main+0x4c>)
 8000fae:	f012 fe31 	bl	8013c14 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000fb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb6:	f012 fb73 	bl	80136a0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000fba:	e7ec      	b.n	8000f96 <main+0x22>
 8000fbc:	20000798 	.word	0x20000798
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	; 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f015 fb75 	bl	80166c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b29      	ldr	r3, [pc, #164]	; (8001094 <SystemClock_Config+0xd0>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a28      	ldr	r2, [pc, #160]	; (8001094 <SystemClock_Config+0xd0>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <SystemClock_Config+0xd0>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <SystemClock_Config+0xd4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <SystemClock_Config+0xd4>)
 8001012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <SystemClock_Config+0xd4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102c:	2310      	movs	r3, #16
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	2302      	movs	r3, #2
 8001032:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001034:	2300      	movs	r3, #0
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001038:	2310      	movs	r3, #16
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800103c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001040:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001042:	2304      	movs	r3, #4
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001046:	2307      	movs	r3, #7
 8001048:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	4618      	mov	r0, r3
 8001050:	f012 fe1a 	bl	8013c88 <HAL_RCC_OscConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800105a:	f000 f905 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105e:	230f      	movs	r3, #15
 8001060:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001062:	2302      	movs	r3, #2
 8001064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2102      	movs	r1, #2
 800107a:	4618      	mov	r0, r3
 800107c:	f013 f87c 	bl	8014178 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001086:	f000 f8ef 	bl	8001268 <Error_Handler>
  }
}
 800108a:	bf00      	nop
 800108c:	3750      	adds	r7, #80	; 0x50
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000

0800109c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_TIM2_Init+0x98>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_TIM2_Init+0x98>)
 80010c2:	f44f 7252 	mov.w	r2, #840	; 0x348
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_TIM2_Init+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_TIM2_Init+0x98>)
 80010d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_TIM2_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_TIM2_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e2:	4814      	ldr	r0, [pc, #80]	; (8001134 <MX_TIM2_Init+0x98>)
 80010e4:	f013 fa68 	bl	80145b8 <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010ee:	f000 f8bb 	bl	8001268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_TIM2_Init+0x98>)
 8001100:	f013 fbfc 	bl	80148fc <HAL_TIM_ConfigClockSource>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800110a:	f000 f8ad 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_TIM2_Init+0x98>)
 800111c:	f013 fe04 	bl	8014d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001126:	f000 f89f 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000798 	.word	0x20000798

08001138 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_USART2_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001170:	f013 fe5c 	bl	8014e2c <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800117a:	f000 f875 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200007e0 	.word	0x200007e0
 8001188:	40004400 	.word	0x40004400

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_GPIO_Init+0xd0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a2c      	ldr	r2, [pc, #176]	; (800125c <MX_GPIO_Init+0xd0>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_GPIO_Init+0xd0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a25      	ldr	r2, [pc, #148]	; (800125c <MX_GPIO_Init+0xd0>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <MX_GPIO_Init+0xd0>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_GPIO_Init+0xd0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <MX_GPIO_Init+0xd0>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_GPIO_Init+0xd0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2120      	movs	r1, #32
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <MX_GPIO_Init+0xd4>)
 8001218:	f012 fcfc 	bl	8013c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800121c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001222:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_GPIO_Init+0xd8>)
 8001234:	f012 fb6a 	bl	801390c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001238:	2320      	movs	r3, #32
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_GPIO_Init+0xd4>)
 8001250:	f012 fb5c 	bl	801390c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020800 	.word	0x40020800

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <c_object_led>:

#define MRBC_MEMORY_SIZE (1024*30)
static uint8_t memory_pool[MRBC_MEMORY_SIZE];

static void c_object_led(mrb_vm *vm, mrb_value v[], int argc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, v[1].i);
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3310      	adds	r3, #16
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	2120      	movs	r1, #32
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <c_object_led+0x28>)
 800128e:	f012 fcc1 	bl	8013c14 <HAL_GPIO_WritePin>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40020000 	.word	0x40020000

080012a0 <start_mrubyc>:


void start_mrubyc(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	mrbc_init(memory_pool, MRBC_MEMORY_SIZE);
 80012a6:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <start_mrubyc+0x40>)
 80012ac:	f00c fab4 	bl	800d818 <mrbc_init>

	mrbc_class *cls = mrbc_get_class_by_name("Object");  // 追加
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <start_mrubyc+0x44>)
 80012b2:	f008 fa80 	bl	80097b6 <mrbc_get_class_by_name>
 80012b6:	6078      	str	r0, [r7, #4]
	mrbc_define_method(0, cls, "led", c_object_led);     // 追加
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <start_mrubyc+0x48>)
 80012ba:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <start_mrubyc+0x4c>)
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	2000      	movs	r0, #0
 80012c0:	f008 f8a4 	bl	800940c <mrbc_define_method>

	if( mrbc_create_task(mrbbuf, 0) != NULL ){
 80012c4:	2100      	movs	r1, #0
 80012c6:	480a      	ldr	r0, [pc, #40]	; (80012f0 <start_mrubyc+0x50>)
 80012c8:	f00b fba2 	bl	800ca10 <mrbc_create_task>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <start_mrubyc+0x36>
		mrbc_run();
 80012d2:	f00b fc4d 	bl	800cb70 <mrbc_run>
	}
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000828 	.word	0x20000828
 80012e4:	080187c8 	.word	0x080187c8
 80012e8:	08001275 	.word	0x08001275
 80012ec:	080187d0 	.word	0x080187d0
 80012f0:	0801a818 	.word	0x0801a818

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_MspInit+0x4c>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001332:	2007      	movs	r0, #7
 8001334:	f012 faa8 	bl	8013888 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d115      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	201c      	movs	r0, #28
 8001378:	f012 fa91 	bl	801389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800137c:	201c      	movs	r0, #28
 800137e:	f012 faaa 	bl	80138d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_UART_MspInit+0x84>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12b      	bne.n	800140a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_UART_MspInit+0x88>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_UART_MspInit+0x88>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_UART_MspInit+0x88>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_UART_MspInit+0x88>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_UART_MspInit+0x88>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_UART_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ea:	230c      	movs	r3, #12
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fa:	2307      	movs	r3, #7
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_UART_MspInit+0x8c>)
 8001406:	f012 fa81 	bl	801390c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40004400 	.word	0x40004400
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f012 f8f8 	bl	8013660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM2_IRQHandler+0x10>)
 800147a:	f013 f94f 	bl	801471c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000798 	.word	0x20000798

08001488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return 1;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_kill>:

int _kill(int pid, int sig)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a2:	f015 f97b 	bl	801679c <__errno>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2216      	movs	r2, #22
 80014aa:	601a      	str	r2, [r3, #0]
  return -1;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_exit>:

void _exit (int status)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ffe7 	bl	8001498 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ca:	e7fe      	b.n	80014ca <_exit+0x12>

080014cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e00a      	b.n	80014f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014de:	f3af 8000 	nop.w
 80014e2:	4601      	mov	r1, r0
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	b2ca      	uxtb	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbf0      	blt.n	80014de <_read+0x12>
  }

  return len;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e009      	b.n	800152c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	dbf1      	blt.n	8001518 <_write+0x12>
  }
  return len;
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_close>:

int _close(int file)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001566:	605a      	str	r2, [r3, #4]
  return 0;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_isatty>:

int _isatty(int file)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f015 f8e0 	bl	801679c <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20018000 	.word	0x20018000
 8001608:	00000400 	.word	0x00000400
 800160c:	20008028 	.word	0x20008028
 8001610:	200089a8 	.word	0x200089a8

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <nlz16>:

  @param  x	target (16bit unsigned)
  @retval int	nlz value
*/
static inline int nlz16(uint16_t x)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  if( x == 0 ) return 16;
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <nlz16+0x14>
 8001648:	2310      	movs	r3, #16
 800164a:	e028      	b.n	800169e <nlz16+0x66>

  int n = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
  if((x >>  8) == 0 ) { n += 8; x <<= 8; }
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b29b      	uxth	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <nlz16+0x2e>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3308      	adds	r3, #8
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	80fb      	strh	r3, [r7, #6]
  if((x >> 12) == 0 ) { n += 4; x <<= 4; }
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	0b1b      	lsrs	r3, r3, #12
 800166a:	b29b      	uxth	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <nlz16+0x44>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3304      	adds	r3, #4
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	80fb      	strh	r3, [r7, #6]
  if((x >> 14) == 0 ) { n += 2; x <<= 2; }
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	0b9b      	lsrs	r3, r3, #14
 8001680:	b29b      	uxth	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d105      	bne.n	8001692 <nlz16+0x5a>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3302      	adds	r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	80fb      	strh	r3, [r7, #6]
  return n - (x >> 15);
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	0bdb      	lsrs	r3, r3, #15
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1a9b      	subs	r3, r3, r2
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <nlz8>:

  @param  x	target (8bit unsigned)
  @retval int	nlz value
*/
static inline int nlz8(uint8_t x)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b085      	sub	sp, #20
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  if( x == 0 ) return 8;
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <nlz8+0x14>
 80016ba:	2308      	movs	r3, #8
 80016bc:	e01d      	b.n	80016fa <nlz8+0x50>

  int n = 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
  if((x >> 4) == 0 ) { n += 4; x <<= 4; }
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <nlz8+0x2e>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3304      	adds	r3, #4
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	71fb      	strb	r3, [r7, #7]
  if((x >> 6) == 0 ) { n += 2; x <<= 2; }
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d105      	bne.n	80016ee <nlz8+0x44>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3302      	adds	r3, #2
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	71fb      	strb	r3, [r7, #7]
  return n - (x >> 7);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	09db      	lsrs	r3, r3, #7
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1a9b      	subs	r3, r3, r2
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <calc_index>:

  @param  alloc_size	alloc size
  @retval unsigned int	index of free_blocks
*/
static inline unsigned int calc_index(MRBC_ALLOC_MEMSIZE_T alloc_size)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  // check overflow
  if( (alloc_size >> (MRBC_ALLOC_FLI_BIT_WIDTH
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	0c1b      	lsrs	r3, r3, #16
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <calc_index+0x14>
                      + MRBC_ALLOC_SLI_BIT_WIDTH
                      + MRBC_ALLOC_IGNORE_LSBS)) != 0) {
    return SIZE_FREE_BLOCKS - 1;
 8001718:	234f      	movs	r3, #79	; 0x4f
 800171a:	e032      	b.n	8001782 <calc_index+0x7a>
  }

  // calculate First Level Index.
  unsigned int fli = 16 -
    nlz16( alloc_size >> (MRBC_ALLOC_SLI_BIT_WIDTH + MRBC_ALLOC_IGNORE_LSBS) );
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	09db      	lsrs	r3, r3, #7
 8001720:	b29b      	uxth	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff88 	bl	8001638 <nlz16>
 8001728:	4603      	mov	r3, r0
  unsigned int fli = 16 -
 800172a:	f1c3 0310 	rsb	r3, r3, #16
 800172e:	617b      	str	r3, [r7, #20]

  // calculate Second Level Index.
  unsigned int shift = (fli == 0) ? MRBC_ALLOC_IGNORE_LSBS :
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <calc_index+0x34>
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3303      	adds	r3, #3
 800173a:	e000      	b.n	800173e <calc_index+0x36>
 800173c:	2304      	movs	r3, #4
 800173e:	613b      	str	r3, [r7, #16]
                                   (MRBC_ALLOC_IGNORE_LSBS - 1 + fli);

  unsigned int sli = (alloc_size >> shift) & ((1 << MRBC_ALLOC_SLI_BIT_WIDTH) - 1);
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	60fb      	str	r3, [r7, #12]
  unsigned int index = (fli << MRBC_ALLOC_SLI_BIT_WIDTH) + sli;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]

  assert(fli <= MRBC_ALLOC_FLI_BIT_WIDTH);
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b09      	cmp	r3, #9
 800175c:	d906      	bls.n	800176c <calc_index+0x64>
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <calc_index+0x84>)
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <calc_index+0x88>)
 8001762:	f44f 7194 	mov.w	r1, #296	; 0x128
 8001766:	480b      	ldr	r0, [pc, #44]	; (8001794 <calc_index+0x8c>)
 8001768:	f013 ff6c 	bl	8015644 <__assert_func>
  assert(sli <= (1 << MRBC_ALLOC_SLI_BIT_WIDTH) - 1);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b07      	cmp	r3, #7
 8001770:	d906      	bls.n	8001780 <calc_index+0x78>
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <calc_index+0x90>)
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <calc_index+0x88>)
 8001776:	f240 1129 	movw	r1, #297	; 0x129
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <calc_index+0x8c>)
 800177c:	f013 ff62 	bl	8015644 <__assert_func>

  return index;
 8001780:	68bb      	ldr	r3, [r7, #8]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	080187d4 	.word	0x080187d4
 8001790:	0801a8b8 	.word	0x0801a8b8
 8001794:	080187f4 	.word	0x080187f4
 8001798:	08018810 	.word	0x08018810

0800179c <add_free_block>:

  @param  pool		Pointer to memory pool.
  @param  target	Pointer to target block.
*/
static void add_free_block(MEMORY_POOL *pool, FREE_BLOCK *target)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  SET_FREE_BLOCK(target);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0201 	bic.w	r2, r3, #1
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	601a      	str	r2, [r3, #0]

  FREE_BLOCK **top_adrs = (FREE_BLOCK **)((uint8_t*)target + BLOCK_SIZE(target) - sizeof(FREE_BLOCK *));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 0303 	bic.w	r3, r3, #3
 80017ba:	3b04      	subs	r3, #4
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	617b      	str	r3, [r7, #20]
  *top_adrs = target;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	601a      	str	r2, [r3, #0]

  unsigned int index = calc_index(BLOCK_SIZE(target));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 0303 	bic.w	r3, r3, #3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff99 	bl	8001708 <calc_index>
 80017d6:	6138      	str	r0, [r7, #16]
  unsigned int fli = FLI(index);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	60fb      	str	r3, [r7, #12]
  unsigned int sli = SLI(index);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	60bb      	str	r3, [r7, #8]
  assert( index < SIZE_FREE_BLOCKS );
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b4f      	cmp	r3, #79	; 0x4f
 80017ea:	d906      	bls.n	80017fa <add_free_block+0x5e>
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <add_free_block+0xe0>)
 80017ee:	4a24      	ldr	r2, [pc, #144]	; (8001880 <add_free_block+0xe4>)
 80017f0:	f240 113f 	movw	r1, #319	; 0x13f
 80017f4:	4823      	ldr	r0, [pc, #140]	; (8001884 <add_free_block+0xe8>)
 80017f6:	f013 ff25 	bl	8015644 <__assert_func>

  pool->free_fli_bitmap      |= (MSB_BIT1_FLI >> fli);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	889b      	ldrh	r3, [r3, #4]
 80017fe:	b21a      	sxth	r2, r3
 8001800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	fa41 f303 	asr.w	r3, r1, r3
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	809a      	strh	r2, [r3, #4]
  pool->free_sli_bitmap[fli] |= (MSB_BIT1_SLI >> sli);
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	3306      	adds	r3, #6
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b25a      	sxtb	r2, r3
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	fa41 f303 	asr.w	r3, r1, r3
 800182a:	b25b      	sxtb	r3, r3
 800182c:	4313      	orrs	r3, r2
 800182e:	b25b      	sxtb	r3, r3
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	3306      	adds	r3, #6
 800183a:	460a      	mov	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]

  target->prev_free = NULL;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  target->next_free = pool->free_blocks[index];
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	3304      	adds	r3, #4
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	605a      	str	r2, [r3, #4]
  if( target->next_free != NULL ) {
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <add_free_block+0xc8>
    target->next_free->prev_free = target;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	609a      	str	r2, [r3, #8]
  }
  pool->free_blocks[index] = target;
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	3304      	adds	r3, #4
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	605a      	str	r2, [r3, #4]
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	0801883c 	.word	0x0801883c
 8001880:	0801a8a8 	.word	0x0801a8a8
 8001884:	080187f4 	.word	0x080187f4

08001888 <remove_free_block>:

  @param  pool		Pointer to memory pool.
  @param  target	pointer to target block.
*/
static void remove_free_block(MEMORY_POOL *pool, FREE_BLOCK *target)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  // top of linked list?
  if( target->prev_free == NULL ) {
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d148      	bne.n	800192c <remove_free_block+0xa4>
    unsigned int index = calc_index(BLOCK_SIZE(target));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff30 	bl	8001708 <calc_index>
 80018a8:	6178      	str	r0, [r7, #20]

    pool->free_blocks[index] = target->next_free;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3304      	adds	r3, #4
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	605a      	str	r2, [r3, #4]
    if( target->next_free == NULL ) {
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d139      	bne.n	8001936 <remove_free_block+0xae>
      unsigned int fli = FLI(index);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	613b      	str	r3, [r7, #16]
      unsigned int sli = SLI(index);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]
      pool->free_sli_bitmap[fli] &= ~(MSB_BIT1_SLI >> sli);
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	3306      	adds	r3, #6
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b25a      	sxtb	r2, r3
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	fa41 f303 	asr.w	r3, r1, r3
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	b25b      	sxtb	r3, r3
 80018ea:	4013      	ands	r3, r2
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	b2d9      	uxtb	r1, r3
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4413      	add	r3, r2
 80018f6:	3306      	adds	r3, #6
 80018f8:	460a      	mov	r2, r1
 80018fa:	701a      	strb	r2, [r3, #0]
      if( pool->free_sli_bitmap[fli] == 0 ) pool->free_fli_bitmap &= ~(MSB_BIT1_FLI >> fli);
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4413      	add	r3, r2
 8001902:	3306      	adds	r3, #6
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <remove_free_block+0xae>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	889b      	ldrh	r3, [r3, #4]
 800190e:	b21a      	sxth	r2, r3
 8001910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	fa41 f303 	asr.w	r3, r1, r3
 800191a:	b21b      	sxth	r3, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	b21b      	sxth	r3, r3
 8001920:	4013      	ands	r3, r2
 8001922:	b21b      	sxth	r3, r3
 8001924:	b29a      	uxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	809a      	strh	r2, [r3, #4]
 800192a:	e004      	b.n	8001936 <remove_free_block+0xae>
    }
  }
  else {
    target->prev_free->next_free = target->next_free;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	6852      	ldr	r2, [r2, #4]
 8001934:	605a      	str	r2, [r3, #4]
  }

  if( target->next_free != NULL ) {
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <remove_free_block+0xc0>
    target->next_free->prev_free = target->prev_free;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	6892      	ldr	r2, [r2, #8]
 8001946:	609a      	str	r2, [r3, #8]
  }
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <split_block>:
  @param  size		size
  @retval NULL		no split.
  @retval FREE_BLOCK *	pointer to splitted free block.
*/
static inline FREE_BLOCK* split_block(FREE_BLOCK *target, MRBC_ALLOC_MEMSIZE_T size)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  assert( BLOCK_SIZE(target) >= size );
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d906      	bls.n	8001976 <split_block+0x26>
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <split_block+0x6c>)
 800196a:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <split_block+0x70>)
 800196c:	f240 1175 	movw	r1, #373	; 0x175
 8001970:	4814      	ldr	r0, [pc, #80]	; (80019c4 <split_block+0x74>)
 8001972:	f013 fe67 	bl	8015644 <__assert_func>
  if( (BLOCK_SIZE(target) - size) <= MRBC_MIN_MEMORY_BLOCK_SIZE ) return NULL;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b10      	cmp	r3, #16
 8001984:	d801      	bhi.n	800198a <split_block+0x3a>
 8001986:	2300      	movs	r3, #0
 8001988:	e014      	b.n	80019b4 <split_block+0x64>

  // split block, free
  FREE_BLOCK *split = (FREE_BLOCK *)((uint8_t *)target + size);
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]

  split->size  = BLOCK_SIZE(target) - size;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	1ad2      	subs	r2, r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	601a      	str	r2, [r3, #0]
  target->size = size | (target->size & 0x03);	// copy a size with flags.
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0203 	and.w	r2, r3, #3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]

  return split;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	08018858 	.word	0x08018858
 80019c0:	0801a904 	.word	0x0801a904
 80019c4:	080187f4 	.word	0x080187f4

080019c8 <merge_block>:

  @param  target	pointer to free block 1
  @param  next	pointer to free block 2
*/
static inline void merge_block(FREE_BLOCK *target, FREE_BLOCK *next)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  assert(target < next);
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d306      	bcc.n	80019e8 <merge_block+0x20>
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <merge_block+0x3c>)
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <merge_block+0x40>)
 80019de:	f240 118b 	movw	r1, #395	; 0x18b
 80019e2:	480a      	ldr	r0, [pc, #40]	; (8001a0c <merge_block+0x44>)
 80019e4:	f013 fe2e 	bl	8015644 <__assert_func>

  // merge target and next
  target->size += BLOCK_SIZE(next);		// copy a size but save flags.
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 0303 	bic.w	r3, r3, #3
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	601a      	str	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	08018874 	.word	0x08018874
 8001a08:	0801a974 	.word	0x0801a974
 8001a0c:	080187f4 	.word	0x080187f4

08001a10 <mrbc_init_alloc>:

  @param  ptr	pointer to free memory block.
  @param  size	size. (max 64KB. see MRBC_ALLOC_MEMSIZE_T)
*/
void mrbc_init_alloc(void *ptr, unsigned int size)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    parameter to `MRBC_MIN_MEMORY_BLOCK_SIZE (1 << MRBC_ALLOC_IGNORE_LSBS)`
    and #define MRBC_ALLOC_16BIT.
  */

  assert( (sizeof(MEMORY_POOL) & 0x03) == 0 );
  assert( size != 0 );
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d106      	bne.n	8001a2e <mrbc_init_alloc+0x1e>
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <mrbc_init_alloc+0xa8>)
 8001a22:	4a26      	ldr	r2, [pc, #152]	; (8001abc <mrbc_init_alloc+0xac>)
 8001a24:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8001a28:	4825      	ldr	r0, [pc, #148]	; (8001ac0 <mrbc_init_alloc+0xb0>)
 8001a2a:	f013 fe0b 	bl	8015644 <__assert_func>
  assert( size <= (MRBC_ALLOC_MEMSIZE_T)(~0) );

  if( memory_pool != NULL ) return;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <mrbc_init_alloc+0xb4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d13b      	bne.n	8001aae <mrbc_init_alloc+0x9e>
  size &= ~(unsigned int)0x03;	// align 4 byte.
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f023 0303 	bic.w	r3, r3, #3
 8001a3c:	603b      	str	r3, [r7, #0]
  memory_pool = ptr;
 8001a3e:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <mrbc_init_alloc+0xb4>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6013      	str	r3, [r2, #0]
  memset( memory_pool, 0, sizeof(MEMORY_POOL) );
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <mrbc_init_alloc+0xb4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f014 fe37 	bl	80166c2 <memset>
  memory_pool->size = size;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <mrbc_init_alloc+0xb4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	601a      	str	r2, [r3, #0]

  // initialize memory pool
  //  large free block + zero size used block (sentinel).
  MRBC_ALLOC_MEMSIZE_T sentinel_size = sizeof(USED_BLOCK);
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	617b      	str	r3, [r7, #20]
  sentinel_size += (-sentinel_size & 0x03);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	425b      	negs	r3, r3
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
  MRBC_ALLOC_MEMSIZE_T free_size = size - sizeof(MEMORY_POOL) - sentinel_size;
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a78:	613b      	str	r3, [r7, #16]
  FREE_BLOCK *free_block = BLOCK_TOP(memory_pool);
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <mrbc_init_alloc+0xb4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001a82:	60fb      	str	r3, [r7, #12]
  USED_BLOCK *used_block = (USED_BLOCK *)((uint8_t *)free_block + free_size);
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4413      	add	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]

  free_block->size = free_size | 0x02;		// flag prev=1, used=0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f043 0202 	orr.w	r2, r3, #2
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	601a      	str	r2, [r3, #0]
  used_block->size = sentinel_size | 0x01;	// flag prev=0, used=1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	601a      	str	r2, [r3, #0]
  SET_VM_ID( used_block, 0xff );

  add_free_block( memory_pool, free_block );
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <mrbc_init_alloc+0xb4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fe78 	bl	800179c <add_free_block>
 8001aac:	e000      	b.n	8001ab0 <mrbc_init_alloc+0xa0>
  if( memory_pool != NULL ) return;
 8001aae:	bf00      	nop
}
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	08018884 	.word	0x08018884
 8001abc:	0801a8c4 	.word	0x0801a8c4
 8001ac0:	080187f4 	.word	0x080187f4
 8001ac4:	2000802c 	.word	0x2000802c

08001ac8 <mrbc_raw_alloc>:
  @param  size	request size.
  @return void * pointer to allocated memory.
  @retval NULL	error.
*/
void * mrbc_raw_alloc(unsigned int size)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  MEMORY_POOL *pool = memory_pool;
 8001ad0:	4b94      	ldr	r3, [pc, #592]	; (8001d24 <mrbc_raw_alloc+0x25c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	61bb      	str	r3, [r7, #24]
  MRBC_ALLOC_MEMSIZE_T alloc_size = size + sizeof(USED_BLOCK);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  // align 4 byte
  alloc_size += (-alloc_size & 3);
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	425b      	negs	r3, r3
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae6:	4413      	add	r3, r2
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c

  // check minimum alloc size.
  if( alloc_size < MRBC_MIN_MEMORY_BLOCK_SIZE ) alloc_size = MRBC_MIN_MEMORY_BLOCK_SIZE;
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	d801      	bhi.n	8001af4 <mrbc_raw_alloc+0x2c>
 8001af0:	2310      	movs	r3, #16
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  FREE_BLOCK *target;
  unsigned int fli, sli;
  unsigned int index = calc_index(alloc_size);
 8001af4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001af6:	f7ff fe07 	bl	8001708 <calc_index>
 8001afa:	61f8      	str	r0, [r7, #28]

  // At first, check only the beginning of the same size block.
  // because it immediately responds to the pattern in which
  // same size memory are allocated and released continuously.
  target = pool->free_blocks[index];
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  if( target && BLOCK_SIZE(target) >= alloc_size ) {
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00e      	beq.n	8001b2e <mrbc_raw_alloc+0x66>
 8001b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 0303 	bic.w	r3, r3, #3
 8001b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d807      	bhi.n	8001b2e <mrbc_raw_alloc+0x66>
    fli = FLI(index);
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    sli = SLI(index);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	623b      	str	r3, [r7, #32]
    goto FOUND_TARGET_BLOCK;
 8001b2c:	e09a      	b.n	8001c64 <mrbc_raw_alloc+0x19c>
  }

  // and then, check the next (larger) size block.
  target = pool->free_blocks[++index];
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  fli = FLI(index);
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  sli = SLI(index);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	623b      	str	r3, [r7, #32]
  if( target ) goto FOUND_TARGET_BLOCK;
 8001b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 8083 	bne.w	8001c5e <mrbc_raw_alloc+0x196>

  // check in SLI bitmap table.
  uint16_t masked = pool->free_sli_bitmap[fli] & ((MSB_BIT1_SLI >> sli) - 1);
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3306      	adds	r3, #6
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	fa41 f303 	asr.w	r3, r1, r3
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4013      	ands	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	82fb      	strh	r3, [r7, #22]
  if( masked != 0 ) {
 8001b7a:	8afb      	ldrh	r3, [r7, #22]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <mrbc_raw_alloc+0xc8>
    sli = NLZ_SLI( masked );
 8001b80:	8afb      	ldrh	r3, [r7, #22]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fd90 	bl	80016aa <nlz8>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	623b      	str	r3, [r7, #32]
    goto FOUND_FLI_SLI;
 8001b8e:	e046      	b.n	8001c1e <mrbc_raw_alloc+0x156>
  }

  // check in FLI bitmap table.
  masked = pool->free_fli_bitmap & ((MSB_BIT1_FLI >> fli) - 1);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	889b      	ldrh	r3, [r3, #4]
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	fa41 f303 	asr.w	r3, r1, r3
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	82fb      	strh	r3, [r7, #22]
  if( masked != 0 ) {
 8001bae:	8afb      	ldrh	r3, [r7, #22]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <mrbc_raw_alloc+0x10e>
    fli = NLZ_FLI( masked );
 8001bb4:	8afb      	ldrh	r3, [r7, #22]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fd3e 	bl	8001638 <nlz16>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    sli = NLZ_SLI( pool->free_sli_bitmap[fli] );
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3306      	adds	r3, #6
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fd6d 	bl	80016aa <nlz8>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	623b      	str	r3, [r7, #32]
    goto FOUND_FLI_SLI;
 8001bd4:	e023      	b.n	8001c1e <mrbc_raw_alloc+0x156>
  }

  // Change strategy to First-fit.
  target = pool->free_blocks[--index];
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  while( target ) {
 8001bea:	e00e      	b.n	8001c0a <mrbc_raw_alloc+0x142>
    if( BLOCK_SIZE(target) >= alloc_size ) {
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 0303 	bic.w	r3, r3, #3
 8001bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d804      	bhi.n	8001c04 <mrbc_raw_alloc+0x13c>
      remove_free_block( pool, target );
 8001bfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bfc:	69b8      	ldr	r0, [r7, #24]
 8001bfe:	f7ff fe43 	bl	8001888 <remove_free_block>
      goto SPLIT_BLOCK;
 8001c02:	e07b      	b.n	8001cfc <mrbc_raw_alloc+0x234>
    }
    target = target->next_free;
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  while( target ) {
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1ed      	bne.n	8001bec <mrbc_raw_alloc+0x124>
  // else out of memory
#if defined(MRBC_OUT_OF_MEMORY)
  MRBC_OUT_OF_MEMORY();
#else
  static const char msg[] = "Fatal error: Out of memory.\n";
  hal_write(2, msg, sizeof(msg)-1);
 8001c10:	221c      	movs	r2, #28
 8001c12:	4945      	ldr	r1, [pc, #276]	; (8001d28 <mrbc_raw_alloc+0x260>)
 8001c14:	2002      	movs	r0, #2
 8001c16:	f009 fed9 	bl	800b9cc <hal_write>
#endif
  return NULL;  // ENOMEM
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e0b0      	b.n	8001d80 <mrbc_raw_alloc+0x2b8>


 FOUND_FLI_SLI:
  index = (fli << MRBC_ALLOC_SLI_BIT_WIDTH) + sli;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	6a3a      	ldr	r2, [r7, #32]
 8001c24:	4413      	add	r3, r2
 8001c26:	61fb      	str	r3, [r7, #28]
  assert( index < SIZE_FREE_BLOCKS );
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b4f      	cmp	r3, #79	; 0x4f
 8001c2c:	d906      	bls.n	8001c3c <mrbc_raw_alloc+0x174>
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <mrbc_raw_alloc+0x264>)
 8001c30:	4a3f      	ldr	r2, [pc, #252]	; (8001d30 <mrbc_raw_alloc+0x268>)
 8001c32:	f240 2117 	movw	r1, #535	; 0x217
 8001c36:	483f      	ldr	r0, [pc, #252]	; (8001d34 <mrbc_raw_alloc+0x26c>)
 8001c38:	f013 fd04 	bl	8015644 <__assert_func>
  target = pool->free_blocks[index];
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  assert( target != NULL );
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d108      	bne.n	8001c62 <mrbc_raw_alloc+0x19a>
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <mrbc_raw_alloc+0x270>)
 8001c52:	4a37      	ldr	r2, [pc, #220]	; (8001d30 <mrbc_raw_alloc+0x268>)
 8001c54:	f240 2119 	movw	r1, #537	; 0x219
 8001c58:	4836      	ldr	r0, [pc, #216]	; (8001d34 <mrbc_raw_alloc+0x26c>)
 8001c5a:	f013 fcf3 	bl	8015644 <__assert_func>
  if( target ) goto FOUND_TARGET_BLOCK;
 8001c5e:	bf00      	nop
 8001c60:	e000      	b.n	8001c64 <mrbc_raw_alloc+0x19c>

 FOUND_TARGET_BLOCK:
 8001c62:	bf00      	nop
  assert(BLOCK_SIZE(target) >= alloc_size);
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 0303 	bic.w	r3, r3, #3
 8001c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d906      	bls.n	8001c80 <mrbc_raw_alloc+0x1b8>
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <mrbc_raw_alloc+0x274>)
 8001c74:	4a2e      	ldr	r2, [pc, #184]	; (8001d30 <mrbc_raw_alloc+0x268>)
 8001c76:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8001c7a:	482e      	ldr	r0, [pc, #184]	; (8001d34 <mrbc_raw_alloc+0x26c>)
 8001c7c:	f013 fce2 	bl	8015644 <__assert_func>

  // remove free_blocks index
  pool->free_blocks[index] = target->next_free;
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	69b9      	ldr	r1, [r7, #24]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	605a      	str	r2, [r3, #4]
  if( target->next_free == NULL ) {
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d12d      	bne.n	8001cf4 <mrbc_raw_alloc+0x22c>
    pool->free_sli_bitmap[fli] &= ~(MSB_BIT1_SLI >> sli);
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3306      	adds	r3, #6
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b25a      	sxtb	r2, r3
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	fa41 f303 	asr.w	r3, r1, r3
 8001cac:	b25b      	sxtb	r3, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	b25b      	sxtb	r3, r3
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	b2d9      	uxtb	r1, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3306      	adds	r3, #6
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	701a      	strb	r2, [r3, #0]
    if( pool->free_sli_bitmap[fli] == 0 ) pool->free_fli_bitmap &= ~(MSB_BIT1_FLI >> fli);
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	4413      	add	r3, r2
 8001cca:	3306      	adds	r3, #6
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d114      	bne.n	8001cfc <mrbc_raw_alloc+0x234>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	889b      	ldrh	r3, [r3, #4]
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	fa41 f303 	asr.w	r3, r1, r3
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	809a      	strh	r2, [r3, #4]
 8001cf2:	e003      	b.n	8001cfc <mrbc_raw_alloc+0x234>
  }
  else {
    target->next_free->prev_free = NULL;
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  }

 SPLIT_BLOCK: {
    FREE_BLOCK *release = split_block(target, alloc_size);
 8001cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d00:	f7ff fe26 	bl	8001950 <split_block>
 8001d04:	6138      	str	r0, [r7, #16]
    if( release != NULL ) {
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d019      	beq.n	8001d40 <mrbc_raw_alloc+0x278>
      SET_PREV_USED(release);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f043 0202 	orr.w	r2, r3, #2
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	601a      	str	r2, [r3, #0]
      add_free_block( pool, release );
 8001d18:	6939      	ldr	r1, [r7, #16]
 8001d1a:	69b8      	ldr	r0, [r7, #24]
 8001d1c:	f7ff fd3e 	bl	800179c <add_free_block>
 8001d20:	e01b      	b.n	8001d5a <mrbc_raw_alloc+0x292>
 8001d22:	bf00      	nop
 8001d24:	2000802c 	.word	0x2000802c
 8001d28:	0801a8d4 	.word	0x0801a8d4
 8001d2c:	0801883c 	.word	0x0801883c
 8001d30:	0801a8f4 	.word	0x0801a8f4
 8001d34:	080187f4 	.word	0x080187f4
 8001d38:	08018890 	.word	0x08018890
 8001d3c:	080188a0 	.word	0x080188a0
    } else {
      FREE_BLOCK *next = PHYS_NEXT(target);
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0303 	bic.w	r3, r3, #3
 8001d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
      SET_PREV_USED(next);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	601a      	str	r2, [r3, #0]
    }
  }

  SET_USED_BLOCK(target);
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	601a      	str	r2, [r3, #0]
  SET_VM_ID( target, 0 );

#if defined(MRBC_DEBUG)
  memset( (uint8_t *)target + sizeof(USED_BLOCK), 0xaa,
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	1d18      	adds	r0, r3, #4
          BLOCK_SIZE(target) - sizeof(USED_BLOCK) );
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 0303 	bic.w	r3, r3, #3
 8001d72:	3b04      	subs	r3, #4
  memset( (uint8_t *)target + sizeof(USED_BLOCK), 0xaa,
 8001d74:	461a      	mov	r2, r3
 8001d76:	21aa      	movs	r1, #170	; 0xaa
 8001d78:	f014 fca3 	bl	80166c2 <memset>
#endif

  return (uint8_t *)target + sizeof(USED_BLOCK);
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	3304      	adds	r3, #4
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3730      	adds	r7, #48	; 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <mrbc_raw_alloc_no_free>:
  @param  size	request size.
  @return void * pointer to allocated memory.
  @retval NULL	error.
*/
void * mrbc_raw_alloc_no_free(unsigned int size)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  MEMORY_POOL *pool = memory_pool;
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <mrbc_raw_alloc_no_free+0xf4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
  MRBC_ALLOC_MEMSIZE_T alloc_size = size + (-size & 3);	// align 4 byte
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	425b      	negs	r3, r3
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  // find the tail block
  FREE_BLOCK *tail = BLOCK_TOP(pool);
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001daa:	61fb      	str	r3, [r7, #28]
  FREE_BLOCK *prev;
  do {
    prev = tail;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	613b      	str	r3, [r7, #16]
    tail = PHYS_NEXT(tail);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 0303 	bic.w	r3, r3, #3
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	61fb      	str	r3, [r7, #28]
  } while( PHYS_NEXT(tail) < BLOCK_END(pool) );
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0303 	bic.w	r3, r3, #3
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	441a      	add	r2, r3
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69b9      	ldr	r1, [r7, #24]
 8001dd0:	440b      	add	r3, r1
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d3ea      	bcc.n	8001dac <mrbc_raw_alloc_no_free+0x24>

  // can resize it block?
  if( IS_USED_BLOCK(prev) ) goto FALLBACK;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d141      	bne.n	8001e66 <mrbc_raw_alloc_no_free+0xde>
  if( (BLOCK_SIZE(prev) - sizeof(USED_BLOCK)) < alloc_size ) goto FALLBACK;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	3b04      	subs	r3, #4
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d83b      	bhi.n	8001e6a <mrbc_raw_alloc_no_free+0xe2>

  remove_free_block( pool, prev );
 8001df2:	6939      	ldr	r1, [r7, #16]
 8001df4:	69b8      	ldr	r0, [r7, #24]
 8001df6:	f7ff fd47 	bl	8001888 <remove_free_block>
  MRBC_ALLOC_MEMSIZE_T free_size = BLOCK_SIZE(prev) - alloc_size;
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	60fb      	str	r3, [r7, #12]

  if( free_size <= MRBC_MIN_MEMORY_BLOCK_SIZE ) {
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d811      	bhi.n	8001e32 <mrbc_raw_alloc_no_free+0xaa>
    // no split, use all
    prev->size += BLOCK_SIZE(tail);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 0303 	bic.w	r3, r3, #3
 8001e1a:	441a      	add	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	601a      	str	r2, [r3, #0]
    SET_USED_BLOCK( prev );
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	601a      	str	r2, [r3, #0]
    tail = prev;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	e016      	b.n	8001e60 <mrbc_raw_alloc_no_free+0xd8>
  }
  else {
    // split block
    MRBC_ALLOC_MEMSIZE_T tail_size = tail->size + alloc_size;	// w/ flags.
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
    tail = (FREE_BLOCK*)((uint8_t *)tail - alloc_size);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	425b      	negs	r3, r3
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	4413      	add	r3, r2
 8001e44:	61fb      	str	r3, [r7, #28]
    tail->size = tail_size;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	601a      	str	r2, [r3, #0]
    prev->size -= alloc_size;		// w/ flags.
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1ad2      	subs	r2, r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	601a      	str	r2, [r3, #0]
    add_free_block( pool, prev );
 8001e58:	6939      	ldr	r1, [r7, #16]
 8001e5a:	69b8      	ldr	r0, [r7, #24]
 8001e5c:	f7ff fc9e 	bl	800179c <add_free_block>
  }
  SET_VM_ID( tail, 0xff );

  return (uint8_t *)tail + sizeof(USED_BLOCK);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	3304      	adds	r3, #4
 8001e64:	e006      	b.n	8001e74 <mrbc_raw_alloc_no_free+0xec>
  if( IS_USED_BLOCK(prev) ) goto FALLBACK;
 8001e66:	bf00      	nop
 8001e68:	e000      	b.n	8001e6c <mrbc_raw_alloc_no_free+0xe4>
  if( (BLOCK_SIZE(prev) - sizeof(USED_BLOCK)) < alloc_size ) goto FALLBACK;
 8001e6a:	bf00      	nop

 FALLBACK:
  return mrbc_raw_alloc(alloc_size);
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f7ff fe2b 	bl	8001ac8 <mrbc_raw_alloc>
 8001e72:	4603      	mov	r3, r0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	2000802c 	.word	0x2000802c

08001e80 <mrbc_raw_free>:
/*! release memory

  @param  ptr	Return value of mrbc_raw_alloc()
*/
void mrbc_raw_free(void *ptr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
#if defined(MRBC_DEBUG)
  {
    if( ptr == NULL ) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <mrbc_raw_free+0x1a>
      static const char msg[] = "mrbc_raw_free(): NULL pointer was given.\n";
      hal_write(2, msg, sizeof(msg)-1);
 8001e8e:	2229      	movs	r2, #41	; 0x29
 8001e90:	4943      	ldr	r1, [pc, #268]	; (8001fa0 <mrbc_raw_free+0x120>)
 8001e92:	2002      	movs	r0, #2
 8001e94:	f009 fd9a 	bl	800b9cc <hal_write>
      return;
 8001e98:	e07f      	b.n	8001f9a <mrbc_raw_free+0x11a>
    }

    FREE_BLOCK *target = (FREE_BLOCK *)((uint8_t *)ptr - sizeof(USED_BLOCK));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3b04      	subs	r3, #4
 8001e9e:	617b      	str	r3, [r7, #20]
    FREE_BLOCK *block = BLOCK_TOP(memory_pool);
 8001ea0:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <mrbc_raw_free+0x124>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001ea8:	61fb      	str	r3, [r7, #28]
    while( block < (FREE_BLOCK *)BLOCK_END(memory_pool) ) {
 8001eaa:	e00a      	b.n	8001ec2 <mrbc_raw_free+0x42>
      if( block == target ) break;
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d010      	beq.n	8001ed6 <mrbc_raw_free+0x56>
      block = PHYS_NEXT(block);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 0303 	bic.w	r3, r3, #3
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	61fb      	str	r3, [r7, #28]
    while( block < (FREE_BLOCK *)BLOCK_END(memory_pool) ) {
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <mrbc_raw_free+0x124>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <mrbc_raw_free+0x124>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4413      	add	r3, r2
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d3eb      	bcc.n	8001eac <mrbc_raw_free+0x2c>
 8001ed4:	e000      	b.n	8001ed8 <mrbc_raw_free+0x58>
      if( block == target ) break;
 8001ed6:	bf00      	nop
    }

    if( block != target || IS_FREE_BLOCK(block) ) {
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d105      	bne.n	8001eec <mrbc_raw_free+0x6c>
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <mrbc_raw_free+0x78>
      static const char msg[] = "mrbc_raw_free(): double free detected.\n";
      hal_write(2, msg, sizeof(msg)-1);
 8001eec:	2227      	movs	r2, #39	; 0x27
 8001eee:	492e      	ldr	r1, [pc, #184]	; (8001fa8 <mrbc_raw_free+0x128>)
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f009 fd6b 	bl	800b9cc <hal_write>
      return;
 8001ef6:	e050      	b.n	8001f9a <mrbc_raw_free+0x11a>
    }

    SET_VM_ID( target, 0xff );
    memset( ptr, 0xff, BLOCK_SIZE(target) - sizeof(USED_BLOCK) );
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 0303 	bic.w	r3, r3, #3
 8001f00:	3b04      	subs	r3, #4
 8001f02:	461a      	mov	r2, r3
 8001f04:	21ff      	movs	r1, #255	; 0xff
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f014 fbdb 	bl	80166c2 <memset>
  }
#endif

  MEMORY_POOL *pool = memory_pool;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <mrbc_raw_free+0x124>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	613b      	str	r3, [r7, #16]

  // get target block
  FREE_BLOCK *target = (FREE_BLOCK *)((uint8_t *)ptr - sizeof(USED_BLOCK));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3b04      	subs	r3, #4
 8001f16:	61bb      	str	r3, [r7, #24]

  // check next block, merge?
  FREE_BLOCK *next = PHYS_NEXT(target);
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 0303 	bic.w	r3, r3, #3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

  if( IS_FREE_BLOCK(next) ) {
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d108      	bne.n	8001f44 <mrbc_raw_free+0xc4>
    remove_free_block( pool, next );
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	6938      	ldr	r0, [r7, #16]
 8001f36:	f7ff fca7 	bl	8001888 <remove_free_block>
    merge_block(target, next);
 8001f3a:	68f9      	ldr	r1, [r7, #12]
 8001f3c:	69b8      	ldr	r0, [r7, #24]
 8001f3e:	f7ff fd43 	bl	80019c8 <merge_block>
 8001f42:	e005      	b.n	8001f50 <mrbc_raw_free+0xd0>
  } else {
    SET_PREV_FREE(next);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 0202 	bic.w	r2, r3, #2
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
  }

  // check prev block, merge?
  if( IS_PREV_FREE(target) ) {
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d11a      	bne.n	8001f92 <mrbc_raw_free+0x112>
    FREE_BLOCK *prev = *((FREE_BLOCK **)((uint8_t*)target - sizeof(FREE_BLOCK *)));
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8001f62:	60bb      	str	r3, [r7, #8]

    assert( IS_FREE_BLOCK(prev) );
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <mrbc_raw_free+0xfe>
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <mrbc_raw_free+0x12c>)
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <mrbc_raw_free+0x130>)
 8001f74:	f240 21a5 	movw	r1, #677	; 0x2a5
 8001f78:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <mrbc_raw_free+0x134>)
 8001f7a:	f013 fb63 	bl	8015644 <__assert_func>
    remove_free_block( pool, prev );
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	6938      	ldr	r0, [r7, #16]
 8001f82:	f7ff fc81 	bl	8001888 <remove_free_block>
    merge_block(prev, target);
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	68b8      	ldr	r0, [r7, #8]
 8001f8a:	f7ff fd1d 	bl	80019c8 <merge_block>
    target = prev;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	61bb      	str	r3, [r7, #24]
  }

  // target, add to index
  add_free_block( pool, target );
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	6938      	ldr	r0, [r7, #16]
 8001f96:	f7ff fc01 	bl	800179c <add_free_block>
}
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	0801a910 	.word	0x0801a910
 8001fa4:	2000802c 	.word	0x2000802c
 8001fa8:	0801a93c 	.word	0x0801a93c
 8001fac:	080188c4 	.word	0x080188c4
 8001fb0:	0801a964 	.word	0x0801a964
 8001fb4:	080187f4 	.word	0x080187f4

08001fb8 <mrbc_raw_realloc>:
  @param  size	request size
  @return void * pointer to allocated memory.
  @retval NULL	error.
*/
void * mrbc_raw_realloc(void *ptr, unsigned int size)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  MEMORY_POOL *pool = memory_pool;
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <mrbc_raw_realloc+0x134>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	61bb      	str	r3, [r7, #24]
  USED_BLOCK *target = (USED_BLOCK *)((uint8_t *)ptr - sizeof(USED_BLOCK));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	617b      	str	r3, [r7, #20]
  MRBC_ALLOC_MEMSIZE_T alloc_size = size + sizeof(USED_BLOCK);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	61fb      	str	r3, [r7, #28]
  FREE_BLOCK *next;

  // align 4 byte
  alloc_size += (-alloc_size & 3);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	4413      	add	r3, r2
 8001fe0:	61fb      	str	r3, [r7, #28]

  // check minimum alloc size.
  if( alloc_size < MRBC_MIN_MEMORY_BLOCK_SIZE ) alloc_size = MRBC_MIN_MEMORY_BLOCK_SIZE;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d801      	bhi.n	8001fec <mrbc_raw_realloc+0x34>
 8001fe8:	2310      	movs	r3, #16
 8001fea:	61fb      	str	r3, [r7, #28]

  // expand? part1.
  // next phys block is free and enough size?
  if( alloc_size > BLOCK_SIZE(target) ) {
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0303 	bic.w	r3, r3, #3
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d920      	bls.n	800203c <mrbc_raw_realloc+0x84>
    next = PHYS_NEXT(target);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4413      	add	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
    if( IS_USED_BLOCK(next) ) goto ALLOC_AND_COPY;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d14c      	bne.n	80020ae <mrbc_raw_realloc+0xf6>
    if( (BLOCK_SIZE(target) + BLOCK_SIZE(next)) < alloc_size ) goto ALLOC_AND_COPY;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 0203 	bic.w	r2, r3, #3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 0303 	bic.w	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	429a      	cmp	r2, r3
 800202a:	d842      	bhi.n	80020b2 <mrbc_raw_realloc+0xfa>

    remove_free_block( pool, next );
 800202c:	6939      	ldr	r1, [r7, #16]
 800202e:	69b8      	ldr	r0, [r7, #24]
 8002030:	f7ff fc2a 	bl	8001888 <remove_free_block>
    merge_block((FREE_BLOCK *)target, next);
 8002034:	6939      	ldr	r1, [r7, #16]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff fcc6 	bl	80019c8 <merge_block>
  }
  next = PHYS_NEXT(target);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 0303 	bic.w	r3, r3, #3
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4413      	add	r3, r2
 8002048:	613b      	str	r3, [r7, #16]

  // try shrink.
  FREE_BLOCK *release = split_block((FREE_BLOCK *)target, alloc_size);
 800204a:	69f9      	ldr	r1, [r7, #28]
 800204c:	6978      	ldr	r0, [r7, #20]
 800204e:	f7ff fc7f 	bl	8001950 <split_block>
 8002052:	60b8      	str	r0, [r7, #8]
  if( release != NULL ) {
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00c      	beq.n	8002074 <mrbc_raw_realloc+0xbc>
    SET_PREV_USED(release);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f043 0202 	orr.w	r2, r3, #2
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	601a      	str	r2, [r3, #0]
    SET_PREV_USED(next);
    return ptr;
  }

  // check next block, merge?
  if( IS_FREE_BLOCK(next) ) {
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d111      	bne.n	8002096 <mrbc_raw_realloc+0xde>
 8002072:	e007      	b.n	8002084 <mrbc_raw_realloc+0xcc>
    SET_PREV_USED(next);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f043 0202 	orr.w	r2, r3, #2
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	601a      	str	r2, [r3, #0]
    return ptr;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	e02e      	b.n	80020e2 <mrbc_raw_realloc+0x12a>
    remove_free_block( pool, next );
 8002084:	6939      	ldr	r1, [r7, #16]
 8002086:	69b8      	ldr	r0, [r7, #24]
 8002088:	f7ff fbfe 	bl	8001888 <remove_free_block>
    merge_block(release, next);
 800208c:	6939      	ldr	r1, [r7, #16]
 800208e:	68b8      	ldr	r0, [r7, #8]
 8002090:	f7ff fc9a 	bl	80019c8 <merge_block>
 8002094:	e005      	b.n	80020a2 <mrbc_raw_realloc+0xea>
  } else {
    SET_PREV_FREE(next);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0202 	bic.w	r2, r3, #2
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	601a      	str	r2, [r3, #0]
  }
  add_free_block( pool, release );
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	69b8      	ldr	r0, [r7, #24]
 80020a6:	f7ff fb79 	bl	800179c <add_free_block>
  return ptr;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	e019      	b.n	80020e2 <mrbc_raw_realloc+0x12a>
    if( IS_USED_BLOCK(next) ) goto ALLOC_AND_COPY;
 80020ae:	bf00      	nop
 80020b0:	e000      	b.n	80020b4 <mrbc_raw_realloc+0xfc>
    if( (BLOCK_SIZE(target) + BLOCK_SIZE(next)) < alloc_size ) goto ALLOC_AND_COPY;
 80020b2:	bf00      	nop


  // expand part2.
  // new alloc and copy
 ALLOC_AND_COPY: {
    void *new_ptr = mrbc_raw_alloc(size);
 80020b4:	6838      	ldr	r0, [r7, #0]
 80020b6:	f7ff fd07 	bl	8001ac8 <mrbc_raw_alloc>
 80020ba:	60f8      	str	r0, [r7, #12]
    if( new_ptr == NULL ) return NULL;  // ENOMEM
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <mrbc_raw_realloc+0x10e>
 80020c2:	2300      	movs	r3, #0
 80020c4:	e00d      	b.n	80020e2 <mrbc_raw_realloc+0x12a>

    memcpy(new_ptr, ptr, BLOCK_SIZE(target) - sizeof(USED_BLOCK));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	3b04      	subs	r3, #4
 80020d0:	461a      	mov	r2, r3
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f014 fb8e 	bl	80167f6 <memcpy>
    mrbc_set_vm_id(new_ptr, target->vm_id);

    mrbc_raw_free(ptr);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fed0 	bl	8001e80 <mrbc_raw_free>

    return new_ptr;
 80020e0:	68fb      	ldr	r3, [r7, #12]
  }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	2000802c 	.word	0x2000802c

080020f0 <mrbc_alloc_statistics>:
/*! statistics

  @param  ret		pointer to return value.
*/
void mrbc_alloc_statistics( struct MRBC_ALLOC_STATISTICS *ret )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  MEMORY_POOL *pool = memory_pool;
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <mrbc_alloc_statistics+0xbc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  USED_BLOCK *block = BLOCK_TOP(pool);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002104:	617b      	str	r3, [r7, #20]
  int flag_used_free = IS_USED_BLOCK(block);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	613b      	str	r3, [r7, #16]

  ret->total = pool->size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	601a      	str	r2, [r3, #0]
  ret->used = 0;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
  ret->free = 0;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  ret->fragmentation = -1;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f04f 32ff 	mov.w	r2, #4294967295
 800212a:	60da      	str	r2, [r3, #12]

  while( block < (USED_BLOCK *)BLOCK_END(pool) ) {
 800212c:	e030      	b.n	8002190 <mrbc_alloc_statistics+0xa0>
    if( IS_FREE_BLOCK(block) ) {
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <mrbc_alloc_statistics+0x5e>
      ret->free += BLOCK_SIZE(block);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	441a      	add	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	e008      	b.n	8002160 <mrbc_alloc_statistics+0x70>
    } else {
      ret->used += BLOCK_SIZE(block);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	441a      	add	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	605a      	str	r2, [r3, #4]
    }
    if( flag_used_free != IS_USED_BLOCK(block) ) {
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0201 	and.w	r2, r3, #1
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	429a      	cmp	r2, r3
 800216c:	d009      	beq.n	8002182 <mrbc_alloc_statistics+0x92>
      ret->fragmentation++;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]
      flag_used_free = IS_USED_BLOCK(block);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	613b      	str	r3, [r7, #16]
    }
    block = PHYS_NEXT(block);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
  while( block < (USED_BLOCK *)BLOCK_END(pool) ) {
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	429a      	cmp	r2, r3
 800219c:	d3c7      	bcc.n	800212e <mrbc_alloc_statistics+0x3e>
  }
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	2000802c 	.word	0x2000802c

080021b0 <mrbc_incref>:
/*! Increment reference counter

  @param   v     Pointer to mrbc_value
*/
static inline void mrbc_incref(mrbc_value *v)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f993 3000 	ldrsb.w	r3, [r3]
 80021be:	2b07      	cmp	r3, #7
 80021c0:	dd1e      	ble.n	8002200 <mrbc_incref+0x50>

  assert( v->obj->ref_count != 0 );
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	885b      	ldrh	r3, [r3, #2]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <mrbc_incref+0x2a>
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <mrbc_incref+0x58>)
 80021ce:	4a0f      	ldr	r2, [pc, #60]	; (800220c <mrbc_incref+0x5c>)
 80021d0:	f240 11c3 	movw	r1, #451	; 0x1c3
 80021d4:	480e      	ldr	r0, [pc, #56]	; (8002210 <mrbc_incref+0x60>)
 80021d6:	f013 fa35 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	885b      	ldrh	r3, [r3, #2]
 80021e0:	2bff      	cmp	r3, #255	; 0xff
 80021e2:	d106      	bne.n	80021f2 <mrbc_incref+0x42>
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <mrbc_incref+0x64>)
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <mrbc_incref+0x5c>)
 80021e8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80021ec:	4808      	ldr	r0, [pc, #32]	; (8002210 <mrbc_incref+0x60>)
 80021ee:	f013 fa29 	bl	8015644 <__assert_func>
  v->obj->ref_count++;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	885a      	ldrh	r2, [r3, #2]
 80021f8:	3201      	adds	r2, #1
 80021fa:	b292      	uxth	r2, r2
 80021fc:	805a      	strh	r2, [r3, #2]
 80021fe:	e000      	b.n	8002202 <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8002200:	bf00      	nop
}
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	08018a60 	.word	0x08018a60
 800220c:	0801aa34 	.word	0x0801aa34
 8002210:	08018a78 	.word	0x08018a78
 8002214:	08018a94 	.word	0x08018a94

08002218 <mrbc_decref>:
/*! Decrement reference counter

  @param   v     Pointer to target mrbc_value
*/
static inline void mrbc_decref(mrbc_value *v)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f993 3000 	ldrsb.w	r3, [r3]
 8002226:	2b07      	cmp	r3, #7
 8002228:	dd2c      	ble.n	8002284 <mrbc_decref+0x6c>

  assert( v->obj->ref_count != 0 );
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	885b      	ldrh	r3, [r3, #2]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <mrbc_decref+0x2a>
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <mrbc_decref+0x78>)
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <mrbc_decref+0x7c>)
 8002238:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800223c:	4816      	ldr	r0, [pc, #88]	; (8002298 <mrbc_decref+0x80>)
 800223e:	f013 fa01 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	885b      	ldrh	r3, [r3, #2]
 8002248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224c:	4293      	cmp	r3, r2
 800224e:	d106      	bne.n	800225e <mrbc_decref+0x46>
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <mrbc_decref+0x84>)
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <mrbc_decref+0x7c>)
 8002254:	f240 11d3 	movw	r1, #467	; 0x1d3
 8002258:	480f      	ldr	r0, [pc, #60]	; (8002298 <mrbc_decref+0x80>)
 800225a:	f013 f9f3 	bl	8015644 <__assert_func>

  if( --v->obj->ref_count != 0 ) return;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	885a      	ldrh	r2, [r3, #2]
 8002264:	3a01      	subs	r2, #1
 8002266:	b292      	uxth	r2, r2
 8002268:	805a      	strh	r2, [r3, #2]
 800226a:	885b      	ldrh	r3, [r3, #2]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <mrbc_decref+0x70>

  (*mrbc_delfunc[v->tt])(v);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f993 3000 	ldrsb.w	r3, [r3]
 8002276:	461a      	mov	r2, r3
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <mrbc_decref+0x88>)
 800227a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4798      	blx	r3
 8002282:	e002      	b.n	800228a <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8002284:	bf00      	nop
 8002286:	e000      	b.n	800228a <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8002288:	bf00      	nop
}
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	08018a60 	.word	0x08018a60
 8002294:	0801aa28 	.word	0x0801aa28
 8002298:	08018a78 	.word	0x08018a78
 800229c:	08018ab0 	.word	0x08018ab0
 80022a0:	0801be98 	.word	0x0801be98

080022a4 <mrbc_decref_empty>:
/*! Decrement reference counter with set TT_EMPTY.

  @param   v     Pointer to target mrbc_value
*/
static inline void mrbc_decref_empty(mrbc_value *v)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  mrbc_decref(v);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ffb3 	bl	8002218 <mrbc_decref>
  v->tt = MRBC_TT_EMPTY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <mrbc_string_new_cstr>:
  @param  vm	pointer to VM.
  @param  src	source string or NULL
  @return 	string object
*/
static inline mrbc_value mrbc_string_new_cstr(struct VM *vm, const char *src)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <mrbc_string_new_cstr+0x1c>
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fd ff8e 	bl	80001f4 <strlen>
 80022d8:	4603      	mov	r3, r0
 80022da:	e000      	b.n	80022de <mrbc_string_new_cstr+0x1e>
 80022dc:	2300      	movs	r3, #0
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	f004 ff62 	bl	80071ac <mrbc_string_new>
}
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <mrbc_string_append_cstr>:
  @param  s1	pointer to target value 1
  @param  s2	pointer to char (c_str)
  @return	mrbc_error_code
*/
static inline int mrbc_string_append_cstr(mrbc_value *s1, const char *s2)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 80022fa:	6838      	ldr	r0, [r7, #0]
 80022fc:	f7fd ff7a 	bl	80001f4 <strlen>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f005 f8e8 	bl	80074dc <mrbc_string_append_cbuf>
 800230c:	4603      	mov	r3, r0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <mrbc_array_size>:
/***** Inline functions *****************************************************/
//================================================================
/*! get size
*/
static inline int mrbc_array_size(const mrbc_value *ary)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  return ary->array->n_stored;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	88db      	ldrh	r3, [r3, #6]
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <mrbc_array_delete_handle>:

//================================================================
/*! delete handle (do not decrement reference counter)
*/
static inline void mrbc_array_delete_handle(mrbc_value *ary)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  mrbc_array *h = ary->array;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	60fb      	str	r3, [r7, #12]

  mrbc_raw_free(h->data);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fd9c 	bl	8001e80 <mrbc_raw_free>
  mrbc_raw_free(h);
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff fd99 	bl	8001e80 <mrbc_raw_free>
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <mrbc_array_new>:
  @param  vm	pointer to VM.
  @param  size	initial size
  @return 	array object
*/
mrbc_value mrbc_array_new(struct VM *vm, int size)
{
 8002356:	b590      	push	{r4, r7, lr}
 8002358:	b08b      	sub	sp, #44	; 0x2c
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  mrbc_value value = {.tt = MRBC_TT_ARRAY};
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	230a      	movs	r3, #10
 8002372:	743b      	strb	r3, [r7, #16]

  /*
    Allocate handle and data buffer.
  */
  mrbc_array *h = mrbc_alloc(vm, sizeof(mrbc_array));
 8002374:	200c      	movs	r0, #12
 8002376:	f7ff fba7 	bl	8001ac8 <mrbc_raw_alloc>
 800237a:	6278      	str	r0, [r7, #36]	; 0x24
  if( !h ) return value;	// ENOMEM
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	2b00      	cmp	r3, #0
 8002380:	d107      	bne.n	8002392 <mrbc_array_new+0x3c>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	461c      	mov	r4, r3
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800238c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002390:	e02f      	b.n	80023f2 <mrbc_array_new+0x9c>

  mrbc_value *data = mrbc_alloc(vm, sizeof(mrbc_value) * size);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fb96 	bl	8001ac8 <mrbc_raw_alloc>
 800239c:	6238      	str	r0, [r7, #32]
  if( !data ) {			// ENOMEM
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <mrbc_array_new+0x64>
    mrbc_raw_free( h );
 80023a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023a6:	f7ff fd6b 	bl	8001e80 <mrbc_raw_free>
    return value;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	461c      	mov	r4, r3
 80023ae:	f107 0310 	add.w	r3, r7, #16
 80023b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023b8:	e01b      	b.n	80023f2 <mrbc_array_new+0x9c>
  }

  MRBC_INIT_OBJECT_HEADER( h, "AR" );
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	2201      	movs	r2, #1
 80023be:	805a      	strh	r2, [r3, #2]
 80023c0:	2241      	movs	r2, #65	; 0x41
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	2252      	movs	r2, #82	; 0x52
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	705a      	strb	r2, [r3, #1]
  h->data_size = size;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	809a      	strh	r2, [r3, #4]
  h->n_stored = 0;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	2200      	movs	r2, #0
 80023d8:	80da      	strh	r2, [r3, #6]
  h->data = data;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	6a3a      	ldr	r2, [r7, #32]
 80023de:	609a      	str	r2, [r3, #8]

  value.array = h;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	61bb      	str	r3, [r7, #24]
  return value;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	461c      	mov	r4, r3
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	372c      	adds	r7, #44	; 0x2c
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd90      	pop	{r4, r7, pc}

080023fa <mrbc_array_delete>:
/*! destructor

  @param  ary	pointer to target value
*/
void mrbc_array_delete(mrbc_value *ary)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  mrbc_array *h = ary->array;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	613b      	str	r3, [r7, #16]

  mrbc_value *p1 = h->data;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	617b      	str	r3, [r7, #20]
  const mrbc_value *p2 = p1 + h->n_stored;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	88db      	ldrh	r3, [r3, #6]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 800241a:	e006      	b.n	800242a <mrbc_array_delete+0x30>
    mrbc_decref(p1++);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f103 0210 	add.w	r2, r3, #16
 8002422:	617a      	str	r2, [r7, #20]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fef7 	bl	8002218 <mrbc_decref>
  while( p1 < p2 ) {
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3f4      	bcc.n	800241c <mrbc_array_delete+0x22>
  }

  mrbc_array_delete_handle(ary);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff7c 	bl	8002330 <mrbc_array_delete_handle>
}
 8002438:	bf00      	nop
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <mrbc_array_resize>:
  @param  ary	pointer to target value
  @param  size	size
  @return	mrbc_error_code
*/
int mrbc_array_resize(mrbc_value *ary, int size)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  mrbc_array *h = ary->array;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	60fb      	str	r3, [r7, #12]

  mrbc_value *data2 = mrbc_raw_realloc(h->data, sizeof(mrbc_value) * size);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f7ff fdac 	bl	8001fb8 <mrbc_raw_realloc>
 8002460:	60b8      	str	r0, [r7, #8]
  if( !data2 ) return E_NOMEMORY_ERROR;	// ENOMEM
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <mrbc_array_resize+0x2c>
 8002468:	2301      	movs	r3, #1
 800246a:	e007      	b.n	800247c <mrbc_array_resize+0x3c>

  h->data = data2;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	609a      	str	r2, [r3, #8]
  h->data_size = size;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	809a      	strh	r2, [r3, #4]

  return 0;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <mrbc_array_set>:
  @param  idx		index
  @param  set_val	set value
  @return		mrbc_error_code
*/
int mrbc_array_set(mrbc_value *ary, int idx, mrbc_value *set_val)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b08b      	sub	sp, #44	; 0x2c
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	623b      	str	r3, [r7, #32]

  if( idx < 0 ) {
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	da0a      	bge.n	80024b2 <mrbc_array_set+0x2e>
    idx = h->n_stored + idx;
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	88db      	ldrh	r3, [r3, #6]
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4413      	add	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
    if( idx < 0 ) return E_INDEX_ERROR;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da01      	bge.n	80024b2 <mrbc_array_set+0x2e>
 80024ae:	2305      	movs	r3, #5
 80024b0:	e048      	b.n	8002544 <mrbc_array_set+0xc0>
  }

  // need resize?
  if( idx >= h->data_size && mrbc_array_resize(ary, idx + 1) != 0 ) {
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	889b      	ldrh	r3, [r3, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4293      	cmp	r3, r2
 80024bc:	db0a      	blt.n	80024d4 <mrbc_array_set+0x50>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3301      	adds	r3, #1
 80024c2:	4619      	mov	r1, r3
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff ffbb 	bl	8002440 <mrbc_array_resize>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <mrbc_array_set+0x50>
    return E_NOMEMORY_ERROR;			// ENOMEM
 80024d0:	2301      	movs	r3, #1
 80024d2:	e037      	b.n	8002544 <mrbc_array_set+0xc0>
  }

  if( idx < h->n_stored ) {
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	88db      	ldrh	r3, [r3, #6]
 80024d8:	461a      	mov	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4293      	cmp	r3, r2
 80024de:	da08      	bge.n	80024f2 <mrbc_array_set+0x6e>
    // release existing data.
    mrbc_decref( &h->data[idx] );
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	4413      	add	r3, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fe94 	bl	8002218 <mrbc_decref>
 80024f0:	e01d      	b.n	800252e <mrbc_array_set+0xaa>
  } else {
    // clear empty cells.
    int i;
    for( i = h->n_stored; i < idx; i++ ) {
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	88db      	ldrh	r3, [r3, #6]
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
 80024f8:	e00f      	b.n	800251a <mrbc_array_set+0x96>
      h->data[i] = mrbc_nil_value();
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	18d1      	adds	r1, r2, r3
 8002504:	460a      	mov	r2, r1
 8002506:	2300      	movs	r3, #0
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	6053      	str	r3, [r2, #4]
 800250c:	6093      	str	r3, [r2, #8]
 800250e:	60d3      	str	r3, [r2, #12]
 8002510:	2301      	movs	r3, #1
 8002512:	700b      	strb	r3, [r1, #0]
    for( i = h->n_stored; i < idx; i++ ) {
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	3301      	adds	r3, #1
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
 800251a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	429a      	cmp	r2, r3
 8002520:	dbeb      	blt.n	80024fa <mrbc_array_set+0x76>
    }
    h->n_stored = idx + 1;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	b29b      	uxth	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	80da      	strh	r2, [r3, #6]
  }

  h->data[idx] = *set_val;
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	441a      	add	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4614      	mov	r4, r2
 800253c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800253e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return 0;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	372c      	adds	r7, #44	; 0x2c
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}

0800254c <mrbc_array_get>:
  @param  ary		pointer to target value
  @param  idx		index
  @return		mrbc_value data at index position or Nil.
*/
mrbc_value mrbc_array_get(const mrbc_value *ary, int idx)
{
 800254c:	b490      	push	{r4, r7}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	627b      	str	r3, [r7, #36]	; 0x24

  if( idx < 0 ) idx = h->n_stored + idx;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	da05      	bge.n	8002570 <mrbc_array_get+0x24>
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	88db      	ldrh	r3, [r3, #6]
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	607b      	str	r3, [r7, #4]
  if( idx < 0 || idx >= h->n_stored ) return mrbc_nil_value();
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db05      	blt.n	8002582 <mrbc_array_get+0x36>
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	88db      	ldrh	r3, [r3, #6]
 800257a:	461a      	mov	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4293      	cmp	r3, r2
 8002580:	db0a      	blt.n	8002598 <mrbc_array_get+0x4c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	461a      	mov	r2, r3
 8002586:	2300      	movs	r3, #0
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	6053      	str	r3, [r2, #4]
 800258c:	6093      	str	r3, [r2, #8]
 800258e:	60d3      	str	r3, [r2, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]

  return h->data[idx];
}
 8002596:	e009      	b.n	80025ac <mrbc_array_get+0x60>
  return h->data[idx];
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4413      	add	r3, r2
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4614      	mov	r4, r2
 80025a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	3728      	adds	r7, #40	; 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc90      	pop	{r4, r7}
 80025b4:	4770      	bx	lr

080025b6 <mrbc_array_push>:
  @param  ary		pointer to target value
  @param  set_val	set value
  @return		mrbc_error_code
*/
int mrbc_array_push(mrbc_value *ary, mrbc_value *set_val)
{
 80025b6:	b590      	push	{r4, r7, lr}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
  mrbc_array *h = ary->array;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	60fb      	str	r3, [r7, #12]

  if( h->n_stored >= h->data_size ) {
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	88da      	ldrh	r2, [r3, #6]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	889b      	ldrh	r3, [r3, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d30c      	bcc.n	80025ec <mrbc_array_push+0x36>
    int size = h->data_size + 6;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	889b      	ldrh	r3, [r3, #4]
 80025d6:	3306      	adds	r3, #6
 80025d8:	60bb      	str	r3, [r7, #8]
    if( mrbc_array_resize(ary, size) != 0 ) return E_NOMEMORY_ERROR; // ENOMEM
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff2f 	bl	8002440 <mrbc_array_resize>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <mrbc_array_push+0x36>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e00f      	b.n	800260c <mrbc_array_push+0x56>
  }

  h->data[h->n_stored++] = *set_val;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88db      	ldrh	r3, [r3, #6]
 80025f4:	1c59      	adds	r1, r3, #1
 80025f6:	b288      	uxth	r0, r1
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	80c8      	strh	r0, [r1, #6]
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	441a      	add	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4614      	mov	r4, r2
 8002604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return 0;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <mrbc_array_push_m>:
  @param  ary		pointer to target value
  @param  set_val	set value (array)
  @return		mrbc_error_code
*/
int mrbc_array_push_m(mrbc_value *ary, mrbc_value *set_val)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  mrbc_array *ha_d = ary->array;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	617b      	str	r3, [r7, #20]
  mrbc_array *ha_s = set_val->array;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
  int new_size = ha_d->n_stored + ha_s->n_stored;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	88db      	ldrh	r3, [r3, #6]
 800262e:	461a      	mov	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	88db      	ldrh	r3, [r3, #6]
 8002634:	4413      	add	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

  if( new_size > ha_d->data_size ) {
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	889b      	ldrh	r3, [r3, #4]
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4293      	cmp	r3, r2
 8002642:	dd08      	ble.n	8002656 <mrbc_array_push_m+0x42>
    if( mrbc_array_resize(ary, new_size) != 0 )
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fefa 	bl	8002440 <mrbc_array_resize>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <mrbc_array_push_m+0x42>
      return E_NOMEMORY_ERROR;		// ENOMEM
 8002652:	2301      	movs	r3, #1
 8002654:	e016      	b.n	8002684 <mrbc_array_push_m+0x70>
  }

  memcpy( &ha_d->data[ha_d->n_stored], ha_s->data,
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	88db      	ldrh	r3, [r3, #6]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	18d0      	adds	r0, r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6899      	ldr	r1, [r3, #8]
	  sizeof(mrbc_value) * ha_s->n_stored );
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	88db      	ldrh	r3, [r3, #6]
  memcpy( &ha_d->data[ha_d->n_stored], ha_s->data,
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	461a      	mov	r2, r3
 800266e:	f014 f8c2 	bl	80167f6 <memcpy>
  ha_d->n_stored += ha_s->n_stored;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	88da      	ldrh	r2, [r3, #6]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	88db      	ldrh	r3, [r3, #6]
 800267a:	4413      	add	r3, r2
 800267c:	b29a      	uxth	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	80da      	strh	r2, [r3, #6]

  return 0;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <mrbc_array_pop>:

  @param  ary		pointer to target value
  @return		tail data or Nil
*/
mrbc_value mrbc_array_pop(mrbc_value *ary)
{
 800268c:	b490      	push	{r4, r7}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  mrbc_array *h = ary->array;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61fb      	str	r3, [r7, #28]

  if( h->n_stored <= 0 ) return mrbc_nil_value();
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	88db      	ldrh	r3, [r3, #6]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <mrbc_array_pop+0x2e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	461a      	mov	r2, r3
 80026a8:	2300      	movs	r3, #0
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	6053      	str	r3, [r2, #4]
 80026ae:	6093      	str	r3, [r2, #8]
 80026b0:	60d3      	str	r3, [r2, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
  return h->data[--h->n_stored];
}
 80026b8:	e010      	b.n	80026dc <mrbc_array_pop+0x50>
  return h->data[--h->n_stored];
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	88db      	ldrh	r3, [r3, #6]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b299      	uxth	r1, r3
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	80d9      	strh	r1, [r3, #6]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	88db      	ldrh	r3, [r3, #6]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4614      	mov	r4, r2
 80026d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc90      	pop	{r4, r7}
 80026e4:	4770      	bx	lr

080026e6 <mrbc_array_unshift>:
  @param  ary		pointer to target value
  @param  set_val	set value
  @return		mrbc_error_code
*/
int mrbc_array_unshift(mrbc_value *ary, mrbc_value *set_val)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  return mrbc_array_insert(ary, 0, set_val);
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	2100      	movs	r1, #0
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f840 	bl	800277a <mrbc_array_insert>
 80026fa:	4603      	mov	r3, r0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <mrbc_array_shift>:

  @param  ary		pointer to target value
  @return		first data or Nil
*/
mrbc_value mrbc_array_shift(mrbc_value *ary)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b08d      	sub	sp, #52	; 0x34
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  mrbc_array *h = ary->array;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c

  if( h->n_stored <= 0 ) return mrbc_nil_value();
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	88db      	ldrh	r3, [r3, #6]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <mrbc_array_shift+0x2e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	6053      	str	r3, [r2, #4]
 8002726:	6093      	str	r3, [r2, #8]
 8002728:	60d3      	str	r3, [r2, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]

  mrbc_value ret = h->data[0];
  memmove(h->data, h->data+1, sizeof(mrbc_value) * --h->n_stored);

  return ret;
}
 8002730:	e01f      	b.n	8002772 <mrbc_array_shift+0x6e>
  mrbc_value ret = h->data[0];
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f107 0418 	add.w	r4, r7, #24
 800273a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memmove(h->data, h->data+1, sizeof(mrbc_value) * --h->n_stored);
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	6898      	ldr	r0, [r3, #8]
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f103 0110 	add.w	r1, r3, #16
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	88db      	ldrh	r3, [r3, #6]
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	80da      	strh	r2, [r3, #6]
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	88db      	ldrh	r3, [r3, #6]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	461a      	mov	r2, r3
 8002760:	f013 ff95 	bl	801668e <memmove>
  return ret;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	461c      	mov	r4, r3
 8002768:	f107 0318 	add.w	r3, r7, #24
 800276c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800276e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	3734      	adds	r7, #52	; 0x34
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}

0800277a <mrbc_array_insert>:
  @param  idx		index
  @param  set_val	set value
  @return		mrbc_error_code
*/
int mrbc_array_insert(mrbc_value *ary, int idx, mrbc_value *set_val)
{
 800277a:	b590      	push	{r4, r7, lr}
 800277c:	b08d      	sub	sp, #52	; 0x34
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	627b      	str	r3, [r7, #36]	; 0x24

  if( idx < 0 ) {
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	da0b      	bge.n	80027aa <mrbc_array_insert+0x30>
    idx = h->n_stored + idx + 1;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	88db      	ldrh	r3, [r3, #6]
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4413      	add	r3, r2
 800279c:	3301      	adds	r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
    if( idx < 0 ) return E_INDEX_ERROR;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da01      	bge.n	80027aa <mrbc_array_insert+0x30>
 80027a6:	2305      	movs	r3, #5
 80027a8:	e071      	b.n	800288e <mrbc_array_insert+0x114>
  }

  // need resize?
  int size = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if( idx >= h->data_size ) {
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	889b      	ldrh	r3, [r3, #4]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4293      	cmp	r3, r2
 80027b8:	db03      	blt.n	80027c2 <mrbc_array_insert+0x48>
    size = idx + 1;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c0:	e009      	b.n	80027d6 <mrbc_array_insert+0x5c>
  } else if( h->n_stored >= h->data_size ) {
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	88da      	ldrh	r2, [r3, #6]
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	889b      	ldrh	r3, [r3, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d303      	bcc.n	80027d6 <mrbc_array_insert+0x5c>
    size = h->data_size + 1;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	889b      	ldrh	r3, [r3, #4]
 80027d2:	3301      	adds	r3, #1
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  if( size && mrbc_array_resize(ary, size) != 0 ) {
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <mrbc_array_insert+0x74>
 80027dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff fe2e 	bl	8002440 <mrbc_array_resize>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <mrbc_array_insert+0x74>
    return E_NOMEMORY_ERROR;			// ENOMEM
 80027ea:	2301      	movs	r3, #1
 80027ec:	e04f      	b.n	800288e <mrbc_array_insert+0x114>
  }

  // move datas.
  if( idx < h->n_stored ) {
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	88db      	ldrh	r3, [r3, #6]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4293      	cmp	r3, r2
 80027f8:	da13      	bge.n	8002822 <mrbc_array_insert+0xa8>
    memmove(h->data + idx + 1, h->data + idx,
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3301      	adds	r3, #1
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	18d0      	adds	r0, r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	18d1      	adds	r1, r2, r3
	    sizeof(mrbc_value) * (h->n_stored - idx));
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	88db      	ldrh	r3, [r3, #6]
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
    memmove(h->data + idx + 1, h->data + idx,
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	461a      	mov	r2, r3
 800281e:	f013 ff36 	bl	801668e <memmove>
  }

  // set data
  h->data[idx] = *set_val;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	441a      	add	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4614      	mov	r4, r2
 8002830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  h->n_stored++;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	88db      	ldrh	r3, [r3, #6]
 800283a:	3301      	adds	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	80da      	strh	r2, [r3, #6]

  // clear empty cells if need.
  if( idx >= h->n_stored ) {
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	88db      	ldrh	r3, [r3, #6]
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4293      	cmp	r3, r2
 800284c:	db1e      	blt.n	800288c <mrbc_array_insert+0x112>
    int i;
    for( i = h->n_stored-1; i < idx; i++ ) {
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	88db      	ldrh	r3, [r3, #6]
 8002852:	3b01      	subs	r3, #1
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
 8002856:	e00f      	b.n	8002878 <mrbc_array_insert+0xfe>
      h->data[i] = mrbc_nil_value();
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	18d1      	adds	r1, r2, r3
 8002862:	460a      	mov	r2, r1
 8002864:	2300      	movs	r3, #0
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	6053      	str	r3, [r2, #4]
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	60d3      	str	r3, [r2, #12]
 800286e:	2301      	movs	r3, #1
 8002870:	700b      	strb	r3, [r1, #0]
    for( i = h->n_stored-1; i < idx; i++ ) {
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	3301      	adds	r3, #1
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
 8002878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	429a      	cmp	r2, r3
 800287e:	dbeb      	blt.n	8002858 <mrbc_array_insert+0xde>
    }
    h->n_stored = idx + 1;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	b29b      	uxth	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	80da      	strh	r2, [r3, #6]
  }

  return 0;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3734      	adds	r7, #52	; 0x34
 8002892:	46bd      	mov	sp, r7
 8002894:	bd90      	pop	{r4, r7, pc}

08002896 <mrbc_array_remove>:
  @param  ary		pointer to target value
  @param  idx		index
  @return		mrbc_value data at index position or Nil.
*/
mrbc_value mrbc_array_remove(mrbc_value *ary, int idx)
{
 8002896:	b590      	push	{r4, r7, lr}
 8002898:	b08f      	sub	sp, #60	; 0x3c
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34

  if( idx < 0 ) idx = h->n_stored + idx;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	da05      	bge.n	80028ba <mrbc_array_remove+0x24>
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	88db      	ldrh	r3, [r3, #6]
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	607b      	str	r3, [r7, #4]
  if( idx < 0 || idx >= h->n_stored ) return mrbc_nil_value();
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db05      	blt.n	80028cc <mrbc_array_remove+0x36>
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	88db      	ldrh	r3, [r3, #6]
 80028c4:	461a      	mov	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4293      	cmp	r3, r2
 80028ca:	db0a      	blt.n	80028e2 <mrbc_array_remove+0x4c>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	2300      	movs	r3, #0
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	6053      	str	r3, [r2, #4]
 80028d6:	6093      	str	r3, [r2, #8]
 80028d8:	60d3      	str	r3, [r2, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
    memmove(h->data + idx, h->data + idx + 1,
	    sizeof(mrbc_value) * (h->n_stored - idx));
  }

  return val;
}
 80028e0:	e030      	b.n	8002944 <mrbc_array_remove+0xae>
  mrbc_value val = h->data[idx];
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	4413      	add	r3, r2
 80028ec:	f107 0420 	add.w	r4, r7, #32
 80028f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  h->n_stored--;
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f8:	88db      	ldrh	r3, [r3, #6]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002900:	80da      	strh	r2, [r3, #6]
  if( idx < h->n_stored ) {
 8002902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002904:	88db      	ldrh	r3, [r3, #6]
 8002906:	461a      	mov	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4293      	cmp	r3, r2
 800290c:	da13      	bge.n	8002936 <mrbc_array_remove+0xa0>
    memmove(h->data + idx, h->data + idx + 1,
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	18d0      	adds	r0, r2, r3
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3301      	adds	r3, #1
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	18d1      	adds	r1, r2, r3
	    sizeof(mrbc_value) * (h->n_stored - idx));
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	88db      	ldrh	r3, [r3, #6]
 8002928:	461a      	mov	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1ad3      	subs	r3, r2, r3
    memmove(h->data + idx, h->data + idx + 1,
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	461a      	mov	r2, r3
 8002932:	f013 feac 	bl	801668e <memmove>
  return val;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	461c      	mov	r4, r3
 800293a:	f107 0320 	add.w	r3, r7, #32
 800293e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	373c      	adds	r7, #60	; 0x3c
 8002948:	46bd      	mov	sp, r7
 800294a:	bd90      	pop	{r4, r7, pc}

0800294c <mrbc_array_clear>:
/*! clear all

  @param  ary		pointer to target value
*/
void mrbc_array_clear(mrbc_value *ary)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  mrbc_array *h = ary->array;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	613b      	str	r3, [r7, #16]

  mrbc_value *p1 = h->data;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	617b      	str	r3, [r7, #20]
  const mrbc_value *p2 = p1 + h->n_stored;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	88db      	ldrh	r3, [r3, #6]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4413      	add	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 800296c:	e006      	b.n	800297c <mrbc_array_clear+0x30>
    mrbc_decref(p1++);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f103 0210 	add.w	r2, r3, #16
 8002974:	617a      	str	r2, [r7, #20]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fc4e 	bl	8002218 <mrbc_decref>
  while( p1 < p2 ) {
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d3f4      	bcc.n	800296e <mrbc_array_clear+0x22>
  }

  h->n_stored = 0;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2200      	movs	r2, #0
 8002988:	80da      	strh	r2, [r3, #6]
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <mrbc_array_compare>:
  @retval 0	v1 == v2
  @retval plus	v1 >  v2
  @retval minus	v1 <  v2
*/
int mrbc_array_compare(const mrbc_value *v1, const mrbc_value *v2)
{
 8002992:	b590      	push	{r4, r7, lr}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  int i;
  for( i = 0; ; i++ ) {
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
    if( i >= mrbc_array_size(v1) || i >= mrbc_array_size(v2) ) {
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fcb8 	bl	8002316 <mrbc_array_size>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	da06      	bge.n	80029bc <mrbc_array_compare+0x2a>
 80029ae:	6838      	ldr	r0, [r7, #0]
 80029b0:	f7ff fcb1 	bl	8002316 <mrbc_array_size>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4293      	cmp	r3, r2
 80029ba:	db09      	blt.n	80029d0 <mrbc_array_compare+0x3e>
      return mrbc_array_size(v1) - mrbc_array_size(v2);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fcaa 	bl	8002316 <mrbc_array_size>
 80029c2:	4604      	mov	r4, r0
 80029c4:	6838      	ldr	r0, [r7, #0]
 80029c6:	f7ff fca6 	bl	8002316 <mrbc_array_size>
 80029ca:	4603      	mov	r3, r0
 80029cc:	1ae3      	subs	r3, r4, r3
 80029ce:	e018      	b.n	8002a02 <mrbc_array_compare+0x70>
    }

    int res = mrbc_compare( &v1->array->data[i], &v2->array->data[i] );
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	18d0      	adds	r0, r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f00b fba9 	bl	800e140 <mrbc_compare>
 80029ee:	60b8      	str	r0, [r7, #8]
    if( res != 0 ) return res;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <mrbc_array_compare+0x68>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	e003      	b.n	8002a02 <mrbc_array_compare+0x70>
  for( i = 0; ; i++ ) {
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e7ce      	b.n	80029a0 <mrbc_array_compare+0xe>
  }
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd90      	pop	{r4, r7, pc}

08002a0a <mrbc_array_minmax>:
  @param  ary		pointer to target value
  @param  pp_min_value	returns minimum mrbc_value
  @param  pp_max_value	returns maxmum mrbc_value
*/
void mrbc_array_minmax(mrbc_value *ary, mrbc_value **pp_min_value, mrbc_value **pp_max_value)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b088      	sub	sp, #32
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	613b      	str	r3, [r7, #16]

  if( h->n_stored == 0 ) {
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	88db      	ldrh	r3, [r3, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <mrbc_array_minmax+0x28>
    *pp_min_value = NULL;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    *pp_max_value = NULL;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
    return;
 8002a30:	e03b      	b.n	8002aaa <mrbc_array_minmax+0xa0>
  }

  mrbc_value *p_min_value = h->data;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61fb      	str	r3, [r7, #28]
  mrbc_value *p_max_value = h->data;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	61bb      	str	r3, [r7, #24]

  int i;
  for( i = 1; i < h->n_stored; i++ ) {
 8002a3e:	2301      	movs	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e026      	b.n	8002a92 <mrbc_array_minmax+0x88>
    if( mrbc_compare( &h->data[i], p_min_value ) < 0 ) {
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	4413      	add	r3, r2
 8002a4e:	69f9      	ldr	r1, [r7, #28]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f00b fb75 	bl	800e140 <mrbc_compare>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	da05      	bge.n	8002a68 <mrbc_array_minmax+0x5e>
      p_min_value = &h->data[i];
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	4413      	add	r3, r2
 8002a66:	61fb      	str	r3, [r7, #28]
    }
    if( mrbc_compare( &h->data[i], p_max_value ) > 0 ) {
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4413      	add	r3, r2
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00b fb63 	bl	800e140 <mrbc_compare>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	dd05      	ble.n	8002a8c <mrbc_array_minmax+0x82>
      p_max_value = &h->data[i];
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
  for( i = 1; i < h->n_stored; i++ ) {
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	88db      	ldrh	r3, [r3, #6]
 8002a96:	461a      	mov	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	dbd2      	blt.n	8002a44 <mrbc_array_minmax+0x3a>
    }
  }

  *pp_min_value = p_min_value;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	601a      	str	r2, [r3, #0]
  *pp_max_value = p_max_value;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	601a      	str	r2, [r3, #0]
}
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <mrbc_array_dup>:
  @param  vm	pointer to VM.
  @param  ary	source
  @return	result
*/
mrbc_value mrbc_array_dup(struct VM *vm, const mrbc_value *ary)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b08d      	sub	sp, #52	; 0x34
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  mrbc_array *sh = ary->array;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28

  mrbc_value dv = mrbc_array_new(vm, sh->n_stored);
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	88db      	ldrh	r3, [r3, #6]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f107 0310 	add.w	r3, r7, #16
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fc41 	bl	8002356 <mrbc_array_new>
  if( dv.array == NULL ) return dv;		// ENOMEM
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <mrbc_array_dup+0x3a>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	461c      	mov	r4, r3
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ae8:	e029      	b.n	8002b3e <mrbc_array_dup+0x8e>

  memcpy( dv.array->data, sh->data, sizeof(mrbc_value) * sh->n_stored );
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	6898      	ldr	r0, [r3, #8]
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	6899      	ldr	r1, [r3, #8]
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	88db      	ldrh	r3, [r3, #6]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	461a      	mov	r2, r3
 8002afa:	f013 fe7c 	bl	80167f6 <memcpy>
  dv.array->n_stored = sh->n_stored;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b02:	88d2      	ldrh	r2, [r2, #6]
 8002b04:	80da      	strh	r2, [r3, #6]

  mrbc_value *p1 = dv.array->data;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  const mrbc_value *p2 = p1 + dv.array->n_stored;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	88db      	ldrh	r3, [r3, #6]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b14:	4413      	add	r3, r2
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  while( p1 < p2 ) {
 8002b18:	e006      	b.n	8002b28 <mrbc_array_dup+0x78>
    mrbc_incref(p1++);
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	f103 0210 	add.w	r2, r3, #16
 8002b20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fb44 	bl	80021b0 <mrbc_incref>
  while( p1 < p2 ) {
 8002b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d3f4      	bcc.n	8002b1a <mrbc_array_dup+0x6a>
  }

  return dv;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	461c      	mov	r4, r3
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	3734      	adds	r7, #52	; 0x34
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd90      	pop	{r4, r7, pc}

08002b46 <mrbc_array_divide>:
    src = [0,1,2,3]
    ret = divide(src, 2)
    src = [0,1], ret = [2,3]
*/
mrbc_value mrbc_array_divide(struct VM *vm, mrbc_value *src, int pos)
{
 8002b46:	b590      	push	{r4, r7, lr}
 8002b48:	b08d      	sub	sp, #52	; 0x34
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
  mrbc_array *ha_s = src->array;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
  if( pos < 0 ) pos = 0;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	da01      	bge.n	8002b64 <mrbc_array_divide+0x1e>
 8002b60:	2300      	movs	r3, #0
 8002b62:	603b      	str	r3, [r7, #0]
  int new_size = ha_s->n_stored - pos;
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	88db      	ldrh	r3, [r3, #6]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if( new_size < 0 ) new_size = 0;
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	da01      	bge.n	8002b7a <mrbc_array_divide+0x34>
 8002b76:	2300      	movs	r3, #0
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  int remain_size = ha_s->n_stored - new_size;
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	88db      	ldrh	r3, [r3, #6]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_value ret = mrbc_array_new(vm, new_size);
 8002b86:	f107 0310 	add.w	r3, r7, #16
 8002b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fbe1 	bl	8002356 <mrbc_array_new>
  if( ret.array == NULL ) return ret;		// ENOMEM
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <mrbc_array_divide+0x64>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	461c      	mov	r4, r3
 8002b9e:	f107 0310 	add.w	r3, r7, #16
 8002ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ba8:	e020      	b.n	8002bec <mrbc_array_divide+0xa6>
  mrbc_array *ha_r = ret.array;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	623b      	str	r3, [r7, #32]

  memcpy( ha_r->data, ha_s->data + remain_size, sizeof(mrbc_value) * new_size );
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	6898      	ldr	r0, [r3, #8]
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	18d1      	adds	r1, r2, r3
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f013 fe18 	bl	80167f6 <memcpy>
  ha_s->n_stored = remain_size;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	80da      	strh	r2, [r3, #6]
  mrbc_array_resize( src, remain_size );
 8002bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fc35 	bl	8002440 <mrbc_array_resize>
  ha_r->n_stored = new_size;
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	80da      	strh	r2, [r3, #6]

  return ret;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	461c      	mov	r4, r3
 8002be2:	f107 0310 	add.w	r3, r7, #16
 8002be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	3734      	adds	r7, #52	; 0x34
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd90      	pop	{r4, r7, pc}

08002bf4 <mrbc_array_include>:
  @param  ary     source
  @param  val     object if it is included
  @return         0 if not included. 1 or greater if included
*/
int mrbc_array_include(const mrbc_value *ary, const mrbc_value *val)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  int n = ary->array->n_stored;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	88db      	ldrh	r3, [r3, #6]
 8002c04:	60bb      	str	r3, [r7, #8]
  int i;
  for (i = 0; i < n; i++) {
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e00f      	b.n	8002c2c <mrbc_array_include+0x38>
    if (mrbc_compare(&ary->array->data[i], val) == 0) break;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4413      	add	r3, r2
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f00b fa90 	bl	800e140 <mrbc_compare>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <mrbc_array_include+0x42>
  for (i = 0; i < n; i++) {
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbeb      	blt.n	8002c0c <mrbc_array_include+0x18>
 8002c34:	e000      	b.n	8002c38 <mrbc_array_include+0x44>
    if (mrbc_compare(&ary->array->data[i], val) == 0) break;
 8002c36:	bf00      	nop
  }
  return (n - i);
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <c_array_new>:

//================================================================
/*! method new
*/
static void c_array_new(struct VM *vm, mrbc_value v[], int argc)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b0a5      	sub	sp, #148	; 0x94
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  /*
    in case of new()
  */
  if( argc == 0 ) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11c      	bne.n	8002c94 <c_array_new+0x4c>
    mrbc_value ret = mrbc_array_new(vm, 0);
 8002c5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c5e:	2200      	movs	r2, #0
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fb77 	bl	8002356 <mrbc_array_new>
    if( ret.array == NULL ) return;		// ENOMEM
 8002c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80ae 	beq.w	8002dcc <c_array_new+0x184>

    SET_RETURN(ret);
 8002c70:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002c74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c7e:	68b8      	ldr	r0, [r7, #8]
 8002c80:	f7ff faca 	bl	8002218 <mrbc_decref>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	461c      	mov	r4, r3
 8002c88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8002c92:	e0a0      	b.n	8002dd6 <c_array_new+0x18e>
  }

  /*
    in case of new(num)
  */
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER && mrbc_integer(v[1]) >= 0 ) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d144      	bne.n	8002d24 <c_array_new+0xdc>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3310      	adds	r3, #16
 8002c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d13e      	bne.n	8002d24 <c_array_new+0xdc>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3310      	adds	r3, #16
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db39      	blt.n	8002d24 <c_array_new+0xdc>
    int num = mrbc_integer(v[1]);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	3310      	adds	r3, #16
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    mrbc_value ret = mrbc_array_new(vm, num);
 8002cba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002cc2:	68f9      	ldr	r1, [r7, #12]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fb46 	bl	8002356 <mrbc_array_new>
    if( ret.array == NULL ) return;		// ENOMEM
 8002cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d07f      	beq.n	8002dd0 <c_array_new+0x188>

    if( num > 0 ) {
 8002cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	dd13      	ble.n	8002d00 <c_array_new+0xb8>
      mrbc_array_set(&ret, num - 1, &mrbc_nil_value());
 8002cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8002cf2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002cf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fbc2 	bl	8002484 <mrbc_array_set>
    }
    SET_RETURN(ret);
 8002d00:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002d04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d0e:	68b8      	ldr	r0, [r7, #8]
 8002d10:	f7ff fa82 	bl	8002218 <mrbc_decref>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	461c      	mov	r4, r3
 8002d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8002d22:	e058      	b.n	8002dd6 <c_array_new+0x18e>
  }

  /*
    in case of new(num, value)
  */
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER && mrbc_integer(v[1]) >= 0 ) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d14a      	bne.n	8002dc0 <c_array_new+0x178>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3310      	adds	r3, #16
 8002d2e:	f993 3000 	ldrsb.w	r3, [r3]
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d144      	bne.n	8002dc0 <c_array_new+0x178>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	3310      	adds	r3, #16
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db3f      	blt.n	8002dc0 <c_array_new+0x178>
    int num = mrbc_integer(v[1]);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3310      	adds	r3, #16
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    mrbc_value ret = mrbc_array_new(vm, num);
 8002d4a:	f107 0320 	add.w	r3, r7, #32
 8002d4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fafe 	bl	8002356 <mrbc_array_new>
    if( ret.array == NULL ) return;		// ENOMEM
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d039      	beq.n	8002dd4 <c_array_new+0x18c>

    int i;
    for( i = 0; i < num; i++ ) {
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d66:	e013      	b.n	8002d90 <c_array_new+0x148>
      mrbc_incref(&v[2]);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	3320      	adds	r3, #32
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fa1f 	bl	80021b0 <mrbc_incref>
      mrbc_array_set(&ret, i, &v[2]);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f103 0220 	add.w	r2, r3, #32
 8002d78:	f107 0320 	add.w	r3, r7, #32
 8002d7c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fb7f 	bl	8002484 <mrbc_array_set>
    for( i = 0; i < num; i++ ) {
 8002d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d90:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dbe5      	blt.n	8002d68 <c_array_new+0x120>
    }
    SET_RETURN(ret);
 8002d9c:	f107 0410 	add.w	r4, r7, #16
 8002da0:	f107 0320 	add.w	r3, r7, #32
 8002da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002daa:	68b8      	ldr	r0, [r7, #8]
 8002dac:	f7ff fa34 	bl	8002218 <mrbc_decref>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	461c      	mov	r4, r3
 8002db4:	f107 0310 	add.w	r3, r7, #16
 8002db8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8002dbe:	e00a      	b.n	8002dd6 <c_array_new+0x18e>
  }

  /*
    other case
  */
  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4906      	ldr	r1, [pc, #24]	; (8002ddc <c_array_new+0x194>)
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f008 fb2f 	bl	800b428 <mrbc_raise>
 8002dca:	e004      	b.n	8002dd6 <c_array_new+0x18e>
    if( ret.array == NULL ) return;		// ENOMEM
 8002dcc:	bf00      	nop
 8002dce:	e002      	b.n	8002dd6 <c_array_new+0x18e>
    if( ret.array == NULL ) return;		// ENOMEM
 8002dd0:	bf00      	nop
 8002dd2:	e000      	b.n	8002dd6 <c_array_new+0x18e>
    if( ret.array == NULL ) return;		// ENOMEM
 8002dd4:	bf00      	nop
}
 8002dd6:	3794      	adds	r7, #148	; 0x94
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd90      	pop	{r4, r7, pc}
 8002ddc:	20000154 	.word	0x20000154

08002de0 <c_array_add>:

//================================================================
/*! (operator) +
*/
static void c_array_add(struct VM *vm, mrbc_value v[], int argc)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b091      	sub	sp, #68	; 0x44
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_ARRAY ) {
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3310      	adds	r3, #16
 8002df0:	f993 3000 	ldrsb.w	r3, [r3]
 8002df4:	2b0a      	cmp	r3, #10
 8002df6:	d005      	beq.n	8002e04 <c_array_add+0x24>
    mrbc_raise( vm, MRBC_CLASS(TypeError), 0 );
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4935      	ldr	r1, [pc, #212]	; (8002ed0 <c_array_add+0xf0>)
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f008 fb13 	bl	800b428 <mrbc_raise>
    return;
 8002e02:	e062      	b.n	8002eca <c_array_add+0xea>
  }

  mrbc_array *h1 = v[0].array;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
  mrbc_array *h2 = v[1].array;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34

  mrbc_value value = mrbc_array_new(vm, h1->n_stored + h2->n_stored);
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	88db      	ldrh	r3, [r3, #6]
 8002e16:	461a      	mov	r2, r3
 8002e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1a:	88db      	ldrh	r3, [r3, #6]
 8002e1c:	441a      	add	r2, r3
 8002e1e:	f107 0320 	add.w	r3, r7, #32
 8002e22:	68f9      	ldr	r1, [r7, #12]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fa96 	bl	8002356 <mrbc_array_new>
  if( value.array == NULL ) return;		// ENOMEM
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d04b      	beq.n	8002ec8 <c_array_add+0xe8>

  memcpy( value.array->data,                h1->data,
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	6898      	ldr	r0, [r3, #8]
 8002e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e36:	6899      	ldr	r1, [r3, #8]
	  sizeof(mrbc_value) * h1->n_stored );
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	88db      	ldrh	r3, [r3, #6]
  memcpy( value.array->data,                h1->data,
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f013 fcd9 	bl	80167f6 <memcpy>
  memcpy( value.array->data + h1->n_stored, h2->data,
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	88db      	ldrh	r3, [r3, #6]
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	18d0      	adds	r0, r2, r3
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	6899      	ldr	r1, [r3, #8]
	  sizeof(mrbc_value) * h2->n_stored );
 8002e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e56:	88db      	ldrh	r3, [r3, #6]
  memcpy( value.array->data + h1->n_stored, h2->data,
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f013 fccb 	bl	80167f6 <memcpy>
  value.array->n_stored = h1->n_stored + h2->n_stored;
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	88d9      	ldrh	r1, [r3, #6]
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	88da      	ldrh	r2, [r3, #6]
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	440a      	add	r2, r1
 8002e6c:	b292      	uxth	r2, r2
 8002e6e:	80da      	strh	r2, [r3, #6]

  mrbc_value *p1 = value.array->data;
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  const mrbc_value *p2 = p1 + value.array->n_stored;
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	88db      	ldrh	r3, [r3, #6]
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e7e:	4413      	add	r3, r2
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
  while( p1 < p2 ) {
 8002e82:	e006      	b.n	8002e92 <c_array_add+0xb2>
    mrbc_incref(p1++);
 8002e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e86:	f103 0210 	add.w	r2, r3, #16
 8002e8a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f98f 	bl	80021b0 <mrbc_incref>
  while( p1 < p2 ) {
 8002e92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d3f4      	bcc.n	8002e84 <c_array_add+0xa4>
  }

  mrbc_decref_empty(v+1);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3310      	adds	r3, #16
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fa00 	bl	80022a4 <mrbc_decref_empty>
  SET_RETURN(value);
 8002ea4:	f107 0410 	add.w	r4, r7, #16
 8002ea8:	f107 0320 	add.w	r3, r7, #32
 8002eac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002eb2:	68b8      	ldr	r0, [r7, #8]
 8002eb4:	f7ff f9b0 	bl	8002218 <mrbc_decref>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	461c      	mov	r4, r3
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ec6:	e000      	b.n	8002eca <c_array_add+0xea>
  if( value.array == NULL ) return;		// ENOMEM
 8002ec8:	bf00      	nop
}
 8002eca:	3744      	adds	r7, #68	; 0x44
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}
 8002ed0:	200001b4 	.word	0x200001b4

08002ed4 <c_array_get>:

//================================================================
/*! (operator) []
*/
static void c_array_get(struct VM *vm, mrbc_value v[], int argc)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b0a7      	sub	sp, #156	; 0x9c
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  /*
    in case of Array[...] -> Array
  */
  if( mrbc_type(v[0]) == MRBC_TT_CLASS ) {
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ee6:	2b07      	cmp	r3, #7
 8002ee8:	d13f      	bne.n	8002f6a <c_array_get+0x96>
    mrbc_value ret = mrbc_array_new(vm, argc);
 8002eea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fa2f 	bl	8002356 <mrbc_array_new>
    if( ret.array == NULL ) return;	// ENOMEM
 8002ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80ec 	beq.w	80030d8 <c_array_get+0x204>

    memcpy( ret.array->data, &v[1], sizeof(mrbc_value) * argc );
 8002f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f02:	6898      	ldr	r0, [r3, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f103 0110 	add.w	r1, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f013 fc71 	bl	80167f6 <memcpy>
    int i;
    for( i = 1; i <= argc; i++ ) {
 8002f14:	2301      	movs	r3, #1
 8002f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f1a:	e00b      	b.n	8002f34 <c_array_get+0x60>
      mrbc_type(v[i]) = MRBC_TT_EMPTY;
 8002f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	4413      	add	r3, r2
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
    for( i = 1; i <= argc; i++ ) {
 8002f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	ddee      	ble.n	8002f1c <c_array_get+0x48>
    }
    ret.array->n_stored = argc;
 8002f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	b292      	uxth	r2, r2
 8002f44:	80da      	strh	r2, [r3, #6]

    SET_RETURN(ret);
 8002f46:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002f4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f54:	68b8      	ldr	r0, [r7, #8]
 8002f56:	f7ff f95f 	bl	8002218 <mrbc_decref>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	461c      	mov	r4, r3
 8002f5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8002f68:	e0b9      	b.n	80030de <c_array_get+0x20a>
  }

  /*
    in case of self[nth] -> object | nil
  */
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d125      	bne.n	8002fbc <c_array_get+0xe8>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	3310      	adds	r3, #16
 8002f74:	f993 3000 	ldrsb.w	r3, [r3]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d11f      	bne.n	8002fbc <c_array_get+0xe8>
    mrbc_value ret = mrbc_array_get(v, mrbc_integer(v[1]));
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	3310      	adds	r3, #16
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fadf 	bl	800254c <mrbc_array_get>
    mrbc_incref(&ret);
 8002f8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f90c 	bl	80021b0 <mrbc_incref>
    SET_RETURN(ret);
 8002f98:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002f9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fa6:	68b8      	ldr	r0, [r7, #8]
 8002fa8:	f7ff f936 	bl	8002218 <mrbc_decref>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	461c      	mov	r4, r3
 8002fb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fba:	e090      	b.n	80030de <c_array_get+0x20a>
  }

  /*
    in case of self[start, length] -> Array | nil
  */
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER && mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d17a      	bne.n	80030b8 <c_array_get+0x1e4>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3310      	adds	r3, #16
 8002fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d174      	bne.n	80030b8 <c_array_get+0x1e4>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3320      	adds	r3, #32
 8002fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d16e      	bne.n	80030b8 <c_array_get+0x1e4>
    int len = mrbc_array_size(&v[0]);
 8002fda:	68b8      	ldr	r0, [r7, #8]
 8002fdc:	f7ff f99b 	bl	8002316 <mrbc_array_size>
 8002fe0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    int idx = mrbc_integer(v[1]);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if( idx < 0 ) idx += len;
 8002fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da06      	bge.n	8003004 <c_array_get+0x130>
 8002ff6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ffe:	4413      	add	r3, r2
 8003000:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if( idx < 0 ) goto RETURN_NIL;
 8003004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003008:	2b00      	cmp	r3, #0
 800300a:	db5b      	blt.n	80030c4 <c_array_get+0x1f0>

    int size = (mrbc_integer(v[2]) < (len - idx)) ? mrbc_integer(v[2]) : (len - idx);
 800300c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003010:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003014:	1ad2      	subs	r2, r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3320      	adds	r3, #32
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4293      	cmp	r3, r2
 800301e:	bfa8      	it	ge
 8003020:	4613      	movge	r3, r2
 8003022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		// min( mrbc_integer(v[2]), (len - idx) )
    if( size < 0 ) goto RETURN_NIL;
 8003026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800302a:	2b00      	cmp	r3, #0
 800302c:	db4c      	blt.n	80030c8 <c_array_get+0x1f4>

    mrbc_value ret = mrbc_array_new(vm, size);
 800302e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003032:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003036:	68f9      	ldr	r1, [r7, #12]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f98c 	bl	8002356 <mrbc_array_new>
    if( ret.array == NULL ) return;		// ENOMEM
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d04b      	beq.n	80030dc <c_array_get+0x208>

    int i;
    for( i = 0; i < size; i++ ) {
 8003044:	2300      	movs	r3, #0
 8003046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800304a:	e01d      	b.n	8003088 <c_array_get+0x1b4>
      mrbc_value val = mrbc_array_get(v, mrbc_integer(v[1]) + i);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3310      	adds	r3, #16
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003056:	441a      	add	r2, r3
 8003058:	f107 0320 	add.w	r3, r7, #32
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fa74 	bl	800254c <mrbc_array_get>
      mrbc_incref(&val);
 8003064:	f107 0320 	add.w	r3, r7, #32
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f8a1 	bl	80021b0 <mrbc_incref>
      mrbc_array_push(&ret, &val);
 800306e:	f107 0220 	add.w	r2, r7, #32
 8003072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fa9c 	bl	80025b6 <mrbc_array_push>
    for( i = 0; i < size; i++ ) {
 800307e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003082:	3301      	adds	r3, #1
 8003084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003088:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800308c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003090:	429a      	cmp	r2, r3
 8003092:	dbdb      	blt.n	800304c <c_array_get+0x178>
    }

    SET_RETURN(ret);
 8003094:	f107 0410 	add.w	r4, r7, #16
 8003098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800309c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800309e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030a2:	68b8      	ldr	r0, [r7, #8]
 80030a4:	f7ff f8b8 	bl	8002218 <mrbc_decref>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	461c      	mov	r4, r3
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 80030b6:	e012      	b.n	80030de <c_array_get+0x20a>
  }

  /*
    other case
  */
  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80030b8:	2200      	movs	r2, #0
 80030ba:	490a      	ldr	r1, [pc, #40]	; (80030e4 <c_array_get+0x210>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f008 f9b3 	bl	800b428 <mrbc_raise>
  return;
 80030c2:	e00c      	b.n	80030de <c_array_get+0x20a>
    if( idx < 0 ) goto RETURN_NIL;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <c_array_get+0x1f6>
    if( size < 0 ) goto RETURN_NIL;
 80030c8:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 80030ca:	68b8      	ldr	r0, [r7, #8]
 80030cc:	f7ff f8a4 	bl	8002218 <mrbc_decref>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e002      	b.n	80030de <c_array_get+0x20a>
    if( ret.array == NULL ) return;	// ENOMEM
 80030d8:	bf00      	nop
 80030da:	e000      	b.n	80030de <c_array_get+0x20a>
    if( ret.array == NULL ) return;		// ENOMEM
 80030dc:	bf00      	nop
}
 80030de:	379c      	adds	r7, #156	; 0x9c
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}
 80030e4:	20000154 	.word	0x20000154

080030e8 <c_array_set>:

//================================================================
/*! (operator) []=
*/
static void c_array_set(struct VM *vm, mrbc_value v[], int argc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b090      	sub	sp, #64	; 0x40
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  /*
    in case of self[nth] = val
  */
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d11b      	bne.n	8003132 <c_array_set+0x4a>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3310      	adds	r3, #16
 80030fe:	f993 3000 	ldrsb.w	r3, [r3]
 8003102:	2b04      	cmp	r3, #4
 8003104:	d115      	bne.n	8003132 <c_array_set+0x4a>
    if( mrbc_array_set(v, mrbc_integer(v[1]), &v[2]) != 0 ) {
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3310      	adds	r3, #16
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3320      	adds	r3, #32
 8003110:	461a      	mov	r2, r3
 8003112:	68b8      	ldr	r0, [r7, #8]
 8003114:	f7ff f9b6 	bl	8002484 <mrbc_array_set>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <c_array_set+0x40>
      mrbc_raise( vm, MRBC_CLASS(IndexError), "too small for array");
 800311e:	4a60      	ldr	r2, [pc, #384]	; (80032a0 <c_array_set+0x1b8>)
 8003120:	4960      	ldr	r1, [pc, #384]	; (80032a4 <c_array_set+0x1bc>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f008 f980 	bl	800b428 <mrbc_raise>
    }
    mrbc_type(v[2]) = MRBC_TT_EMPTY;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3320      	adds	r3, #32
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
    return;
 8003130:	e0b2      	b.n	8003298 <c_array_set+0x1b0>
  }

  /*
    in case of self[start, length] = val
  */
  if( argc == 3 && mrbc_type(v[1]) == MRBC_TT_INTEGER && mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b03      	cmp	r3, #3
 8003136:	f040 80aa 	bne.w	800328e <c_array_set+0x1a6>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3310      	adds	r3, #16
 800313e:	f993 3000 	ldrsb.w	r3, [r3]
 8003142:	2b04      	cmp	r3, #4
 8003144:	f040 80a3 	bne.w	800328e <c_array_set+0x1a6>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3320      	adds	r3, #32
 800314c:	f993 3000 	ldrsb.w	r3, [r3]
 8003150:	2b04      	cmp	r3, #4
 8003152:	f040 809c 	bne.w	800328e <c_array_set+0x1a6>
    int pos = mrbc_integer(v[1]);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3310      	adds	r3, #16
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	63fb      	str	r3, [r7, #60]	; 0x3c
    int len = mrbc_integer(v[2]);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3320      	adds	r3, #32
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	63bb      	str	r3, [r7, #56]	; 0x38

    if( pos < 0 ) {
 8003166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003168:	2b00      	cmp	r3, #0
 800316a:	da02      	bge.n	8003172 <c_array_set+0x8a>
      pos = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003170:	e019      	b.n	80031a6 <c_array_set+0xbe>
    } else if( pos > v[0].array->n_stored ) {
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	88db      	ldrh	r3, [r3, #6]
 8003178:	461a      	mov	r2, r3
 800317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317c:	4293      	cmp	r3, r2
 800317e:	dd12      	ble.n	80031a6 <c_array_set+0xbe>
      mrbc_array_set( &v[0], pos-1, &mrbc_nil_value() );
 8003180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003182:	1e59      	subs	r1, r3, #1
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	2301      	movs	r3, #1
 8003194:	743b      	strb	r3, [r7, #16]
 8003196:	f107 0310 	add.w	r3, r7, #16
 800319a:	461a      	mov	r2, r3
 800319c:	68b8      	ldr	r0, [r7, #8]
 800319e:	f7ff f971 	bl	8002484 <mrbc_array_set>
      len = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    if( len < 0 ) len = 0;
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da01      	bge.n	80031b0 <c_array_set+0xc8>
 80031ac:	2300      	movs	r3, #0
 80031ae:	63bb      	str	r3, [r7, #56]	; 0x38
    if( pos+len > v[0].array->n_stored ) {
 80031b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b4:	4413      	add	r3, r2
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	6892      	ldr	r2, [r2, #8]
 80031ba:	88d2      	ldrh	r2, [r2, #6]
 80031bc:	4293      	cmp	r3, r2
 80031be:	dd06      	ble.n	80031ce <c_array_set+0xe6>
      len = v[0].array->n_stored - pos;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	88db      	ldrh	r3, [r3, #6]
 80031c6:	461a      	mov	r2, r3
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    // split 2 part
    mrbc_value v1 = mrbc_array_divide(vm, &v[0], pos+len);
 80031ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d2:	4413      	add	r3, r2
 80031d4:	f107 0020 	add.w	r0, r7, #32
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	f7ff fcb3 	bl	8002b46 <mrbc_array_divide>
    mrbc_array *ha0 = v[0].array;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30

    // delete data from tail.
    int i;
    for( i = 0; i < len; i++ ) {
 80031e6:	2300      	movs	r3, #0
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ea:	e011      	b.n	8003210 <c_array_set+0x128>
      mrbc_decref( &ha0->data[--ha0->n_stored] );
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	88db      	ldrh	r3, [r3, #6]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b299      	uxth	r1, r3
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	80d9      	strh	r1, [r3, #6]
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	88db      	ldrh	r3, [r3, #6]
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	4413      	add	r3, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff f807 	bl	8002218 <mrbc_decref>
    for( i = 0; i < len; i++ ) {
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	3301      	adds	r3, #1
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
 8003210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	429a      	cmp	r2, r3
 8003216:	dbe9      	blt.n	80031ec <c_array_set+0x104>
    }

    // append data
    if( v[3].tt == MRBC_TT_ARRAY ) {
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	3330      	adds	r3, #48	; 0x30
 800321c:	f993 3000 	ldrsb.w	r3, [r3]
 8003220:	2b0a      	cmp	r3, #10
 8003222:	d11e      	bne.n	8003262 <c_array_set+0x17a>
      mrbc_array_push_m(&v[0], &v[3]);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3330      	adds	r3, #48	; 0x30
 8003228:	4619      	mov	r1, r3
 800322a:	68b8      	ldr	r0, [r7, #8]
 800322c:	f7ff f9f2 	bl	8002614 <mrbc_array_push_m>
      for( i = 0; i < v[3].array->n_stored; i++ ) {
 8003230:	2300      	movs	r3, #0
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
 8003234:	e00c      	b.n	8003250 <c_array_set+0x168>
	mrbc_incref( &v[3].array->data[i] );
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3330      	adds	r3, #48	; 0x30
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	4413      	add	r3, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe ffb3 	bl	80021b0 <mrbc_incref>
      for( i = 0; i < v[3].array->n_stored; i++ ) {
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	3301      	adds	r3, #1
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	3330      	adds	r3, #48	; 0x30
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	88db      	ldrh	r3, [r3, #6]
 8003258:	461a      	mov	r2, r3
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	4293      	cmp	r3, r2
 800325e:	dbea      	blt.n	8003236 <c_array_set+0x14e>
 8003260:	e009      	b.n	8003276 <c_array_set+0x18e>
      }
    } else {
      mrbc_array_push(&v[0], &v[3]);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3330      	adds	r3, #48	; 0x30
 8003266:	4619      	mov	r1, r3
 8003268:	68b8      	ldr	r0, [r7, #8]
 800326a:	f7ff f9a4 	bl	80025b6 <mrbc_array_push>
      v[3].tt = MRBC_TT_EMPTY;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3330      	adds	r3, #48	; 0x30
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
    }

    mrbc_array_push_m(&v[0], &v1);
 8003276:	f107 0320 	add.w	r3, r7, #32
 800327a:	4619      	mov	r1, r3
 800327c:	68b8      	ldr	r0, [r7, #8]
 800327e:	f7ff f9c9 	bl	8002614 <mrbc_array_push_m>
    mrbc_array_delete_handle( &v1 );
 8003282:	f107 0320 	add.w	r3, r7, #32
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f852 	bl	8002330 <mrbc_array_delete_handle>
 800328c:	e004      	b.n	8003298 <c_array_set+0x1b0>
  }

  /*
    other case
  */
  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 800328e:	2200      	movs	r2, #0
 8003290:	4905      	ldr	r1, [pc, #20]	; (80032a8 <c_array_set+0x1c0>)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f008 f8c8 	bl	800b428 <mrbc_raise>
}
 8003298:	3740      	adds	r7, #64	; 0x40
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	08018acc 	.word	0x08018acc
 80032a4:	20000164 	.word	0x20000164
 80032a8:	20000154 	.word	0x20000154

080032ac <c_array_clear>:

//================================================================
/*! (method) clear
*/
static void c_array_clear(struct VM *vm, mrbc_value v[], int argc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  mrbc_array_clear(v);
 80032b8:	68b8      	ldr	r0, [r7, #8]
 80032ba:	f7ff fb47 	bl	800294c <mrbc_array_clear>
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <c_array_delete_at>:

//================================================================
/*! (method) delete_at
*/
static void c_array_delete_at(struct VM *vm, mrbc_value v[], int argc)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b08d      	sub	sp, #52	; 0x34
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d120      	bne.n	800331c <c_array_delete_at+0x54>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	3310      	adds	r3, #16
 80032de:	f993 3000 	ldrsb.w	r3, [r3]
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d11a      	bne.n	800331c <c_array_delete_at+0x54>
    mrbc_value val = mrbc_array_remove(v, mrbc_integer(v[1]));
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	3310      	adds	r3, #16
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	f107 0320 	add.w	r3, r7, #32
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff facf 	bl	8002896 <mrbc_array_remove>
    SET_RETURN(val);
 80032f8:	f107 0410 	add.w	r4, r7, #16
 80032fc:	f107 0320 	add.w	r3, r7, #32
 8003300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003306:	68b8      	ldr	r0, [r7, #8]
 8003308:	f7fe ff86 	bl	8002218 <mrbc_decref>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	461c      	mov	r4, r3
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 800331a:	e005      	b.n	8003328 <c_array_delete_at+0x60>
  } else {
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 800331c:	2200      	movs	r2, #0
 800331e:	4904      	ldr	r1, [pc, #16]	; (8003330 <c_array_delete_at+0x68>)
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f008 f881 	bl	800b428 <mrbc_raise>
  }
}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	3734      	adds	r7, #52	; 0x34
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}
 8003330:	20000154 	.word	0x20000154

08003334 <c_array_empty>:

//================================================================
/*! (method) empty?
*/
static void c_array_empty(struct VM *vm, mrbc_value v[], int argc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  int n = mrbc_array_size(v);
 8003340:	68b8      	ldr	r0, [r7, #8]
 8003342:	f7fe ffe8 	bl	8002316 <mrbc_array_size>
 8003346:	6178      	str	r0, [r7, #20]

  if( n ) {
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <c_array_empty+0x28>
    SET_FALSE_RETURN();
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f7fe ff62 	bl	8002218 <mrbc_decref>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]
  } else {
    SET_TRUE_RETURN();
  }
}
 800335a:	e005      	b.n	8003368 <c_array_empty+0x34>
    SET_TRUE_RETURN();
 800335c:	68b8      	ldr	r0, [r7, #8]
 800335e:	f7fe ff5b 	bl	8002218 <mrbc_decref>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2203      	movs	r2, #3
 8003366:	701a      	strb	r2, [r3, #0]
}
 8003368:	bf00      	nop
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <c_array_size>:

//================================================================
/*! (method) size,length,count
*/
static void c_array_size(struct VM *vm, mrbc_value v[], int argc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  int n = mrbc_array_size(v);
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f7fe ffca 	bl	8002316 <mrbc_array_size>
 8003382:	6178      	str	r0, [r7, #20]

  SET_INT_RETURN(n);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	68b8      	ldr	r0, [r7, #8]
 800338a:	f7fe ff45 	bl	8002218 <mrbc_decref>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2204      	movs	r2, #4
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	bf00      	nop
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <c_array_include>:

//================================================================
/*! (method) include?
*/
static void c_array_include(struct VM *vm, mrbc_value v[], int argc)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b086      	sub	sp, #24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  SET_BOOL_RETURN(0 < mrbc_array_include(&v[0], &v[1]));
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3310      	adds	r3, #16
 80033b2:	4619      	mov	r1, r3
 80033b4:	68b8      	ldr	r0, [r7, #8]
 80033b6:	f7ff fc1d 	bl	8002bf4 <mrbc_array_include>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	dd01      	ble.n	80033c4 <c_array_include+0x22>
 80033c0:	2303      	movs	r3, #3
 80033c2:	e000      	b.n	80033c6 <c_array_include+0x24>
 80033c4:	2302      	movs	r3, #2
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7fe ff25 	bl	8002218 <mrbc_decref>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	b25a      	sxtb	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	701a      	strb	r2, [r3, #0]
}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <c_array_and>:

//================================================================
/*! (method) &
*/
static void c_array_and(struct VM *vm, mrbc_value v[], int argc)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b08f      	sub	sp, #60	; 0x3c
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  if (v[1].tt != MRBC_TT_ARRAY) {
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3310      	adds	r3, #16
 80033f0:	f993 3000 	ldrsb.w	r3, [r3]
 80033f4:	2b0a      	cmp	r3, #10
 80033f6:	d005      	beq.n	8003404 <c_array_and+0x24>
    mrbc_raise( vm, MRBC_CLASS(TypeError), "no implicit conversion into Array");
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <c_array_and+0xb4>)
 80033fa:	4927      	ldr	r1, [pc, #156]	; (8003498 <c_array_and+0xb8>)
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f008 f813 	bl	800b428 <mrbc_raise>
 8003402:	e043      	b.n	800348c <c_array_and+0xac>
    return;
  }
  mrbc_value result = mrbc_array_new(vm, 0);
 8003404:	f107 0320 	add.w	r3, r7, #32
 8003408:	2200      	movs	r2, #0
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe ffa2 	bl	8002356 <mrbc_array_new>
  int i;
  for (i = 0; i < v[0].array->n_stored; i++) {
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
 8003416:	e021      	b.n	800345c <c_array_and+0x7c>
    mrbc_value *data = &v[0].array->data[i];
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	4413      	add	r3, r2
 8003424:	633b      	str	r3, [r7, #48]	; 0x30
    if (0 < mrbc_array_include(&v[1], data) && 0 == mrbc_array_include(&result, data))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	3310      	adds	r3, #16
 800342a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fbe1 	bl	8002bf4 <mrbc_array_include>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	dd0e      	ble.n	8003456 <c_array_and+0x76>
 8003438:	f107 0320 	add.w	r3, r7, #32
 800343c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fbd8 	bl	8002bf4 <mrbc_array_include>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <c_array_and+0x76>
    {
      mrbc_array_push(&result, data);
 800344a:	f107 0320 	add.w	r3, r7, #32
 800344e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f8b0 	bl	80025b6 <mrbc_array_push>
  for (i = 0; i < v[0].array->n_stored; i++) {
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	3301      	adds	r3, #1
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	88db      	ldrh	r3, [r3, #6]
 8003462:	461a      	mov	r2, r3
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003466:	4293      	cmp	r3, r2
 8003468:	dbd6      	blt.n	8003418 <c_array_and+0x38>
    }
  }
  SET_RETURN(result);
 800346a:	f107 0410 	add.w	r4, r7, #16
 800346e:	f107 0320 	add.w	r3, r7, #32
 8003472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f7fe fecd 	bl	8002218 <mrbc_decref>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	461c      	mov	r4, r3
 8003482:	f107 0310 	add.w	r3, r7, #16
 8003486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800348c:	373c      	adds	r7, #60	; 0x3c
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
 8003492:	bf00      	nop
 8003494:	08018ae0 	.word	0x08018ae0
 8003498:	200001b4 	.word	0x200001b4

0800349c <c_array_or>:

//================================================================
/*! (method) |
*/
static void c_array_or(struct VM *vm, mrbc_value v[], int argc)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b091      	sub	sp, #68	; 0x44
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  if (v[1].tt != MRBC_TT_ARRAY) {
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3310      	adds	r3, #16
 80034ac:	f993 3000 	ldrsb.w	r3, [r3]
 80034b0:	2b0a      	cmp	r3, #10
 80034b2:	d005      	beq.n	80034c0 <c_array_or+0x24>
    mrbc_raise( vm, MRBC_CLASS(TypeError), "no implicit conversion into Array");
 80034b4:	4a34      	ldr	r2, [pc, #208]	; (8003588 <c_array_or+0xec>)
 80034b6:	4935      	ldr	r1, [pc, #212]	; (800358c <c_array_or+0xf0>)
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f007 ffb5 	bl	800b428 <mrbc_raise>
 80034be:	e05f      	b.n	8003580 <c_array_or+0xe4>
    return;
  }
  mrbc_value result = mrbc_array_new(vm, 0);
 80034c0:	f107 0320 	add.w	r3, r7, #32
 80034c4:	2200      	movs	r2, #0
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe ff44 	bl	8002356 <mrbc_array_new>
  int i;
  for (i = 0; i < v[0].array->n_stored; i++) {
 80034ce:	2300      	movs	r3, #0
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d2:	e018      	b.n	8003506 <c_array_or+0x6a>
    mrbc_value *data = &v[0].array->data[i];
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	4413      	add	r3, r2
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
    if (0 == mrbc_array_include(&result, data))
 80034e2:	f107 0320 	add.w	r3, r7, #32
 80034e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fb83 	bl	8002bf4 <mrbc_array_include>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <c_array_or+0x64>
    {
      mrbc_array_push(&result, data);
 80034f4:	f107 0320 	add.w	r3, r7, #32
 80034f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff f85b 	bl	80025b6 <mrbc_array_push>
  for (i = 0; i < v[0].array->n_stored; i++) {
 8003500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003502:	3301      	adds	r3, #1
 8003504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	88db      	ldrh	r3, [r3, #6]
 800350c:	461a      	mov	r2, r3
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	4293      	cmp	r3, r2
 8003512:	dbdf      	blt.n	80034d4 <c_array_or+0x38>
    }
  }
  for (i = 0; i < v[1].array->n_stored; i++) {
 8003514:	2300      	movs	r3, #0
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003518:	e019      	b.n	800354e <c_array_or+0xb2>
    mrbc_value *data = &v[1].array->data[i];
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3310      	adds	r3, #16
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	4413      	add	r3, r2
 8003528:	63bb      	str	r3, [r7, #56]	; 0x38
    if (0 == mrbc_array_include(&result, data))
 800352a:	f107 0320 	add.w	r3, r7, #32
 800352e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fb5f 	bl	8002bf4 <mrbc_array_include>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <c_array_or+0xac>
    {
      mrbc_array_push(&result, data);
 800353c:	f107 0320 	add.w	r3, r7, #32
 8003540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f837 	bl	80025b6 <mrbc_array_push>
  for (i = 0; i < v[1].array->n_stored; i++) {
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	3301      	adds	r3, #1
 800354c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3310      	adds	r3, #16
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	88db      	ldrh	r3, [r3, #6]
 8003556:	461a      	mov	r2, r3
 8003558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355a:	4293      	cmp	r3, r2
 800355c:	dbdd      	blt.n	800351a <c_array_or+0x7e>
    }
  }
  SET_RETURN(result);
 800355e:	f107 0410 	add.w	r4, r7, #16
 8003562:	f107 0320 	add.w	r3, r7, #32
 8003566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800356c:	68b8      	ldr	r0, [r7, #8]
 800356e:	f7fe fe53 	bl	8002218 <mrbc_decref>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	461c      	mov	r4, r3
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800357c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003580:	3744      	adds	r7, #68	; 0x44
 8003582:	46bd      	mov	sp, r7
 8003584:	bd90      	pop	{r4, r7, pc}
 8003586:	bf00      	nop
 8003588:	08018ae0 	.word	0x08018ae0
 800358c:	200001b4 	.word	0x200001b4

08003590 <c_array_first>:

//================================================================
/*! (method) first
*/
static void c_array_first(struct VM *vm, mrbc_value v[], int argc)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b08d      	sub	sp, #52	; 0x34
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  mrbc_value val = mrbc_array_get(v, 0);
 800359c:	f107 0320 	add.w	r3, r7, #32
 80035a0:	2200      	movs	r2, #0
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe ffd1 	bl	800254c <mrbc_array_get>
  mrbc_incref(&val);
 80035aa:	f107 0320 	add.w	r3, r7, #32
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fdfe 	bl	80021b0 <mrbc_incref>
  SET_RETURN(val);
 80035b4:	f107 0410 	add.w	r4, r7, #16
 80035b8:	f107 0320 	add.w	r3, r7, #32
 80035bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035c2:	68b8      	ldr	r0, [r7, #8]
 80035c4:	f7fe fe28 	bl	8002218 <mrbc_decref>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	461c      	mov	r4, r3
 80035cc:	f107 0310 	add.w	r3, r7, #16
 80035d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80035d6:	bf00      	nop
 80035d8:	3734      	adds	r7, #52	; 0x34
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}

080035de <c_array_last>:

//================================================================
/*! (method) last
*/
static void c_array_last(struct VM *vm, mrbc_value v[], int argc)
{
 80035de:	b590      	push	{r4, r7, lr}
 80035e0:	b08d      	sub	sp, #52	; 0x34
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
  mrbc_value val = mrbc_array_get(v, -1);
 80035ea:	f107 0320 	add.w	r3, r7, #32
 80035ee:	f04f 32ff 	mov.w	r2, #4294967295
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe ffa9 	bl	800254c <mrbc_array_get>
  mrbc_incref(&val);
 80035fa:	f107 0320 	add.w	r3, r7, #32
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fdd6 	bl	80021b0 <mrbc_incref>
  SET_RETURN(val);
 8003604:	f107 0410 	add.w	r4, r7, #16
 8003608:	f107 0320 	add.w	r3, r7, #32
 800360c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800360e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003612:	68b8      	ldr	r0, [r7, #8]
 8003614:	f7fe fe00 	bl	8002218 <mrbc_decref>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	461c      	mov	r4, r3
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003626:	bf00      	nop
 8003628:	3734      	adds	r7, #52	; 0x34
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}

0800362e <c_array_push>:

//================================================================
/*! (method) push
*/
static void c_array_push(struct VM *vm, mrbc_value v[], int argc)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
  mrbc_array_push(&v[0], &v[1]);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	3310      	adds	r3, #16
 800363e:	4619      	mov	r1, r3
 8003640:	68b8      	ldr	r0, [r7, #8]
 8003642:	f7fe ffb8 	bl	80025b6 <mrbc_array_push>
  mrbc_type(v[1]) = MRBC_TT_EMPTY;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3310      	adds	r3, #16
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <c_array_pop>:

//================================================================
/*! (method) pop
*/
static void c_array_pop(struct VM *vm, mrbc_value v[], int argc)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b097      	sub	sp, #92	; 0x5c
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  /*
    in case of pop() -> object | nil
  */
  if( argc == 0 ) {
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d117      	bne.n	800369a <c_array_pop+0x42>
    mrbc_value val = mrbc_array_pop(v);
 800366a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f80b 	bl	800268c <mrbc_array_pop>
    SET_RETURN(val);
 8003676:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800367a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800367e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003684:	68b8      	ldr	r0, [r7, #8]
 8003686:	f7fe fdc7 	bl	8002218 <mrbc_decref>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	461c      	mov	r4, r3
 800368e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003698:	e02f      	b.n	80036fa <c_array_pop+0xa2>
  }

  /*
    in case of pop(n) -> Array
  */
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d127      	bne.n	80036f0 <c_array_pop+0x98>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	3310      	adds	r3, #16
 80036a4:	f993 3000 	ldrsb.w	r3, [r3]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d121      	bne.n	80036f0 <c_array_pop+0x98>
    int pos = mrbc_array_size(&v[0]) - v[1].i;
 80036ac:	68b8      	ldr	r0, [r7, #8]
 80036ae:	f7fe fe32 	bl	8002316 <mrbc_array_size>
 80036b2:	4602      	mov	r2, r0
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3310      	adds	r3, #16
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	657b      	str	r3, [r7, #84]	; 0x54
    mrbc_value val = mrbc_array_divide(vm, &v[0], pos);
 80036be:	f107 0020 	add.w	r0, r7, #32
 80036c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	f7ff fa3d 	bl	8002b46 <mrbc_array_divide>
    SET_RETURN(val);
 80036cc:	f107 0410 	add.w	r4, r7, #16
 80036d0:	f107 0320 	add.w	r3, r7, #32
 80036d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036da:	68b8      	ldr	r0, [r7, #8]
 80036dc:	f7fe fd9c 	bl	8002218 <mrbc_decref>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	461c      	mov	r4, r3
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036ee:	e004      	b.n	80036fa <c_array_pop+0xa2>
    return;
  }

  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80036f0:	2200      	movs	r2, #0
 80036f2:	4903      	ldr	r1, [pc, #12]	; (8003700 <c_array_pop+0xa8>)
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f007 fe97 	bl	800b428 <mrbc_raise>
}
 80036fa:	375c      	adds	r7, #92	; 0x5c
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	20000154 	.word	0x20000154

08003704 <c_array_unshift>:

//================================================================
/*! (method) unshift
*/
static void c_array_unshift(struct VM *vm, mrbc_value v[], int argc)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  mrbc_array_unshift(&v[0], &v[1]);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	3310      	adds	r3, #16
 8003714:	4619      	mov	r1, r3
 8003716:	68b8      	ldr	r0, [r7, #8]
 8003718:	f7fe ffe5 	bl	80026e6 <mrbc_array_unshift>
  mrbc_type(v[1]) = MRBC_TT_EMPTY;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3310      	adds	r3, #16
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <c_array_shift>:

//================================================================
/*! (method) shift
*/
static void c_array_shift(struct VM *vm, mrbc_value v[], int argc)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b099      	sub	sp, #100	; 0x64
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  /*
    in case of pop() -> object | nil
  */
  if( argc == 0 ) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d117      	bne.n	800376e <c_array_shift+0x42>
    mrbc_value val = mrbc_array_shift(v);
 800373e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe ffdd 	bl	8002704 <mrbc_array_shift>
    SET_RETURN(val);
 800374a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800374e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003758:	68b8      	ldr	r0, [r7, #8]
 800375a:	f7fe fd5d 	bl	8002218 <mrbc_decref>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	461c      	mov	r4, r3
 8003762:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800376c:	e047      	b.n	80037fe <c_array_shift+0xd2>
  }

  /*
    in case of pop(n) -> Array
  */
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d13f      	bne.n	80037f4 <c_array_shift+0xc8>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	3310      	adds	r3, #16
 8003778:	f993 3000 	ldrsb.w	r3, [r3]
 800377c:	2b04      	cmp	r3, #4
 800377e:	d139      	bne.n	80037f4 <c_array_shift+0xc8>
    mrbc_value val = mrbc_array_divide(vm, &v[0], v[1].i);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3310      	adds	r3, #16
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	68f9      	ldr	r1, [r7, #12]
 800378e:	f7ff f9da 	bl	8002b46 <mrbc_array_divide>

    // swap v[0] and val
    mrbc_array tmp = *v[0].array;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800379a:	ca07      	ldmia	r2, {r0, r1, r2}
 800379c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    v[0].array->data_size = val.array->data_size;
 80037a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	8892      	ldrh	r2, [r2, #4]
 80037a8:	809a      	strh	r2, [r3, #4]
    v[0].array->n_stored = val.array->n_stored;
 80037aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	88d2      	ldrh	r2, [r2, #6]
 80037b2:	80da      	strh	r2, [r3, #6]
    v[0].array->data = val.array->data;
 80037b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	6892      	ldr	r2, [r2, #8]
 80037bc:	609a      	str	r2, [r3, #8]

    val.array->data_size = tmp.data_size;
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80037c2:	809a      	strh	r2, [r3, #4]
    val.array->n_stored = tmp.n_stored;
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80037c8:	80da      	strh	r2, [r3, #6]
    val.array->data = tmp.data;
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ce:	609a      	str	r2, [r3, #8]

    SET_RETURN(val);
 80037d0:	f107 0410 	add.w	r4, r7, #16
 80037d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	f7fe fd1a 	bl	8002218 <mrbc_decref>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	461c      	mov	r4, r3
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80037f2:	e004      	b.n	80037fe <c_array_shift+0xd2>
    return;
  }

  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80037f4:	2200      	movs	r2, #0
 80037f6:	4903      	ldr	r1, [pc, #12]	; (8003804 <c_array_shift+0xd8>)
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f007 fe15 	bl	800b428 <mrbc_raise>
}
 80037fe:	3764      	adds	r7, #100	; 0x64
 8003800:	46bd      	mov	sp, r7
 8003802:	bd90      	pop	{r4, r7, pc}
 8003804:	20000154 	.word	0x20000154

08003808 <c_array_dup>:

//================================================================
/*! (method) dup
*/
static void c_array_dup(struct VM *vm, mrbc_value v[], int argc)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  SET_RETURN( mrbc_array_dup( vm, &v[0] ) );
 8003814:	f107 0310 	add.w	r3, r7, #16
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff f947 	bl	8002ab0 <mrbc_array_dup>
 8003822:	68b8      	ldr	r0, [r7, #8]
 8003824:	f7fe fcf8 	bl	8002218 <mrbc_decref>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	461c      	mov	r4, r3
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003836:	bf00      	nop
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd90      	pop	{r4, r7, pc}

0800383e <c_array_min>:

//================================================================
/*! (method) min
*/
static void c_array_min(struct VM *vm, mrbc_value v[], int argc)
{
 800383e:	b590      	push	{r4, r7, lr}
 8003840:	b08b      	sub	sp, #44	; 0x2c
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
  // Subset of Array#min, not support min(n).

  mrbc_value *p_min_value, *p_max_value;

  mrbc_array_minmax(&v[0], &p_min_value, &p_max_value);
 800384a:	f107 0220 	add.w	r2, r7, #32
 800384e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003852:	4619      	mov	r1, r3
 8003854:	68b8      	ldr	r0, [r7, #8]
 8003856:	f7ff f8d8 	bl	8002a0a <mrbc_array_minmax>
  if( p_min_value == NULL ) {
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <c_array_min+0x30>
    SET_NIL_RETURN();
 8003860:	68b8      	ldr	r0, [r7, #8]
 8003862:	f7fe fcd9 	bl	8002218 <mrbc_decref>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e013      	b.n	8003896 <c_array_min+0x58>
    return;
  }

  mrbc_incref(p_min_value);
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe fc9d 	bl	80021b0 <mrbc_incref>
  SET_RETURN(*p_min_value);
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f107 0410 	add.w	r4, r7, #16
 800387c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800387e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003882:	68b8      	ldr	r0, [r7, #8]
 8003884:	f7fe fcc8 	bl	8002218 <mrbc_decref>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	461c      	mov	r4, r3
 800388c:	f107 0310 	add.w	r3, r7, #16
 8003890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003896:	372c      	adds	r7, #44	; 0x2c
 8003898:	46bd      	mov	sp, r7
 800389a:	bd90      	pop	{r4, r7, pc}

0800389c <c_array_max>:

//================================================================
/*! (method) max
*/
static void c_array_max(struct VM *vm, mrbc_value v[], int argc)
{
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b08b      	sub	sp, #44	; 0x2c
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  // Subset of Array#max, not support max(n).

  mrbc_value *p_min_value, *p_max_value;

  mrbc_array_minmax(&v[0], &p_min_value, &p_max_value);
 80038a8:	f107 0220 	add.w	r2, r7, #32
 80038ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b0:	4619      	mov	r1, r3
 80038b2:	68b8      	ldr	r0, [r7, #8]
 80038b4:	f7ff f8a9 	bl	8002a0a <mrbc_array_minmax>
  if( p_max_value == NULL ) {
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <c_array_max+0x30>
    SET_NIL_RETURN();
 80038be:	68b8      	ldr	r0, [r7, #8]
 80038c0:	f7fe fcaa 	bl	8002218 <mrbc_decref>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e013      	b.n	80038f4 <c_array_max+0x58>
    return;
  }

  mrbc_incref(p_max_value);
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fc6e 	bl	80021b0 <mrbc_incref>
  SET_RETURN(*p_max_value);
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	f107 0410 	add.w	r4, r7, #16
 80038da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80038e0:	68b8      	ldr	r0, [r7, #8]
 80038e2:	f7fe fc99 	bl	8002218 <mrbc_decref>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	461c      	mov	r4, r3
 80038ea:	f107 0310 	add.w	r3, r7, #16
 80038ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80038f4:	372c      	adds	r7, #44	; 0x2c
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}

080038fa <c_array_minmax>:

//================================================================
/*! (method) minmax
*/
static void c_array_minmax(struct VM *vm, mrbc_value v[], int argc)
{
 80038fa:	b590      	push	{r4, r7, lr}
 80038fc:	b097      	sub	sp, #92	; 0x5c
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
  // Subset of Array#minmax, not support minmax(n).

  mrbc_value *p_min_value, *p_max_value;
  mrbc_value nil = mrbc_nil_value();
 8003906:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  mrbc_value ret = mrbc_array_new(vm, 2);
 800391a:	f107 0320 	add.w	r3, r7, #32
 800391e:	2202      	movs	r2, #2
 8003920:	68f9      	ldr	r1, [r7, #12]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fd17 	bl	8002356 <mrbc_array_new>

  mrbc_array_minmax(&v[0], &p_min_value, &p_max_value);
 8003928:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800392c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003930:	4619      	mov	r1, r3
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f7ff f869 	bl	8002a0a <mrbc_array_minmax>
  if( p_min_value == NULL ) p_min_value = &nil;
 8003938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <c_array_minmax+0x4a>
 800393e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003942:	657b      	str	r3, [r7, #84]	; 0x54
  if( p_max_value == NULL ) p_max_value = &nil;
 8003944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <c_array_minmax+0x56>
 800394a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800394e:	653b      	str	r3, [r7, #80]	; 0x50

  mrbc_incref(p_min_value);
 8003950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fc2c 	bl	80021b0 <mrbc_incref>
  mrbc_incref(p_max_value);
 8003958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fc28 	bl	80021b0 <mrbc_incref>
  mrbc_array_set(&ret, 0, p_min_value);
 8003960:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003962:	f107 0320 	add.w	r3, r7, #32
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fd8b 	bl	8002484 <mrbc_array_set>
  mrbc_array_set(&ret, 1, p_max_value);
 800396e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003970:	f107 0320 	add.w	r3, r7, #32
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fd84 	bl	8002484 <mrbc_array_set>

  SET_RETURN(ret);
 800397c:	f107 0410 	add.w	r4, r7, #16
 8003980:	f107 0320 	add.w	r3, r7, #32
 8003984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800398a:	68b8      	ldr	r0, [r7, #8]
 800398c:	f7fe fc44 	bl	8002218 <mrbc_decref>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	461c      	mov	r4, r3
 8003994:	f107 0310 	add.w	r3, r7, #16
 8003998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800399a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800399e:	bf00      	nop
 80039a0:	375c      	adds	r7, #92	; 0x5c
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd90      	pop	{r4, r7, pc}
	...

080039a8 <c_array_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect, to_s
*/
static void c_array_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b09f      	sub	sp, #124	; 0x7c
 80039ac:	af04      	add	r7, sp, #16
 80039ae:	61f8      	str	r0, [r7, #28]
 80039b0:	61b9      	str	r1, [r7, #24]
 80039b2:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f993 3000 	ldrsb.w	r3, [r3]
 80039ba:	2b07      	cmp	r3, #7
 80039bc:	d112      	bne.n	80039e4 <c_array_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f00a f93a 	bl	800dc40 <mrbc_symid_to_str>
 80039cc:	4602      	mov	r2, r0
 80039ce:	69bc      	ldr	r4, [r7, #24]
 80039d0:	463b      	mov	r3, r7
 80039d2:	69f9      	ldr	r1, [r7, #28]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fc73 	bl	80022c0 <mrbc_string_new_cstr>
 80039da:	463b      	mov	r3, r7
 80039dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 80039e2:	e060      	b.n	8003aa6 <c_array_inspect+0xfe>
  }

  mrbc_value ret = mrbc_string_new_cstr(vm, "[");
 80039e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039e8:	4a30      	ldr	r2, [pc, #192]	; (8003aac <c_array_inspect+0x104>)
 80039ea:	69f9      	ldr	r1, [r7, #28]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fc67 	bl	80022c0 <mrbc_string_new_cstr>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 80039f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d04f      	beq.n	8003a98 <c_array_inspect+0xf0>

  int i;
  for( i = 0; i < mrbc_array_size(v); i++ ) {
 80039f8:	2300      	movs	r3, #0
 80039fa:	667b      	str	r3, [r7, #100]	; 0x64
 80039fc:	e02d      	b.n	8003a5a <c_array_inspect+0xb2>
    if( i != 0 ) mrbc_string_append_cstr( &ret, ", " );
 80039fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <c_array_inspect+0x68>
 8003a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a08:	4929      	ldr	r1, [pc, #164]	; (8003ab0 <c_array_inspect+0x108>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fc70 	bl	80022f0 <mrbc_string_append_cstr>

    mrbc_value v1 = mrbc_array_get(v, i);
 8003a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003a16:	69b9      	ldr	r1, [r7, #24]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe fd97 	bl	800254c <mrbc_array_get>
    mrbc_value s1 = mrbc_send( vm, v, argc, &v1, "inspect", 0 );
 8003a1e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003a22:	2300      	movs	r3, #0
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <c_array_inspect+0x10c>)
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	69f9      	ldr	r1, [r7, #28]
 8003a36:	f005 fee5 	bl	8009804 <mrbc_send>
    mrbc_string_append( &ret, &s1 );
 8003a3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f003 fcf0 	bl	800742a <mrbc_string_append>
    mrbc_string_delete( &s1 );
 8003a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 fc4a 	bl	80072e8 <mrbc_string_delete>
  for( i = 0; i < mrbc_array_size(v); i++ ) {
 8003a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a56:	3301      	adds	r3, #1
 8003a58:	667b      	str	r3, [r7, #100]	; 0x64
 8003a5a:	69b8      	ldr	r0, [r7, #24]
 8003a5c:	f7fe fc5b 	bl	8002316 <mrbc_array_size>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a64:	4293      	cmp	r3, r2
 8003a66:	dbca      	blt.n	80039fe <c_array_inspect+0x56>
  }

  mrbc_string_append_cstr( &ret, "]" );
 8003a68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a6c:	4912      	ldr	r1, [pc, #72]	; (8003ab8 <c_array_inspect+0x110>)
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fc3e 	bl	80022f0 <mrbc_string_append_cstr>

  SET_RETURN(ret);
 8003a74:	f107 0420 	add.w	r4, r7, #32
 8003a78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003a82:	69b8      	ldr	r0, [r7, #24]
 8003a84:	f7fe fbc8 	bl	8002218 <mrbc_decref>
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	461c      	mov	r4, r3
 8003a8c:	f107 0320 	add.w	r3, r7, #32
 8003a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;
 8003a96:	e006      	b.n	8003aa6 <c_array_inspect+0xfe>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8003a98:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 8003a9a:	69b8      	ldr	r0, [r7, #24]
 8003a9c:	f7fe fbbc 	bl	8002218 <mrbc_decref>
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
}
 8003aa6:	376c      	adds	r7, #108	; 0x6c
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd90      	pop	{r4, r7, pc}
 8003aac:	08018b04 	.word	0x08018b04
 8003ab0:	08018b08 	.word	0x08018b08
 8003ab4:	08018b0c 	.word	0x08018b0c
 8003ab8:	08018b14 	.word	0x08018b14

08003abc <c_array_join_1>:
//================================================================
/*! (method) join
*/
static void c_array_join_1(struct VM *vm, mrbc_value v[], int argc,
			   mrbc_value *src, mrbc_value *ret, mrbc_value *separator)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08e      	sub	sp, #56	; 0x38
 8003ac0:	af04      	add	r7, sp, #16
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  if( mrbc_array_size(src) == 0 ) return;
 8003aca:	6838      	ldr	r0, [r7, #0]
 8003acc:	f7fe fc23 	bl	8002316 <mrbc_array_size>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d056      	beq.n	8003b84 <c_array_join_1+0xc8>

  int i = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
  int flag_error = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	623b      	str	r3, [r7, #32]
  while( !flag_error ) {
 8003ade:	e04d      	b.n	8003b7c <c_array_join_1+0xc0>
    if( mrbc_type(src->array->data[i]) == MRBC_TT_ARRAY ) {
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	f993 3000 	ldrsb.w	r3, [r3]
 8003af0:	2b0a      	cmp	r3, #10
 8003af2:	d110      	bne.n	8003b16 <c_array_join_1+0x5a>
      c_array_join_1(vm, v, argc, &src->array->data[i], ret, separator);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	441a      	add	r2, r3
 8003b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f7ff ffd4 	bl	8003abc <c_array_join_1>
 8003b14:	e020      	b.n	8003b58 <c_array_join_1+0x9c>
    } else {
      mrbc_value v1 = mrbc_send( vm, v, argc, &src->array->data[i], "to_s", 0 );
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	4413      	add	r3, r2
 8003b22:	f107 0010 	add.w	r0, r7, #16
 8003b26:	2200      	movs	r2, #0
 8003b28:	9202      	str	r2, [sp, #8]
 8003b2a:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <c_array_join_1+0xd4>)
 8003b2c:	9201      	str	r2, [sp, #4]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	68f9      	ldr	r1, [r7, #12]
 8003b36:	f005 fe65 	bl	8009804 <mrbc_send>
      flag_error |= mrbc_string_append( ret, &v1 );
 8003b3a:	f107 0310 	add.w	r3, r7, #16
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b42:	f003 fc72 	bl	800742a <mrbc_string_append>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	623b      	str	r3, [r7, #32]
      mrbc_decref(&v1);
 8003b4e:	f107 0310 	add.w	r3, r7, #16
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fb60 	bl	8002218 <mrbc_decref>
    }
    if( ++i >= mrbc_array_size(src) ) break;	// normal return.
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	6838      	ldr	r0, [r7, #0]
 8003b60:	f7fe fbd9 	bl	8002316 <mrbc_array_size>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	da0d      	bge.n	8003b88 <c_array_join_1+0xcc>
    flag_error |= mrbc_string_append( ret, separator );
 8003b6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b70:	f003 fc5b 	bl	800742a <mrbc_string_append>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	623b      	str	r3, [r7, #32]
  while( !flag_error ) {
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0ae      	beq.n	8003ae0 <c_array_join_1+0x24>
 8003b82:	e002      	b.n	8003b8a <c_array_join_1+0xce>
  if( mrbc_array_size(src) == 0 ) return;
 8003b84:	bf00      	nop
 8003b86:	e000      	b.n	8003b8a <c_array_join_1+0xce>
    if( ++i >= mrbc_array_size(src) ) break;	// normal return.
 8003b88:	bf00      	nop
  }
}
 8003b8a:	3728      	adds	r7, #40	; 0x28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	08018b18 	.word	0x08018b18

08003b94 <c_array_join>:

static void c_array_join(struct VM *vm, mrbc_value v[], int argc)
{
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b095      	sub	sp, #84	; 0x54
 8003b98:	af04      	add	r7, sp, #16
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_new(vm, NULL, 0);
 8003ba0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	68f9      	ldr	r1, [r7, #12]
 8003baa:	f003 faff 	bl	80071ac <mrbc_string_new>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d03b      	beq.n	8003c2c <c_array_join+0x98>

  mrbc_value separator = (argc == 0) ? mrbc_string_new_cstr(vm, "") :
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <c_array_join+0x36>
 8003bba:	f107 0320 	add.w	r3, r7, #32
 8003bbe:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <c_array_join+0xac>)
 8003bc0:	68f9      	ldr	r1, [r7, #12]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fb7c 	bl	80022c0 <mrbc_string_new_cstr>
 8003bc8:	e00d      	b.n	8003be6 <c_array_join+0x52>
    mrbc_send( vm, v, argc, &v[1], "to_s", 0 );
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3310      	adds	r3, #16
 8003bce:	f107 0020 	add.w	r0, r7, #32
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	9202      	str	r2, [sp, #8]
 8003bd6:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <c_array_join+0xb0>)
 8003bd8:	9201      	str	r2, [sp, #4]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	f005 fe0f 	bl	8009804 <mrbc_send>

  c_array_join_1(vm, v, argc, &v[0], &ret, &separator );
 8003be6:	f107 0320 	add.w	r3, r7, #32
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff ff5f 	bl	8003abc <c_array_join_1>
  mrbc_decref(&separator);
 8003bfe:	f107 0320 	add.w	r3, r7, #32
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fb08 	bl	8002218 <mrbc_decref>

  SET_RETURN(ret);
 8003c08:	f107 0410 	add.w	r4, r7, #16
 8003c0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003c16:	68b8      	ldr	r0, [r7, #8]
 8003c18:	f7fe fafe 	bl	8002218 <mrbc_decref>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	461c      	mov	r4, r3
 8003c20:	f107 0310 	add.w	r3, r7, #16
 8003c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003c2a:	e006      	b.n	8003c3a <c_array_join+0xa6>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8003c2c:	bf00      	nop
  return;

 RETURN_NIL:
  SET_NIL_RETURN();
 8003c2e:	68b8      	ldr	r0, [r7, #8]
 8003c30:	f7fe faf2 	bl	8002218 <mrbc_decref>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2201      	movs	r2, #1
 8003c38:	701a      	strb	r2, [r3, #0]
}
 8003c3a:	3744      	adds	r7, #68	; 0x44
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd90      	pop	{r4, r7, pc}
 8003c40:	08018b20 	.word	0x08018b20
 8003c44:	08018b18 	.word	0x08018b18

08003c48 <mrbc_incref>:
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f993 3000 	ldrsb.w	r3, [r3]
 8003c56:	2b07      	cmp	r3, #7
 8003c58:	dd1e      	ble.n	8003c98 <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	885b      	ldrh	r3, [r3, #2]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <mrbc_incref+0x2a>
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <mrbc_incref+0x58>)
 8003c66:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <mrbc_incref+0x5c>)
 8003c68:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003c6c:	480e      	ldr	r0, [pc, #56]	; (8003ca8 <mrbc_incref+0x60>)
 8003c6e:	f011 fce9 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	885b      	ldrh	r3, [r3, #2]
 8003c78:	2bff      	cmp	r3, #255	; 0xff
 8003c7a:	d106      	bne.n	8003c8a <mrbc_incref+0x42>
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <mrbc_incref+0x64>)
 8003c7e:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <mrbc_incref+0x5c>)
 8003c80:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003c84:	4808      	ldr	r0, [pc, #32]	; (8003ca8 <mrbc_incref+0x60>)
 8003c86:	f011 fcdd 	bl	8015644 <__assert_func>
  v->obj->ref_count++;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	885a      	ldrh	r2, [r3, #2]
 8003c90:	3201      	adds	r2, #1
 8003c92:	b292      	uxth	r2, r2
 8003c94:	805a      	strh	r2, [r3, #2]
 8003c96:	e000      	b.n	8003c9a <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8003c98:	bf00      	nop
}
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	08018b2c 	.word	0x08018b2c
 8003ca4:	0801aac4 	.word	0x0801aac4
 8003ca8:	08018b44 	.word	0x08018b44
 8003cac:	08018b60 	.word	0x08018b60

08003cb0 <mrbc_decref>:
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f993 3000 	ldrsb.w	r3, [r3]
 8003cbe:	2b07      	cmp	r3, #7
 8003cc0:	dd2c      	ble.n	8003d1c <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	885b      	ldrh	r3, [r3, #2]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <mrbc_decref+0x2a>
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <mrbc_decref+0x78>)
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <mrbc_decref+0x7c>)
 8003cd0:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8003cd4:	4816      	ldr	r0, [pc, #88]	; (8003d30 <mrbc_decref+0x80>)
 8003cd6:	f011 fcb5 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	885b      	ldrh	r3, [r3, #2]
 8003ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d106      	bne.n	8003cf6 <mrbc_decref+0x46>
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <mrbc_decref+0x84>)
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <mrbc_decref+0x7c>)
 8003cec:	f240 11d3 	movw	r1, #467	; 0x1d3
 8003cf0:	480f      	ldr	r0, [pc, #60]	; (8003d30 <mrbc_decref+0x80>)
 8003cf2:	f011 fca7 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	885a      	ldrh	r2, [r3, #2]
 8003cfc:	3a01      	subs	r2, #1
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	805a      	strh	r2, [r3, #2]
 8003d02:	885b      	ldrh	r3, [r3, #2]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <mrbc_decref+0x88>)
 8003d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
 8003d1a:	e002      	b.n	8003d22 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8003d1c:	bf00      	nop
 8003d1e:	e000      	b.n	8003d22 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8003d20:	bf00      	nop
}
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	08018b2c 	.word	0x08018b2c
 8003d2c:	0801aab8 	.word	0x0801aab8
 8003d30:	08018b44 	.word	0x08018b44
 8003d34:	08018b7c 	.word	0x08018b7c
 8003d38:	0801be98 	.word	0x0801be98

08003d3c <mrbc_string_new_cstr>:
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <mrbc_string_new_cstr+0x1c>
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fc fa50 	bl	80001f4 <strlen>
 8003d54:	4603      	mov	r3, r0
 8003d56:	e000      	b.n	8003d5a <mrbc_string_new_cstr+0x1e>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	f003 fa24 	bl	80071ac <mrbc_string_new>
}
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <mrbc_string_append_cstr>:
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 8003d76:	6838      	ldr	r0, [r7, #0]
 8003d78:	f7fc fa3c 	bl	80001f4 <strlen>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6839      	ldr	r1, [r7, #0]
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f003 fbaa 	bl	80074dc <mrbc_string_append_cbuf>
 8003d88:	4603      	mov	r3, r0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <mrbc_hash_size>:

/***** Inline functions *****************************************************/
//================================================================
/*! get size
*/
static inline int mrbc_hash_size(const mrbc_value *hash) {
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  return hash->hash->n_stored / 2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	88db      	ldrh	r3, [r3, #6]
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	b29b      	uxth	r3, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <mrbc_hash_iterator_new>:

//================================================================
/*! iterator constructor
*/
static inline mrbc_hash_iterator mrbc_hash_iterator_new( const mrbc_value *v )
{
 8003db0:	b490      	push	{r4, r7}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  mrbc_hash_iterator ite;
  ite.target = v->hash;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60fb      	str	r3, [r7, #12]
  ite.point = v->hash->data;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	613b      	str	r3, [r7, #16]
  ite.p_end = ite.point + v->hash->n_stored;
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	88db      	ldrh	r3, [r3, #6]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	4413      	add	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  return ite;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	461c      	mov	r4, r3
 8003dda:	f107 030c 	add.w	r3, r7, #12
 8003dde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003de2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc90      	pop	{r4, r7}
 8003dee:	4770      	bx	lr

08003df0 <mrbc_hash_i_has_next>:

//================================================================
/*! iterator has_next?
*/
static inline int mrbc_hash_i_has_next( mrbc_hash_iterator *ite )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return ite->point < ite->p_end;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	bf34      	ite	cc
 8003e04:	2301      	movcc	r3, #1
 8003e06:	2300      	movcs	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <mrbc_hash_i_next>:

//================================================================
/*! iterator getter
*/
static inline mrbc_value *mrbc_hash_i_next( mrbc_hash_iterator *ite )
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  mrbc_value *ret = ite->point;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	60fb      	str	r3, [r7, #12]
  ite->point += 2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f103 0220 	add.w	r2, r3, #32
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	605a      	str	r2, [r3, #4]
  return ret;
 8003e30:	68fb      	ldr	r3, [r7, #12]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <mrbc_hash_new>:
  @param  vm	pointer to VM.
  @param  size	initial size
  @return 	hash object
*/
mrbc_value mrbc_hash_new(struct VM *vm, int size)
{
 8003e3e:	b590      	push	{r4, r7, lr}
 8003e40:	b08b      	sub	sp, #44	; 0x2c
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  mrbc_value value = {.tt = MRBC_TT_HASH};
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	60da      	str	r2, [r3, #12]
 8003e58:	230d      	movs	r3, #13
 8003e5a:	743b      	strb	r3, [r7, #16]

  /*
    Allocate handle and data buffer.
  */
  mrbc_hash *h = mrbc_alloc(vm, sizeof(mrbc_hash));
 8003e5c:	200c      	movs	r0, #12
 8003e5e:	f7fd fe33 	bl	8001ac8 <mrbc_raw_alloc>
 8003e62:	6278      	str	r0, [r7, #36]	; 0x24
  if( !h ) return value;	// ENOMEM
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <mrbc_hash_new+0x3c>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	461c      	mov	r4, r3
 8003e6e:	f107 0310 	add.w	r3, r7, #16
 8003e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003e78:	e031      	b.n	8003ede <mrbc_hash_new+0xa0>

  mrbc_value *data = mrbc_alloc(vm, sizeof(mrbc_value) * size * 2);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	015b      	lsls	r3, r3, #5
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd fe22 	bl	8001ac8 <mrbc_raw_alloc>
 8003e84:	6238      	str	r0, [r7, #32]
  if( !data ) {			// ENOMEM
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <mrbc_hash_new+0x64>
    mrbc_raw_free( h );
 8003e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e8e:	f7fd fff7 	bl	8001e80 <mrbc_raw_free>
    return value;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	461c      	mov	r4, r3
 8003e96:	f107 0310 	add.w	r3, r7, #16
 8003e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003ea0:	e01d      	b.n	8003ede <mrbc_hash_new+0xa0>
  }

  MRBC_INIT_OBJECT_HEADER( h, "HA" );
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	805a      	strh	r2, [r3, #2]
 8003ea8:	2248      	movs	r2, #72	; 0x48
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	2241      	movs	r2, #65	; 0x41
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	705a      	strb	r2, [r3, #1]
  h->data_size = size * 2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	809a      	strh	r2, [r3, #4]
  h->n_stored = 0;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	80da      	strh	r2, [r3, #6]
  h->data = data;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	609a      	str	r2, [r3, #8]

  value.hash = h;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	61bb      	str	r3, [r7, #24]
  return value;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	461c      	mov	r4, r3
 8003ed4:	f107 0310 	add.w	r3, r7, #16
 8003ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	372c      	adds	r7, #44	; 0x2c
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd90      	pop	{r4, r7, pc}

08003ee6 <mrbc_hash_delete>:
/*! destructor

  @param  hash	pointer to target value
*/
void mrbc_hash_delete(mrbc_value *hash)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  // TODO: delete other members (for search).

  mrbc_array_delete(hash);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe fa83 	bl	80023fa <mrbc_array_delete>
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <mrbc_hash_search>:
  @param  hash	pointer to target hash
  @param  key	pointer to key value
  @return	pointer to found key or NULL(not found).
*/
mrbc_value * mrbc_hash_search(const mrbc_value *hash, const mrbc_value *key)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  mrbc_value *p1 = hash->hash->data;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	60fb      	str	r3, [r7, #12]
  const mrbc_value *p2 = p1 + hash->hash->n_stored;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	88db      	ldrh	r3, [r3, #6]
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]

  while( p1 < p2 ) {
 8003f1c:	e00b      	b.n	8003f36 <mrbc_hash_search+0x3a>
    if( mrbc_compare(p1, key) == 0 ) return p1;
 8003f1e:	6839      	ldr	r1, [r7, #0]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f00a f90d 	bl	800e140 <mrbc_compare>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <mrbc_hash_search+0x34>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	e007      	b.n	8003f40 <mrbc_hash_search+0x44>
    p1 += 2;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3320      	adds	r3, #32
 8003f34:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3ef      	bcc.n	8003f1e <mrbc_hash_search+0x22>
  }

  return NULL;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <mrbc_hash_search_by_id>:
  @param  sym_id	symbol ID
  @return		pointer to found key or NULL(not found).
  @note			for use with OP_KEY_P.
*/
mrbc_value * mrbc_hash_search_by_id(const mrbc_value *hash, mrbc_sym sym_id)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
  mrbc_value *p1 = hash->hash->data;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60fb      	str	r3, [r7, #12]
  const mrbc_value *p2 = p1 + hash->hash->n_stored;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	88db      	ldrh	r3, [r3, #6]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	60bb      	str	r3, [r7, #8]

  while( p1 < p2 ) {
 8003f6a:	e00f      	b.n	8003f8c <mrbc_hash_search_by_id+0x44>
    if( mrbc_type(*p1) == MRBC_TT_SYMBOL &&
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f993 3000 	ldrsb.w	r3, [r3]
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d107      	bne.n	8003f86 <mrbc_hash_search_by_id+0x3e>
	mrbc_symbol(*p1) == sym_id ) return p1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    if( mrbc_type(*p1) == MRBC_TT_SYMBOL &&
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d101      	bne.n	8003f86 <mrbc_hash_search_by_id+0x3e>
	mrbc_symbol(*p1) == sym_id ) return p1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	e007      	b.n	8003f96 <mrbc_hash_search_by_id+0x4e>
    p1 += 2;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3320      	adds	r3, #32
 8003f8a:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d3eb      	bcc.n	8003f6c <mrbc_hash_search_by_id+0x24>
  }

  return NULL;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <mrbc_hash_set>:
  @param  key	pointer to key value
  @param  val	pointer to value
  @return	mrbc_error_code
*/
int mrbc_hash_set(mrbc_value *hash, mrbc_value *key, mrbc_value *val)
{
 8003fa2:	b590      	push	{r4, r7, lr}
 8003fa4:	b087      	sub	sp, #28
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
  mrbc_value *v = mrbc_hash_search(hash, key);
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff ffa3 	bl	8003efc <mrbc_hash_search>
 8003fb6:	6138      	str	r0, [r7, #16]
  int ret = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
  if( v == NULL ) {
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10d      	bne.n	8003fde <mrbc_hash_set+0x3c>
    // set a new value
    if( (ret = mrbc_array_push(hash, key)) != 0 ) goto RETURN;
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7fe faf6 	bl	80025b6 <mrbc_array_push>
 8003fca:	6178      	str	r0, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11b      	bne.n	800400a <mrbc_hash_set+0x68>
    ret = mrbc_array_push(hash, val);
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f7fe faee 	bl	80025b6 <mrbc_array_push>
 8003fda:	6178      	str	r0, [r7, #20]
 8003fdc:	e016      	b.n	800400c <mrbc_hash_set+0x6a>

  } else {
    // replace a value
    mrbc_decref(v);
 8003fde:	6938      	ldr	r0, [r7, #16]
 8003fe0:	f7ff fe66 	bl	8003cb0 <mrbc_decref>
    *v = *key;
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4614      	mov	r4, r2
 8003fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_decref(++v);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	3310      	adds	r3, #16
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	6938      	ldr	r0, [r7, #16]
 8003ff8:	f7ff fe5a 	bl	8003cb0 <mrbc_decref>
    *v = *val;
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4614      	mov	r4, r2
 8004002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004008:	e000      	b.n	800400c <mrbc_hash_set+0x6a>
    if( (ret = mrbc_array_push(hash, key)) != 0 ) goto RETURN;
 800400a:	bf00      	nop
  }

 RETURN:
  return ret;
 800400c:	697b      	ldr	r3, [r7, #20]
}
 800400e:	4618      	mov	r0, r3
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	bd90      	pop	{r4, r7, pc}

08004016 <mrbc_hash_get>:
  @param  hash	pointer to target hash
  @param  key	pointer to key value
  @return	mrbc_value data at key position or Nil.
*/
mrbc_value mrbc_hash_get(const mrbc_value *hash, const mrbc_value *key)
{
 8004016:	b590      	push	{r4, r7, lr}
 8004018:	b08b      	sub	sp, #44	; 0x2c
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
  mrbc_value *v = mrbc_hash_search(hash, key);
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	68b8      	ldr	r0, [r7, #8]
 8004026:	f7ff ff69 	bl	8003efc <mrbc_hash_search>
 800402a:	6278      	str	r0, [r7, #36]	; 0x24
  return v ? *++v : mrbc_nil_value();
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <mrbc_hash_get+0x30>
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	3310      	adds	r3, #16
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	4614      	mov	r4, r2
 800403e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004044:	e009      	b.n	800405a <mrbc_hash_get+0x44>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	461a      	mov	r2, r3
 800404a:	2300      	movs	r3, #0
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	6053      	str	r3, [r2, #4]
 8004050:	6093      	str	r3, [r2, #8]
 8004052:	60d3      	str	r3, [r2, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
}
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	372c      	adds	r7, #44	; 0x2c
 800405e:	46bd      	mov	sp, r7
 8004060:	bd90      	pop	{r4, r7, pc}

08004062 <mrbc_hash_remove>:
  @param  hash	pointer to target hash
  @param  key	pointer to key value
  @return	removed data or Nil
*/
mrbc_value mrbc_hash_remove(mrbc_value *hash, const mrbc_value *key)
{
 8004062:	b590      	push	{r4, r7, lr}
 8004064:	b08f      	sub	sp, #60	; 0x3c
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
  mrbc_value *v = mrbc_hash_search(hash, key);
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	68b8      	ldr	r0, [r7, #8]
 8004072:	f7ff ff43 	bl	8003efc <mrbc_hash_search>
 8004076:	6378      	str	r0, [r7, #52]	; 0x34
  if( v == NULL ) return mrbc_nil_value();
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <mrbc_hash_remove+0x32>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	461a      	mov	r2, r3
 8004082:	2300      	movs	r3, #0
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	6053      	str	r3, [r2, #4]
 8004088:	6093      	str	r3, [r2, #8]
 800408a:	60d3      	str	r3, [r2, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
  memmove(v, v+2, (char*)(h->data + h->n_stored) - (char*)v);

  // TODO: re-index hash table if need.

  return val;
}
 8004092:	e028      	b.n	80040e6 <mrbc_hash_remove+0x84>
  mrbc_decref(v);		// key
 8004094:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004096:	f7ff fe0b 	bl	8003cb0 <mrbc_decref>
  mrbc_value val = v[1];	// value
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409c:	f107 0420 	add.w	r4, r7, #32
 80040a0:	3310      	adds	r3, #16
 80040a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_hash *h = hash->hash;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	633b      	str	r3, [r7, #48]	; 0x30
  h->n_stored -= 2;
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	88db      	ldrh	r3, [r3, #6]
 80040b2:	3b02      	subs	r3, #2
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	80da      	strh	r2, [r3, #6]
  memmove(v, v+2, (char*)(h->data + h->n_stored) - (char*)v);
 80040ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040bc:	f103 0120 	add.w	r1, r3, #32
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	88db      	ldrh	r3, [r3, #6]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	441a      	add	r2, r3
 80040cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040d4:	f012 fadb 	bl	801668e <memmove>
  return val;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	461c      	mov	r4, r3
 80040dc:	f107 0320 	add.w	r3, r7, #32
 80040e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	373c      	adds	r7, #60	; 0x3c
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}

080040ee <mrbc_hash_remove_by_id>:
  @return  		removed data.
  @return 		TT_EMPTY, if not found.
  @note			for use with OP_KARG.
*/
mrbc_value mrbc_hash_remove_by_id(mrbc_value *hash, mrbc_sym sym_id)
{
 80040ee:	b590      	push	{r4, r7, lr}
 80040f0:	b08f      	sub	sp, #60	; 0x3c
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	4613      	mov	r3, r2
 80040fa:	80fb      	strh	r3, [r7, #6]
  mrbc_value *v = mrbc_hash_search_by_id(hash, sym_id);
 80040fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004100:	4619      	mov	r1, r3
 8004102:	68b8      	ldr	r0, [r7, #8]
 8004104:	f7ff ff20 	bl	8003f48 <mrbc_hash_search_by_id>
 8004108:	6378      	str	r0, [r7, #52]	; 0x34
  if( !v ) return (mrbc_value){.tt = MRBC_TT_EMPTY};
 800410a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <mrbc_hash_remove_by_id+0x32>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	461a      	mov	r2, r3
 8004114:	2300      	movs	r3, #0
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	6053      	str	r3, [r2, #4]
 800411a:	6093      	str	r3, [r2, #8]
 800411c:	60d3      	str	r3, [r2, #12]
  memmove(v, v+2, (char*)(h->data + h->n_stored) - (char*)v);

  // TODO: re-index hash table if need.

  return val;
}
 800411e:	e025      	b.n	800416c <mrbc_hash_remove_by_id+0x7e>
  mrbc_value val = v[1];	// value
 8004120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004122:	f107 0420 	add.w	r4, r7, #32
 8004126:	3310      	adds	r3, #16
 8004128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800412a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_hash *h = hash->hash;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
  h->n_stored -= 2;
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	88db      	ldrh	r3, [r3, #6]
 8004138:	3b02      	subs	r3, #2
 800413a:	b29a      	uxth	r2, r3
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	80da      	strh	r2, [r3, #6]
  memmove(v, v+2, (char*)(h->data + h->n_stored) - (char*)v);
 8004140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004142:	f103 0120 	add.w	r1, r3, #32
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	88db      	ldrh	r3, [r3, #6]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	441a      	add	r2, r3
 8004152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	461a      	mov	r2, r3
 8004158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800415a:	f012 fa98 	bl	801668e <memmove>
  return val;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	461c      	mov	r4, r3
 8004162:	f107 0320 	add.w	r3, r7, #32
 8004166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	373c      	adds	r7, #60	; 0x3c
 8004170:	46bd      	mov	sp, r7
 8004172:	bd90      	pop	{r4, r7, pc}

08004174 <mrbc_hash_clear>:
/*! clear all

  @param  hash	pointer to target hash
*/
void mrbc_hash_clear(mrbc_value *hash)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  mrbc_array_clear(hash);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fe fbe5 	bl	800294c <mrbc_array_clear>

  // TODO: re-index hash table if need.
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <mrbc_hash_compare>:
  @param  v2	Pointer to another mrbc_value
  @retval 0	v1 == v2
  @retval 1	v1 != v2
*/
int mrbc_hash_compare(const mrbc_value *v1, const mrbc_value *v2)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  if( v1->hash->n_stored != v2->hash->n_stored ) return 1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	88da      	ldrh	r2, [r3, #6]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	88db      	ldrh	r3, [r3, #6]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <mrbc_hash_compare+0x1e>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e02d      	b.n	8004204 <mrbc_hash_compare+0x7a>

  mrbc_value *d1 = v1->hash->data;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	617b      	str	r3, [r7, #20]
  int i;
  for( i = 0; i < mrbc_hash_size(v1); i++, d1++ ) {
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	e01e      	b.n	80041f4 <mrbc_hash_compare+0x6a>
    mrbc_value *d2 = mrbc_hash_search(v2, d1);	// check key
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	6838      	ldr	r0, [r7, #0]
 80041ba:	f7ff fe9f 	bl	8003efc <mrbc_hash_search>
 80041be:	60f8      	str	r0, [r7, #12]
    if( d2 == NULL ) return 1;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <mrbc_hash_compare+0x40>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e01c      	b.n	8004204 <mrbc_hash_compare+0x7a>
    if( mrbc_compare( ++d1, ++d2 ) ) return 1;	// check data
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	3310      	adds	r3, #16
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3310      	adds	r3, #16
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68f9      	ldr	r1, [r7, #12]
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f009 ffb1 	bl	800e140 <mrbc_compare>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <mrbc_hash_compare+0x5e>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e00d      	b.n	8004204 <mrbc_hash_compare+0x7a>
  for( i = 0; i < mrbc_hash_size(v1); i++, d1++ ) {
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3301      	adds	r3, #1
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	3310      	adds	r3, #16
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fdcc 	bl	8003d92 <mrbc_hash_size>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4293      	cmp	r3, r2
 8004200:	dbd9      	blt.n	80041b6 <mrbc_hash_compare+0x2c>
  }

  return 0;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <mrbc_hash_dup>:

  @param  vm	pointer to VM.
  @param  src	pointer to target hash.
*/
mrbc_value mrbc_hash_dup( struct VM *vm, mrbc_value *src )
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b08d      	sub	sp, #52	; 0x34
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_hash_new(vm, mrbc_hash_size(src));
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fdba 	bl	8003d92 <mrbc_hash_size>
 800421e:	4602      	mov	r2, r0
 8004220:	f107 0310 	add.w	r3, r7, #16
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fe09 	bl	8003e3e <mrbc_hash_new>
  if( ret.hash == NULL ) return ret;		// ENOMEM
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <mrbc_hash_dup+0x36>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	461c      	mov	r4, r3
 8004236:	f107 0310 	add.w	r3, r7, #16
 800423a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800423c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004240:	e02c      	b.n	800429c <mrbc_hash_dup+0x90>

  mrbc_hash *h = src->hash;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
  memcpy( ret.hash->data, h->data, sizeof(mrbc_value) * h->n_stored );
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	6898      	ldr	r0, [r3, #8]
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	6899      	ldr	r1, [r3, #8]
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	88db      	ldrh	r3, [r3, #6]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	461a      	mov	r2, r3
 8004258:	f012 facd 	bl	80167f6 <memcpy>
  ret.hash->n_stored = h->n_stored;
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004260:	88d2      	ldrh	r2, [r2, #6]
 8004262:	80da      	strh	r2, [r3, #6]

  mrbc_value *p1 = h->data;
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
  const mrbc_value *p2 = p1 + h->n_stored;
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	88db      	ldrh	r3, [r3, #6]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004272:	4413      	add	r3, r2
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
  while( p1 < p2 ) {
 8004276:	e006      	b.n	8004286 <mrbc_hash_dup+0x7a>
    mrbc_incref(p1++);
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	f103 0210 	add.w	r2, r3, #16
 800427e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fce1 	bl	8003c48 <mrbc_incref>
  while( p1 < p2 ) {
 8004286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	429a      	cmp	r2, r3
 800428c:	d3f4      	bcc.n	8004278 <mrbc_hash_dup+0x6c>
  }

  // TODO: dup other members.

  return ret;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	461c      	mov	r4, r3
 8004292:	f107 0310 	add.w	r3, r7, #16
 8004296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	3734      	adds	r7, #52	; 0x34
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}

080042a4 <c_hash_new>:

//================================================================
/*! (method) new
*/
static void c_hash_new(struct VM *vm, mrbc_value v[], int argc)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b08d      	sub	sp, #52	; 0x34
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_hash_new(vm, 0);
 80042b0:	f107 0320 	add.w	r3, r7, #32
 80042b4:	2200      	movs	r2, #0
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fdc0 	bl	8003e3e <mrbc_hash_new>
  SET_RETURN(ret);
 80042be:	f107 0410 	add.w	r4, r7, #16
 80042c2:	f107 0320 	add.w	r3, r7, #32
 80042c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80042cc:	68b8      	ldr	r0, [r7, #8]
 80042ce:	f7ff fcef 	bl	8003cb0 <mrbc_decref>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	461c      	mov	r4, r3
 80042d6:	f107 0310 	add.w	r3, r7, #16
 80042da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80042e0:	bf00      	nop
 80042e2:	3734      	adds	r7, #52	; 0x34
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd90      	pop	{r4, r7, pc}

080042e8 <c_hash_get>:

//================================================================
/*! (operator) []
*/
static void c_hash_get(struct VM *vm, mrbc_value v[], int argc)
{
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b08d      	sub	sp, #52	; 0x34
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  if( argc != 1 ) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d005      	beq.n	8004306 <c_hash_get+0x1e>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "wrong number of arguments.");
 80042fa:	4a14      	ldr	r2, [pc, #80]	; (800434c <c_hash_get+0x64>)
 80042fc:	4914      	ldr	r1, [pc, #80]	; (8004350 <c_hash_get+0x68>)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f007 f892 	bl	800b428 <mrbc_raise>
 8004304:	e01e      	b.n	8004344 <c_hash_get+0x5c>
    return;
  }

  mrbc_value val = mrbc_hash_get(&v[0], &v[1]);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f103 0210 	add.w	r2, r3, #16
 800430c:	f107 0320 	add.w	r3, r7, #32
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fe7f 	bl	8004016 <mrbc_hash_get>
  mrbc_incref(&val);
 8004318:	f107 0320 	add.w	r3, r7, #32
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fc93 	bl	8003c48 <mrbc_incref>
  SET_RETURN(val);
 8004322:	f107 0410 	add.w	r4, r7, #16
 8004326:	f107 0320 	add.w	r3, r7, #32
 800432a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800432c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004330:	68b8      	ldr	r0, [r7, #8]
 8004332:	f7ff fcbd 	bl	8003cb0 <mrbc_decref>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	461c      	mov	r4, r3
 800433a:	f107 0310 	add.w	r3, r7, #16
 800433e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004344:	3734      	adds	r7, #52	; 0x34
 8004346:	46bd      	mov	sp, r7
 8004348:	bd90      	pop	{r4, r7, pc}
 800434a:	bf00      	nop
 800434c:	08018b98 	.word	0x08018b98
 8004350:	20000154 	.word	0x20000154

08004354 <c_hash_set>:

//================================================================
/*! (operator) []=
*/
static void c_hash_set(struct VM *vm, mrbc_value v[], int argc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  if( argc != 2 ) {
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d005      	beq.n	8004372 <c_hash_set+0x1e>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "wrong number of arguments.");
 8004366:	4a0d      	ldr	r2, [pc, #52]	; (800439c <c_hash_set+0x48>)
 8004368:	490d      	ldr	r1, [pc, #52]	; (80043a0 <c_hash_set+0x4c>)
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f007 f85c 	bl	800b428 <mrbc_raise>
    return;
 8004370:	e010      	b.n	8004394 <c_hash_set+0x40>
  }

  mrbc_value *v1 = &v[1];
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3310      	adds	r3, #16
 8004376:	617b      	str	r3, [r7, #20]
  mrbc_value *v2 = &v[2];
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	3320      	adds	r3, #32
 800437c:	613b      	str	r3, [r7, #16]
  mrbc_hash_set(v, v1, v2);
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	6979      	ldr	r1, [r7, #20]
 8004382:	68b8      	ldr	r0, [r7, #8]
 8004384:	f7ff fe0d 	bl	8003fa2 <mrbc_hash_set>
  v1->tt = MRBC_TT_EMPTY;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
  v2->tt = MRBC_TT_EMPTY;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
}
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	08018b98 	.word	0x08018b98
 80043a0:	20000154 	.word	0x20000154

080043a4 <c_hash_clear>:

//================================================================
/*! (method) clear
*/
static void c_hash_clear(struct VM *vm, mrbc_value v[], int argc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  mrbc_hash_clear(v);
 80043b0:	68b8      	ldr	r0, [r7, #8]
 80043b2:	f7ff fedf 	bl	8004174 <mrbc_hash_clear>
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <c_hash_dup>:

//================================================================
/*! (method) dup
*/
static void c_hash_dup(struct VM *vm, mrbc_value v[], int argc)
{
 80043be:	b590      	push	{r4, r7, lr}
 80043c0:	b08d      	sub	sp, #52	; 0x34
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_hash_dup( vm, &v[0] );
 80043ca:	f107 0320 	add.w	r3, r7, #32
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	68f9      	ldr	r1, [r7, #12]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff ff1a 	bl	800420c <mrbc_hash_dup>

  SET_RETURN(ret);
 80043d8:	f107 0410 	add.w	r4, r7, #16
 80043dc:	f107 0320 	add.w	r3, r7, #32
 80043e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80043e6:	68b8      	ldr	r0, [r7, #8]
 80043e8:	f7ff fc62 	bl	8003cb0 <mrbc_decref>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	461c      	mov	r4, r3
 80043f0:	f107 0310 	add.w	r3, r7, #16
 80043f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80043fa:	bf00      	nop
 80043fc:	3734      	adds	r7, #52	; 0x34
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd90      	pop	{r4, r7, pc}

08004402 <c_hash_delete>:

//================================================================
/*! (method) delete
*/
static void c_hash_delete(struct VM *vm, mrbc_value v[], int argc)
{
 8004402:	b590      	push	{r4, r7, lr}
 8004404:	b08d      	sub	sp, #52	; 0x34
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
  // TODO : now, support only delete(key) -> object

  mrbc_value ret = mrbc_hash_remove(v, v+1);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f103 0210 	add.w	r2, r3, #16
 8004414:	f107 0320 	add.w	r3, r7, #32
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fe21 	bl	8004062 <mrbc_hash_remove>

  // TODO: re-index hash table if need.

  SET_RETURN(ret);
 8004420:	f107 0410 	add.w	r4, r7, #16
 8004424:	f107 0320 	add.w	r3, r7, #32
 8004428:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800442a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f7ff fc3e 	bl	8003cb0 <mrbc_decref>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	461c      	mov	r4, r3
 8004438:	f107 0310 	add.w	r3, r7, #16
 800443c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800443e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004442:	bf00      	nop
 8004444:	3734      	adds	r7, #52	; 0x34
 8004446:	46bd      	mov	sp, r7
 8004448:	bd90      	pop	{r4, r7, pc}

0800444a <c_hash_empty>:

//================================================================
/*! (method) empty?
*/
static void c_hash_empty(struct VM *vm, mrbc_value v[], int argc)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  int n = mrbc_hash_size(v);
 8004456:	68b8      	ldr	r0, [r7, #8]
 8004458:	f7ff fc9b 	bl	8003d92 <mrbc_hash_size>
 800445c:	6178      	str	r0, [r7, #20]

  if( n ) {
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d006      	beq.n	8004472 <c_hash_empty+0x28>
    SET_FALSE_RETURN();
 8004464:	68b8      	ldr	r0, [r7, #8]
 8004466:	f7ff fc23 	bl	8003cb0 <mrbc_decref>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2202      	movs	r2, #2
 800446e:	701a      	strb	r2, [r3, #0]
  } else {
    SET_TRUE_RETURN();
  }
}
 8004470:	e005      	b.n	800447e <c_hash_empty+0x34>
    SET_TRUE_RETURN();
 8004472:	68b8      	ldr	r0, [r7, #8]
 8004474:	f7ff fc1c 	bl	8003cb0 <mrbc_decref>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2203      	movs	r2, #3
 800447c:	701a      	strb	r2, [r3, #0]
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <c_hash_has_key>:

//================================================================
/*! (method) has_key?
*/
static void c_hash_has_key(struct VM *vm, mrbc_value v[], int argc)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  mrbc_value *res = mrbc_hash_search(v, v+1);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3310      	adds	r3, #16
 8004496:	4619      	mov	r1, r3
 8004498:	68b8      	ldr	r0, [r7, #8]
 800449a:	f7ff fd2f 	bl	8003efc <mrbc_hash_search>
 800449e:	6178      	str	r0, [r7, #20]

  if( res ) {
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d006      	beq.n	80044b4 <c_hash_has_key+0x2e>
    SET_TRUE_RETURN();
 80044a6:	68b8      	ldr	r0, [r7, #8]
 80044a8:	f7ff fc02 	bl	8003cb0 <mrbc_decref>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2203      	movs	r2, #3
 80044b0:	701a      	strb	r2, [r3, #0]
  } else {
    SET_FALSE_RETURN();
  }
}
 80044b2:	e005      	b.n	80044c0 <c_hash_has_key+0x3a>
    SET_FALSE_RETURN();
 80044b4:	68b8      	ldr	r0, [r7, #8]
 80044b6:	f7ff fbfb 	bl	8003cb0 <mrbc_decref>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2202      	movs	r2, #2
 80044be:	701a      	strb	r2, [r3, #0]
}
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <c_hash_has_value>:

//================================================================
/*! (method) has_value?
*/
static void c_hash_has_value(struct VM *vm, mrbc_value v[], int argc)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&v[0]);
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fc66 	bl	8003db0 <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 80044e4:	e013      	b.n	800450e <c_hash_has_value+0x46>
    mrbc_value *val = mrbc_hash_i_next(&ite) + 1;	// skip key, get value
 80044e6:	f107 0314 	add.w	r3, r7, #20
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fc93 	bl	8003e16 <mrbc_hash_i_next>
 80044f0:	4603      	mov	r3, r0
 80044f2:	3310      	adds	r3, #16
 80044f4:	623b      	str	r3, [r7, #32]
    if( mrbc_compare(val, &v[1]) == 0 ) {
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3310      	adds	r3, #16
 80044fa:	4619      	mov	r1, r3
 80044fc:	6a38      	ldr	r0, [r7, #32]
 80044fe:	f009 fe1f 	bl	800e140 <mrbc_compare>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <c_hash_has_value+0x46>
      ret = 1;
 8004508:	2301      	movs	r3, #1
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800450c:	e007      	b.n	800451e <c_hash_has_value+0x56>
  while( mrbc_hash_i_has_next(&ite) ) {
 800450e:	f107 0314 	add.w	r3, r7, #20
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fc6c 	bl	8003df0 <mrbc_hash_i_has_next>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e3      	bne.n	80044e6 <c_hash_has_value+0x1e>
    }
  }

  if( ret ) {
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d006      	beq.n	8004532 <c_hash_has_value+0x6a>
    SET_TRUE_RETURN();
 8004524:	68b8      	ldr	r0, [r7, #8]
 8004526:	f7ff fbc3 	bl	8003cb0 <mrbc_decref>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2203      	movs	r2, #3
 800452e:	701a      	strb	r2, [r3, #0]
  } else {
    SET_FALSE_RETURN();
  }
}
 8004530:	e005      	b.n	800453e <c_hash_has_value+0x76>
    SET_FALSE_RETURN();
 8004532:	68b8      	ldr	r0, [r7, #8]
 8004534:	f7ff fbbc 	bl	8003cb0 <mrbc_decref>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2202      	movs	r2, #2
 800453c:	701a      	strb	r2, [r3, #0]
}
 800453e:	bf00      	nop
 8004540:	3728      	adds	r7, #40	; 0x28
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <c_hash_key>:

//================================================================
/*! (method) key
*/
static void c_hash_key(struct VM *vm, mrbc_value v[], int argc)
{
 8004546:	b590      	push	{r4, r7, lr}
 8004548:	b08f      	sub	sp, #60	; 0x3c
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
  mrbc_value *ret = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&v[0]);
 8004556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fc27 	bl	8003db0 <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 8004562:	e017      	b.n	8004594 <c_hash_key+0x4e>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 8004564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fc54 	bl	8003e16 <mrbc_hash_i_next>
 800456e:	6338      	str	r0, [r7, #48]	; 0x30
    if( mrbc_compare( &kv[1], &v[1]) == 0 ) {
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	f103 0210 	add.w	r2, r3, #16
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3310      	adds	r3, #16
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f009 fddf 	bl	800e140 <mrbc_compare>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <c_hash_key+0x4e>
      mrbc_incref( &kv[0] );
 8004588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800458a:	f7ff fb5d 	bl	8003c48 <mrbc_incref>
      ret = &kv[0];
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8004592:	e007      	b.n	80045a4 <c_hash_key+0x5e>
  while( mrbc_hash_i_has_next(&ite) ) {
 8004594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fc29 	bl	8003df0 <mrbc_hash_i_has_next>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1df      	bne.n	8004564 <c_hash_key+0x1e>
    }
  }

  if( ret ) {
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d010      	beq.n	80045cc <c_hash_key+0x86>
    SET_RETURN(*ret);
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ac:	f107 0410 	add.w	r4, r7, #16
 80045b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80045b6:	68b8      	ldr	r0, [r7, #8]
 80045b8:	f7ff fb7a 	bl	8003cb0 <mrbc_decref>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	461c      	mov	r4, r3
 80045c0:	f107 0310 	add.w	r3, r7, #16
 80045c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  } else {
    SET_NIL_RETURN();
  }
}
 80045ca:	e005      	b.n	80045d8 <c_hash_key+0x92>
    SET_NIL_RETURN();
 80045cc:	68b8      	ldr	r0, [r7, #8]
 80045ce:	f7ff fb6f 	bl	8003cb0 <mrbc_decref>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
}
 80045d8:	bf00      	nop
 80045da:	373c      	adds	r7, #60	; 0x3c
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd90      	pop	{r4, r7, pc}

080045e0 <c_hash_keys>:

//================================================================
/*! (method) keys
*/
static void c_hash_keys(struct VM *vm, mrbc_value v[], int argc)
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b093      	sub	sp, #76	; 0x4c
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new( vm, mrbc_hash_size(v) );
 80045ec:	68b8      	ldr	r0, [r7, #8]
 80045ee:	f7ff fbd0 	bl	8003d92 <mrbc_hash_size>
 80045f2:	4602      	mov	r2, r0
 80045f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045f8:	68f9      	ldr	r1, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd feab 	bl	8002356 <mrbc_array_new>
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(v);
 8004600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fbd2 	bl	8003db0 <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 800460c:	e00e      	b.n	800462c <c_hash_keys+0x4c>
    mrbc_value *key = mrbc_hash_i_next(&ite);
 800460e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fbff 	bl	8003e16 <mrbc_hash_i_next>
 8004618:	6478      	str	r0, [r7, #68]	; 0x44
    mrbc_array_push(&ret, key);
 800461a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800461e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004620:	4618      	mov	r0, r3
 8004622:	f7fd ffc8 	bl	80025b6 <mrbc_array_push>
    mrbc_incref(key);
 8004626:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004628:	f7ff fb0e 	bl	8003c48 <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 800462c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fbdd 	bl	8003df0 <mrbc_hash_i_has_next>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e8      	bne.n	800460e <c_hash_keys+0x2e>
  }

  SET_RETURN(ret);
 800463c:	f107 0410 	add.w	r4, r7, #16
 8004640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800464a:	68b8      	ldr	r0, [r7, #8]
 800464c:	f7ff fb30 	bl	8003cb0 <mrbc_decref>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	461c      	mov	r4, r3
 8004654:	f107 0310 	add.w	r3, r7, #16
 8004658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800465a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800465e:	bf00      	nop
 8004660:	374c      	adds	r7, #76	; 0x4c
 8004662:	46bd      	mov	sp, r7
 8004664:	bd90      	pop	{r4, r7, pc}

08004666 <c_hash_size>:

//================================================================
/*! (method) size,length,count
*/
static void c_hash_size(struct VM *vm, mrbc_value v[], int argc)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
  int n = mrbc_hash_size(v);
 8004672:	68b8      	ldr	r0, [r7, #8]
 8004674:	f7ff fb8d 	bl	8003d92 <mrbc_hash_size>
 8004678:	6178      	str	r0, [r7, #20]

  SET_INT_RETURN(n);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	68b8      	ldr	r0, [r7, #8]
 8004680:	f7ff fb16 	bl	8003cb0 <mrbc_decref>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2204      	movs	r2, #4
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <c_hash_merge>:

//================================================================
/*! (method) merge
*/
static void c_hash_merge(struct VM *vm, mrbc_value v[], int argc)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b093      	sub	sp, #76	; 0x4c
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_hash_dup( vm, &v[0] );
 80046a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fdad 	bl	800420c <mrbc_hash_dup>
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&v[1]);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f103 0210 	add.w	r2, r3, #16
 80046b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fb76 	bl	8003db0 <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 80046c4:	e016      	b.n	80046f4 <c_hash_merge+0x5c>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 80046c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fba3 	bl	8003e16 <mrbc_hash_i_next>
 80046d0:	6478      	str	r0, [r7, #68]	; 0x44
    mrbc_hash_set( &ret, &kv[0], &kv[1] );
 80046d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d4:	f103 0210 	add.w	r2, r3, #16
 80046d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fc5f 	bl	8003fa2 <mrbc_hash_set>
    mrbc_incref( &kv[0] );
 80046e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80046e6:	f7ff faaf 	bl	8003c48 <mrbc_incref>
    mrbc_incref( &kv[1] );
 80046ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ec:	3310      	adds	r3, #16
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff faaa 	bl	8003c48 <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 80046f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fb79 	bl	8003df0 <mrbc_hash_i_has_next>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e0      	bne.n	80046c6 <c_hash_merge+0x2e>
  }

  SET_RETURN(ret);
 8004704:	f107 0410 	add.w	r4, r7, #16
 8004708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800470c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800470e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004712:	68b8      	ldr	r0, [r7, #8]
 8004714:	f7ff facc 	bl	8003cb0 <mrbc_decref>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	461c      	mov	r4, r3
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004726:	bf00      	nop
 8004728:	374c      	adds	r7, #76	; 0x4c
 800472a:	46bd      	mov	sp, r7
 800472c:	bd90      	pop	{r4, r7, pc}

0800472e <c_hash_merge_self>:

//================================================================
/*! (method) merge!
*/
static void c_hash_merge_self(struct VM *vm, mrbc_value v[], int argc)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b088      	sub	sp, #32
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&v[1]);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f103 0210 	add.w	r2, r3, #16
 8004740:	f107 0310 	add.w	r3, r7, #16
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fb32 	bl	8003db0 <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 800474c:	e014      	b.n	8004778 <c_hash_merge_self+0x4a>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 800474e:	f107 0310 	add.w	r3, r7, #16
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fb5f 	bl	8003e16 <mrbc_hash_i_next>
 8004758:	61f8      	str	r0, [r7, #28]
    mrbc_hash_set( v, &kv[0], &kv[1] );
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3310      	adds	r3, #16
 800475e:	461a      	mov	r2, r3
 8004760:	69f9      	ldr	r1, [r7, #28]
 8004762:	68b8      	ldr	r0, [r7, #8]
 8004764:	f7ff fc1d 	bl	8003fa2 <mrbc_hash_set>
    mrbc_incref( &kv[0] );
 8004768:	69f8      	ldr	r0, [r7, #28]
 800476a:	f7ff fa6d 	bl	8003c48 <mrbc_incref>
    mrbc_incref( &kv[1] );
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3310      	adds	r3, #16
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fa68 	bl	8003c48 <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fb37 	bl	8003df0 <mrbc_hash_i_has_next>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e2      	bne.n	800474e <c_hash_merge_self+0x20>
  }
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <c_hash_values>:

//================================================================
/*! (method) values
*/
static void c_hash_values(struct VM *vm, mrbc_value v[], int argc)
{
 8004792:	b590      	push	{r4, r7, lr}
 8004794:	b093      	sub	sp, #76	; 0x4c
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new( vm, mrbc_hash_size(v) );
 800479e:	68b8      	ldr	r0, [r7, #8]
 80047a0:	f7ff faf7 	bl	8003d92 <mrbc_hash_size>
 80047a4:	4602      	mov	r2, r0
 80047a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fd fdd2 	bl	8002356 <mrbc_array_new>
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(v);
 80047b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff faf9 	bl	8003db0 <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 80047be:	e010      	b.n	80047e2 <c_hash_values+0x50>
    mrbc_value *val = mrbc_hash_i_next(&ite) + 1;
 80047c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fb26 	bl	8003e16 <mrbc_hash_i_next>
 80047ca:	4603      	mov	r3, r0
 80047cc:	3310      	adds	r3, #16
 80047ce:	647b      	str	r3, [r7, #68]	; 0x44
    mrbc_array_push(&ret, val);
 80047d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fd feed 	bl	80025b6 <mrbc_array_push>
    mrbc_incref(val);
 80047dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80047de:	f7ff fa33 	bl	8003c48 <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 80047e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fb02 	bl	8003df0 <mrbc_hash_i_has_next>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e6      	bne.n	80047c0 <c_hash_values+0x2e>
  }

  SET_RETURN(ret);
 80047f2:	f107 0410 	add.w	r4, r7, #16
 80047f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004800:	68b8      	ldr	r0, [r7, #8]
 8004802:	f7ff fa55 	bl	8003cb0 <mrbc_decref>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	461c      	mov	r4, r3
 800480a:	f107 0310 	add.w	r3, r7, #16
 800480e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004814:	bf00      	nop
 8004816:	374c      	adds	r7, #76	; 0x4c
 8004818:	46bd      	mov	sp, r7
 800481a:	bd90      	pop	{r4, r7, pc}

0800481c <c_hash_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect, to_s
*/
static void c_hash_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b09f      	sub	sp, #124	; 0x7c
 8004820:	af04      	add	r7, sp, #16
 8004822:	61f8      	str	r0, [r7, #28]
 8004824:	61b9      	str	r1, [r7, #24]
 8004826:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f993 3000 	ldrsb.w	r3, [r3]
 800482e:	2b07      	cmp	r3, #7
 8004830:	d112      	bne.n	8004858 <c_hash_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800483a:	4618      	mov	r0, r3
 800483c:	f009 fa00 	bl	800dc40 <mrbc_symid_to_str>
 8004840:	4602      	mov	r2, r0
 8004842:	69bc      	ldr	r4, [r7, #24]
 8004844:	463b      	mov	r3, r7
 8004846:	69f9      	ldr	r1, [r7, #28]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fa77 	bl	8003d3c <mrbc_string_new_cstr>
 800484e:	463b      	mov	r3, r7
 8004850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8004856:	e08a      	b.n	800496e <c_hash_inspect+0x152>
  }

  mrbc_value ret = mrbc_string_new_cstr(vm, "{");
 8004858:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800485c:	4a45      	ldr	r2, [pc, #276]	; (8004974 <c_hash_inspect+0x158>)
 800485e:	69f9      	ldr	r1, [r7, #28]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fa6b 	bl	8003d3c <mrbc_string_new_cstr>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8004866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004868:	2b00      	cmp	r3, #0
 800486a:	d079      	beq.n	8004960 <c_hash_inspect+0x144>

  mrbc_hash_iterator ite = mrbc_hash_iterator_new(v);
 800486c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004870:	69b9      	ldr	r1, [r7, #24]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fa9c 	bl	8003db0 <mrbc_hash_iterator_new>
  int flag_first = 1;
 8004878:	2301      	movs	r3, #1
 800487a:	667b      	str	r3, [r7, #100]	; 0x64

  while( mrbc_hash_i_has_next(&ite) ) {
 800487c:	e050      	b.n	8004920 <c_hash_inspect+0x104>
    if( !flag_first ) mrbc_string_append_cstr( &ret, ", " );
 800487e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <c_hash_inspect+0x74>
 8004884:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004888:	493b      	ldr	r1, [pc, #236]	; (8004978 <c_hash_inspect+0x15c>)
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fa6e 	bl	8003d6c <mrbc_string_append_cstr>
    flag_first = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	667b      	str	r3, [r7, #100]	; 0x64
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 8004894:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fabc 	bl	8003e16 <mrbc_hash_i_next>
 800489e:	6638      	str	r0, [r7, #96]	; 0x60

    mrbc_value s1 = mrbc_send( vm, v, argc, &kv[0], "inspect", 0 );
 80048a0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80048a4:	2300      	movs	r3, #0
 80048a6:	9302      	str	r3, [sp, #8]
 80048a8:	4b34      	ldr	r3, [pc, #208]	; (800497c <c_hash_inspect+0x160>)
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	69f9      	ldr	r1, [r7, #28]
 80048b6:	f004 ffa5 	bl	8009804 <mrbc_send>
    mrbc_string_append( &ret, &s1 );
 80048ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80048be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f002 fdb0 	bl	800742a <mrbc_string_append>
    mrbc_string_delete( &s1 );
 80048ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048ce:	4618      	mov	r0, r3
 80048d0:	f002 fd0a 	bl	80072e8 <mrbc_string_delete>

    mrbc_string_append_cstr( &ret, "=>" );
 80048d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048d8:	4929      	ldr	r1, [pc, #164]	; (8004980 <c_hash_inspect+0x164>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fa46 	bl	8003d6c <mrbc_string_append_cstr>

    s1 = mrbc_send( vm, v, argc, &kv[1], "inspect", 0 );
 80048e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e2:	3310      	adds	r3, #16
 80048e4:	4638      	mov	r0, r7
 80048e6:	2200      	movs	r2, #0
 80048e8:	9202      	str	r2, [sp, #8]
 80048ea:	4a24      	ldr	r2, [pc, #144]	; (800497c <c_hash_inspect+0x160>)
 80048ec:	9201      	str	r2, [sp, #4]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	69f9      	ldr	r1, [r7, #28]
 80048f6:	f004 ff85 	bl	8009804 <mrbc_send>
 80048fa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80048fe:	463b      	mov	r3, r7
 8004900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_string_append( &ret, &s1 );
 8004906:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800490a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f002 fd8a 	bl	800742a <mrbc_string_append>
    mrbc_string_delete( &s1 );
 8004916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800491a:	4618      	mov	r0, r3
 800491c:	f002 fce4 	bl	80072e8 <mrbc_string_delete>
  while( mrbc_hash_i_has_next(&ite) ) {
 8004920:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fa63 	bl	8003df0 <mrbc_hash_i_has_next>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1a6      	bne.n	800487e <c_hash_inspect+0x62>
  }

  mrbc_string_append_cstr( &ret, "}" );
 8004930:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004934:	4913      	ldr	r1, [pc, #76]	; (8004984 <c_hash_inspect+0x168>)
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fa18 	bl	8003d6c <mrbc_string_append_cstr>

  SET_RETURN(ret);
 800493c:	f107 0420 	add.w	r4, r7, #32
 8004940:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800494a:	69b8      	ldr	r0, [r7, #24]
 800494c:	f7ff f9b0 	bl	8003cb0 <mrbc_decref>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	461c      	mov	r4, r3
 8004954:	f107 0320 	add.w	r3, r7, #32
 8004958:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800495a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;
 800495e:	e006      	b.n	800496e <c_hash_inspect+0x152>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8004960:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 8004962:	69b8      	ldr	r0, [r7, #24]
 8004964:	f7ff f9a4 	bl	8003cb0 <mrbc_decref>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
}
 800496e:	376c      	adds	r7, #108	; 0x6c
 8004970:	46bd      	mov	sp, r7
 8004972:	bd90      	pop	{r4, r7, pc}
 8004974:	08018bb4 	.word	0x08018bb4
 8004978:	08018bb8 	.word	0x08018bb8
 800497c:	08018bbc 	.word	0x08018bbc
 8004980:	08018bc4 	.word	0x08018bc4
 8004984:	08018bc8 	.word	0x08018bc8

08004988 <mrbc_decref>:
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f993 3000 	ldrsb.w	r3, [r3]
 8004996:	2b07      	cmp	r3, #7
 8004998:	dd2c      	ble.n	80049f4 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	885b      	ldrh	r3, [r3, #2]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <mrbc_decref+0x2a>
 80049a4:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <mrbc_decref+0x78>)
 80049a6:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <mrbc_decref+0x7c>)
 80049a8:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80049ac:	4816      	ldr	r0, [pc, #88]	; (8004a08 <mrbc_decref+0x80>)
 80049ae:	f010 fe49 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	885b      	ldrh	r3, [r3, #2]
 80049b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049bc:	4293      	cmp	r3, r2
 80049be:	d106      	bne.n	80049ce <mrbc_decref+0x46>
 80049c0:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <mrbc_decref+0x84>)
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <mrbc_decref+0x7c>)
 80049c4:	f240 11d3 	movw	r1, #467	; 0x1d3
 80049c8:	480f      	ldr	r0, [pc, #60]	; (8004a08 <mrbc_decref+0x80>)
 80049ca:	f010 fe3b 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	885a      	ldrh	r2, [r3, #2]
 80049d4:	3a01      	subs	r2, #1
 80049d6:	b292      	uxth	r2, r2
 80049d8:	805a      	strh	r2, [r3, #2]
 80049da:	885b      	ldrh	r3, [r3, #2]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f993 3000 	ldrsb.w	r3, [r3]
 80049e6:	461a      	mov	r2, r3
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <mrbc_decref+0x88>)
 80049ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	e002      	b.n	80049fa <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 80049f8:	bf00      	nop
}
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	08018bd4 	.word	0x08018bd4
 8004a04:	0801ab6c 	.word	0x0801ab6c
 8004a08:	08018bec 	.word	0x08018bec
 8004a0c:	08018c08 	.word	0x08018c08
 8004a10:	0801be98 	.word	0x0801be98

08004a14 <mrbc_string_new_cstr>:
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <mrbc_string_new_cstr+0x1c>
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fb fbe4 	bl	80001f4 <strlen>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	e000      	b.n	8004a32 <mrbc_string_new_cstr+0x1e>
 8004a30:	2300      	movs	r3, #0
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	f002 fbb8 	bl	80071ac <mrbc_string_new>
}
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <mrbc_printf_init>:
  @param  size	buffer size.
  @param  fstr	format string.
*/
static inline void mrbc_printf_init( mrbc_printf_t *pf, char *buf, int size,
				     const char *fstr )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
  pf->p = pf->buf = buf;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	609a      	str	r2, [r3, #8]
  pf->buf_end = buf + size - 1;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	441a      	add	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	605a      	str	r2, [r3, #4]
  pf->fstr = fstr;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	60da      	str	r2, [r3, #12]
  pf->fmt = (struct RPrintfFormat){0};
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3310      	adds	r3, #16
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
}
 8004a7c:	bf00      	nop
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <mrbc_printf_end>:
/*! terminate ('\0') output buffer.

  @param  pf	pointer to mrbc_printf
*/
static inline void mrbc_printf_end( mrbc_printf_t *pf )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  *pf->p = '\0';
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <c_integer_bitref>:
/***** Integer class ********************************************************/
//================================================================
/*! (operator) [] bit reference
 */
static void c_integer_bitref(struct VM *vm, mrbc_value v[], int argc)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  if( mrbc_integer(v[1]) < 0 ) {
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	3310      	adds	r3, #16
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da0b      	bge.n	8004ad2 <c_integer_bitref+0x2e>
    SET_INT_RETURN( 0 );
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	68b8      	ldr	r0, [r7, #8]
 8004ac0:	f7ff ff62 	bl	8004988 <mrbc_decref>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	609a      	str	r2, [r3, #8]
  } else {
    mrbc_int_t mask = (argc == 1) ? 1 : (1 << mrbc_integer(v[2])) - 1;
    SET_INT_RETURN( (mrbc_integer(v[0]) >> mrbc_integer(v[1])) & mask );
  }
}
 8004ad0:	e01f      	b.n	8004b12 <c_integer_bitref+0x6e>
    mrbc_int_t mask = (argc == 1) ? 1 : (1 << mrbc_integer(v[2])) - 1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d007      	beq.n	8004ae8 <c_integer_bitref+0x44>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	3320      	adds	r3, #32
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	e000      	b.n	8004aea <c_integer_bitref+0x46>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
    SET_INT_RETURN( (mrbc_integer(v[0]) >> mrbc_integer(v[1])) & mask );
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	3310      	adds	r3, #16
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	fa42 f303 	asr.w	r3, r2, r3
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	68b8      	ldr	r0, [r7, #8]
 8004b02:	f7ff ff41 	bl	8004988 <mrbc_decref>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	609a      	str	r2, [r3, #8]
}
 8004b12:	bf00      	nop
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <c_integer_positive>:

//================================================================
/*! (operator) unary +
*/
static void c_integer_positive(struct VM *vm, mrbc_value v[], int argc)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
  // do nothing
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <c_integer_negative>:

//================================================================
/*! (operator) unary -
*/
static void c_integer_negative(struct VM *vm, mrbc_value v[], int argc)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[0]);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( -num );
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	425b      	negs	r3, r3
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	68b8      	ldr	r0, [r7, #8]
 8004b4c:	f7ff ff1c 	bl	8004988 <mrbc_decref>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2204      	movs	r2, #4
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <c_integer_power>:

//================================================================
/*! (operator) ** power
 */
static void c_integer_power(struct VM *vm, mrbc_value v[], int argc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3310      	adds	r3, #16
 8004b74:	f993 3000 	ldrsb.w	r3, [r3]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d125      	bne.n	8004bc8 <c_integer_power+0x64>
    mrbc_int_t x = 1;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	61fb      	str	r3, [r7, #28]
    int i;

    if( mrbc_integer(v[1]) < 0 ) x = 0;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	3310      	adds	r3, #16
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da01      	bge.n	8004b8e <c_integer_power+0x2a>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < mrbc_integer(v[1]); i++ ) {
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	e008      	b.n	8004ba6 <c_integer_power+0x42>
      x *= mrbc_integer(v[0]);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < mrbc_integer(v[1]); i++ ) {
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	3310      	adds	r3, #16
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	dbf0      	blt.n	8004b94 <c_integer_power+0x30>
    }
    SET_INT_RETURN( x );
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	68b8      	ldr	r0, [r7, #8]
 8004bb8:	f7ff fee6 	bl	8004988 <mrbc_decref>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	609a      	str	r2, [r3, #8]
#if MRBC_USE_FLOAT && MRBC_USE_MATH
  else if( mrbc_type(v[1]) == MRBC_TT_FLOAT ) {
    SET_FLOAT_RETURN( pow( mrbc_integer(v[0]), mrbc_float(v[1])));
  }
#endif
}
 8004bc8:	bf00      	nop
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <c_integer_mod>:

//================================================================
/*! (operator) %
 */
static void c_integer_mod(struct VM *vm, mrbc_value v[], int argc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[1]);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	3310      	adds	r3, #16
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( v->i % num );
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	fb93 f2f2 	sdiv	r2, r3, r2
 8004bee:	6979      	ldr	r1, [r7, #20]
 8004bf0:	fb01 f202 	mul.w	r2, r1, r2
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	68b8      	ldr	r0, [r7, #8]
 8004bfa:	f7ff fec5 	bl	8004988 <mrbc_decref>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2204      	movs	r2, #4
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	609a      	str	r2, [r3, #8]
}
 8004c0a:	bf00      	nop
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <c_integer_and>:

//================================================================
/*! (operator) &; bit operation AND
 */
static void c_integer_and(struct VM *vm, mrbc_value v[], int argc)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b086      	sub	sp, #24
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[1]);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3310      	adds	r3, #16
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN(v->i & num);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	68b8      	ldr	r0, [r7, #8]
 8004c32:	f7ff fea9 	bl	8004988 <mrbc_decref>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	609a      	str	r2, [r3, #8]
}
 8004c42:	bf00      	nop
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <c_integer_or>:

//================================================================
/*! (operator) |; bit operation OR
 */
static void c_integer_or(struct VM *vm, mrbc_value v[], int argc)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[1]);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	3310      	adds	r3, #16
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN(v->i | num);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	68b8      	ldr	r0, [r7, #8]
 8004c6a:	f7ff fe8d 	bl	8004988 <mrbc_decref>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2204      	movs	r2, #4
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	609a      	str	r2, [r3, #8]
}
 8004c7a:	bf00      	nop
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <c_integer_xor>:

//================================================================
/*! (operator) ^; bit operation XOR
 */
static void c_integer_xor(struct VM *vm, mrbc_value v[], int argc)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b086      	sub	sp, #24
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[1]);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	3310      	adds	r3, #16
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( v->i ^ num );
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4053      	eors	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	68b8      	ldr	r0, [r7, #8]
 8004ca2:	f7ff fe71 	bl	8004988 <mrbc_decref>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	609a      	str	r2, [r3, #8]
}
 8004cb2:	bf00      	nop
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <c_integer_not>:

//================================================================
/*! (operator) ~; bit operation NOT
 */
static void c_integer_not(struct VM *vm, mrbc_value v[], int argc)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[0]);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( ~num );
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	68b8      	ldr	r0, [r7, #8]
 8004cd4:	f7ff fe58 	bl	8004988 <mrbc_decref>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2204      	movs	r2, #4
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	609a      	str	r2, [r3, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <shift>:

//================================================================
/*! x-bit left shift for x
 */
static mrbc_int_t shift(mrbc_int_t x, mrbc_int_t y)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  // Don't support environments that include padding in int.
  const int INT_BITS = sizeof(mrbc_int_t) * CHAR_BIT;
 8004cf6:	2320      	movs	r3, #32
 8004cf8:	60fb      	str	r3, [r7, #12]

  if( y >= INT_BITS ) return 0;
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	db01      	blt.n	8004d06 <shift+0x1a>
 8004d02:	2300      	movs	r3, #0
 8004d04:	e013      	b.n	8004d2e <shift+0x42>
  if( y >= 0 ) return x << y;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	db04      	blt.n	8004d16 <shift+0x2a>
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	e00b      	b.n	8004d2e <shift+0x42>
  if( y <= -INT_BITS ) return 0;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	425b      	negs	r3, r3
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	dc01      	bgt.n	8004d24 <shift+0x38>
 8004d20:	2300      	movs	r3, #0
 8004d22:	e004      	b.n	8004d2e <shift+0x42>
  return x >> -y;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	425b      	negs	r3, r3
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	fa42 f303 	asr.w	r3, r2, r3
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <c_integer_lshift>:

//================================================================
/*! (operator) <<; bit operation LEFT_SHIFT
 */
static void c_integer_lshift(struct VM *vm, mrbc_value v[], int argc)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
  int num = mrbc_integer(v[1]);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3310      	adds	r3, #16
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( shift(v->i, num) );
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ffc9 	bl	8004cec <shift>
 8004d5a:	6138      	str	r0, [r7, #16]
 8004d5c:	68b8      	ldr	r0, [r7, #8]
 8004d5e:	f7ff fe13 	bl	8004988 <mrbc_decref>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2204      	movs	r2, #4
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	609a      	str	r2, [r3, #8]
}
 8004d6e:	bf00      	nop
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <c_integer_rshift>:

//================================================================
/*! (operator) >>; bit operation RIGHT_SHIFT
 */
static void c_integer_rshift(struct VM *vm, mrbc_value v[], int argc)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
  int num = mrbc_integer(v[1]);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	3310      	adds	r3, #16
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( shift(v->i, -num) );
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	425b      	negs	r3, r3
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f7ff ffa9 	bl	8004cec <shift>
 8004d9a:	6138      	str	r0, [r7, #16]
 8004d9c:	68b8      	ldr	r0, [r7, #8]
 8004d9e:	f7ff fdf3 	bl	8004988 <mrbc_decref>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2204      	movs	r2, #4
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	609a      	str	r2, [r3, #8]
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <c_integer_abs>:

//================================================================
/*! (method) abs
*/
static void c_integer_abs(struct VM *vm, mrbc_value v[], int argc)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  if( mrbc_integer(v[0]) < 0 ) {
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da04      	bge.n	8004dd4 <c_integer_abs+0x1e>
    mrbc_integer(v[0]) = -mrbc_integer(v[0]);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	425a      	negs	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	609a      	str	r2, [r3, #8]
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <c_numeric_clamp>:
 *
 * Note: Does not support Range object as the argument
 *       like `3.clamp(1..2) #=> 2`
*/
static void c_numeric_clamp(struct VM *vm, mrbc_value v[], int argc)
{
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b099      	sub	sp, #100	; 0x64
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  if (argc != 2) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d005      	beq.n	8004dfe <c_numeric_clamp+0x1e>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "wrong number of arguments (expected 2)");
 8004df2:	4a42      	ldr	r2, [pc, #264]	; (8004efc <c_numeric_clamp+0x11c>)
 8004df4:	4942      	ldr	r1, [pc, #264]	; (8004f00 <c_numeric_clamp+0x120>)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f006 fb16 	bl	800b428 <mrbc_raise>
    return;
 8004dfc:	e07a      	b.n	8004ef4 <c_numeric_clamp+0x114>
  }
  mrbc_value min = v[1];
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8004e04:	3310      	adds	r3, #16
 8004e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_value max = v[2];
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004e12:	3320      	adds	r3, #32
 8004e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (
    (mrbc_type(min) != MRBC_TT_INTEGER && mrbc_type(min) != MRBC_TT_FLOAT) ||
 8004e1a:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
  if (
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d003      	beq.n	8004e2a <c_numeric_clamp+0x4a>
    (mrbc_type(min) != MRBC_TT_INTEGER && mrbc_type(min) != MRBC_TT_FLOAT) ||
 8004e22:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	d107      	bne.n	8004e3a <c_numeric_clamp+0x5a>
    (mrbc_type(max) != MRBC_TT_INTEGER && mrbc_type(max) != MRBC_TT_FLOAT)
 8004e2a:	f997 3040 	ldrsb.w	r3, [r7, #64]	; 0x40
    (mrbc_type(min) != MRBC_TT_INTEGER && mrbc_type(min) != MRBC_TT_FLOAT) ||
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d009      	beq.n	8004e46 <c_numeric_clamp+0x66>
    (mrbc_type(max) != MRBC_TT_INTEGER && mrbc_type(max) != MRBC_TT_FLOAT)
 8004e32:	f997 3040 	ldrsb.w	r3, [r7, #64]	; 0x40
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d005      	beq.n	8004e46 <c_numeric_clamp+0x66>
  ){
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "comparison failed");
 8004e3a:	4a32      	ldr	r2, [pc, #200]	; (8004f04 <c_numeric_clamp+0x124>)
 8004e3c:	4930      	ldr	r1, [pc, #192]	; (8004f00 <c_numeric_clamp+0x120>)
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f006 faf2 	bl	800b428 <mrbc_raise>
    return;
 8004e44:	e056      	b.n	8004ef4 <c_numeric_clamp+0x114>
  }
  if (mrbc_compare(&max, &min) < 0) {
 8004e46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e4e:	4611      	mov	r1, r2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f009 f975 	bl	800e140 <mrbc_compare>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	da05      	bge.n	8004e68 <c_numeric_clamp+0x88>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "min argument must be smaller than max argument");
 8004e5c:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <c_numeric_clamp+0x128>)
 8004e5e:	4928      	ldr	r1, [pc, #160]	; (8004f00 <c_numeric_clamp+0x120>)
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f006 fae1 	bl	800b428 <mrbc_raise>
    return;
 8004e66:	e045      	b.n	8004ef4 <c_numeric_clamp+0x114>
  }
  if (mrbc_compare(&v[0], &min) < 0) {
 8004e68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	68b8      	ldr	r0, [r7, #8]
 8004e70:	f009 f966 	bl	800e140 <mrbc_compare>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	da11      	bge.n	8004e9e <c_numeric_clamp+0xbe>
    SET_RETURN(min);
 8004e7a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004e7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004e88:	68b8      	ldr	r0, [r7, #8]
 8004e8a:	f7ff fd7d 	bl	8004988 <mrbc_decref>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	461c      	mov	r4, r3
 8004e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8004e9c:	e02a      	b.n	8004ef4 <c_numeric_clamp+0x114>
  }
  if (mrbc_compare(&max, &v[0]) < 0) {
 8004e9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f009 f94b 	bl	800e140 <mrbc_compare>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	da11      	bge.n	8004ed4 <c_numeric_clamp+0xf4>
    SET_RETURN(max);
 8004eb0:	f107 0420 	add.w	r4, r7, #32
 8004eb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004eb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004ebe:	68b8      	ldr	r0, [r7, #8]
 8004ec0:	f7ff fd62 	bl	8004988 <mrbc_decref>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	461c      	mov	r4, r3
 8004ec8:	f107 0320 	add.w	r3, r7, #32
 8004ecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8004ed2:	e00f      	b.n	8004ef4 <c_numeric_clamp+0x114>
  }
  SET_RETURN(v[0]); /* return self */
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f107 0410 	add.w	r4, r7, #16
 8004eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004ee0:	68b8      	ldr	r0, [r7, #8]
 8004ee2:	f7ff fd51 	bl	8004988 <mrbc_decref>
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	461c      	mov	r4, r3
 8004eea:	f107 0310 	add.w	r3, r7, #16
 8004eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004ef4:	3764      	adds	r7, #100	; 0x64
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd90      	pop	{r4, r7, pc}
 8004efa:	bf00      	nop
 8004efc:	08018c24 	.word	0x08018c24
 8004f00:	20000154 	.word	0x20000154
 8004f04:	08018c4c 	.word	0x08018c4c
 8004f08:	08018c60 	.word	0x08018c60

08004f0c <c_integer_to_f>:
#if MRBC_USE_FLOAT
//================================================================
/*! (method) to_f
*/
static void c_integer_to_f(struct VM *vm, mrbc_value v[], int argc)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  mrbc_float_t f = mrbc_integer(v[0]);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fb fb19 	bl	8000554 <__aeabi_i2d>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	e9c7 2306 	strd	r2, r3, [r7, #24]
  SET_FLOAT_RETURN( f );
 8004f2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004f32:	68b8      	ldr	r0, [r7, #8]
 8004f34:	f7ff fd28 	bl	8004988 <mrbc_decref>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2205      	movs	r2, #5
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f44:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <c_integer_chr>:
#if MRBC_USE_STRING
//================================================================
/*! (method) chr
*/
static void c_integer_chr(struct VM *vm, mrbc_value v[], int argc)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b08f      	sub	sp, #60	; 0x3c
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  char buf[2] = { mrbc_integer(v[0]) };
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

  mrbc_value value = mrbc_string_new(vm, buf, 1);
 8004f6a:	f107 0020 	add.w	r0, r7, #32
 8004f6e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f72:	2301      	movs	r3, #1
 8004f74:	68f9      	ldr	r1, [r7, #12]
 8004f76:	f002 f919 	bl	80071ac <mrbc_string_new>
  SET_RETURN(value);
 8004f7a:	f107 0410 	add.w	r4, r7, #16
 8004f7e:	f107 0320 	add.w	r3, r7, #32
 8004f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004f88:	68b8      	ldr	r0, [r7, #8]
 8004f8a:	f7ff fcfd 	bl	8004988 <mrbc_decref>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	461c      	mov	r4, r3
 8004f92:	f107 0310 	add.w	r3, r7, #16
 8004f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004f9c:	bf00      	nop
 8004f9e:	373c      	adds	r7, #60	; 0x3c
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd90      	pop	{r4, r7, pc}

08004fa4 <c_integer_inspect>:

//================================================================
/*! (method) inspect, to_s
*/
static void c_integer_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b09d      	sub	sp, #116	; 0x74
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	61f8      	str	r0, [r7, #28]
 8004fac:	61b9      	str	r1, [r7, #24]
 8004fae:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f993 3000 	ldrsb.w	r3, [r3]
 8004fb6:	2b07      	cmp	r3, #7
 8004fb8:	d112      	bne.n	8004fe0 <c_integer_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f008 fe3c 	bl	800dc40 <mrbc_symid_to_str>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	69bc      	ldr	r4, [r7, #24]
 8004fcc:	463b      	mov	r3, r7
 8004fce:	69f9      	ldr	r1, [r7, #28]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fd1f 	bl	8004a14 <mrbc_string_new_cstr>
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8004fde:	e046      	b.n	800506e <c_integer_inspect+0xca>
  }

  int base = 10;
 8004fe0:	230a      	movs	r3, #10
 8004fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if( argc ) {
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d010      	beq.n	800500c <c_integer_inspect+0x68>
    base = mrbc_integer(v[1]);
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	3310      	adds	r3, #16
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if( base < 2 || base > 36 ) {
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	dd02      	ble.n	8004ffe <c_integer_inspect+0x5a>
 8004ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffa:	2b24      	cmp	r3, #36	; 0x24
 8004ffc:	dd06      	ble.n	800500c <c_integer_inspect+0x68>
      mrbc_raisef(vm, MRBC_CLASS(ArgumentError), "invalid radix %d", base);
 8004ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005000:	4a1c      	ldr	r2, [pc, #112]	; (8005074 <c_integer_inspect+0xd0>)
 8005002:	491d      	ldr	r1, [pc, #116]	; (8005078 <c_integer_inspect+0xd4>)
 8005004:	69f8      	ldr	r0, [r7, #28]
 8005006:	f006 fa63 	bl	800b4d0 <mrbc_raisef>
      return;
 800500a:	e030      	b.n	800506e <c_integer_inspect+0xca>
    }
  }

  mrbc_printf_t pf;
  char buf[16];
  mrbc_printf_init( &pf, buf, sizeof(buf), NULL );
 800500c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005010:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005014:	2300      	movs	r3, #0
 8005016:	2210      	movs	r2, #16
 8005018:	f7ff fd14 	bl	8004a44 <mrbc_printf_init>
  pf.fmt.type = 'd';
 800501c:	2364      	movs	r3, #100	; 0x64
 800501e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  mrbc_printf_int( &pf, v->i, base );
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005028:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800502c:	4618      	mov	r0, r3
 800502e:	f005 fdef 	bl	800ac10 <mrbc_printf_int>
  mrbc_printf_end( &pf );
 8005032:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fd26 	bl	8004a88 <mrbc_printf_end>

  mrbc_value value = mrbc_string_new_cstr(vm, buf);
 800503c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005040:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fce4 	bl	8004a14 <mrbc_string_new_cstr>
  SET_RETURN(value);
 800504c:	f107 0420 	add.w	r4, r7, #32
 8005050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800505a:	69b8      	ldr	r0, [r7, #24]
 800505c:	f7ff fc94 	bl	8004988 <mrbc_decref>
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	461c      	mov	r4, r3
 8005064:	f107 0320 	add.w	r3, r7, #32
 8005068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800506a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800506e:	3774      	adds	r7, #116	; 0x74
 8005070:	46bd      	mov	sp, r7
 8005072:	bd90      	pop	{r4, r7, pc}
 8005074:	08018c90 	.word	0x08018c90
 8005078:	20000154 	.word	0x20000154

0800507c <c_float_positive>:

//================================================================
/*! (operator) unary +
*/
static void c_float_positive(struct VM *vm, mrbc_value v[], int argc)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  // do nothing
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <c_float_negative>:

//================================================================
/*! (operator) unary -
*/
static void c_float_negative(struct VM *vm, mrbc_value v[], int argc)
{
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  mrbc_float_t num = mrbc_float(v[0]);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80050a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  SET_FLOAT_RETURN( -num );
 80050aa:	69bc      	ldr	r4, [r7, #24]
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80050b2:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80050b6:	68b8      	ldr	r0, [r7, #8]
 80050b8:	f7ff fc66 	bl	8004988 <mrbc_decref>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2205      	movs	r2, #5
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80050cc:	bf00      	nop
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bdb0      	pop	{r4, r5, r7, pc}

080050d4 <c_float_abs>:

//================================================================
/*! (method) abs
*/
static void c_float_abs(struct VM *vm, mrbc_value v[], int argc)
{
 80050d4:	b5b0      	push	{r4, r5, r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  if( mrbc_float(v[0]) < 0 ) {
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	f7fb fd0d 	bl	8000b0c <__aeabi_dcmplt>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d100      	bne.n	80050fa <c_float_abs+0x26>
    mrbc_float(v[0]) = -mrbc_float(v[0]);
  }
}
 80050f8:	e008      	b.n	800510c <c_float_abs+0x38>
    mrbc_float(v[0]) = -mrbc_float(v[0]);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005100:	4614      	mov	r4, r2
 8005102:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	e9c3 4502 	strd	r4, r5, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bdb0      	pop	{r4, r5, r7, pc}

08005114 <c_float_to_i>:

//================================================================
/*! (method) to_i
*/
static void c_float_to_i(struct VM *vm, mrbc_value v[], int argc)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  mrbc_int_t i = (mrbc_int_t)mrbc_float(v[0]);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	f7fb fd17 	bl	8000b5c <__aeabi_d2iz>
 800512e:	4603      	mov	r3, r0
 8005130:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( i );
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	68b8      	ldr	r0, [r7, #8]
 8005138:	f7ff fc26 	bl	8004988 <mrbc_decref>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2204      	movs	r2, #4
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	bf00      	nop
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <c_float_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect, to_s
*/
static void c_float_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b097      	sub	sp, #92	; 0x5c
 8005154:	af02      	add	r7, sp, #8
 8005156:	61f8      	str	r0, [r7, #28]
 8005158:	61b9      	str	r1, [r7, #24]
 800515a:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f993 3000 	ldrsb.w	r3, [r3]
 8005162:	2b07      	cmp	r3, #7
 8005164:	d112      	bne.n	800518c <c_float_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800516e:	4618      	mov	r0, r3
 8005170:	f008 fd66 	bl	800dc40 <mrbc_symid_to_str>
 8005174:	4602      	mov	r2, r0
 8005176:	69bc      	ldr	r4, [r7, #24]
 8005178:	463b      	mov	r3, r7
 800517a:	69f9      	ldr	r1, [r7, #28]
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fc49 	bl	8004a14 <mrbc_string_new_cstr>
 8005182:	463b      	mov	r3, r7
 8005184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800518a:	e023      	b.n	80051d4 <c_float_inspect+0x84>
    return;
  }

  char buf[16];

  snprintf( buf, sizeof(buf), "%g", v->d );
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005192:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8005196:	e9cd 2300 	strd	r2, r3, [sp]
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <c_float_inspect+0x8c>)
 800519c:	2110      	movs	r1, #16
 800519e:	f011 f9ef 	bl	8016580 <sniprintf>
  mrbc_value value = mrbc_string_new_cstr(vm, buf);
 80051a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051a6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80051aa:	69f9      	ldr	r1, [r7, #28]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fc31 	bl	8004a14 <mrbc_string_new_cstr>
  SET_RETURN(value);
 80051b2:	f107 0420 	add.w	r4, r7, #32
 80051b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80051c0:	69b8      	ldr	r0, [r7, #24]
 80051c2:	f7ff fbe1 	bl	8004988 <mrbc_decref>
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	461c      	mov	r4, r3
 80051ca:	f107 0320 	add.w	r3, r7, #32
 80051ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80051d4:	3754      	adds	r7, #84	; 0x54
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}
 80051da:	bf00      	nop
 80051dc:	08018cac 	.word	0x08018cac

080051e0 <mrbc_incref>:
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f993 3000 	ldrsb.w	r3, [r3]
 80051ee:	2b07      	cmp	r3, #7
 80051f0:	dd1e      	ble.n	8005230 <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	885b      	ldrh	r3, [r3, #2]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <mrbc_incref+0x2a>
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <mrbc_incref+0x58>)
 80051fe:	4a0f      	ldr	r2, [pc, #60]	; (800523c <mrbc_incref+0x5c>)
 8005200:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005204:	480e      	ldr	r0, [pc, #56]	; (8005240 <mrbc_incref+0x60>)
 8005206:	f010 fa1d 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	885b      	ldrh	r3, [r3, #2]
 8005210:	2bff      	cmp	r3, #255	; 0xff
 8005212:	d106      	bne.n	8005222 <mrbc_incref+0x42>
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <mrbc_incref+0x64>)
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <mrbc_incref+0x5c>)
 8005218:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800521c:	4808      	ldr	r0, [pc, #32]	; (8005240 <mrbc_incref+0x60>)
 800521e:	f010 fa11 	bl	8015644 <__assert_func>
  v->obj->ref_count++;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	885a      	ldrh	r2, [r3, #2]
 8005228:	3201      	adds	r2, #1
 800522a:	b292      	uxth	r2, r2
 800522c:	805a      	strh	r2, [r3, #2]
 800522e:	e000      	b.n	8005232 <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8005230:	bf00      	nop
}
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	08018cb8 	.word	0x08018cb8
 800523c:	0801ac80 	.word	0x0801ac80
 8005240:	08018cd0 	.word	0x08018cd0
 8005244:	08018cec 	.word	0x08018cec

08005248 <mrbc_decref>:
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f993 3000 	ldrsb.w	r3, [r3]
 8005256:	2b07      	cmp	r3, #7
 8005258:	dd2c      	ble.n	80052b4 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	885b      	ldrh	r3, [r3, #2]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d106      	bne.n	8005272 <mrbc_decref+0x2a>
 8005264:	4b16      	ldr	r3, [pc, #88]	; (80052c0 <mrbc_decref+0x78>)
 8005266:	4a17      	ldr	r2, [pc, #92]	; (80052c4 <mrbc_decref+0x7c>)
 8005268:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800526c:	4816      	ldr	r0, [pc, #88]	; (80052c8 <mrbc_decref+0x80>)
 800526e:	f010 f9e9 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	885b      	ldrh	r3, [r3, #2]
 8005278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800527c:	4293      	cmp	r3, r2
 800527e:	d106      	bne.n	800528e <mrbc_decref+0x46>
 8005280:	4b12      	ldr	r3, [pc, #72]	; (80052cc <mrbc_decref+0x84>)
 8005282:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <mrbc_decref+0x7c>)
 8005284:	f240 11d3 	movw	r1, #467	; 0x1d3
 8005288:	480f      	ldr	r0, [pc, #60]	; (80052c8 <mrbc_decref+0x80>)
 800528a:	f010 f9db 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	885a      	ldrh	r2, [r3, #2]
 8005294:	3a01      	subs	r2, #1
 8005296:	b292      	uxth	r2, r2
 8005298:	805a      	strh	r2, [r3, #2]
 800529a:	885b      	ldrh	r3, [r3, #2]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10b      	bne.n	80052b8 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f993 3000 	ldrsb.w	r3, [r3]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <mrbc_decref+0x88>)
 80052aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
 80052b2:	e002      	b.n	80052ba <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 80052b8:	bf00      	nop
}
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	08018cb8 	.word	0x08018cb8
 80052c4:	0801ac5c 	.word	0x0801ac5c
 80052c8:	08018cd0 	.word	0x08018cd0
 80052cc:	08018d08 	.word	0x08018d08
 80052d0:	0801be98 	.word	0x0801be98

080052d4 <mrbc_decref_empty>:
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  mrbc_decref(v);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff ffb3 	bl	8005248 <mrbc_decref>
  v->tt = MRBC_TT_EMPTY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <mrbc_symbol_cstr>:

//================================================================
/*! get c-language string (char *)
*/
static inline const char * mrbc_symbol_cstr(const mrbc_value *v)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  return mrbc_symid_to_str(v->i);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	4618      	mov	r0, r3
 8005300:	f008 fc9e 	bl	800dc40 <mrbc_symid_to_str>
 8005304:	4603      	mov	r3, r0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <mrbc_is_nested_symid>:
  @param  sym_id	target symbol ID.
  @return int		result.
  @see	make_nested_symbol_s
*/
static inline int mrbc_is_nested_symid(mrbc_sym sym_id)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	4603      	mov	r3, r0
 8005316:	80fb      	strh	r3, [r7, #6]
  const char *s = mrbc_symid_to_str(sym_id);
 8005318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800531c:	4618      	mov	r0, r3
 800531e:	f008 fc8f 	bl	800dc40 <mrbc_symid_to_str>
 8005322:	60f8      	str	r0, [r7, #12]

  return ('0' <= s[0] && s[0] <= ('9'+6));
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b2f      	cmp	r3, #47	; 0x2f
 800532a:	d905      	bls.n	8005338 <mrbc_is_nested_symid+0x2a>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b3f      	cmp	r3, #63	; 0x3f
 8005332:	d801      	bhi.n	8005338 <mrbc_is_nested_symid+0x2a>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <mrbc_is_nested_symid+0x2c>
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <find_class_by_object>:

  @param  obj	pointer to object
  @return	pointer to mrbc_class
*/
static inline mrbc_class *find_class_by_object(const mrbc_value *obj)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  assert( mrbc_type(*obj) >= 0 );
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f993 3000 	ldrsb.w	r3, [r3]
 8005352:	2b00      	cmp	r3, #0
 8005354:	da05      	bge.n	8005362 <find_class_by_object+0x1e>
 8005356:	4b20      	ldr	r3, [pc, #128]	; (80053d8 <find_class_by_object+0x94>)
 8005358:	4a20      	ldr	r2, [pc, #128]	; (80053dc <find_class_by_object+0x98>)
 800535a:	21bf      	movs	r1, #191	; 0xbf
 800535c:	4820      	ldr	r0, [pc, #128]	; (80053e0 <find_class_by_object+0x9c>)
 800535e:	f010 f971 	bl	8015644 <__assert_func>
  assert( mrbc_type(*obj) <= MRBC_TT_MAXVAL );
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f993 3000 	ldrsb.w	r3, [r3]
 8005368:	2b0e      	cmp	r3, #14
 800536a:	dd05      	ble.n	8005378 <find_class_by_object+0x34>
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <find_class_by_object+0xa0>)
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <find_class_by_object+0x98>)
 8005370:	21c0      	movs	r1, #192	; 0xc0
 8005372:	481b      	ldr	r0, [pc, #108]	; (80053e0 <find_class_by_object+0x9c>)
 8005374:	f010 f966 	bl	8015644 <__assert_func>

  mrbc_class *cls = mrbc_class_tbl[ mrbc_type(*obj) ];
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f993 3000 	ldrsb.w	r3, [r3]
 800537e:	461a      	mov	r2, r3
 8005380:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <find_class_by_object+0xa4>)
 8005382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005386:	60fb      	str	r3, [r7, #12]
  if( !cls ) {
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d11f      	bne.n	80053ce <find_class_by_object+0x8a>
    switch( mrbc_type(*obj) ) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f993 3000 	ldrsb.w	r3, [r3]
 8005394:	2b0e      	cmp	r3, #14
 8005396:	d00f      	beq.n	80053b8 <find_class_by_object+0x74>
 8005398:	2b0e      	cmp	r3, #14
 800539a:	dc12      	bgt.n	80053c2 <find_class_by_object+0x7e>
 800539c:	2b07      	cmp	r3, #7
 800539e:	d002      	beq.n	80053a6 <find_class_by_object+0x62>
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d004      	beq.n	80053ae <find_class_by_object+0x6a>
 80053a4:	e00d      	b.n	80053c2 <find_class_by_object+0x7e>
    case MRBC_TT_CLASS:		cls = obj->cls;			break;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	e00f      	b.n	80053ce <find_class_by_object+0x8a>
    case MRBC_TT_OBJECT:	cls = obj->instance->cls;	break;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e00a      	b.n	80053ce <find_class_by_object+0x8a>
    case MRBC_TT_EXCEPTION:	cls = obj->exception->cls;	break;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	e005      	b.n	80053ce <find_class_by_object+0x8a>
    default:
      assert(!"Invalid value type.");
 80053c2:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <find_class_by_object+0xa8>)
 80053c4:	4a05      	ldr	r2, [pc, #20]	; (80053dc <find_class_by_object+0x98>)
 80053c6:	21c9      	movs	r1, #201	; 0xc9
 80053c8:	4805      	ldr	r0, [pc, #20]	; (80053e0 <find_class_by_object+0x9c>)
 80053ca:	f010 f93b 	bl	8015644 <__assert_func>
    }
  }

  return cls;
 80053ce:	68fb      	ldr	r3, [r7, #12]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	08018d24 	.word	0x08018d24
 80053dc:	0801ac68 	.word	0x0801ac68
 80053e0:	08018d3c 	.word	0x08018d3c
 80053e4:	08018d58 	.word	0x08018d58
 80053e8:	0801adf4 	.word	0x0801adf4
 80053ec:	08018d7c 	.word	0x08018d7c

080053f0 <mrbc_string_new_cstr>:
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <mrbc_string_new_cstr+0x1c>
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fa fef6 	bl	80001f4 <strlen>
 8005408:	4603      	mov	r3, r0
 800540a:	e000      	b.n	800540e <mrbc_string_new_cstr+0x1e>
 800540c:	2300      	movs	r3, #0
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	f001 feca 	bl	80071ac <mrbc_string_new>
}
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <mrbc_string_size>:
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  return str->string->size;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	889b      	ldrh	r3, [r3, #4]
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <mrbc_string_cstr>:
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	689b      	ldr	r3, [r3, #8]
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <mrbc_printf_init>:
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
  pf->p = pf->buf = buf;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
  pf->buf_end = buf + size - 1;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3b01      	subs	r3, #1
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	441a      	add	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]
  pf->fstr = fstr;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	60da      	str	r2, [r3, #12]
  pf->fmt = (struct RPrintfFormat){0};
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3310      	adds	r3, #16
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	605a      	str	r2, [r3, #4]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <mrbc_printf_end>:
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  *pf->p = '\0';
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <mrbc_printf_len>:

  @param  pf	pointer to mrbc_printf
  @return	length
*/
static inline int mrbc_printf_len( mrbc_printf_t *pf )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  return pf->p - pf->buf;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	1ad3      	subs	r3, r2, r3
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <mrbc_printf_str>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
static inline int mrbc_printf_str( mrbc_printf_t *pf, const char *str, int pad )
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
  return mrbc_printf_bstr( pf, str, (str ? strlen(str) : 0), pad );
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <mrbc_printf_str+0x1e>
 80054e4:	68b8      	ldr	r0, [r7, #8]
 80054e6:	f7fa fe85 	bl	80001f4 <strlen>
 80054ea:	4603      	mov	r3, r0
 80054ec:	461a      	mov	r2, r3
 80054ee:	e000      	b.n	80054f2 <mrbc_printf_str+0x20>
 80054f0:	2200      	movs	r2, #0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f005 fb04 	bl	800ab04 <mrbc_printf_bstr>
 80054fc:	4603      	mov	r3, r0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <set_sym_name_by_id>:
/***** Local functions ******************************************************/
//================================================================
/*! set symbol name by symbol ID
 */
static int set_sym_name_by_id( char *buf, int bufsiz, mrbc_sym sym_id )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  if( !mrbc_is_nested_symid(sym_id) ) {
 8005516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fef7 	bl	800530e <mrbc_is_nested_symid>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10c      	bne.n	8005540 <set_sym_name_by_id+0x38>
    return mrbc_strcpy( buf, bufsiz, mrbc_symid_to_str(sym_id) );
 8005526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800552a:	4618      	mov	r0, r3
 800552c:	f008 fb88 	bl	800dc40 <mrbc_symid_to_str>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f008 ff6e 	bl	800e418 <mrbc_strcpy>
 800553c:	4603      	mov	r3, r0
 800553e:	e02e      	b.n	800559e <set_sym_name_by_id+0x96>
  }

  // nested case.
  mrbc_sym id1, id2;
  mrbc_separate_nested_symid( sym_id, &id1, &id2 );
 8005540:	f107 0210 	add.w	r2, r7, #16
 8005544:	f107 0112 	add.w	r1, r7, #18
 8005548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800554c:	4618      	mov	r0, r3
 800554e:	f008 fc27 	bl	800dda0 <mrbc_separate_nested_symid>

  int n = set_sym_name_by_id( buf, bufsiz, id1 );
 8005552:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005556:	461a      	mov	r2, r3
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff ffd4 	bl	8005508 <set_sym_name_by_id>
 8005560:	6178      	str	r0, [r7, #20]
  n += mrbc_strcpy( buf+n, bufsiz-n, "::" );
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	18d0      	adds	r0, r2, r3
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <set_sym_name_by_id+0xa0>)
 8005570:	4619      	mov	r1, r3
 8005572:	f008 ff51 	bl	800e418 <mrbc_strcpy>
 8005576:	4602      	mov	r2, r0
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
  n += set_sym_name_by_id( buf+n, bufsiz-n, id2 );
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	18d0      	adds	r0, r2, r3
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800558e:	4619      	mov	r1, r3
 8005590:	f7ff ffba 	bl	8005508 <set_sym_name_by_id>
 8005594:	4602      	mov	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  return n;
 800559c:	697b      	ldr	r3, [r7, #20]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	08018d94 	.word	0x08018d94

080055ac <mrbc_instance_call_initialize>:
/***** global functions *****************************************************/
//================================================================
/*! call initializer
 */
void mrbc_instance_call_initialize( struct VM *vm, mrbc_value v[], int argc )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	; 0x28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  // call the initialize method.
  mrbc_method method;
  if( !mrbc_find_method(&method, v[0].instance->cls, MRBC_SYM(initialize))) {
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	f107 0314 	add.w	r3, r7, #20
 80055c2:	2276      	movs	r2, #118	; 0x76
 80055c4:	4618      	mov	r0, r3
 80055c6:	f004 f87b 	bl	80096c0 <mrbc_find_method>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d034      	beq.n	800563a <mrbc_instance_call_initialize+0x8e>
    return;
  }

  if( method.c_func ) {
 80055d0:	7d7b      	ldrb	r3, [r7, #21]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d016      	beq.n	8005604 <mrbc_instance_call_initialize+0x58>
    method.func(vm, v, argc);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	4798      	blx	r3
    for( int i = 1; i <= argc; i++ ) {
 80055e0:	2301      	movs	r3, #1
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
 80055e4:	e009      	b.n	80055fa <mrbc_instance_call_initialize+0x4e>
      mrbc_decref_empty( v + i );
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	4413      	add	r3, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fe70 	bl	80052d4 <mrbc_decref_empty>
    for( int i = 1; i <= argc; i++ ) {
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	3301      	adds	r3, #1
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
 80055fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	429a      	cmp	r2, r3
 8005600:	ddf1      	ble.n	80055e6 <mrbc_instance_call_initialize+0x3a>
    }
    return;
 8005602:	e01b      	b.n	800563c <mrbc_instance_call_initialize+0x90>
  }

  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm, MRBC_SYM(initialize),
					       (v - vm->cur_regs), argc);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	1ad3      	subs	r3, r2, r3
  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm, MRBC_SYM(initialize),
 800560c:	111b      	asrs	r3, r3, #4
 800560e:	461a      	mov	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2176      	movs	r1, #118	; 0x76
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f009 faab 	bl	800eb70 <mrbc_push_callinfo>
 800561a:	6238      	str	r0, [r7, #32]
  callinfo->own_class = method.cls;
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	615a      	str	r2, [r3, #20]

  vm->cur_irep = method.irep;
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	611a      	str	r2, [r3, #16]
  vm->cur_regs = v;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	615a      	str	r2, [r3, #20]
 8005638:	e000      	b.n	800563c <mrbc_instance_call_initialize+0x90>
    return;
 800563a:	bf00      	nop
}
 800563c:	3728      	adds	r7, #40	; 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <c_object_new>:
/***** Object class *********************************************************/
//================================================================
/*! (method) new
 */
static void c_object_new(struct VM *vm, mrbc_value v[], int argc)
{
 8005642:	b590      	push	{r4, r7, lr}
 8005644:	b089      	sub	sp, #36	; 0x24
 8005646:	af00      	add	r7, sp, #0
 8005648:	61f8      	str	r0, [r7, #28]
 800564a:	61b9      	str	r1, [r7, #24]
 800564c:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_instance_new(vm, v[0].cls, 0);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	69bc      	ldr	r4, [r7, #24]
 8005654:	4638      	mov	r0, r7
 8005656:	2300      	movs	r3, #0
 8005658:	69f9      	ldr	r1, [r7, #28]
 800565a:	f003 ff17 	bl	800948c <mrbc_instance_new>
 800565e:	463b      	mov	r3, r7
 8005660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_instance_call_initialize( vm, v, argc );
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	69b9      	ldr	r1, [r7, #24]
 800566a:	69f8      	ldr	r0, [r7, #28]
 800566c:	f7ff ff9e 	bl	80055ac <mrbc_instance_call_initialize>
}
 8005670:	bf00      	nop
 8005672:	3724      	adds	r7, #36	; 0x24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd90      	pop	{r4, r7, pc}

08005678 <c_object_not>:

//================================================================
/*! (operator) !
 */
static void c_object_not(struct VM *vm, mrbc_value v[], int argc)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  SET_BOOL_RETURN( mrbc_type(v[0]) == MRBC_TT_NIL || mrbc_type(v[0]) == MRBC_TT_FALSE );
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f993 3000 	ldrsb.w	r3, [r3]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d004      	beq.n	8005698 <c_object_not+0x20>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f993 3000 	ldrsb.w	r3, [r3]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d101      	bne.n	800569c <c_object_not+0x24>
 8005698:	2303      	movs	r3, #3
 800569a:	e000      	b.n	800569e <c_object_not+0x26>
 800569c:	2302      	movs	r3, #2
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	68b8      	ldr	r0, [r7, #8]
 80056a2:	f7ff fdd1 	bl	8005248 <mrbc_decref>
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	b25a      	sxtb	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	701a      	strb	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <c_object_neq>:

//================================================================
/*! (operator) !=
 */
static void c_object_neq(struct VM *vm, mrbc_value v[], int argc)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  int result = mrbc_compare( &v[0], &v[1] );
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	3310      	adds	r3, #16
 80056c6:	4619      	mov	r1, r3
 80056c8:	68b8      	ldr	r0, [r7, #8]
 80056ca:	f008 fd39 	bl	800e140 <mrbc_compare>
 80056ce:	6178      	str	r0, [r7, #20]
  SET_BOOL_RETURN( result != 0 );
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <c_object_neq+0x24>
 80056d6:	2303      	movs	r3, #3
 80056d8:	e000      	b.n	80056dc <c_object_neq+0x26>
 80056da:	2302      	movs	r3, #2
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	68b8      	ldr	r0, [r7, #8]
 80056e0:	f7ff fdb2 	bl	8005248 <mrbc_decref>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	b25a      	sxtb	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	701a      	strb	r2, [r3, #0]
}
 80056ec:	bf00      	nop
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <c_object_compare>:

//================================================================
/*! (operator) <=>
 */
static void c_object_compare(struct VM *vm, mrbc_value v[], int argc)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  int result = mrbc_compare( &v[0], &v[1] );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3310      	adds	r3, #16
 8005704:	4619      	mov	r1, r3
 8005706:	68b8      	ldr	r0, [r7, #8]
 8005708:	f008 fd1a 	bl	800e140 <mrbc_compare>
 800570c:	6178      	str	r0, [r7, #20]
  SET_INT_RETURN( result );
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	68b8      	ldr	r0, [r7, #8]
 8005714:	f7ff fd98 	bl	8005248 <mrbc_decref>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2204      	movs	r2, #4
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	609a      	str	r2, [r3, #8]
}
 8005724:	bf00      	nop
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <c_object_equal2>:

//================================================================
/*! (operator) ==
 */
static void c_object_equal2(struct VM *vm, mrbc_value v[], int argc)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  int result = mrbc_compare( &v[0], &v[1] );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	3310      	adds	r3, #16
 800573c:	4619      	mov	r1, r3
 800573e:	68b8      	ldr	r0, [r7, #8]
 8005740:	f008 fcfe 	bl	800e140 <mrbc_compare>
 8005744:	6178      	str	r0, [r7, #20]
  SET_BOOL_RETURN( result == 0 );
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <c_object_equal2+0x24>
 800574c:	2303      	movs	r3, #3
 800574e:	e000      	b.n	8005752 <c_object_equal2+0x26>
 8005750:	2302      	movs	r3, #2
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	68b8      	ldr	r0, [r7, #8]
 8005756:	f7ff fd77 	bl	8005248 <mrbc_decref>
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	b25a      	sxtb	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	701a      	strb	r2, [r3, #0]
}
 8005762:	bf00      	nop
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <c_object_equal3>:

//================================================================
/*! (operator) ===
 */
static void c_object_equal3(struct VM *vm, mrbc_value v[], int argc)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
  int result;

  if( mrbc_type(v[0]) == MRBC_TT_CLASS ) {
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f993 3000 	ldrsb.w	r3, [r3]
 800577c:	2b07      	cmp	r3, #7
 800577e:	d10a      	bne.n	8005796 <c_object_equal3+0x2c>
    result = mrbc_obj_is_kind_of( &v[1], v[0].cls );
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f103 0210 	add.w	r2, r3, #16
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f003 ff7c 	bl	800968a <mrbc_obj_is_kind_of>
 8005792:	6178      	str	r0, [r7, #20]
 8005794:	e00c      	b.n	80057b0 <c_object_equal3+0x46>
  } else {
    result = (mrbc_compare( &v[0], &v[1] ) == 0);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	3310      	adds	r3, #16
 800579a:	4619      	mov	r1, r3
 800579c:	68b8      	ldr	r0, [r7, #8]
 800579e:	f008 fccf 	bl	800e140 <mrbc_compare>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	617b      	str	r3, [r7, #20]
  }

  SET_BOOL_RETURN( result );
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <c_object_equal3+0x50>
 80057b6:	2303      	movs	r3, #3
 80057b8:	e000      	b.n	80057bc <c_object_equal3+0x52>
 80057ba:	2302      	movs	r3, #2
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	68b8      	ldr	r0, [r7, #8]
 80057c0:	f7ff fd42 	bl	8005248 <mrbc_decref>
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	b25a      	sxtb	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	701a      	strb	r2, [r3, #0]
}
 80057cc:	bf00      	nop
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <c_object_class>:

//================================================================
/*! (method) class
 */
static void c_object_class(struct VM *vm, mrbc_value v[], int argc)
{
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b08d      	sub	sp, #52	; 0x34
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  mrbc_value value = {.tt = MRBC_TT_CLASS};
 80057e0:	f107 0320 	add.w	r3, r7, #32
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	609a      	str	r2, [r3, #8]
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	2307      	movs	r3, #7
 80057f0:	f887 3020 	strb.w	r3, [r7, #32]
  value.cls = find_class_by_object( v );
 80057f4:	68b8      	ldr	r0, [r7, #8]
 80057f6:	f7ff fda5 	bl	8005344 <find_class_by_object>
 80057fa:	4603      	mov	r3, r0
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
  SET_RETURN( value );
 80057fe:	f107 0410 	add.w	r4, r7, #16
 8005802:	f107 0320 	add.w	r3, r7, #32
 8005806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800580c:	68b8      	ldr	r0, [r7, #8]
 800580e:	f7ff fd1b 	bl	8005248 <mrbc_decref>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	461c      	mov	r4, r3
 8005816:	f107 0310 	add.w	r3, r7, #16
 800581a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800581c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005820:	bf00      	nop
 8005822:	3734      	adds	r7, #52	; 0x34
 8005824:	46bd      	mov	sp, r7
 8005826:	bd90      	pop	{r4, r7, pc}

08005828 <c_object_dup>:

//================================================================
/*! (method) dup
 */
static void c_object_dup(struct VM *vm, mrbc_value v[], int argc)
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b089      	sub	sp, #36	; 0x24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[0]) == MRBC_TT_OBJECT ) {
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f993 3000 	ldrsb.w	r3, [r3]
 800583a:	2b08      	cmp	r3, #8
 800583c:	d11d      	bne.n	800587a <c_object_dup+0x52>
    mrbc_value new_obj = mrbc_instance_new(vm, v->instance->cls, 0);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	f107 0010 	add.w	r0, r7, #16
 8005848:	2300      	movs	r3, #0
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	f003 fe1e 	bl	800948c <mrbc_instance_new>
    mrbc_kv_dup( &v->instance->ivar, &new_obj.instance->ivar );
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f103 0208 	add.w	r2, r3, #8
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	3308      	adds	r3, #8
 800585c:	4619      	mov	r1, r3
 800585e:	4610      	mov	r0, r2
 8005860:	f006 fb4f 	bl	800bf02 <mrbc_kv_dup>

    mrbc_decref( v );
 8005864:	68b8      	ldr	r0, [r7, #8]
 8005866:	f7ff fcef 	bl	8005248 <mrbc_decref>
    *v = new_obj;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	461c      	mov	r4, r3
 800586e:	f107 0310 	add.w	r3, r7, #16
 8005872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005878:	e000      	b.n	800587c <c_object_dup+0x54>
    return;
  }


  // TODO: need support TT_PROC and TT_RANGE. but really need?
  return;
 800587a:	bf00      	nop
}
 800587c:	3724      	adds	r7, #36	; 0x24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd90      	pop	{r4, r7, pc}

08005882 <c_object_block_given>:

//================================================================
/*! (method) block_given?
 */
static void c_object_block_given(struct VM *vm, mrbc_value v[], int argc)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b088      	sub	sp, #32
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
  mrbc_callinfo *callinfo = vm->callinfo_tail;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	61fb      	str	r3, [r7, #28]
  if( !callinfo ) goto RETURN_FALSE;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d02f      	beq.n	80058fa <c_object_block_given+0x78>

  mrbc_value *regs = callinfo->cur_regs + callinfo->reg_offset;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	7f9b      	ldrb	r3, [r3, #30]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	4413      	add	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]

  if( mrbc_type(regs[0]) == MRBC_TT_PROC ) {
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	f993 3000 	ldrsb.w	r3, [r3]
 80058ae:	2b09      	cmp	r3, #9
 80058b0:	d10d      	bne.n	80058ce <c_object_block_given+0x4c>
    callinfo = regs[0].proc->callinfo_self;
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	61fb      	str	r3, [r7, #28]
    if( !callinfo ) goto RETURN_FALSE;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01e      	beq.n	80058fe <c_object_block_given+0x7c>

    regs = callinfo->cur_regs + callinfo->reg_offset;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	7f9b      	ldrb	r3, [r3, #30]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	4413      	add	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
  }

  SET_BOOL_RETURN( mrbc_type(regs[callinfo->n_args+1]) == MRBC_TT_PROC );
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	7fdb      	ldrb	r3, [r3, #31]
 80058d2:	3301      	adds	r3, #1
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4413      	add	r3, r2
 80058da:	f993 3000 	ldrsb.w	r3, [r3]
 80058de:	2b09      	cmp	r3, #9
 80058e0:	d101      	bne.n	80058e6 <c_object_block_given+0x64>
 80058e2:	2303      	movs	r3, #3
 80058e4:	e000      	b.n	80058e8 <c_object_block_given+0x66>
 80058e6:	2302      	movs	r3, #2
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	68b8      	ldr	r0, [r7, #8]
 80058ec:	f7ff fcac 	bl	8005248 <mrbc_decref>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	b25a      	sxtb	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	701a      	strb	r2, [r3, #0]
  return;
 80058f8:	e008      	b.n	800590c <c_object_block_given+0x8a>
  if( !callinfo ) goto RETURN_FALSE;
 80058fa:	bf00      	nop
 80058fc:	e000      	b.n	8005900 <c_object_block_given+0x7e>
    if( !callinfo ) goto RETURN_FALSE;
 80058fe:	bf00      	nop

 RETURN_FALSE:
  SET_FALSE_RETURN();
 8005900:	68b8      	ldr	r0, [r7, #8]
 8005902:	f7ff fca1 	bl	8005248 <mrbc_decref>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2202      	movs	r2, #2
 800590a:	701a      	strb	r2, [r3, #0]
}
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <c_object_kind_of>:

//================================================================
/*! (method) is_a, kind_of
 */
static void c_object_kind_of(struct VM *vm, mrbc_value v[], int argc)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_CLASS ) {
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	3310      	adds	r3, #16
 8005924:	f993 3000 	ldrsb.w	r3, [r3]
 8005928:	2b07      	cmp	r3, #7
 800592a:	d005      	beq.n	8005938 <c_object_kind_of+0x24>
    mrbc_raise(vm, MRBC_CLASS(TypeError), "class required");
 800592c:	4a0e      	ldr	r2, [pc, #56]	; (8005968 <c_object_kind_of+0x54>)
 800592e:	490f      	ldr	r1, [pc, #60]	; (800596c <c_object_kind_of+0x58>)
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f005 fd79 	bl	800b428 <mrbc_raise>
    return;
 8005936:	e014      	b.n	8005962 <c_object_kind_of+0x4e>
  }

  SET_BOOL_RETURN( mrbc_obj_is_kind_of( &v[0], v[1].cls ));
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3310      	adds	r3, #16
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	4619      	mov	r1, r3
 8005940:	68b8      	ldr	r0, [r7, #8]
 8005942:	f003 fea2 	bl	800968a <mrbc_obj_is_kind_of>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <c_object_kind_of+0x3c>
 800594c:	2303      	movs	r3, #3
 800594e:	e000      	b.n	8005952 <c_object_kind_of+0x3e>
 8005950:	2302      	movs	r3, #2
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	68b8      	ldr	r0, [r7, #8]
 8005956:	f7ff fc77 	bl	8005248 <mrbc_decref>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	b25a      	sxtb	r2, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	701a      	strb	r2, [r3, #0]
}
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	08018d98 	.word	0x08018d98
 800596c:	200001b4 	.word	0x200001b4

08005970 <c_object_nil>:

//================================================================
/*! (method) nil?
 */
static void c_object_nil(struct VM *vm, mrbc_value v[], int argc)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  SET_BOOL_RETURN( mrbc_type(v[0]) == MRBC_TT_NIL );
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f993 3000 	ldrsb.w	r3, [r3]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <c_object_nil+0x1a>
 8005986:	2303      	movs	r3, #3
 8005988:	e000      	b.n	800598c <c_object_nil+0x1c>
 800598a:	2302      	movs	r3, #2
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	68b8      	ldr	r0, [r7, #8]
 8005990:	f7ff fc5a 	bl	8005248 <mrbc_decref>
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	b25a      	sxtb	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	701a      	strb	r2, [r3, #0]
}
 800599c:	bf00      	nop
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <c_object_p>:

//================================================================
/*! (method) p
 */
static void c_object_p(struct VM *vm, mrbc_value v[], int argc)
{
 80059a4:	b590      	push	{r4, r7, lr}
 80059a6:	b093      	sub	sp, #76	; 0x4c
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  int i;
  for( i = 1; i <= argc; i++ ) {
 80059b0:	2301      	movs	r3, #1
 80059b2:	647b      	str	r3, [r7, #68]	; 0x44
 80059b4:	e009      	b.n	80059ca <c_object_p+0x26>
    mrbc_p( &v[i] );
 80059b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	f004 fcc5 	bl	800a34e <mrbc_p>
  for( i = 1; i <= argc; i++ ) {
 80059c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c6:	3301      	adds	r3, #1
 80059c8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	ddf1      	ble.n	80059b6 <c_object_p+0x12>
  }

  if (argc == 0) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <c_object_p+0x42>
    SET_NIL_RETURN();
 80059d8:	68b8      	ldr	r0, [r7, #8]
 80059da:	f7ff fc35 	bl	8005248 <mrbc_decref>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
      }
      value.array->n_stored = argc;
      SET_RETURN(value);
    }
  }
}
 80059e4:	e061      	b.n	8005aaa <c_object_p+0x106>
  } else if (argc == 1) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d116      	bne.n	8005a1a <c_object_p+0x76>
    mrbc_incref( &v[1] );
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	3310      	adds	r3, #16
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fbf5 	bl	80051e0 <mrbc_incref>
    SET_RETURN(v[1]);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80059fc:	3310      	adds	r3, #16
 80059fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005a04:	68b8      	ldr	r0, [r7, #8]
 8005a06:	f7ff fc1f 	bl	8005248 <mrbc_decref>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	461c      	mov	r4, r3
 8005a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005a18:	e047      	b.n	8005aaa <c_object_p+0x106>
    mrbc_value value = mrbc_array_new(vm, argc);
 8005a1a:	f107 0320 	add.w	r3, r7, #32
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68f9      	ldr	r1, [r7, #12]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fc fc97 	bl	8002356 <mrbc_array_new>
    if( value.array == NULL ) {
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <c_object_p+0x98>
      SET_NIL_RETURN();  // ENOMEM
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f7ff fc0a 	bl	8005248 <mrbc_decref>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
}
 8005a3a:	e036      	b.n	8005aaa <c_object_p+0x106>
      for ( i = 1; i <= argc; i++ ) {
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a40:	e01a      	b.n	8005a78 <c_object_p+0xd4>
        mrbc_incref( &v[i] );
 8005a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4413      	add	r3, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fbc8 	bl	80051e0 <mrbc_incref>
        value.array->data[i-1] = v[i];
 8005a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	18d1      	adds	r1, r2, r3
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8005a62:	3b01      	subs	r3, #1
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	4413      	add	r3, r2
 8005a68:	461c      	mov	r4, r3
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      for ( i = 1; i <= argc; i++ ) {
 8005a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a74:	3301      	adds	r3, #1
 8005a76:	647b      	str	r3, [r7, #68]	; 0x44
 8005a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	dde0      	ble.n	8005a42 <c_object_p+0x9e>
      value.array->n_stored = argc;
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	b292      	uxth	r2, r2
 8005a86:	80da      	strh	r2, [r3, #6]
      SET_RETURN(value);
 8005a88:	f107 0410 	add.w	r4, r7, #16
 8005a8c:	f107 0320 	add.w	r3, r7, #32
 8005a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005a96:	68b8      	ldr	r0, [r7, #8]
 8005a98:	f7ff fbd6 	bl	8005248 <mrbc_decref>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	461c      	mov	r4, r3
 8005aa0:	f107 0310 	add.w	r3, r7, #16
 8005aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005aa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005aaa:	bf00      	nop
 8005aac:	374c      	adds	r7, #76	; 0x4c
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd90      	pop	{r4, r7, pc}

08005ab2 <c_object_print>:

//================================================================
/*! (method) print
 */
static void c_object_print(struct VM *vm, mrbc_value v[], int argc)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
  int i;
  for( i = 1; i <= argc; i++ ) {
 8005abe:	2301      	movs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	e009      	b.n	8005ad8 <c_object_print+0x26>
    mrbc_print_sub( &v[i] );
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4413      	add	r3, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 fd39 	bl	800a544 <mrbc_print_sub>
  for( i = 1; i <= argc; i++ ) {
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	ddf1      	ble.n	8005ac4 <c_object_print+0x12>
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <c_object_puts>:

//================================================================
/*! (method) puts
 */
static void c_object_puts(struct VM *vm, mrbc_value v[], int argc)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b086      	sub	sp, #24
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	607a      	str	r2, [r7, #4]
  int i;
  if( argc ){
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d017      	beq.n	8005b2c <c_object_puts+0x42>
    for( i = 1; i <= argc; i++ ) {
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e00f      	b.n	8005b22 <c_object_puts+0x38>
      if( mrbc_puts_sub( &v[i] ) == 0 ) mrbc_putchar('\n');
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	4413      	add	r3, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f004 fce8 	bl	800a4e0 <mrbc_puts_sub>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <c_object_puts+0x32>
 8005b16:	200a      	movs	r0, #10
 8005b18:	f004 fac6 	bl	800a0a8 <mrbc_putchar>
    for( i = 1; i <= argc; i++ ) {
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	ddeb      	ble.n	8005b02 <c_object_puts+0x18>
 8005b2a:	e002      	b.n	8005b32 <c_object_puts+0x48>
    }
  } else {
    mrbc_putchar('\n');
 8005b2c:	200a      	movs	r0, #10
 8005b2e:	f004 fabb 	bl	800a0a8 <mrbc_putchar>
  }
  SET_NIL_RETURN();
 8005b32:	68b8      	ldr	r0, [r7, #8]
 8005b34:	f7ff fb88 	bl	8005248 <mrbc_decref>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	701a      	strb	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <c_object_raise>:
  case 4. raise ExceptionObject
  case 5. raise ExceptionClass, "message"
  case 6. raise ExceptionObject, "message"
*/
static void c_object_raise(struct VM *vm, mrbc_value v[], int argc)
{
 8005b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4a:	b08b      	sub	sp, #44	; 0x2c
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	61f8      	str	r0, [r7, #28]
 8005b50:	61b9      	str	r1, [r7, #24]
 8005b52:	617a      	str	r2, [r7, #20]
  assert( !mrbc_israised(vm) );
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8005b5a:	2b0e      	cmp	r3, #14
 8005b5c:	d106      	bne.n	8005b6c <c_object_raise+0x24>
 8005b5e:	4b7d      	ldr	r3, [pc, #500]	; (8005d54 <c_object_raise+0x20c>)
 8005b60:	4a7d      	ldr	r2, [pc, #500]	; (8005d58 <c_object_raise+0x210>)
 8005b62:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005b66:	487d      	ldr	r0, [pc, #500]	; (8005d5c <c_object_raise+0x214>)
 8005b68:	f00f fd6c 	bl	8015644 <__assert_func>

  // case 1. raise (no argument)
  if( argc == 0 ) {
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10e      	bne.n	8005b90 <c_object_raise+0x48>
    vm->exception = mrbc_exception_new( vm, MRBC_CLASS(RuntimeError), "", 0 );
 8005b72:	69fc      	ldr	r4, [r7, #28]
 8005b74:	4638      	mov	r0, r7
 8005b76:	2300      	movs	r3, #0
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	4b79      	ldr	r3, [pc, #484]	; (8005d60 <c_object_raise+0x218>)
 8005b7c:	4a79      	ldr	r2, [pc, #484]	; (8005d64 <c_object_raise+0x21c>)
 8005b7e:	69f9      	ldr	r1, [r7, #28]
 8005b80:	f005 fb9c 	bl	800b2bc <mrbc_exception_new>
 8005b84:	3428      	adds	r4, #40	; 0x28
 8005b86:	463b      	mov	r3, r7
 8005b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005b8e:	e0c3      	b.n	8005d18 <c_object_raise+0x1d0>
  } else

  // case 2. raise "message"
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING ) {
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d11f      	bne.n	8005bd6 <c_object_raise+0x8e>
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	3310      	adds	r3, #16
 8005b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8005b9e:	2b0b      	cmp	r3, #11
 8005ba0:	d119      	bne.n	8005bd6 <c_object_raise+0x8e>
    vm->exception = mrbc_exception_new( vm, MRBC_CLASS(RuntimeError),
			mrbc_string_cstr(&v[1]), mrbc_string_size(&v[1]) );
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	3310      	adds	r3, #16
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fc47 	bl	800543a <mrbc_string_cstr>
 8005bac:	4605      	mov	r5, r0
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	3310      	adds	r3, #16
    vm->exception = mrbc_exception_new( vm, MRBC_CLASS(RuntimeError),
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fc34 	bl	8005420 <mrbc_string_size>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	69fc      	ldr	r4, [r7, #28]
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	4a68      	ldr	r2, [pc, #416]	; (8005d64 <c_object_raise+0x21c>)
 8005bc4:	69f9      	ldr	r1, [r7, #28]
 8005bc6:	f005 fb79 	bl	800b2bc <mrbc_exception_new>
 8005bca:	3428      	adds	r4, #40	; 0x28
 8005bcc:	463b      	mov	r3, r7
 8005bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005bd4:	e0a0      	b.n	8005d18 <c_object_raise+0x1d0>
  } else

  // case 3. raise ExceptionClass
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_CLASS &&
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d11f      	bne.n	8005c1c <c_object_raise+0xd4>
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	3310      	adds	r3, #16
 8005be0:	f993 3000 	ldrsb.w	r3, [r3]
 8005be4:	2b07      	cmp	r3, #7
 8005be6:	d119      	bne.n	8005c1c <c_object_raise+0xd4>
      mrbc_obj_is_kind_of( &v[1], MRBC_CLASS(Exception))) {
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	3310      	adds	r3, #16
 8005bec:	495e      	ldr	r1, [pc, #376]	; (8005d68 <c_object_raise+0x220>)
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f003 fd4b 	bl	800968a <mrbc_obj_is_kind_of>
 8005bf4:	4603      	mov	r3, r0
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_CLASS &&
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d010      	beq.n	8005c1c <c_object_raise+0xd4>
    vm->exception = mrbc_exception_new( vm, v[1].cls, 0, 0 );
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	3310      	adds	r3, #16
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	69fc      	ldr	r4, [r7, #28]
 8005c02:	4638      	mov	r0, r7
 8005c04:	2300      	movs	r3, #0
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	69f9      	ldr	r1, [r7, #28]
 8005c0c:	f005 fb56 	bl	800b2bc <mrbc_exception_new>
 8005c10:	3428      	adds	r4, #40	; 0x28
 8005c12:	463b      	mov	r3, r7
 8005c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005c1a:	e07d      	b.n	8005d18 <c_object_raise+0x1d0>
  } else

  // case 4. raise ExceptionObject
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_EXCEPTION ) {
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d113      	bne.n	8005c4a <c_object_raise+0x102>
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	3310      	adds	r3, #16
 8005c26:	f993 3000 	ldrsb.w	r3, [r3]
 8005c2a:	2b0e      	cmp	r3, #14
 8005c2c:	d10d      	bne.n	8005c4a <c_object_raise+0x102>
    mrbc_incref( &v[1] );
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	3310      	adds	r3, #16
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fad4 	bl	80051e0 <mrbc_incref>
    vm->exception = v[1];
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f102 0428 	add.w	r4, r2, #40	; 0x28
 8005c40:	3310      	adds	r3, #16
 8005c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005c48:	e066      	b.n	8005d18 <c_object_raise+0x1d0>
  } else

  // case 5. raise ExceptionClass, "param"
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_CLASS
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d128      	bne.n	8005ca2 <c_object_raise+0x15a>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	3310      	adds	r3, #16
 8005c54:	f993 3000 	ldrsb.w	r3, [r3]
 8005c58:	2b07      	cmp	r3, #7
 8005c5a:	d122      	bne.n	8005ca2 <c_object_raise+0x15a>
                && mrbc_type(v[2]) == MRBC_TT_STRING ) {
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	3320      	adds	r3, #32
 8005c60:	f993 3000 	ldrsb.w	r3, [r3]
 8005c64:	2b0b      	cmp	r3, #11
 8005c66:	d11c      	bne.n	8005ca2 <c_object_raise+0x15a>
    vm->exception = mrbc_exception_new( vm, v[1].cls,
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	3310      	adds	r3, #16
 8005c6c:	689d      	ldr	r5, [r3, #8]
			mrbc_string_cstr(&v[2]), mrbc_string_size(&v[2]) );
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	3320      	adds	r3, #32
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fbe1 	bl	800543a <mrbc_string_cstr>
 8005c78:	4606      	mov	r6, r0
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	3320      	adds	r3, #32
    vm->exception = mrbc_exception_new( vm, v[1].cls,
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fbce 	bl	8005420 <mrbc_string_size>
 8005c84:	4603      	mov	r3, r0
 8005c86:	69fc      	ldr	r4, [r7, #28]
 8005c88:	4638      	mov	r0, r7
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	4633      	mov	r3, r6
 8005c8e:	462a      	mov	r2, r5
 8005c90:	69f9      	ldr	r1, [r7, #28]
 8005c92:	f005 fb13 	bl	800b2bc <mrbc_exception_new>
 8005c96:	3428      	adds	r4, #40	; 0x28
 8005c98:	463b      	mov	r3, r7
 8005c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005ca0:	e03a      	b.n	8005d18 <c_object_raise+0x1d0>
  } else

  // case 6. raise ExceptionObject, "param"
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_EXCEPTION
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d129      	bne.n	8005cfc <c_object_raise+0x1b4>
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	3310      	adds	r3, #16
 8005cac:	f993 3000 	ldrsb.w	r3, [r3]
 8005cb0:	2b0e      	cmp	r3, #14
 8005cb2:	d123      	bne.n	8005cfc <c_object_raise+0x1b4>
                && mrbc_type(v[2]) == MRBC_TT_STRING ) {
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	3320      	adds	r3, #32
 8005cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8005cbc:	2b0b      	cmp	r3, #11
 8005cbe:	d11d      	bne.n	8005cfc <c_object_raise+0x1b4>
    vm->exception = mrbc_exception_new( vm, v[1].exception->cls,
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	3310      	adds	r3, #16
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	685d      	ldr	r5, [r3, #4]
			mrbc_string_cstr(&v[2]), mrbc_string_size(&v[2]) );
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	3320      	adds	r3, #32
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff fbb4 	bl	800543a <mrbc_string_cstr>
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	3320      	adds	r3, #32
    vm->exception = mrbc_exception_new( vm, v[1].exception->cls,
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fba1 	bl	8005420 <mrbc_string_size>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	69fc      	ldr	r4, [r7, #28]
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	4633      	mov	r3, r6
 8005ce8:	462a      	mov	r2, r5
 8005cea:	69f9      	ldr	r1, [r7, #28]
 8005cec:	f005 fae6 	bl	800b2bc <mrbc_exception_new>
 8005cf0:	3428      	adds	r4, #40	; 0x28
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005cfa:	e00d      	b.n	8005d18 <c_object_raise+0x1d0>
  } else {

    // fail.
    vm->exception = mrbc_exception_new( vm, MRBC_CLASS(ArgumentError), 0, 0 );
 8005cfc:	69fc      	ldr	r4, [r7, #28]
 8005cfe:	4638      	mov	r0, r7
 8005d00:	2300      	movs	r3, #0
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	2300      	movs	r3, #0
 8005d06:	4a19      	ldr	r2, [pc, #100]	; (8005d6c <c_object_raise+0x224>)
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	f005 fad7 	bl	800b2bc <mrbc_exception_new>
 8005d0e:	3428      	adds	r4, #40	; 0x28
 8005d10:	463b      	mov	r3, r7
 8005d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  // set raised method to exception instance.
  if( vm->callinfo_tail != 0 &&
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d011      	beq.n	8005d44 <c_object_raise+0x1fc>
      vm->exception.tt == MRBC_TT_EXCEPTION &&
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
  if( vm->callinfo_tail != 0 &&
 8005d26:	2b0e      	cmp	r3, #14
 8005d28:	d10c      	bne.n	8005d44 <c_object_raise+0x1fc>
      vm->exception.exception->method_id == 0 ) {
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
      vm->exception.tt == MRBC_TT_EXCEPTION &&
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <c_object_raise+0x1fc>
    vm->exception.exception->method_id = vm->callinfo_tail->method_id;
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	69da      	ldr	r2, [r3, #28]
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8005d42:	811a      	strh	r2, [r3, #8]
  }

  vm->flag_preemption = 2;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2202      	movs	r2, #2
 8005d48:	70da      	strb	r2, [r3, #3]
}
 8005d4a:	bf00      	nop
 8005d4c:	3724      	adds	r7, #36	; 0x24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	08018da8 	.word	0x08018da8
 8005d58:	0801ac8c 	.word	0x0801ac8c
 8005d5c:	08018dbc 	.word	0x08018dbc
 8005d60:	08018ddc 	.word	0x08018ddc
 8005d64:	200001a4 	.word	0x200001a4
 8005d68:	2000010c 	.word	0x2000010c
 8005d6c:	20000154 	.word	0x20000154

08005d70 <c_object_object_id>:
#if defined(MRBC_DEBUG)
//================================================================
/*! (method - debug) object_id
 */
static void c_object_object_id(struct VM *vm, mrbc_value v[], int argc)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  // tiny implementation.
  SET_INT_RETURN( mrbc_integer(v[0]) );
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	68b8      	ldr	r0, [r7, #8]
 8005d84:	f7ff fa60 	bl	8005248 <mrbc_decref>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	609a      	str	r2, [r3, #8]
}
 8005d94:	bf00      	nop
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <c_object_instance_methods>:

//================================================================
/*! (method - debug) instance_methods
 */
static void c_object_instance_methods(struct VM *vm, mrbc_value v[], int argc)
{
 8005d9c:	b590      	push	{r4, r7, lr}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  // TODO: check argument.

  // temporary code for operation check.
  mrbc_printf("[");
 8005da8:	4819      	ldr	r0, [pc, #100]	; (8005e10 <c_object_instance_methods+0x74>)
 8005daa:	f004 f9cd 	bl	800a148 <mrbc_printf>
  int flag_first = 1;
 8005dae:	2301      	movs	r3, #1
 8005db0:	61fb      	str	r3, [r7, #28]

  mrbc_class *cls = find_class_by_object( v );
 8005db2:	68b8      	ldr	r0, [r7, #8]
 8005db4:	f7ff fac6 	bl	8005344 <find_class_by_object>
 8005db8:	6178      	str	r0, [r7, #20]
  mrbc_method *method = cls->method_link;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	61bb      	str	r3, [r7, #24]
  while( method ) {
 8005dc0:	e016      	b.n	8005df0 <c_object_instance_methods+0x54>
    mrbc_printf("%s:%s", (flag_first ? "" : ", "),
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <c_object_instance_methods+0x30>
 8005dc8:	4c12      	ldr	r4, [pc, #72]	; (8005e14 <c_object_instance_methods+0x78>)
 8005dca:	e000      	b.n	8005dce <c_object_instance_methods+0x32>
 8005dcc:	4c12      	ldr	r4, [pc, #72]	; (8005e18 <c_object_instance_methods+0x7c>)
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f007 ff33 	bl	800dc40 <mrbc_symid_to_str>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4621      	mov	r1, r4
 8005de0:	480e      	ldr	r0, [pc, #56]	; (8005e1c <c_object_instance_methods+0x80>)
 8005de2:	f004 f9b1 	bl	800a148 <mrbc_printf>
		mrbc_symid_to_str(method->sym_id) );
    flag_first = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
    method = method->next;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	61bb      	str	r3, [r7, #24]
  while( method ) {
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e5      	bne.n	8005dc2 <c_object_instance_methods+0x26>
  }

  mrbc_printf("]");
 8005df6:	480a      	ldr	r0, [pc, #40]	; (8005e20 <c_object_instance_methods+0x84>)
 8005df8:	f004 f9a6 	bl	800a148 <mrbc_printf>

  SET_NIL_RETURN();
 8005dfc:	68b8      	ldr	r0, [r7, #8]
 8005dfe:	f7ff fa23 	bl	8005248 <mrbc_decref>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2201      	movs	r2, #1
 8005e06:	701a      	strb	r2, [r3, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	3724      	adds	r7, #36	; 0x24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd90      	pop	{r4, r7, pc}
 8005e10:	08018de0 	.word	0x08018de0
 8005e14:	08018ddc 	.word	0x08018ddc
 8005e18:	08018de4 	.word	0x08018de4
 8005e1c:	08018de8 	.word	0x08018de8
 8005e20:	08018df0 	.word	0x08018df0

08005e24 <c_object_instance_variables>:

//================================================================
/*! (method - debug) instance_variables
 */
static void c_object_instance_variables(struct VM *vm, mrbc_value v[], int argc)
{
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  // temporary code for operation check.
#if 1
  mrbc_kv_handle *kvh = &v[0].instance->ivar;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	3308      	adds	r3, #8
 8005e36:	613b      	str	r3, [r7, #16]

  mrbc_printf("n = %d/%d ", kvh->n_stored, kvh->data_size);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	885b      	ldrh	r3, [r3, #2]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	481b      	ldr	r0, [pc, #108]	; (8005eb4 <c_object_instance_variables+0x90>)
 8005e46:	f004 f97f 	bl	800a148 <mrbc_printf>
  mrbc_printf("[");
 8005e4a:	481b      	ldr	r0, [pc, #108]	; (8005eb8 <c_object_instance_variables+0x94>)
 8005e4c:	f004 f97c 	bl	800a148 <mrbc_printf>

  int i;
  for( i = 0; i < kvh->n_stored; i++ ) {
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e01b      	b.n	8005e8e <c_object_instance_variables+0x6a>
    mrbc_printf("%s:@%s", (i == 0 ? "" : ", "),
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <c_object_instance_variables+0x3c>
 8005e5c:	4c17      	ldr	r4, [pc, #92]	; (8005ebc <c_object_instance_variables+0x98>)
 8005e5e:	e000      	b.n	8005e62 <c_object_instance_variables+0x3e>
 8005e60:	4c17      	ldr	r4, [pc, #92]	; (8005ec0 <c_object_instance_variables+0x9c>)
		mrbc_symid_to_str( kvh->data[i].sym_id ));
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6859      	ldr	r1, [r3, #4]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	440b      	add	r3, r1
    mrbc_printf("%s:@%s", (i == 0 ? "" : ", "),
 8005e72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f007 fee2 	bl	800dc40 <mrbc_symid_to_str>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	4621      	mov	r1, r4
 8005e82:	4810      	ldr	r0, [pc, #64]	; (8005ec4 <c_object_instance_variables+0xa0>)
 8005e84:	f004 f960 	bl	800a148 <mrbc_printf>
  for( i = 0; i < kvh->n_stored; i++ ) {
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	885b      	ldrh	r3, [r3, #2]
 8005e92:	461a      	mov	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	4293      	cmp	r3, r2
 8005e98:	dbdd      	blt.n	8005e56 <c_object_instance_variables+0x32>
  }

  mrbc_printf("]\n");
 8005e9a:	480b      	ldr	r0, [pc, #44]	; (8005ec8 <c_object_instance_variables+0xa4>)
 8005e9c:	f004 f954 	bl	800a148 <mrbc_printf>
#endif
  SET_NIL_RETURN();
 8005ea0:	68b8      	ldr	r0, [r7, #8]
 8005ea2:	f7ff f9d1 	bl	8005248 <mrbc_decref>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	701a      	strb	r2, [r3, #0]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd90      	pop	{r4, r7, pc}
 8005eb4:	08018df4 	.word	0x08018df4
 8005eb8:	08018de0 	.word	0x08018de0
 8005ebc:	08018ddc 	.word	0x08018ddc
 8005ec0:	08018de4 	.word	0x08018de4
 8005ec4:	08018e00 	.word	0x08018e00
 8005ec8:	08018e08 	.word	0x08018e08

08005ecc <c_object_memory_statistics>:
#if !defined(MRBC_ALLOC_LIBC)
//================================================================
/*! (method - debug) memory_statistics
 */
static void c_object_memory_statistics(struct VM *vm, mrbc_value v[], int argc)
{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b0b1      	sub	sp, #196	; 0xc4
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  struct MRBC_ALLOC_STATISTICS mem;

  mrbc_alloc_statistics( &mem );
 8005ed8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fc f907 	bl	80020f0 <mrbc_alloc_statistics>
  if( argc == 0 || mrbc_type(v[1]) == MRBC_TT_TRUE ) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <c_object_memory_statistics+0x28>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	3310      	adds	r3, #16
 8005eec:	f993 3000 	ldrsb.w	r3, [r3]
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d11a      	bne.n	8005f2a <c_object_memory_statistics+0x5e>
    mrbc_printf("Memory Statistics\n");
 8005ef4:	4866      	ldr	r0, [pc, #408]	; (8006090 <c_object_memory_statistics+0x1c4>)
 8005ef6:	f004 f927 	bl	800a148 <mrbc_printf>
    mrbc_printf("  Total: %d\n", mem.total);
 8005efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005efe:	4619      	mov	r1, r3
 8005f00:	4864      	ldr	r0, [pc, #400]	; (8006094 <c_object_memory_statistics+0x1c8>)
 8005f02:	f004 f921 	bl	800a148 <mrbc_printf>
    mrbc_printf("  Used : %d\n", mem.used);
 8005f06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4862      	ldr	r0, [pc, #392]	; (8006098 <c_object_memory_statistics+0x1cc>)
 8005f0e:	f004 f91b 	bl	800a148 <mrbc_printf>
    mrbc_printf("  Free : %d\n", mem.free);
 8005f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f16:	4619      	mov	r1, r3
 8005f18:	4860      	ldr	r0, [pc, #384]	; (800609c <c_object_memory_statistics+0x1d0>)
 8005f1a:	f004 f915 	bl	800a148 <mrbc_printf>
    mrbc_printf("  Frag.: %d\n", mem.fragmentation);
 8005f1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f22:	4619      	mov	r1, r3
 8005f24:	485e      	ldr	r0, [pc, #376]	; (80060a0 <c_object_memory_statistics+0x1d4>)
 8005f26:	f004 f90f 	bl	800a148 <mrbc_printf>
  }

  // make a return value.
  mrbc_value ret = mrbc_hash_new(vm, 4);
 8005f2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f2e:	2204      	movs	r2, #4
 8005f30:	68f9      	ldr	r1, [r7, #12]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fd ff83 	bl	8003e3e <mrbc_hash_new>
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("total") ),
 8005f38:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	609a      	str	r2, [r3, #8]
 8005f44:	60da      	str	r2, [r3, #12]
 8005f46:	2306      	movs	r3, #6
 8005f48:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8005f4c:	4855      	ldr	r0, [pc, #340]	; (80060a4 <c_object_memory_statistics+0x1d8>)
 8005f4e:	f007 fe3f 	bl	800dbd0 <mrbc_str_to_symid>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		      &mrbc_integer_value( mem.total ));
 8005f58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	609a      	str	r2, [r3, #8]
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	2304      	movs	r3, #4
 8005f68:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8005f6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("total") ),
 8005f74:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005f78:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005f7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe f80e 	bl	8003fa2 <mrbc_hash_set>
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("used") ),
 8005f86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	605a      	str	r2, [r3, #4]
 8005f90:	609a      	str	r2, [r3, #8]
 8005f92:	60da      	str	r2, [r3, #12]
 8005f94:	2306      	movs	r3, #6
 8005f96:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8005f9a:	4843      	ldr	r0, [pc, #268]	; (80060a8 <c_object_memory_statistics+0x1dc>)
 8005f9c:	f007 fe18 	bl	800dbd0 <mrbc_str_to_symid>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	67bb      	str	r3, [r7, #120]	; 0x78
		      &mrbc_integer_value( mem.used ));
 8005fa4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	609a      	str	r2, [r3, #8]
 8005fb0:	60da      	str	r2, [r3, #12]
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8005fb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fbc:	66bb      	str	r3, [r7, #104]	; 0x68
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("used") ),
 8005fbe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005fc2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005fc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd ffe9 	bl	8003fa2 <mrbc_hash_set>
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("free") ),
 8005fd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	605a      	str	r2, [r3, #4]
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	60da      	str	r2, [r3, #12]
 8005fde:	2306      	movs	r3, #6
 8005fe0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8005fe4:	4831      	ldr	r0, [pc, #196]	; (80060ac <c_object_memory_statistics+0x1e0>)
 8005fe6:	f007 fdf3 	bl	800dbd0 <mrbc_str_to_symid>
 8005fea:	4603      	mov	r3, r0
 8005fec:	65bb      	str	r3, [r7, #88]	; 0x58
		      &mrbc_integer_value( mem.free ));
 8005fee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	605a      	str	r2, [r3, #4]
 8005ff8:	609a      	str	r2, [r3, #8]
 8005ffa:	60da      	str	r2, [r3, #12]
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8006002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006006:	64bb      	str	r3, [r7, #72]	; 0x48
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("free") ),
 8006008:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800600c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006010:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006014:	4618      	mov	r0, r3
 8006016:	f7fd ffc4 	bl	8003fa2 <mrbc_hash_set>
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("fragmentation") ),
 800601a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	605a      	str	r2, [r3, #4]
 8006024:	609a      	str	r2, [r3, #8]
 8006026:	60da      	str	r2, [r3, #12]
 8006028:	2306      	movs	r3, #6
 800602a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800602e:	4820      	ldr	r0, [pc, #128]	; (80060b0 <c_object_memory_statistics+0x1e4>)
 8006030:	f007 fdce 	bl	800dbd0 <mrbc_str_to_symid>
 8006034:	4603      	mov	r3, r0
 8006036:	63bb      	str	r3, [r7, #56]	; 0x38
		      &mrbc_integer_value( mem.fragmentation ));
 8006038:	f107 0320 	add.w	r3, r7, #32
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	609a      	str	r2, [r3, #8]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	2304      	movs	r3, #4
 8006048:	f887 3020 	strb.w	r3, [r7, #32]
 800604c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("fragmentation") ),
 8006052:	f107 0220 	add.w	r2, r7, #32
 8006056:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800605a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800605e:	4618      	mov	r0, r3
 8006060:	f7fd ff9f 	bl	8003fa2 <mrbc_hash_set>

  SET_RETURN(ret);
 8006064:	f107 0410 	add.w	r4, r7, #16
 8006068:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800606c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800606e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006072:	68b8      	ldr	r0, [r7, #8]
 8006074:	f7ff f8e8 	bl	8005248 <mrbc_decref>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	461c      	mov	r4, r3
 800607c:	f107 0310 	add.w	r3, r7, #16
 8006080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006086:	bf00      	nop
 8006088:	37c4      	adds	r7, #196	; 0xc4
 800608a:	46bd      	mov	sp, r7
 800608c:	bd90      	pop	{r4, r7, pc}
 800608e:	bf00      	nop
 8006090:	08018e0c 	.word	0x08018e0c
 8006094:	08018e20 	.word	0x08018e20
 8006098:	08018e30 	.word	0x08018e30
 800609c:	08018e40 	.word	0x08018e40
 80060a0:	08018e50 	.word	0x08018e50
 80060a4:	08018e60 	.word	0x08018e60
 80060a8:	08018e68 	.word	0x08018e68
 80060ac:	08018e70 	.word	0x08018e70
 80060b0:	08018e78 	.word	0x08018e78

080060b4 <c_object_getiv>:

//================================================================
/*! (method) instance variable getter used by attr_reader.
 */
static void c_object_getiv(struct VM *vm, mrbc_value v[], int argc)
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b08f      	sub	sp, #60	; 0x3c
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  mrbc_sym sym_id = mrbc_get_callee_symid(vm);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f008 fd23 	bl	800eb0c <mrbc_get_callee_symid>
 80060c6:	4603      	mov	r3, r0
 80060c8:	86fb      	strh	r3, [r7, #54]	; 0x36
  mrbc_value ret = mrbc_instance_getiv(&v[0], sym_id);
 80060ca:	f107 0320 	add.w	r3, r7, #32
 80060ce:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f003 fa54 	bl	8009582 <mrbc_instance_getiv>

  SET_RETURN(ret);
 80060da:	f107 0410 	add.w	r4, r7, #16
 80060de:	f107 0320 	add.w	r3, r7, #32
 80060e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80060e8:	68b8      	ldr	r0, [r7, #8]
 80060ea:	f7ff f8ad 	bl	8005248 <mrbc_decref>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	461c      	mov	r4, r3
 80060f2:	f107 0310 	add.w	r3, r7, #16
 80060f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80060fc:	bf00      	nop
 80060fe:	373c      	adds	r7, #60	; 0x3c
 8006100:	46bd      	mov	sp, r7
 8006102:	bd90      	pop	{r4, r7, pc}

08006104 <c_object_setiv>:

//================================================================
/*! (method) instance variable setter used by attr_accessor.
 */
static void c_object_setiv(struct VM *vm, mrbc_value v[], int argc)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  const char *name = mrbc_get_callee_name(vm);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f008 fd13 	bl	800eb3c <mrbc_get_callee_name>
 8006116:	61f8      	str	r0, [r7, #28]
  int len = strlen(name);
 8006118:	69f8      	ldr	r0, [r7, #28]
 800611a:	f7fa f86b 	bl	80001f4 <strlen>
 800611e:	4603      	mov	r3, r0
 8006120:	61bb      	str	r3, [r7, #24]
  char *namebuf = mrbc_alloc(vm, len);
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	4618      	mov	r0, r3
 8006126:	f7fb fccf 	bl	8001ac8 <mrbc_raw_alloc>
 800612a:	6178      	str	r0, [r7, #20]
  if( !namebuf ) return;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01e      	beq.n	8006170 <c_object_setiv+0x6c>

  memcpy( namebuf, name, len-1 );
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	3b01      	subs	r3, #1
 8006136:	461a      	mov	r2, r3
 8006138:	69f9      	ldr	r1, [r7, #28]
 800613a:	6978      	ldr	r0, [r7, #20]
 800613c:	f010 fb5b 	bl	80167f6 <memcpy>
  namebuf[len-1] = '\0';	// delete '='
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	3b01      	subs	r3, #1
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4413      	add	r3, r2
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
  mrbc_sym sym_id = mrbc_str_to_symid(namebuf);
 800614c:	6978      	ldr	r0, [r7, #20]
 800614e:	f007 fd3f 	bl	800dbd0 <mrbc_str_to_symid>
 8006152:	4603      	mov	r3, r0
 8006154:	827b      	strh	r3, [r7, #18]

  mrbc_instance_setiv(&v[0], sym_id, &v[1]);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f103 0210 	add.w	r2, r3, #16
 800615c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006160:	4619      	mov	r1, r3
 8006162:	68b8      	ldr	r0, [r7, #8]
 8006164:	f003 f9f6 	bl	8009554 <mrbc_instance_setiv>
  mrbc_free(vm, namebuf);
 8006168:	6978      	ldr	r0, [r7, #20]
 800616a:	f7fb fe89 	bl	8001e80 <mrbc_raw_free>
 800616e:	e000      	b.n	8006172 <c_object_setiv+0x6e>
  if( !namebuf ) return;
 8006170:	bf00      	nop
}
 8006172:	3720      	adds	r7, #32
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <c_object_attr_reader>:

//================================================================
/*! (class method) access method 'attr_reader'
 */
static void c_object_attr_reader(struct VM *vm, mrbc_value v[], int argc)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  int i;
  for( i = 1; i <= argc; i++ ) {
 8006184:	2301      	movs	r3, #1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	e01f      	b.n	80061ca <c_object_attr_reader+0x52>
    if( mrbc_type(v[i]) != MRBC_TT_SYMBOL ) {
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	f993 3000 	ldrsb.w	r3, [r3]
 8006196:	2b06      	cmp	r3, #6
 8006198:	d005      	beq.n	80061a6 <c_object_attr_reader+0x2e>
      // Not support "String" only :symbol
      mrbc_raise(vm, MRBC_CLASS(TypeError), "not a symbol");
 800619a:	4a0f      	ldr	r2, [pc, #60]	; (80061d8 <c_object_attr_reader+0x60>)
 800619c:	490f      	ldr	r1, [pc, #60]	; (80061dc <c_object_attr_reader+0x64>)
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f005 f942 	bl	800b428 <mrbc_raise>
      return;
 80061a4:	e015      	b.n	80061d2 <c_object_attr_reader+0x5a>
    }

    // define reader method
    const char *name = mrbc_symbol_cstr(&v[i]);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4413      	add	r3, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff f89e 	bl	80052f0 <mrbc_symbol_cstr>
 80061b4:	6138      	str	r0, [r7, #16]
    mrbc_define_method(vm, v[0].cls, name, c_object_getiv);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	6899      	ldr	r1, [r3, #8]
 80061ba:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <c_object_attr_reader+0x68>)
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f003 f924 	bl	800940c <mrbc_define_method>
  for( i = 1; i <= argc; i++ ) {
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	3301      	adds	r3, #1
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	dddb      	ble.n	800618a <c_object_attr_reader+0x12>
  }
}
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	08018e88 	.word	0x08018e88
 80061dc:	200001b4 	.word	0x200001b4
 80061e0:	080060b5 	.word	0x080060b5

080061e4 <c_object_attr_accessor>:

//================================================================
/*! (class method) access method 'attr_accessor'
 */
static void c_object_attr_accessor(struct VM *vm, mrbc_value v[], int argc)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08c      	sub	sp, #48	; 0x30
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	61f8      	str	r0, [r7, #28]
 80061ec:	61b9      	str	r1, [r7, #24]
 80061ee:	617a      	str	r2, [r7, #20]
  int i;
  for( i = 1; i <= argc; i++ ) {
 80061f0:	2301      	movs	r3, #1
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f4:	e04e      	b.n	8006294 <c_object_attr_accessor+0xb0>
    if( mrbc_type(v[i]) != MRBC_TT_SYMBOL ) {
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4413      	add	r3, r2
 80061fe:	f993 3000 	ldrsb.w	r3, [r3]
 8006202:	2b06      	cmp	r3, #6
 8006204:	d005      	beq.n	8006212 <c_object_attr_accessor+0x2e>
      // Not support "String" only :symbol
      mrbc_raise(vm, MRBC_CLASS(TypeError), "not a symbol");
 8006206:	4a28      	ldr	r2, [pc, #160]	; (80062a8 <c_object_attr_accessor+0xc4>)
 8006208:	4928      	ldr	r1, [pc, #160]	; (80062ac <c_object_attr_accessor+0xc8>)
 800620a:	69f8      	ldr	r0, [r7, #28]
 800620c:	f005 f90c 	bl	800b428 <mrbc_raise>
      return;
 8006210:	e046      	b.n	80062a0 <c_object_attr_accessor+0xbc>
    }

    // define reader method
    const char *name = mrbc_symbol_cstr(&v[i]);
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4413      	add	r3, r2
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff f868 	bl	80052f0 <mrbc_symbol_cstr>
 8006220:	62b8      	str	r0, [r7, #40]	; 0x28
    mrbc_define_method(vm, v[0].cls, name, c_object_getiv);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	6899      	ldr	r1, [r3, #8]
 8006226:	4b22      	ldr	r3, [pc, #136]	; (80062b0 <c_object_attr_accessor+0xcc>)
 8006228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622a:	69f8      	ldr	r0, [r7, #28]
 800622c:	f003 f8ee 	bl	800940c <mrbc_define_method>

    // make string "....=" and define writer method.
    int len = strlen(name);
 8006230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006232:	f7f9 ffdf 	bl	80001f4 <strlen>
 8006236:	4603      	mov	r3, r0
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
    char *namebuf = mrbc_alloc(vm, len+2);
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	3302      	adds	r3, #2
 800623e:	4618      	mov	r0, r3
 8006240:	f7fb fc42 	bl	8001ac8 <mrbc_raw_alloc>
 8006244:	6238      	str	r0, [r7, #32]
    if( !namebuf ) return;
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d028      	beq.n	800629e <c_object_attr_accessor+0xba>
    memcpy(namebuf, name, len);
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	461a      	mov	r2, r3
 8006250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006252:	6a38      	ldr	r0, [r7, #32]
 8006254:	f010 facf 	bl	80167f6 <memcpy>
    namebuf[len] = '=';
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	4413      	add	r3, r2
 800625e:	223d      	movs	r2, #61	; 0x3d
 8006260:	701a      	strb	r2, [r3, #0]
    namebuf[len+1] = 0;
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	3301      	adds	r3, #1
 8006266:	6a3a      	ldr	r2, [r7, #32]
 8006268:	4413      	add	r3, r2
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
    mrbc_symbol_new(vm, namebuf);
 800626e:	463b      	mov	r3, r7
 8006270:	6a3a      	ldr	r2, [r7, #32]
 8006272:	69f9      	ldr	r1, [r7, #28]
 8006274:	4618      	mov	r0, r3
 8006276:	f007 fe11 	bl	800de9c <mrbc_symbol_new>
    mrbc_define_method(vm, v[0].cls, namebuf, c_object_setiv);
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	6899      	ldr	r1, [r3, #8]
 800627e:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <c_object_attr_accessor+0xd0>)
 8006280:	6a3a      	ldr	r2, [r7, #32]
 8006282:	69f8      	ldr	r0, [r7, #28]
 8006284:	f003 f8c2 	bl	800940c <mrbc_define_method>
    mrbc_free(vm, namebuf);
 8006288:	6a38      	ldr	r0, [r7, #32]
 800628a:	f7fb fdf9 	bl	8001e80 <mrbc_raw_free>
  for( i = 1; i <= argc; i++ ) {
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	3301      	adds	r3, #1
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	429a      	cmp	r2, r3
 800629a:	ddac      	ble.n	80061f6 <c_object_attr_accessor+0x12>
 800629c:	e000      	b.n	80062a0 <c_object_attr_accessor+0xbc>
    if( !namebuf ) return;
 800629e:	bf00      	nop
  }
}
 80062a0:	3730      	adds	r7, #48	; 0x30
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	08018e88 	.word	0x08018e88
 80062ac:	200001b4 	.word	0x200001b4
 80062b0:	080060b5 	.word	0x080060b5
 80062b4:	08006105 	.word	0x08006105

080062b8 <c_object_sprintf>:
#if MRBC_USE_STRING
//================================================================
/*! (method) sprintf
*/
static void c_object_sprintf(struct VM *vm, mrbc_value v[], int argc)
{
 80062b8:	b5b0      	push	{r4, r5, r7, lr}
 80062ba:	b09e      	sub	sp, #120	; 0x78
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  static const int BUF_INC_STEP = 32;	// bytes.

  mrbc_value *format = &v[1];
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	3310      	adds	r3, #16
 80062c8:	66bb      	str	r3, [r7, #104]	; 0x68
  if( mrbc_type(*format) != MRBC_TT_STRING ) {
 80062ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062cc:	f993 3000 	ldrsb.w	r3, [r3]
 80062d0:	2b0b      	cmp	r3, #11
 80062d2:	d005      	beq.n	80062e0 <c_object_sprintf+0x28>
    mrbc_raise(vm, MRBC_CLASS(TypeError), "sprintf");
 80062d4:	4ac1      	ldr	r2, [pc, #772]	; (80065dc <c_object_sprintf+0x324>)
 80062d6:	49c2      	ldr	r1, [pc, #776]	; (80065e0 <c_object_sprintf+0x328>)
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f005 f8a5 	bl	800b428 <mrbc_raise>
    return;
 80062de:	e258      	b.n	8006792 <c_object_sprintf+0x4da>
  }

  int buflen = BUF_INC_STEP;
 80062e0:	4bc0      	ldr	r3, [pc, #768]	; (80065e4 <c_object_sprintf+0x32c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	677b      	str	r3, [r7, #116]	; 0x74
  char *buf = mrbc_alloc(vm, buflen);
 80062e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fb fbed 	bl	8001ac8 <mrbc_raw_alloc>
 80062ee:	6678      	str	r0, [r7, #100]	; 0x64
  if( !buf ) { return; }	// ENOMEM raise?
 80062f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 824a 	beq.w	800678c <c_object_sprintf+0x4d4>

  mrbc_printf_t pf;
  mrbc_printf_init( &pf, buf, buflen, mrbc_string_cstr(format) );
 80062f8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80062fa:	f7ff f89e 	bl	800543a <mrbc_string_cstr>
 80062fe:	4603      	mov	r3, r0
 8006300:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8006304:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006306:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006308:	f7ff f8a4 	bl	8005454 <mrbc_printf_init>

  int i = 2;
 800630c:	2302      	movs	r3, #2
 800630e:	673b      	str	r3, [r7, #112]	; 0x70
  int ret;
  while( 1 ) {
    mrbc_printf_t pf_bak = pf;
 8006310:	f107 0420 	add.w	r4, r7, #32
 8006314:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8006318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800631a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800631c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006320:	e884 0003 	stmia.w	r4, {r0, r1}
    ret = mrbc_printf_main( &pf );
 8006324:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006328:	4618      	mov	r0, r3
 800632a:	f004 fa9b 	bl	800a864 <mrbc_printf_main>
 800632e:	66f8      	str	r0, [r7, #108]	; 0x6c
    if( ret == 0 ) break;	// normal break loop.
 8006330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 81fe 	beq.w	8006734 <c_object_sprintf+0x47c>
    if( ret < 0 ) goto INCREASE_BUFFER;
 8006338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633a:	2b00      	cmp	r3, #0
 800633c:	f2c0 81e2 	blt.w	8006704 <c_object_sprintf+0x44c>

    if( i > argc ) {
 8006340:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	dd05      	ble.n	8006354 <c_object_sprintf+0x9c>
      mrbc_raise(vm, MRBC_CLASS(ArgumentError), "too few arguments");
 8006348:	4aa7      	ldr	r2, [pc, #668]	; (80065e8 <c_object_sprintf+0x330>)
 800634a:	49a8      	ldr	r1, [pc, #672]	; (80065ec <c_object_sprintf+0x334>)
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f005 f86b 	bl	800b428 <mrbc_raise>
      break;
 8006352:	e1f0      	b.n	8006736 <c_object_sprintf+0x47e>
    }

    // maybe ret == 1
    switch(pf.fmt.type) {
 8006354:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8006358:	3b42      	subs	r3, #66	; 0x42
 800635a:	2b36      	cmp	r3, #54	; 0x36
 800635c:	f200 81a4 	bhi.w	80066a8 <c_object_sprintf+0x3f0>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <c_object_sprintf+0xb0>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	080065b3 	.word	0x080065b3
 800636c:	080066a9 	.word	0x080066a9
 8006370:	080066a9 	.word	0x080066a9
 8006374:	08006645 	.word	0x08006645
 8006378:	080066a9 	.word	0x080066a9
 800637c:	08006645 	.word	0x08006645
 8006380:	080066a9 	.word	0x080066a9
 8006384:	080066a9 	.word	0x080066a9
 8006388:	080066a9 	.word	0x080066a9
 800638c:	080066a9 	.word	0x080066a9
 8006390:	080066a9 	.word	0x080066a9
 8006394:	080066a9 	.word	0x080066a9
 8006398:	080066a9 	.word	0x080066a9
 800639c:	080066a9 	.word	0x080066a9
 80063a0:	080066a9 	.word	0x080066a9
 80063a4:	080066a9 	.word	0x080066a9
 80063a8:	080066a9 	.word	0x080066a9
 80063ac:	080066a9 	.word	0x080066a9
 80063b0:	080066a9 	.word	0x080066a9
 80063b4:	080066a9 	.word	0x080066a9
 80063b8:	080066a9 	.word	0x080066a9
 80063bc:	080066a9 	.word	0x080066a9
 80063c0:	080065f1 	.word	0x080065f1
 80063c4:	080066a9 	.word	0x080066a9
 80063c8:	080066a9 	.word	0x080066a9
 80063cc:	080066a9 	.word	0x080066a9
 80063d0:	080066a9 	.word	0x080066a9
 80063d4:	080066a9 	.word	0x080066a9
 80063d8:	080066a9 	.word	0x080066a9
 80063dc:	080066a9 	.word	0x080066a9
 80063e0:	080066a9 	.word	0x080066a9
 80063e4:	080066a9 	.word	0x080066a9
 80063e8:	080065b3 	.word	0x080065b3
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006517 	.word	0x08006517
 80063f4:	08006645 	.word	0x08006645
 80063f8:	08006645 	.word	0x08006645
 80063fc:	08006645 	.word	0x08006645
 8006400:	080066a9 	.word	0x080066a9
 8006404:	08006517 	.word	0x08006517
 8006408:	080066a9 	.word	0x080066a9
 800640c:	080066a9 	.word	0x080066a9
 8006410:	080066a9 	.word	0x080066a9
 8006414:	080066a9 	.word	0x080066a9
 8006418:	080066a9 	.word	0x080066a9
 800641c:	0800661b 	.word	0x0800661b
 8006420:	080066a9 	.word	0x080066a9
 8006424:	080066a9 	.word	0x080066a9
 8006428:	080066a9 	.word	0x080066a9
 800642c:	080064a5 	.word	0x080064a5
 8006430:	080066a9 	.word	0x080066a9
 8006434:	08006517 	.word	0x08006517
 8006438:	080066a9 	.word	0x080066a9
 800643c:	080066a9 	.word	0x080066a9
 8006440:	080065f1 	.word	0x080065f1
    case 'c':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 8006444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4413      	add	r3, r2
 800644c:	f993 3000 	ldrsb.w	r3, [r3]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d10c      	bne.n	800646e <c_object_sprintf+0x1b6>
	ret = mrbc_printf_char( &pf, v[i].i );
 8006454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	4413      	add	r3, r2
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f004 faf5 	bl	800aa54 <mrbc_printf_char>
 800646a:	66f8      	str	r0, [r7, #108]	; 0x6c
      } else if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
	ret = mrbc_printf_char( &pf, mrbc_string_cstr(&v[i])[0] );
      }
      break;
 800646c:	e11e      	b.n	80066ac <c_object_sprintf+0x3f4>
      } else if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
 800646e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4413      	add	r3, r2
 8006476:	f993 3000 	ldrsb.w	r3, [r3]
 800647a:	2b0b      	cmp	r3, #11
 800647c:	f040 8116 	bne.w	80066ac <c_object_sprintf+0x3f4>
	ret = mrbc_printf_char( &pf, mrbc_string_cstr(&v[i])[0] );
 8006480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	4413      	add	r3, r2
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe ffd6 	bl	800543a <mrbc_string_cstr>
 800648e:	4603      	mov	r3, r0
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f004 fada 	bl	800aa54 <mrbc_printf_char>
 80064a0:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 80064a2:	e103      	b.n	80066ac <c_object_sprintf+0x3f4>

    case 's':
      if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
 80064a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	4413      	add	r3, r2
 80064ac:	f993 3000 	ldrsb.w	r3, [r3]
 80064b0:	2b0b      	cmp	r3, #11
 80064b2:	d117      	bne.n	80064e4 <c_object_sprintf+0x22c>
	ret = mrbc_printf_bstr( &pf, mrbc_string_cstr(&v[i]), mrbc_string_size(&v[i]),' ');
 80064b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	4413      	add	r3, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe ffbc 	bl	800543a <mrbc_string_cstr>
 80064c2:	4604      	mov	r4, r0
 80064c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	4413      	add	r3, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe ffa7 	bl	8005420 <mrbc_string_size>
 80064d2:	4602      	mov	r2, r0
 80064d4:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80064d8:	2320      	movs	r3, #32
 80064da:	4621      	mov	r1, r4
 80064dc:	f004 fb12 	bl	800ab04 <mrbc_printf_bstr>
 80064e0:	66f8      	str	r0, [r7, #108]	; 0x6c
      } else if( mrbc_type(v[i]) == MRBC_TT_SYMBOL ) {
	ret = mrbc_printf_str( &pf, mrbc_symbol_cstr( &v[i] ), ' ');
      }
      break;
 80064e2:	e0e5      	b.n	80066b0 <c_object_sprintf+0x3f8>
      } else if( mrbc_type(v[i]) == MRBC_TT_SYMBOL ) {
 80064e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	4413      	add	r3, r2
 80064ec:	f993 3000 	ldrsb.w	r3, [r3]
 80064f0:	2b06      	cmp	r3, #6
 80064f2:	f040 80dd 	bne.w	80066b0 <c_object_sprintf+0x3f8>
	ret = mrbc_printf_str( &pf, mrbc_symbol_cstr( &v[i] ), ' ');
 80064f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fef6 	bl	80052f0 <mrbc_symbol_cstr>
 8006504:	4601      	mov	r1, r0
 8006506:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800650a:	2220      	movs	r2, #32
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe ffe0 	bl	80054d2 <mrbc_printf_str>
 8006512:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 8006514:	e0cc      	b.n	80066b0 <c_object_sprintf+0x3f8>

    case 'd':
    case 'i':
    case 'u':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 8006516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4413      	add	r3, r2
 800651e:	f993 3000 	ldrsb.w	r3, [r3]
 8006522:	2b04      	cmp	r3, #4
 8006524:	d10c      	bne.n	8006540 <c_object_sprintf+0x288>
	ret = mrbc_printf_int( &pf, v[i].i, 10);
 8006526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	4413      	add	r3, r2
 800652e:	6899      	ldr	r1, [r3, #8]
 8006530:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006534:	220a      	movs	r2, #10
 8006536:	4618      	mov	r0, r3
 8006538:	f004 fb6a 	bl	800ac10 <mrbc_printf_int>
 800653c:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
      } else if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
	mrbc_int_t ival = atol(mrbc_string_cstr(&v[i]));
	ret = mrbc_printf_int( &pf, ival, 10 );
      }
      break;
 800653e:	e0b9      	b.n	80066b4 <c_object_sprintf+0x3fc>
      } else if( mrbc_type(v[i]) == MRBC_TT_FLOAT ) {
 8006540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	4413      	add	r3, r2
 8006548:	f993 3000 	ldrsb.w	r3, [r3]
 800654c:	2b05      	cmp	r3, #5
 800654e:	d112      	bne.n	8006576 <c_object_sprintf+0x2be>
	ret = mrbc_printf_int( &pf, (mrbc_int_t)v[i].d, 10);
 8006550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	4413      	add	r3, r2
 8006558:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	f7fa fafc 	bl	8000b5c <__aeabi_d2iz>
 8006564:	4601      	mov	r1, r0
 8006566:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800656a:	220a      	movs	r2, #10
 800656c:	4618      	mov	r0, r3
 800656e:	f004 fb4f 	bl	800ac10 <mrbc_printf_int>
 8006572:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 8006574:	e09e      	b.n	80066b4 <c_object_sprintf+0x3fc>
      } else if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
 8006576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4413      	add	r3, r2
 800657e:	f993 3000 	ldrsb.w	r3, [r3]
 8006582:	2b0b      	cmp	r3, #11
 8006584:	f040 8096 	bne.w	80066b4 <c_object_sprintf+0x3fc>
	mrbc_int_t ival = atol(mrbc_string_cstr(&v[i]));
 8006588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	4413      	add	r3, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe ff52 	bl	800543a <mrbc_string_cstr>
 8006596:	4603      	mov	r3, r0
 8006598:	4618      	mov	r0, r3
 800659a:	f00f f874 	bl	8015686 <atol>
 800659e:	6638      	str	r0, [r7, #96]	; 0x60
	ret = mrbc_printf_int( &pf, ival, 10 );
 80065a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065a4:	220a      	movs	r2, #10
 80065a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80065a8:	4618      	mov	r0, r3
 80065aa:	f004 fb31 	bl	800ac10 <mrbc_printf_int>
 80065ae:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 80065b0:	e080      	b.n	80066b4 <c_object_sprintf+0x3fc>

    case 'b':
    case 'B':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 80065b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4413      	add	r3, r2
 80065ba:	f993 3000 	ldrsb.w	r3, [r3]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d17a      	bne.n	80066b8 <c_object_sprintf+0x400>
	ret = mrbc_printf_bit( &pf, v[i].i, 1);
 80065c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	4413      	add	r3, r2
 80065ca:	6899      	ldr	r1, [r3, #8]
 80065cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065d0:	2201      	movs	r2, #1
 80065d2:	4618      	mov	r0, r3
 80065d4:	f004 fc4c 	bl	800ae70 <mrbc_printf_bit>
 80065d8:	66f8      	str	r0, [r7, #108]	; 0x6c
      }
      break;
 80065da:	e06d      	b.n	80066b8 <c_object_sprintf+0x400>
 80065dc:	08018e98 	.word	0x08018e98
 80065e0:	200001b4 	.word	0x200001b4
 80065e4:	0801ac9c 	.word	0x0801ac9c
 80065e8:	08018ea0 	.word	0x08018ea0
 80065ec:	20000154 	.word	0x20000154

    case 'x':
    case 'X':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 80065f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4413      	add	r3, r2
 80065f8:	f993 3000 	ldrsb.w	r3, [r3]
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d15d      	bne.n	80066bc <c_object_sprintf+0x404>
	ret = mrbc_printf_bit( &pf, v[i].i, 4);
 8006600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4413      	add	r3, r2
 8006608:	6899      	ldr	r1, [r3, #8]
 800660a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800660e:	2204      	movs	r2, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f004 fc2d 	bl	800ae70 <mrbc_printf_bit>
 8006616:	66f8      	str	r0, [r7, #108]	; 0x6c
      }
      break;
 8006618:	e050      	b.n	80066bc <c_object_sprintf+0x404>

    case 'o':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 800661a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4413      	add	r3, r2
 8006622:	f993 3000 	ldrsb.w	r3, [r3]
 8006626:	2b04      	cmp	r3, #4
 8006628:	d14a      	bne.n	80066c0 <c_object_sprintf+0x408>
	ret = mrbc_printf_bit( &pf, v[i].i, 3);
 800662a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4413      	add	r3, r2
 8006632:	6899      	ldr	r1, [r3, #8]
 8006634:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006638:	2203      	movs	r2, #3
 800663a:	4618      	mov	r0, r3
 800663c:	f004 fc18 	bl	800ae70 <mrbc_printf_bit>
 8006640:	66f8      	str	r0, [r7, #108]	; 0x6c
      }
      break;
 8006642:	e03d      	b.n	80066c0 <c_object_sprintf+0x408>
    case 'f':
    case 'e':
    case 'E':
    case 'g':
    case 'G':
      if( mrbc_type(v[i]) == MRBC_TT_FLOAT ) {
 8006644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	4413      	add	r3, r2
 800664c:	f993 3000 	ldrsb.w	r3, [r3]
 8006650:	2b05      	cmp	r3, #5
 8006652:	d110      	bne.n	8006676 <c_object_sprintf+0x3be>
	ret = mrbc_printf_float( &pf, v[i].d );
 8006654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	4413      	add	r3, r2
 800665c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006660:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006664:	eeb0 0a47 	vmov.f32	s0, s14
 8006668:	eef0 0a67 	vmov.f32	s1, s15
 800666c:	4618      	mov	r0, r3
 800666e:	f004 fccd 	bl	800b00c <mrbc_printf_float>
 8006672:	66f8      	str	r0, [r7, #108]	; 0x6c
      } else if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
	ret = mrbc_printf_float( &pf, v[i].i );
      }
      break;
 8006674:	e026      	b.n	80066c4 <c_object_sprintf+0x40c>
      } else if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 8006676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	4413      	add	r3, r2
 800667e:	f993 3000 	ldrsb.w	r3, [r3]
 8006682:	2b04      	cmp	r3, #4
 8006684:	d11e      	bne.n	80066c4 <c_object_sprintf+0x40c>
	ret = mrbc_printf_float( &pf, v[i].i );
 8006686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	4413      	add	r3, r2
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	4618      	mov	r0, r3
 8006692:	f7f9 ff5f 	bl	8000554 <__aeabi_i2d>
 8006696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800669a:	ec41 0b10 	vmov	d0, r0, r1
 800669e:	4618      	mov	r0, r3
 80066a0:	f004 fcb4 	bl	800b00c <mrbc_printf_float>
 80066a4:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 80066a6:	e00d      	b.n	80066c4 <c_object_sprintf+0x40c>
#endif

    default:
      break;
 80066a8:	bf00      	nop
 80066aa:	e00c      	b.n	80066c6 <c_object_sprintf+0x40e>
      break;
 80066ac:	bf00      	nop
 80066ae:	e00a      	b.n	80066c6 <c_object_sprintf+0x40e>
      break;
 80066b0:	bf00      	nop
 80066b2:	e008      	b.n	80066c6 <c_object_sprintf+0x40e>
      break;
 80066b4:	bf00      	nop
 80066b6:	e006      	b.n	80066c6 <c_object_sprintf+0x40e>
      break;
 80066b8:	bf00      	nop
 80066ba:	e004      	b.n	80066c6 <c_object_sprintf+0x40e>
      break;
 80066bc:	bf00      	nop
 80066be:	e002      	b.n	80066c6 <c_object_sprintf+0x40e>
      break;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <c_object_sprintf+0x40e>
      break;
 80066c4:	bf00      	nop
    }
    if( ret >= 0 ) {
 80066c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	db03      	blt.n	80066d4 <c_object_sprintf+0x41c>
      i++;
 80066cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066ce:	3301      	adds	r3, #1
 80066d0:	673b      	str	r3, [r7, #112]	; 0x70
 80066d2:	e61d      	b.n	8006310 <c_object_sprintf+0x58>
      continue;		// normal next loop.
    }

    // maybe buffer full. (ret == -1)
    if( pf.fmt.width > BUF_INC_STEP ) buflen += pf.fmt.width;
 80066d4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80066d8:	461a      	mov	r2, r3
 80066da:	4b2f      	ldr	r3, [pc, #188]	; (8006798 <c_object_sprintf+0x4e0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	dd05      	ble.n	80066ee <c_object_sprintf+0x436>
 80066e2:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80066e6:	461a      	mov	r2, r3
 80066e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ea:	4413      	add	r3, r2
 80066ec:	677b      	str	r3, [r7, #116]	; 0x74
    pf = pf_bak;
 80066ee:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80066f2:	f107 0520 	add.w	r5, r7, #32
 80066f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80066fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8006702:	e000      	b.n	8006706 <c_object_sprintf+0x44e>
    if( ret < 0 ) goto INCREASE_BUFFER;
 8006704:	bf00      	nop

  INCREASE_BUFFER:
    buflen += BUF_INC_STEP;
 8006706:	4b24      	ldr	r3, [pc, #144]	; (8006798 <c_object_sprintf+0x4e0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800670c:	4413      	add	r3, r2
 800670e:	677b      	str	r3, [r7, #116]	; 0x74
    buf = mrbc_realloc(vm, pf.buf, buflen);
 8006710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006712:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006714:	4611      	mov	r1, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f7fb fc4e 	bl	8001fb8 <mrbc_raw_realloc>
 800671c:	6678      	str	r0, [r7, #100]	; 0x64
    if( !buf ) { return; }	// ENOMEM raise? TODO: leak memory.
 800671e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006720:	2b00      	cmp	r3, #0
 8006722:	d035      	beq.n	8006790 <c_object_sprintf+0x4d8>
    mrbc_printf_replace_buffer(&pf, buf, buflen);
 8006724:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006728:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800672a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800672c:	4618      	mov	r0, r3
 800672e:	f004 f877 	bl	800a820 <mrbc_printf_replace_buffer>
 8006732:	e5ed      	b.n	8006310 <c_object_sprintf+0x58>
    if( ret == 0 ) break;	// normal break loop.
 8006734:	bf00      	nop
  }
  mrbc_printf_end( &pf );
 8006736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe feac 	bl	8005498 <mrbc_printf_end>

  buflen = mrbc_printf_len( &pf );
 8006740:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe feb5 	bl	80054b4 <mrbc_printf_len>
 800674a:	6778      	str	r0, [r7, #116]	; 0x74
  mrbc_realloc(vm, pf.buf, buflen+1);	// shrink suitable size.
 800674c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800674e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006750:	3301      	adds	r3, #1
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f7fb fc2f 	bl	8001fb8 <mrbc_raw_realloc>

  mrbc_value value = mrbc_string_new_alloc( vm, pf.buf, buflen );
 800675a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800675c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	f000 fd84 	bl	8007270 <mrbc_string_new_alloc>

  SET_RETURN(value);
 8006768:	f107 0410 	add.w	r4, r7, #16
 800676c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006776:	68b8      	ldr	r0, [r7, #8]
 8006778:	f7fe fd66 	bl	8005248 <mrbc_decref>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	461c      	mov	r4, r3
 8006780:	f107 0310 	add.w	r3, r7, #16
 8006784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800678a:	e002      	b.n	8006792 <c_object_sprintf+0x4da>
  if( !buf ) { return; }	// ENOMEM raise?
 800678c:	bf00      	nop
 800678e:	e000      	b.n	8006792 <c_object_sprintf+0x4da>
    if( !buf ) { return; }	// ENOMEM raise? TODO: leak memory.
 8006790:	bf00      	nop
}
 8006792:	3778      	adds	r7, #120	; 0x78
 8006794:	46bd      	mov	sp, r7
 8006796:	bdb0      	pop	{r4, r5, r7, pc}
 8006798:	0801ac9c 	.word	0x0801ac9c

0800679c <c_object_printf>:

//================================================================
/*! (method) printf
*/
static void c_object_printf(struct VM *vm, mrbc_value v[], int argc)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  c_object_sprintf(vm, v, argc);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fd83 	bl	80062b8 <c_object_sprintf>
  mrbc_nprint( mrbc_string_cstr(v), mrbc_string_size(v) );
 80067b2:	68b8      	ldr	r0, [r7, #8]
 80067b4:	f7fe fe41 	bl	800543a <mrbc_string_cstr>
 80067b8:	4604      	mov	r4, r0
 80067ba:	68b8      	ldr	r0, [r7, #8]
 80067bc:	f7fe fe30 	bl	8005420 <mrbc_string_size>
 80067c0:	4603      	mov	r3, r0
 80067c2:	4619      	mov	r1, r3
 80067c4:	4620      	mov	r0, r4
 80067c6:	f003 fcb1 	bl	800a12c <mrbc_nprint>
  SET_NIL_RETURN();
 80067ca:	68b8      	ldr	r0, [r7, #8]
 80067cc:	f7fe fd3c 	bl	8005248 <mrbc_decref>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2201      	movs	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd90      	pop	{r4, r7, pc}
	...

080067e0 <c_object_to_s>:

//================================================================
/*! (method) to_s
 */
static void c_object_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b09d      	sub	sp, #116	; 0x74
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  char buf[64];
  char *s = buf;
 80067ec:	f107 0320 	add.w	r3, r7, #32
 80067f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  mrbc_sym sym_id = find_class_by_object(&v[0])->sym_id;
 80067f2:	68b8      	ldr	r0, [r7, #8]
 80067f4:	f7fe fda6 	bl	8005344 <find_class_by_object>
 80067f8:	4603      	mov	r3, r0
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

  if( v[0].tt != MRBC_TT_CLASS ) {
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f993 3000 	ldrsb.w	r3, [r3]
 8006806:	2b07      	cmp	r3, #7
 8006808:	d009      	beq.n	800681e <c_object_to_s+0x3e>
    buf[0] = '#'; buf[1] = '<';
 800680a:	2323      	movs	r3, #35	; 0x23
 800680c:	f887 3020 	strb.w	r3, [r7, #32]
 8006810:	233c      	movs	r3, #60	; 0x3c
 8006812:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    s = buf + 2;
 8006816:	f107 0320 	add.w	r3, r7, #32
 800681a:	3302      	adds	r3, #2
 800681c:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  int bufsiz = sizeof(buf) - (s - buf);
 800681e:	f107 0320 	add.w	r3, r7, #32
 8006822:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800682a:	667b      	str	r3, [r7, #100]	; 0x64
  int n = set_sym_name_by_id( s, bufsiz, sym_id );
 800682c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8006830:	461a      	mov	r2, r3
 8006832:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006834:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006836:	f7fe fe67 	bl	8005508 <set_sym_name_by_id>
 800683a:	6638      	str	r0, [r7, #96]	; 0x60

  if( v[0].tt != MRBC_TT_CLASS ) {
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f993 3000 	ldrsb.w	r3, [r3]
 8006842:	2b07      	cmp	r3, #7
 8006844:	d00a      	beq.n	800685c <c_object_to_s+0x7c>
    mrbc_snprintf(s+n, bufsiz-n, ":%08x>", (uint32_t)
 8006846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800684a:	18d0      	adds	r0, r2, r3
 800684c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800684e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006850:	1ad1      	subs	r1, r2, r3
#if defined(UINTPTR_MAX)
	(uintptr_t)
#endif
	v->instance );
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	689b      	ldr	r3, [r3, #8]
    mrbc_snprintf(s+n, bufsiz-n, ":%08x>", (uint32_t)
 8006856:	4a0c      	ldr	r2, [pc, #48]	; (8006888 <c_object_to_s+0xa8>)
 8006858:	f003 fc88 	bl	800a16c <mrbc_snprintf>
  }

  SET_RETURN( mrbc_string_new_cstr( vm, buf ));
 800685c:	f107 0310 	add.w	r3, r7, #16
 8006860:	f107 0220 	add.w	r2, r7, #32
 8006864:	68f9      	ldr	r1, [r7, #12]
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fdc2 	bl	80053f0 <mrbc_string_new_cstr>
 800686c:	68b8      	ldr	r0, [r7, #8]
 800686e:	f7fe fceb 	bl	8005248 <mrbc_decref>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	461c      	mov	r4, r3
 8006876:	f107 0310 	add.w	r3, r7, #16
 800687a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800687c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006880:	bf00      	nop
 8006882:	3774      	adds	r7, #116	; 0x74
 8006884:	46bd      	mov	sp, r7
 8006886:	bd90      	pop	{r4, r7, pc}
 8006888:	08018eb4 	.word	0x08018eb4

0800688c <c_proc_new>:
/***** Proc class ***********************************************************/
//================================================================
/*! (method) new
*/
static void c_proc_new(struct VM *vm, mrbc_value v[], int argc)
{
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_PROC ) {
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	3310      	adds	r3, #16
 800689c:	f993 3000 	ldrsb.w	r3, [r3]
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	d005      	beq.n	80068b0 <c_proc_new+0x24>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError),
 80068a4:	4a09      	ldr	r2, [pc, #36]	; (80068cc <c_proc_new+0x40>)
 80068a6:	490a      	ldr	r1, [pc, #40]	; (80068d0 <c_proc_new+0x44>)
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f004 fdbd 	bl	800b428 <mrbc_raise>
	       "tried to create Proc object without a block");
    return;
 80068ae:	e00a      	b.n	80068c6 <c_proc_new+0x3a>
  }

  v[0] = v[1];
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4614      	mov	r4, r2
 80068b6:	3310      	adds	r3, #16
 80068b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  v[1].tt = MRBC_TT_EMPTY;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	3310      	adds	r3, #16
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
}
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd90      	pop	{r4, r7, pc}
 80068cc:	08018ebc 	.word	0x08018ebc
 80068d0:	20000154 	.word	0x20000154

080068d4 <c_proc_call>:

//================================================================
/*! (method) call
*/
static void c_proc_call(struct VM *vm, mrbc_value v[], int argc)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  assert( mrbc_type(v[0]) == MRBC_TT_PROC );
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f993 3000 	ldrsb.w	r3, [r3]
 80068e6:	2b09      	cmp	r3, #9
 80068e8:	d006      	beq.n	80068f8 <c_proc_call+0x24>
 80068ea:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <c_proc_call+0x8c>)
 80068ec:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <c_proc_call+0x90>)
 80068ee:	f240 310a 	movw	r1, #778	; 0x30a
 80068f2:	481d      	ldr	r0, [pc, #116]	; (8006968 <c_proc_call+0x94>)
 80068f4:	f00e fea6 	bl	8015644 <__assert_func>

  mrbc_callinfo *callinfo_self = v[0].proc->callinfo_self;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	617b      	str	r3, [r7, #20]
  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm,
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <c_proc_call+0x3a>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 800690c:	e000      	b.n	8006910 <c_proc_call+0x3c>
 800690e:	2100      	movs	r1, #0
				(callinfo_self ? callinfo_self->method_id : 0),
				v - vm->cur_regs, argc);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	1ad3      	subs	r3, r2, r3
  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm,
 8006918:	111b      	asrs	r3, r3, #4
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f008 f926 	bl	800eb70 <mrbc_push_callinfo>
 8006924:	6138      	str	r0, [r7, #16]
  if( !callinfo ) return;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d014      	beq.n	8006956 <c_proc_call+0x82>

  if( callinfo_self ) {
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <c_proc_call+0x66>
    callinfo->own_class = callinfo_self->own_class;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	695a      	ldr	r2, [r3, #20]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	615a      	str	r2, [r3, #20]
  }

  // target irep
  vm->cur_irep = v[0].proc->irep;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	611a      	str	r2, [r3, #16]
  vm->cur_regs = v;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	615a      	str	r2, [r3, #20]
 8006954:	e000      	b.n	8006958 <c_proc_call+0x84>
  if( !callinfo ) return;
 8006956:	bf00      	nop
}
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	08018ee8 	.word	0x08018ee8
 8006964:	0801aca0 	.word	0x0801aca0
 8006968:	08018dbc 	.word	0x08018dbc

0800696c <c_nil_to_i>:
/***** Nil class ************************************************************/
//================================================================
/*! (method) to_i
*/
static void c_nil_to_i(struct VM *vm, mrbc_value v[], int argc)
{
 800696c:	b480      	push	{r7}
 800696e:	b089      	sub	sp, #36	; 0x24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  v[0] = mrbc_integer_value(0);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	461a      	mov	r2, r3
 800697c:	2300      	movs	r3, #0
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	6053      	str	r3, [r2, #4]
 8006982:	6093      	str	r3, [r2, #8]
 8006984:	60d3      	str	r3, [r2, #12]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2204      	movs	r2, #4
 800698a:	701a      	strb	r2, [r3, #0]
}
 800698c:	bf00      	nop
 800698e:	3724      	adds	r7, #36	; 0x24
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <c_nil_to_a>:

//================================================================
/*! (method) to_a
*/
static void c_nil_to_a(struct VM *vm, mrbc_value v[], int argc)
{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b089      	sub	sp, #36	; 0x24
 800699c:	af00      	add	r7, sp, #0
 800699e:	61f8      	str	r0, [r7, #28]
 80069a0:	61b9      	str	r1, [r7, #24]
 80069a2:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_array_new(vm, 0);
 80069a4:	69bc      	ldr	r4, [r7, #24]
 80069a6:	463b      	mov	r3, r7
 80069a8:	2200      	movs	r2, #0
 80069aa:	69f9      	ldr	r1, [r7, #28]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fb fcd2 	bl	8002356 <mrbc_array_new>
 80069b2:	463b      	mov	r3, r7
 80069b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80069ba:	bf00      	nop
 80069bc:	3724      	adds	r7, #36	; 0x24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd90      	pop	{r4, r7, pc}

080069c2 <c_nil_to_h>:

//================================================================
/*! (method) to_h
*/
static void c_nil_to_h(struct VM *vm, mrbc_value v[], int argc)
{
 80069c2:	b590      	push	{r4, r7, lr}
 80069c4:	b089      	sub	sp, #36	; 0x24
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	61f8      	str	r0, [r7, #28]
 80069ca:	61b9      	str	r1, [r7, #24]
 80069cc:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_hash_new(vm, 0);
 80069ce:	69bc      	ldr	r4, [r7, #24]
 80069d0:	463b      	mov	r3, r7
 80069d2:	2200      	movs	r2, #0
 80069d4:	69f9      	ldr	r1, [r7, #28]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fd fa31 	bl	8003e3e <mrbc_hash_new>
 80069dc:	463b      	mov	r3, r7
 80069de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80069e4:	bf00      	nop
 80069e6:	3724      	adds	r7, #36	; 0x24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd90      	pop	{r4, r7, pc}

080069ec <c_nil_to_f>:
#if MRBC_USE_FLOAT
//================================================================
/*! (method) to_f
*/
static void c_nil_to_f(struct VM *vm, mrbc_value v[], int argc)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b089      	sub	sp, #36	; 0x24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  v[0] = mrbc_float_value(vm,0);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2205      	movs	r2, #5
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	3724      	adds	r7, #36	; 0x24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <c_nil_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect
*/
static void c_nil_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 8006a18:	b590      	push	{r4, r7, lr}
 8006a1a:	b089      	sub	sp, #36	; 0x24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	61f8      	str	r0, [r7, #28]
 8006a20:	61b9      	str	r1, [r7, #24]
 8006a22:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_string_new_cstr(vm, "nil");
 8006a24:	69bc      	ldr	r4, [r7, #24]
 8006a26:	463b      	mov	r3, r7
 8006a28:	4a06      	ldr	r2, [pc, #24]	; (8006a44 <c_nil_inspect+0x2c>)
 8006a2a:	69f9      	ldr	r1, [r7, #28]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fcdf 	bl	80053f0 <mrbc_string_new_cstr>
 8006a32:	463b      	mov	r3, r7
 8006a34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006a3a:	bf00      	nop
 8006a3c:	3724      	adds	r7, #36	; 0x24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd90      	pop	{r4, r7, pc}
 8006a42:	bf00      	nop
 8006a44:	08018f08 	.word	0x08018f08

08006a48 <c_nil_to_s>:

//================================================================
/*! (method) to_s
*/
static void c_nil_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b089      	sub	sp, #36	; 0x24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	61f8      	str	r0, [r7, #28]
 8006a50:	61b9      	str	r1, [r7, #24]
 8006a52:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_string_new(vm, NULL, 0);
 8006a54:	69bc      	ldr	r4, [r7, #24]
 8006a56:	4638      	mov	r0, r7
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	69f9      	ldr	r1, [r7, #28]
 8006a5e:	f000 fba5 	bl	80071ac <mrbc_string_new>
 8006a62:	463b      	mov	r3, r7
 8006a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006a6a:	bf00      	nop
 8006a6c:	3724      	adds	r7, #36	; 0x24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd90      	pop	{r4, r7, pc}
	...

08006a74 <c_true_to_s>:
#if MRBC_USE_STRING
//================================================================
/*! (method) to_s
*/
static void c_true_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 8006a74:	b590      	push	{r4, r7, lr}
 8006a76:	b089      	sub	sp, #36	; 0x24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	61f8      	str	r0, [r7, #28]
 8006a7c:	61b9      	str	r1, [r7, #24]
 8006a7e:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_string_new_cstr(vm, "true");
 8006a80:	69bc      	ldr	r4, [r7, #24]
 8006a82:	463b      	mov	r3, r7
 8006a84:	4a06      	ldr	r2, [pc, #24]	; (8006aa0 <c_true_to_s+0x2c>)
 8006a86:	69f9      	ldr	r1, [r7, #28]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe fcb1 	bl	80053f0 <mrbc_string_new_cstr>
 8006a8e:	463b      	mov	r3, r7
 8006a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006a96:	bf00      	nop
 8006a98:	3724      	adds	r7, #36	; 0x24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd90      	pop	{r4, r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	08018f0c 	.word	0x08018f0c

08006aa4 <c_false_to_s>:
#if MRBC_USE_STRING
//================================================================
/*! (method) False#to_s
*/
static void c_false_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 8006aa4:	b590      	push	{r4, r7, lr}
 8006aa6:	b089      	sub	sp, #36	; 0x24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	61f8      	str	r0, [r7, #28]
 8006aac:	61b9      	str	r1, [r7, #24]
 8006aae:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_string_new_cstr(vm, "false");
 8006ab0:	69bc      	ldr	r4, [r7, #24]
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	4a06      	ldr	r2, [pc, #24]	; (8006ad0 <c_false_to_s+0x2c>)
 8006ab6:	69f9      	ldr	r1, [r7, #28]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe fc99 	bl	80053f0 <mrbc_string_new_cstr>
 8006abe:	463b      	mov	r3, r7
 8006ac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ac2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006ac6:	bf00      	nop
 8006ac8:	3724      	adds	r7, #36	; 0x24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd90      	pop	{r4, r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	08018f14 	.word	0x08018f14

08006ad4 <mrbc_decref>:
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f993 3000 	ldrsb.w	r3, [r3]
 8006ae2:	2b07      	cmp	r3, #7
 8006ae4:	dd2c      	ble.n	8006b40 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	885b      	ldrh	r3, [r3, #2]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d106      	bne.n	8006afe <mrbc_decref+0x2a>
 8006af0:	4b16      	ldr	r3, [pc, #88]	; (8006b4c <mrbc_decref+0x78>)
 8006af2:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <mrbc_decref+0x7c>)
 8006af4:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8006af8:	4816      	ldr	r0, [pc, #88]	; (8006b54 <mrbc_decref+0x80>)
 8006afa:	f00e fda3 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	885b      	ldrh	r3, [r3, #2]
 8006b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d106      	bne.n	8006b1a <mrbc_decref+0x46>
 8006b0c:	4b12      	ldr	r3, [pc, #72]	; (8006b58 <mrbc_decref+0x84>)
 8006b0e:	4a10      	ldr	r2, [pc, #64]	; (8006b50 <mrbc_decref+0x7c>)
 8006b10:	f240 11d3 	movw	r1, #467	; 0x1d3
 8006b14:	480f      	ldr	r0, [pc, #60]	; (8006b54 <mrbc_decref+0x80>)
 8006b16:	f00e fd95 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	885a      	ldrh	r2, [r3, #2]
 8006b20:	3a01      	subs	r2, #1
 8006b22:	b292      	uxth	r2, r2
 8006b24:	805a      	strh	r2, [r3, #2]
 8006b26:	885b      	ldrh	r3, [r3, #2]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10b      	bne.n	8006b44 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f993 3000 	ldrsb.w	r3, [r3]
 8006b32:	461a      	mov	r2, r3
 8006b34:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <mrbc_decref+0x88>)
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
 8006b3e:	e002      	b.n	8006b46 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8006b44:	bf00      	nop
}
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	08018f50 	.word	0x08018f50
 8006b50:	0801acd0 	.word	0x0801acd0
 8006b54:	08018f68 	.word	0x08018f68
 8006b58:	08018f84 	.word	0x08018f84
 8006b5c:	0801be98 	.word	0x0801be98

08006b60 <mrbc_string_new_cstr>:
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <mrbc_string_new_cstr+0x1c>
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7f9 fb3e 	bl	80001f4 <strlen>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	e000      	b.n	8006b7e <mrbc_string_new_cstr+0x1e>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	f000 fb12 	bl	80071ac <mrbc_string_new>
}
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <mrbc_string_append_cstr>:
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 8006b9a:	6838      	ldr	r0, [r7, #0]
 8006b9c:	f7f9 fb2a 	bl	80001f4 <strlen>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fc98 	bl	80074dc <mrbc_string_append_cbuf>
 8006bac:	4603      	mov	r3, r0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <mrbc_range_first>:
/***** Inline functions *****************************************************/
//================================================================
/*! get first value
*/
static inline mrbc_value mrbc_range_first(const mrbc_value *v)
{
 8006bb6:	b490      	push	{r4, r7}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  return v->range->first;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4614      	mov	r4, r2
 8006bc8:	3308      	adds	r3, #8
 8006bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc90      	pop	{r4, r7}
 8006bd8:	4770      	bx	lr

08006bda <mrbc_range_last>:

//================================================================
/*! get last value
*/
static inline mrbc_value mrbc_range_last(const mrbc_value *v)
{
 8006bda:	b490      	push	{r4, r7}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
  return v->range->last;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	4614      	mov	r4, r2
 8006bec:	3318      	adds	r3, #24
 8006bee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc90      	pop	{r4, r7}
 8006bfc:	4770      	bx	lr

08006bfe <mrbc_range_new>:
  @param  last		pointer to last value.
  @param  flag_exclude	true: exclude the end object, otherwise include.
  @return		range object.
*/
mrbc_value mrbc_range_new(struct VM *vm, mrbc_value *first, mrbc_value *last, int flag_exclude)
{
 8006bfe:	b590      	push	{r4, r7, lr}
 8006c00:	b089      	sub	sp, #36	; 0x24
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	603b      	str	r3, [r7, #0]
  mrbc_value value = {.tt = MRBC_TT_RANGE};
 8006c0c:	f107 0310 	add.w	r3, r7, #16
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	609a      	str	r2, [r3, #8]
 8006c18:	60da      	str	r2, [r3, #12]
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	743b      	strb	r3, [r7, #16]

  value.range = mrbc_alloc(vm, sizeof(mrbc_range));
 8006c1e:	2028      	movs	r0, #40	; 0x28
 8006c20:	f7fa ff52 	bl	8001ac8 <mrbc_raw_alloc>
 8006c24:	4603      	mov	r3, r0
 8006c26:	61bb      	str	r3, [r7, #24]
  if( !value.range ) return value;		// ENOMEM
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d107      	bne.n	8006c3e <mrbc_range_new+0x40>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	461c      	mov	r4, r3
 8006c32:	f107 0310 	add.w	r3, r7, #16
 8006c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006c3c:	e023      	b.n	8006c86 <mrbc_range_new+0x88>

  MRBC_INIT_OBJECT_HEADER( value.range, "RA" );
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2201      	movs	r2, #1
 8006c42:	805a      	strh	r2, [r3, #2]
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	2252      	movs	r2, #82	; 0x52
 8006c48:	701a      	strb	r2, [r3, #0]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2241      	movs	r2, #65	; 0x41
 8006c4e:	705a      	strb	r2, [r3, #1]
  value.range->flag_exclude = flag_exclude;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	711a      	strb	r2, [r3, #4]
  value.range->first = *first;
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	f103 0408 	add.w	r4, r3, #8
 8006c60:	4613      	mov	r3, r2
 8006c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  value.range->last = *last;
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	f103 0418 	add.w	r4, r3, #24
 8006c70:	4613      	mov	r3, r2
 8006c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return value;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	461c      	mov	r4, r3
 8006c7c:	f107 0310 	add.w	r3, r7, #16
 8006c80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	3724      	adds	r7, #36	; 0x24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd90      	pop	{r4, r7, pc}

08006c8e <mrbc_range_delete>:
/*! destructor

  @param  v 	pointer to target.
*/
void mrbc_range_delete(mrbc_value *v)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  mrbc_decref( &v->range->first );
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff ff19 	bl	8006ad4 <mrbc_decref>
  mrbc_decref( &v->range->last );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff ff13 	bl	8006ad4 <mrbc_decref>

  mrbc_raw_free( v->range );
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fb f8e4 	bl	8001e80 <mrbc_raw_free>
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <mrbc_range_compare>:
  @retval 0	v1 == v2
  @retval plus	v1 >  v2
  @retval minus	v1 <  v2
*/
int mrbc_range_compare(const mrbc_value *v1, const mrbc_value *v2)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  int res;

  res = mrbc_compare( &v1->range->first, &v2->range->first );
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f103 0208 	add.w	r2, r3, #8
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f007 fa30 	bl	800e140 <mrbc_compare>
 8006ce0:	60f8      	str	r0, [r7, #12]
  if( res != 0 ) return res;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <mrbc_range_compare+0x2c>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	e018      	b.n	8006d1e <mrbc_range_compare+0x5e>

  res = mrbc_compare( &v1->range->last, &v2->range->last );
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f103 0218 	add.w	r2, r3, #24
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	3318      	adds	r3, #24
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	f007 fa1f 	bl	800e140 <mrbc_compare>
 8006d02:	60f8      	str	r0, [r7, #12]
  if( res != 0 ) return res;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <mrbc_range_compare+0x4e>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	e007      	b.n	8006d1e <mrbc_range_compare+0x5e>

  return (int)v2->range->flag_exclude - (int)v1->range->flag_exclude;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	791b      	ldrb	r3, [r3, #4]
 8006d14:	461a      	mov	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	791b      	ldrb	r3, [r3, #4]
 8006d1c:	1ad3      	subs	r3, r2, r3
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <c_range_equal3>:

//================================================================
/*! (method) ===
*/
static void c_range_equal3(struct VM *vm, mrbc_value v[], int argc)
{
 8006d28:	b590      	push	{r4, r7, lr}
 8006d2a:	b095      	sub	sp, #84	; 0x54
 8006d2c:	af04      	add	r7, sp, #16
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[0]) == MRBC_TT_CLASS ) {
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f993 3000 	ldrsb.w	r3, [r3]
 8006d3a:	2b07      	cmp	r3, #7
 8006d3c:	d121      	bne.n	8006d82 <c_range_equal3+0x5a>
    mrbc_value result = mrbc_send( vm, v, argc, &v[1], "kind_of?", 1, &v[0] );
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3310      	adds	r3, #16
 8006d42:	f107 0020 	add.w	r0, r7, #32
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	9203      	str	r2, [sp, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	9202      	str	r2, [sp, #8]
 8006d4e:	4a2e      	ldr	r2, [pc, #184]	; (8006e08 <c_range_equal3+0xe0>)
 8006d50:	9201      	str	r2, [sp, #4]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	68f9      	ldr	r1, [r7, #12]
 8006d5a:	f002 fd53 	bl	8009804 <mrbc_send>
    SET_RETURN( result );
 8006d5e:	f107 0410 	add.w	r4, r7, #16
 8006d62:	f107 0320 	add.w	r3, r7, #32
 8006d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006d6c:	68b8      	ldr	r0, [r7, #8]
 8006d6e:	f7ff feb1 	bl	8006ad4 <mrbc_decref>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	461c      	mov	r4, r3
 8006d76:	f107 0310 	add.w	r3, r7, #16
 8006d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006d80:	e03f      	b.n	8006e02 <c_range_equal3+0xda>
    return;
  }

  int cmp_first = mrbc_compare( &v[0].range->first, &v[1] );
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f103 0208 	add.w	r2, r3, #8
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	3310      	adds	r3, #16
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f007 f9d5 	bl	800e140 <mrbc_compare>
 8006d96:	63b8      	str	r0, [r7, #56]	; 0x38
  int result = (cmp_first <= 0);
 8006d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bfd4      	ite	le
 8006d9e:	2301      	movle	r3, #1
 8006da0:	2300      	movgt	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if( !result ) goto DONE;
 8006da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01b      	beq.n	8006de4 <c_range_equal3+0xbc>

  int cmp_last  = mrbc_compare( &v[1], &v[0].range->last );
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f103 0210 	add.w	r2, r3, #16
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	3318      	adds	r3, #24
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f007 f9c0 	bl	800e140 <mrbc_compare>
 8006dc0:	6378      	str	r0, [r7, #52]	; 0x34
  result = (v->range->flag_exclude) ? (cmp_last < 0) : (cmp_last <= 0);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	791b      	ldrb	r3, [r3, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <c_range_equal3+0xac>
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dce:	0fdb      	lsrs	r3, r3, #31
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	e005      	b.n	8006de0 <c_range_equal3+0xb8>
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bfd4      	ite	le
 8006dda:	2301      	movle	r3, #1
 8006ddc:	2300      	movgt	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de2:	e000      	b.n	8006de6 <c_range_equal3+0xbe>
  if( !result ) goto DONE;
 8006de4:	bf00      	nop

 DONE:
  SET_BOOL_RETURN( result );
 8006de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <c_range_equal3+0xc8>
 8006dec:	2303      	movs	r3, #3
 8006dee:	e000      	b.n	8006df2 <c_range_equal3+0xca>
 8006df0:	2302      	movs	r3, #2
 8006df2:	633b      	str	r3, [r7, #48]	; 0x30
 8006df4:	68b8      	ldr	r0, [r7, #8]
 8006df6:	f7ff fe6d 	bl	8006ad4 <mrbc_decref>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	b25a      	sxtb	r2, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	701a      	strb	r2, [r3, #0]
}
 8006e02:	3744      	adds	r7, #68	; 0x44
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd90      	pop	{r4, r7, pc}
 8006e08:	08018fa0 	.word	0x08018fa0

08006e0c <c_range_first>:

//================================================================
/*! (method) first
*/
static void c_range_first(struct VM *vm, mrbc_value v[], int argc)
{
 8006e0c:	b590      	push	{r4, r7, lr}
 8006e0e:	b08d      	sub	sp, #52	; 0x34
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_range_first(v);
 8006e18:	f107 0320 	add.w	r3, r7, #32
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fec9 	bl	8006bb6 <mrbc_range_first>
  SET_RETURN(ret);
 8006e24:	f107 0410 	add.w	r4, r7, #16
 8006e28:	f107 0320 	add.w	r3, r7, #32
 8006e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f7ff fe4e 	bl	8006ad4 <mrbc_decref>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	461c      	mov	r4, r3
 8006e3c:	f107 0310 	add.w	r3, r7, #16
 8006e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006e46:	bf00      	nop
 8006e48:	3734      	adds	r7, #52	; 0x34
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd90      	pop	{r4, r7, pc}

08006e4e <c_range_last>:

//================================================================
/*! (method) last
*/
static void c_range_last(struct VM *vm, mrbc_value v[], int argc)
{
 8006e4e:	b590      	push	{r4, r7, lr}
 8006e50:	b08d      	sub	sp, #52	; 0x34
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_range_last(v);
 8006e5a:	f107 0320 	add.w	r3, r7, #32
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff feba 	bl	8006bda <mrbc_range_last>
  SET_RETURN(ret);
 8006e66:	f107 0410 	add.w	r4, r7, #16
 8006e6a:	f107 0320 	add.w	r3, r7, #32
 8006e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006e74:	68b8      	ldr	r0, [r7, #8]
 8006e76:	f7ff fe2d 	bl	8006ad4 <mrbc_decref>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	461c      	mov	r4, r3
 8006e7e:	f107 0310 	add.w	r3, r7, #16
 8006e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006e88:	bf00      	nop
 8006e8a:	3734      	adds	r7, #52	; 0x34
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd90      	pop	{r4, r7, pc}

08006e90 <c_range_exclude_end>:

//================================================================
/*! (method) exclude_end?
*/
static void c_range_exclude_end(struct VM *vm, mrbc_value v[], int argc)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  int result = v->range->flag_exclude;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	791b      	ldrb	r3, [r3, #4]
 8006ea2:	617b      	str	r3, [r7, #20]
  SET_BOOL_RETURN( result );
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <c_range_exclude_end+0x1e>
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e000      	b.n	8006eb0 <c_range_exclude_end+0x20>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	68b8      	ldr	r0, [r7, #8]
 8006eb4:	f7ff fe0e 	bl	8006ad4 <mrbc_decref>
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	b25a      	sxtb	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	701a      	strb	r2, [r3, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <c_range_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect, to_s
*/
static void c_range_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b09f      	sub	sp, #124	; 0x7c
 8006ecc:	af04      	add	r7, sp, #16
 8006ece:	61f8      	str	r0, [r7, #28]
 8006ed0:	61b9      	str	r1, [r7, #24]
 8006ed2:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8006eda:	2b07      	cmp	r3, #7
 8006edc:	d112      	bne.n	8006f04 <c_range_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f006 feaa 	bl	800dc40 <mrbc_symid_to_str>
 8006eec:	4602      	mov	r2, r0
 8006eee:	69bc      	ldr	r4, [r7, #24]
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	69f9      	ldr	r1, [r7, #28]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff fe33 	bl	8006b60 <mrbc_string_new_cstr>
 8006efa:	463b      	mov	r3, r7
 8006efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8006f02:	e05f      	b.n	8006fc4 <c_range_inspect+0xfc>
  }

  mrbc_value ret = mrbc_string_new(vm, NULL, 0);
 8006f04:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006f08:	2300      	movs	r3, #0
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	69f9      	ldr	r1, [r7, #28]
 8006f0e:	f000 f94d 	bl	80071ac <mrbc_string_new>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8006f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d04e      	beq.n	8006fb6 <c_range_inspect+0xee>

  int i;
  for( i = 0; i < 2; i++ ) {
 8006f18:	2300      	movs	r3, #0
 8006f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f1c:	e036      	b.n	8006f8c <c_range_inspect+0xc4>
    if( i != 0 ) mrbc_string_append_cstr( &ret, ".." );
 8006f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <c_range_inspect+0x68>
 8006f24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f28:	4928      	ldr	r1, [pc, #160]	; (8006fcc <c_range_inspect+0x104>)
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fe30 	bl	8006b90 <mrbc_string_append_cstr>
    mrbc_value v1 = (i == 0) ? mrbc_range_first(v) : mrbc_range_last(v);
 8006f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <c_range_inspect+0x7c>
 8006f36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f3a:	69b9      	ldr	r1, [r7, #24]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff fe3a 	bl	8006bb6 <mrbc_range_first>
 8006f42:	e005      	b.n	8006f50 <c_range_inspect+0x88>
 8006f44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f48:	69b9      	ldr	r1, [r7, #24]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fe45 	bl	8006bda <mrbc_range_last>
    mrbc_value s1 = mrbc_send( vm, v, argc, &v1, "inspect", 0 );
 8006f50:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8006f54:	2300      	movs	r3, #0
 8006f56:	9302      	str	r3, [sp, #8]
 8006f58:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <c_range_inspect+0x108>)
 8006f5a:	9301      	str	r3, [sp, #4]
 8006f5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	69f9      	ldr	r1, [r7, #28]
 8006f68:	f002 fc4c 	bl	8009804 <mrbc_send>
    mrbc_string_append( &ret, &s1 );
 8006f6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006f70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fa57 	bl	800742a <mrbc_string_append>
    mrbc_string_delete( &s1 );
 8006f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f9b1 	bl	80072e8 <mrbc_string_delete>
  for( i = 0; i < 2; i++ ) {
 8006f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f88:	3301      	adds	r3, #1
 8006f8a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	ddc5      	ble.n	8006f1e <c_range_inspect+0x56>
  }

  SET_RETURN(ret);
 8006f92:	f107 0420 	add.w	r4, r7, #32
 8006f96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006fa0:	69b8      	ldr	r0, [r7, #24]
 8006fa2:	f7ff fd97 	bl	8006ad4 <mrbc_decref>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	461c      	mov	r4, r3
 8006faa:	f107 0320 	add.w	r3, r7, #32
 8006fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;
 8006fb4:	e006      	b.n	8006fc4 <c_range_inspect+0xfc>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8006fb6:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 8006fb8:	69b8      	ldr	r0, [r7, #24]
 8006fba:	f7ff fd8b 	bl	8006ad4 <mrbc_decref>
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	701a      	strb	r2, [r3, #0]
}
 8006fc4:	376c      	adds	r7, #108	; 0x6c
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd90      	pop	{r4, r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	08018fac 	.word	0x08018fac
 8006fd0:	08018fb0 	.word	0x08018fb0

08006fd4 <mrbc_incref>:
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f993 3000 	ldrsb.w	r3, [r3]
 8006fe2:	2b07      	cmp	r3, #7
 8006fe4:	dd1e      	ble.n	8007024 <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	885b      	ldrh	r3, [r3, #2]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <mrbc_incref+0x2a>
 8006ff0:	4b0e      	ldr	r3, [pc, #56]	; (800702c <mrbc_incref+0x58>)
 8006ff2:	4a0f      	ldr	r2, [pc, #60]	; (8007030 <mrbc_incref+0x5c>)
 8006ff4:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006ff8:	480e      	ldr	r0, [pc, #56]	; (8007034 <mrbc_incref+0x60>)
 8006ffa:	f00e fb23 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	885b      	ldrh	r3, [r3, #2]
 8007004:	2bff      	cmp	r3, #255	; 0xff
 8007006:	d106      	bne.n	8007016 <mrbc_incref+0x42>
 8007008:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <mrbc_incref+0x64>)
 800700a:	4a09      	ldr	r2, [pc, #36]	; (8007030 <mrbc_incref+0x5c>)
 800700c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8007010:	4808      	ldr	r0, [pc, #32]	; (8007034 <mrbc_incref+0x60>)
 8007012:	f00e fb17 	bl	8015644 <__assert_func>
  v->obj->ref_count++;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	885a      	ldrh	r2, [r3, #2]
 800701c:	3201      	adds	r2, #1
 800701e:	b292      	uxth	r2, r2
 8007020:	805a      	strh	r2, [r3, #2]
 8007022:	e000      	b.n	8007026 <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8007024:	bf00      	nop
}
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	08018fc0 	.word	0x08018fc0
 8007030:	0801ade8 	.word	0x0801ade8
 8007034:	08018fd8 	.word	0x08018fd8
 8007038:	08018ff4 	.word	0x08018ff4

0800703c <mrbc_decref>:
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f993 3000 	ldrsb.w	r3, [r3]
 800704a:	2b07      	cmp	r3, #7
 800704c:	dd2c      	ble.n	80070a8 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	885b      	ldrh	r3, [r3, #2]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d106      	bne.n	8007066 <mrbc_decref+0x2a>
 8007058:	4b16      	ldr	r3, [pc, #88]	; (80070b4 <mrbc_decref+0x78>)
 800705a:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <mrbc_decref+0x7c>)
 800705c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8007060:	4816      	ldr	r0, [pc, #88]	; (80070bc <mrbc_decref+0x80>)
 8007062:	f00e faef 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007070:	4293      	cmp	r3, r2
 8007072:	d106      	bne.n	8007082 <mrbc_decref+0x46>
 8007074:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <mrbc_decref+0x84>)
 8007076:	4a10      	ldr	r2, [pc, #64]	; (80070b8 <mrbc_decref+0x7c>)
 8007078:	f240 11d3 	movw	r1, #467	; 0x1d3
 800707c:	480f      	ldr	r0, [pc, #60]	; (80070bc <mrbc_decref+0x80>)
 800707e:	f00e fae1 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	885a      	ldrh	r2, [r3, #2]
 8007088:	3a01      	subs	r2, #1
 800708a:	b292      	uxth	r2, r2
 800708c:	805a      	strh	r2, [r3, #2]
 800708e:	885b      	ldrh	r3, [r3, #2]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f993 3000 	ldrsb.w	r3, [r3]
 800709a:	461a      	mov	r2, r3
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <mrbc_decref+0x88>)
 800709e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	4798      	blx	r3
 80070a6:	e002      	b.n	80070ae <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80070a8:	bf00      	nop
 80070aa:	e000      	b.n	80070ae <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 80070ac:	bf00      	nop
}
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	08018fc0 	.word	0x08018fc0
 80070b8:	0801addc 	.word	0x0801addc
 80070bc:	08018fd8 	.word	0x08018fd8
 80070c0:	08019010 	.word	0x08019010
 80070c4:	0801be98 	.word	0x0801be98

080070c8 <mrbc_string_new_cstr>:
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <mrbc_string_new_cstr+0x1c>
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7f9 f88a 	bl	80001f4 <strlen>
 80070e0:	4603      	mov	r3, r0
 80070e2:	e000      	b.n	80070e6 <mrbc_string_new_cstr+0x1e>
 80070e4:	2300      	movs	r3, #0
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	f000 f85e 	bl	80071ac <mrbc_string_new>
}
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <mrbc_string_size>:
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  return str->string->size;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	889b      	ldrh	r3, [r3, #4]
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <mrbc_string_cstr>:
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	689b      	ldr	r3, [r3, #8]
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <mrbc_string_append_cstr>:
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 8007136:	6838      	ldr	r0, [r7, #0]
 8007138:	f7f9 f85c 	bl	80001f4 <strlen>
 800713c:	4603      	mov	r3, r0
 800713e:	461a      	mov	r2, r3
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f9ca 	bl	80074dc <mrbc_string_append_cbuf>
 8007148:	4603      	mov	r3, r0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <mrbc_array_size>:
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  return ary->array->n_stored;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	88db      	ldrh	r3, [r3, #6]
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <is_space>:

  @param  ch	character code.
  @return	result.
*/
static int is_space( int ch )
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  static const char ws[] = " \t\r\n\f\v";	// '\0' on tail

  int i;
  for( i = 0; i < sizeof(ws); i++ ) {
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e00c      	b.n	8007194 <is_space+0x28>
    if( ch == ws[i] ) return 1;
 800717a:	4a0b      	ldr	r2, [pc, #44]	; (80071a8 <is_space+0x3c>)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4293      	cmp	r3, r2
 8007188:	d101      	bne.n	800718e <is_space+0x22>
 800718a:	2301      	movs	r3, #1
 800718c:	e006      	b.n	800719c <is_space+0x30>
  for( i = 0; i < sizeof(ws); i++ ) {
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b06      	cmp	r3, #6
 8007198:	d9ef      	bls.n	800717a <is_space+0xe>
  }
  return 0;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	0801add4 	.word	0x0801add4

080071ac <mrbc_string_new>:
  @param  src	source string or NULL
  @param  len	source length
  @return 	string object
*/
mrbc_value mrbc_string_new(struct VM *vm, const void *src, int len)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b08b      	sub	sp, #44	; 0x2c
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
  mrbc_value value = {.tt = MRBC_TT_STRING};
 80071ba:	f107 0310 	add.w	r3, r7, #16
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	605a      	str	r2, [r3, #4]
 80071c4:	609a      	str	r2, [r3, #8]
 80071c6:	60da      	str	r2, [r3, #12]
 80071c8:	230b      	movs	r3, #11
 80071ca:	743b      	strb	r3, [r7, #16]

  /*
    Allocate handle and string buffer.
  */
  mrbc_string *h = mrbc_alloc(vm, sizeof(mrbc_string));
 80071cc:	200c      	movs	r0, #12
 80071ce:	f7fa fc7b 	bl	8001ac8 <mrbc_raw_alloc>
 80071d2:	6278      	str	r0, [r7, #36]	; 0x24
  if( !h ) return value;		// ENOMEM
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d107      	bne.n	80071ea <mrbc_string_new+0x3e>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	461c      	mov	r4, r3
 80071de:	f107 0310 	add.w	r3, r7, #16
 80071e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80071e8:	e03e      	b.n	8007268 <mrbc_string_new+0xbc>

  uint8_t *str = mrbc_alloc(vm, len+1);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	3301      	adds	r3, #1
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fa fc6a 	bl	8001ac8 <mrbc_raw_alloc>
 80071f4:	6238      	str	r0, [r7, #32]
  if( !str ) {				// ENOMEM
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <mrbc_string_new+0x66>
    mrbc_raw_free( h );
 80071fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071fe:	f7fa fe3f 	bl	8001e80 <mrbc_raw_free>
    return value;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	461c      	mov	r4, r3
 8007206:	f107 0310 	add.w	r3, r7, #16
 800720a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800720c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007210:	e02a      	b.n	8007268 <mrbc_string_new+0xbc>
  }

  MRBC_INIT_OBJECT_HEADER( h, "ST" );
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	2201      	movs	r2, #1
 8007216:	805a      	strh	r2, [r3, #2]
 8007218:	2253      	movs	r2, #83	; 0x53
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	2254      	movs	r2, #84	; 0x54
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	705a      	strb	r2, [r3, #1]
  h->size = len;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	b29a      	uxth	r2, r3
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	809a      	strh	r2, [r3, #4]
  h->data = str;
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	6a3a      	ldr	r2, [r7, #32]
 8007230:	609a      	str	r2, [r3, #8]

  /*
    Copy a source string.
  */
  if( src == NULL ) {
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d103      	bne.n	8007240 <mrbc_string_new+0x94>
    str[0] = '\0';
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	2200      	movs	r2, #0
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e00a      	b.n	8007256 <mrbc_string_new+0xaa>
  } else {
    memcpy( str, src, len );
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	6a38      	ldr	r0, [r7, #32]
 8007248:	f00f fad5 	bl	80167f6 <memcpy>
    str[len] = '\0';
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	6a3a      	ldr	r2, [r7, #32]
 8007250:	4413      	add	r3, r2
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
  }

  value.string = h;
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	61bb      	str	r3, [r7, #24]
  return value;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	461c      	mov	r4, r3
 800725e:	f107 0310 	add.w	r3, r7, #16
 8007262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	372c      	adds	r7, #44	; 0x2c
 800726c:	46bd      	mov	sp, r7
 800726e:	bd90      	pop	{r4, r7, pc}

08007270 <mrbc_string_new_alloc>:
  @param  buf	pointer to allocated buffer
  @param  len	length
  @return 	string object
*/
mrbc_value mrbc_string_new_alloc(struct VM *vm, void *buf, int len)
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b08b      	sub	sp, #44	; 0x2c
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
  mrbc_value value = {.tt = MRBC_TT_STRING};
 800727e:	f107 0310 	add.w	r3, r7, #16
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	605a      	str	r2, [r3, #4]
 8007288:	609a      	str	r2, [r3, #8]
 800728a:	60da      	str	r2, [r3, #12]
 800728c:	230b      	movs	r3, #11
 800728e:	743b      	strb	r3, [r7, #16]

  /*
    Allocate handle
  */
  mrbc_string *h = mrbc_alloc(vm, sizeof(mrbc_string));
 8007290:	200c      	movs	r0, #12
 8007292:	f7fa fc19 	bl	8001ac8 <mrbc_raw_alloc>
 8007296:	6278      	str	r0, [r7, #36]	; 0x24
  if( !h ) return value;		// ENOMEM
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d107      	bne.n	80072ae <mrbc_string_new_alloc+0x3e>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	461c      	mov	r4, r3
 80072a2:	f107 0310 	add.w	r3, r7, #16
 80072a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80072ac:	e018      	b.n	80072e0 <mrbc_string_new_alloc+0x70>

  MRBC_INIT_OBJECT_HEADER( h, "ST" );
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	2201      	movs	r2, #1
 80072b2:	805a      	strh	r2, [r3, #2]
 80072b4:	2253      	movs	r2, #83	; 0x53
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	2254      	movs	r2, #84	; 0x54
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	705a      	strb	r2, [r3, #1]
  h->size = len;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	809a      	strh	r2, [r3, #4]
  h->data = buf;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	609a      	str	r2, [r3, #8]

  value.string = h;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	61bb      	str	r3, [r7, #24]
  return value;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	461c      	mov	r4, r3
 80072d6:	f107 0310 	add.w	r3, r7, #16
 80072da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	372c      	adds	r7, #44	; 0x2c
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd90      	pop	{r4, r7, pc}

080072e8 <mrbc_string_delete>:
/*! destructor

  @param  str	pointer to target value
*/
void mrbc_string_delete(mrbc_value *str)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  mrbc_raw_free(str->string->data);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fa fdc2 	bl	8001e80 <mrbc_raw_free>
  mrbc_raw_free(str->string);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4618      	mov	r0, r3
 8007302:	f7fa fdbd 	bl	8001e80 <mrbc_raw_free>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <mrbc_string_clear>:

//================================================================
/*! clear content
*/
void mrbc_string_clear(mrbc_value *str)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  mrbc_raw_realloc(str->string->data, 1);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	2101      	movs	r1, #1
 800731e:	4618      	mov	r0, r3
 8007320:	f7fa fe4a 	bl	8001fb8 <mrbc_raw_realloc>
  str->string->data[0] = '\0';
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
  str->string->size = 0;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	2200      	movs	r2, #0
 8007334:	809a      	strh	r2, [r3, #4]
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <mrbc_string_dup>:
  @param  vm	pointer to VM.
  @param  s1	pointer to target value
  @return	new string as s1 + s2
*/
mrbc_value mrbc_string_dup(struct VM *vm, mrbc_value *s1)
{
 800733e:	b590      	push	{r4, r7, lr}
 8007340:	b08b      	sub	sp, #44	; 0x2c
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	607a      	str	r2, [r7, #4]
  mrbc_string *h1 = s1->string;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_value value = mrbc_string_new(vm, NULL, h1->size);
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	889b      	ldrh	r3, [r3, #4]
 8007354:	f107 0010 	add.w	r0, r7, #16
 8007358:	2200      	movs	r2, #0
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	f7ff ff26 	bl	80071ac <mrbc_string_new>
  if( value.string == NULL ) return value;		// ENOMEM
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d107      	bne.n	8007376 <mrbc_string_dup+0x38>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	461c      	mov	r4, r3
 800736a:	f107 0310 	add.w	r3, r7, #16
 800736e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007374:	e010      	b.n	8007398 <mrbc_string_dup+0x5a>

  memcpy( value.string->data, h1->data, h1->size + 1 );
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	6898      	ldr	r0, [r3, #8]
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	6899      	ldr	r1, [r3, #8]
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	889b      	ldrh	r3, [r3, #4]
 8007382:	3301      	adds	r3, #1
 8007384:	461a      	mov	r2, r3
 8007386:	f00f fa36 	bl	80167f6 <memcpy>

  return value;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	461c      	mov	r4, r3
 800738e:	f107 0310 	add.w	r3, r7, #16
 8007392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	372c      	adds	r7, #44	; 0x2c
 800739c:	46bd      	mov	sp, r7
 800739e:	bd90      	pop	{r4, r7, pc}

080073a0 <mrbc_string_add>:
  @param  s1	pointer to target value 1
  @param  s2	pointer to target value 2
  @return	new string as s1 + s2
*/
mrbc_value mrbc_string_add(struct VM *vm, const mrbc_value *s1, const mrbc_value *s2)
{
 80073a0:	b590      	push	{r4, r7, lr}
 80073a2:	b08b      	sub	sp, #44	; 0x2c
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
  mrbc_string *h1 = s1->string;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
  mrbc_string *h2 = s2->string;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	623b      	str	r3, [r7, #32]

  mrbc_value value = mrbc_string_new(vm, NULL, h1->size + h2->size);
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	889b      	ldrh	r3, [r3, #4]
 80073be:	461a      	mov	r2, r3
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	889b      	ldrh	r3, [r3, #4]
 80073c4:	4413      	add	r3, r2
 80073c6:	f107 0010 	add.w	r0, r7, #16
 80073ca:	2200      	movs	r2, #0
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	f7ff feed 	bl	80071ac <mrbc_string_new>
  if( value.string == NULL ) return value;		// ENOMEM
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d107      	bne.n	80073e8 <mrbc_string_add+0x48>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	461c      	mov	r4, r3
 80073dc:	f107 0310 	add.w	r3, r7, #16
 80073e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80073e6:	e01c      	b.n	8007422 <mrbc_string_add+0x82>

  memcpy( value.string->data,            h1->data, h1->size );
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	6898      	ldr	r0, [r3, #8]
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	6899      	ldr	r1, [r3, #8]
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	889b      	ldrh	r3, [r3, #4]
 80073f4:	461a      	mov	r2, r3
 80073f6:	f00f f9fe 	bl	80167f6 <memcpy>
  memcpy( value.string->data + h1->size, h2->data, h2->size + 1 );
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007400:	8892      	ldrh	r2, [r2, #4]
 8007402:	1898      	adds	r0, r3, r2
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	6899      	ldr	r1, [r3, #8]
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	889b      	ldrh	r3, [r3, #4]
 800740c:	3301      	adds	r3, #1
 800740e:	461a      	mov	r2, r3
 8007410:	f00f f9f1 	bl	80167f6 <memcpy>

  return value;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	461c      	mov	r4, r3
 8007418:	f107 0310 	add.w	r3, r7, #16
 800741c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800741e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	372c      	adds	r7, #44	; 0x2c
 8007426:	46bd      	mov	sp, r7
 8007428:	bd90      	pop	{r4, r7, pc}

0800742a <mrbc_string_append>:
  @param  s1	pointer to target value 1
  @param  s2	pointer to target value 2
  @return	mrbc_error_code
*/
int mrbc_string_append(mrbc_value *s1, const mrbc_value *s2)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b086      	sub	sp, #24
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  int len1 = s1->string->size;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	889b      	ldrh	r3, [r3, #4]
 800743a:	617b      	str	r3, [r7, #20]
  int len2 = (mrbc_type(*s2) == MRBC_TT_STRING) ? s2->string->size : 1;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	f993 3000 	ldrsb.w	r3, [r3]
 8007442:	2b0b      	cmp	r3, #11
 8007444:	d103      	bne.n	800744e <mrbc_string_append+0x24>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	889b      	ldrh	r3, [r3, #4]
 800744c:	e000      	b.n	8007450 <mrbc_string_append+0x26>
 800744e:	2301      	movs	r3, #1
 8007450:	613b      	str	r3, [r7, #16]

  uint8_t *str = mrbc_raw_realloc(s1->string->data, len1+len2+1);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	6898      	ldr	r0, [r3, #8]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	4413      	add	r3, r2
 800745e:	3301      	adds	r3, #1
 8007460:	4619      	mov	r1, r3
 8007462:	f7fa fda9 	bl	8001fb8 <mrbc_raw_realloc>
 8007466:	60f8      	str	r0, [r7, #12]
  if( !str ) return E_NOMEMORY_ERROR;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <mrbc_string_append+0x48>
 800746e:	2301      	movs	r3, #1
 8007470:	e030      	b.n	80074d4 <mrbc_string_append+0xaa>

  if( mrbc_type(*s2) == MRBC_TT_STRING ) {
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	f993 3000 	ldrsb.w	r3, [r3]
 8007478:	2b0b      	cmp	r3, #11
 800747a:	d10b      	bne.n	8007494 <mrbc_string_append+0x6a>
    memcpy(str + len1, s2->string->data, len2 + 1);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	18d0      	adds	r0, r2, r3
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	6899      	ldr	r1, [r3, #8]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3301      	adds	r3, #1
 800748c:	461a      	mov	r2, r3
 800748e:	f00f f9b2 	bl	80167f6 <memcpy>
 8007492:	e011      	b.n	80074b8 <mrbc_string_append+0x8e>
  } else if( mrbc_type(*s2) == MRBC_TT_INTEGER ) {
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	f993 3000 	ldrsb.w	r3, [r3]
 800749a:	2b04      	cmp	r3, #4
 800749c:	d10c      	bne.n	80074b8 <mrbc_string_append+0x8e>
    str[len1] = s2->i;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6899      	ldr	r1, [r3, #8]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	b2ca      	uxtb	r2, r1
 80074aa:	701a      	strb	r2, [r3, #0]
    str[len1+1] = '\0';
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	3301      	adds	r3, #1
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	2200      	movs	r2, #0
 80074b6:	701a      	strb	r2, [r3, #0]
  }

  s1->string->size = len1 + len2;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	b299      	uxth	r1, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	b29a      	uxth	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	440a      	add	r2, r1
 80074c6:	b292      	uxth	r2, r2
 80074c8:	809a      	strh	r2, [r3, #4]
  s1->string->data = str;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	609a      	str	r2, [r3, #8]

  return 0;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <mrbc_string_append_cbuf>:
  @param  s2	pointer to buffer
  @param  len2	buffer size
  @return	mrbc_error_code
*/
int mrbc_string_append_cbuf(mrbc_value *s1, const void *s2, int len2)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  int len1 = s1->string->size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	889b      	ldrh	r3, [r3, #4]
 80074ee:	617b      	str	r3, [r7, #20]

  uint8_t *str = mrbc_raw_realloc(s1->string->data, len1+len2+1);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	6898      	ldr	r0, [r3, #8]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4413      	add	r3, r2
 80074fc:	3301      	adds	r3, #1
 80074fe:	4619      	mov	r1, r3
 8007500:	f7fa fd5a 	bl	8001fb8 <mrbc_raw_realloc>
 8007504:	6138      	str	r0, [r7, #16]
  if( !str ) return E_NOMEMORY_ERROR;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <mrbc_string_append_cbuf+0x34>
 800750c:	2301      	movs	r3, #1
 800750e:	e02a      	b.n	8007566 <mrbc_string_append_cbuf+0x8a>

  if( s2 ) {
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d010      	beq.n	8007538 <mrbc_string_append_cbuf+0x5c>
    memcpy(str + len1, s2, len2);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	4618      	mov	r0, r3
 8007522:	f00f f968 	bl	80167f6 <memcpy>
    str[len1 + len2] = 0;
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4413      	add	r3, r2
 800752c:	461a      	mov	r2, r3
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4413      	add	r3, r2
 8007532:	2200      	movs	r2, #0
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	e008      	b.n	800754a <mrbc_string_append_cbuf+0x6e>
  } else {
    memset(str + len1, 0, len2 + 1);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	18d0      	adds	r0, r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3301      	adds	r3, #1
 8007542:	461a      	mov	r2, r3
 8007544:	2100      	movs	r1, #0
 8007546:	f00f f8bc 	bl	80166c2 <memset>
  }

  s1->string->size = len1 + len2;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	b299      	uxth	r1, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	440a      	add	r2, r1
 8007558:	b292      	uxth	r2, r2
 800755a:	809a      	strh	r2, [r3, #4]
  s1->string->data = str;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	609a      	str	r2, [r3, #8]

  return 0;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <mrbc_string_index>:
  @param  pattern	pointer to substring
  @param  offset	search offset
  @return		position index. or minus value if not found.
*/
int mrbc_string_index(const mrbc_value *src, const mrbc_value *pattern, int offset)
{
 800756e:	b590      	push	{r4, r7, lr}
 8007570:	b089      	sub	sp, #36	; 0x24
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	607a      	str	r2, [r7, #4]
  char *p1 = mrbc_string_cstr(src) + offset;
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff fdc9 	bl	8007112 <mrbc_string_cstr>
 8007580:	4602      	mov	r2, r0
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4413      	add	r3, r2
 8007586:	61fb      	str	r3, [r7, #28]
  char *p2 = mrbc_string_cstr(pattern);
 8007588:	68b8      	ldr	r0, [r7, #8]
 800758a:	f7ff fdc2 	bl	8007112 <mrbc_string_cstr>
 800758e:	6178      	str	r0, [r7, #20]
  int try_cnt = mrbc_string_size(src) - mrbc_string_size(pattern) - offset;
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff fdb1 	bl	80070f8 <mrbc_string_size>
 8007596:	4604      	mov	r4, r0
 8007598:	68b8      	ldr	r0, [r7, #8]
 800759a:	f7ff fdad 	bl	80070f8 <mrbc_string_size>
 800759e:	4603      	mov	r3, r0
 80075a0:	1ae2      	subs	r2, r4, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	61bb      	str	r3, [r7, #24]

  while( try_cnt >= 0 ) {
 80075a8:	e018      	b.n	80075dc <mrbc_string_index+0x6e>
    if( memcmp( p1, p2, mrbc_string_size(pattern) ) == 0 ) {
 80075aa:	68b8      	ldr	r0, [r7, #8]
 80075ac:	f7ff fda4 	bl	80070f8 <mrbc_string_size>
 80075b0:	4603      	mov	r3, r0
 80075b2:	461a      	mov	r2, r3
 80075b4:	6979      	ldr	r1, [r7, #20]
 80075b6:	69f8      	ldr	r0, [r7, #28]
 80075b8:	f00f f859 	bl	801666e <memcmp>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <mrbc_string_index+0x62>
      return p1 - mrbc_string_cstr(src);	// matched.
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7ff fda5 	bl	8007112 <mrbc_string_cstr>
 80075c8:	4602      	mov	r2, r0
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	1a9b      	subs	r3, r3, r2
 80075ce:	e00a      	b.n	80075e6 <mrbc_string_index+0x78>
    }
    try_cnt--;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	61bb      	str	r3, [r7, #24]
    p1++;
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	3301      	adds	r3, #1
 80075da:	61fb      	str	r3, [r7, #28]
  while( try_cnt >= 0 ) {
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dae3      	bge.n	80075aa <mrbc_string_index+0x3c>
  }

  return -1;
 80075e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3724      	adds	r7, #36	; 0x24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd90      	pop	{r4, r7, pc}

080075ee <mrbc_string_strip>:
  @param  src	pointer to target value
  @param  mode	1:left-side, 2:right-side, 3:each
  @return	0 when not removed.
*/
int mrbc_string_strip(mrbc_value *src, int mode)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  char *p1 = mrbc_string_cstr(src);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff fd8a 	bl	8007112 <mrbc_string_cstr>
 80075fe:	6178      	str	r0, [r7, #20]
  char *p2 = p1 + mrbc_string_size(src) - 1;
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff fd79 	bl	80070f8 <mrbc_string_size>
 8007606:	4603      	mov	r3, r0
 8007608:	3b01      	subs	r3, #1
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4413      	add	r3, r2
 800760e:	613b      	str	r3, [r7, #16]

  // left-side
  if( mode & 0x01 ) {
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d017      	beq.n	800764a <mrbc_string_strip+0x5c>
    while( p1 <= p2 ) {
 800761a:	e00e      	b.n	800763a <mrbc_string_strip+0x4c>
      if( *p1 == '\0' ) break;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00f      	beq.n	8007644 <mrbc_string_strip+0x56>
      if( !is_space(*p1) ) break;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fd9f 	bl	800716c <is_space>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d009      	beq.n	8007648 <mrbc_string_strip+0x5a>
      p1++;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	3301      	adds	r3, #1
 8007638:	617b      	str	r3, [r7, #20]
    while( p1 <= p2 ) {
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	429a      	cmp	r2, r3
 8007640:	d9ec      	bls.n	800761c <mrbc_string_strip+0x2e>
 8007642:	e002      	b.n	800764a <mrbc_string_strip+0x5c>
      if( *p1 == '\0' ) break;
 8007644:	bf00      	nop
 8007646:	e000      	b.n	800764a <mrbc_string_strip+0x5c>
      if( !is_space(*p1) ) break;
 8007648:	bf00      	nop
    }
  }
  // right-side
  if( mode & 0x02 ) {
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d011      	beq.n	8007678 <mrbc_string_strip+0x8a>
    while( p1 <= p2 ) {
 8007654:	e00a      	b.n	800766c <mrbc_string_strip+0x7e>
      if( !is_space(*p2) ) break;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff fd86 	bl	800716c <is_space>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <mrbc_string_strip+0x88>
      p2--;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	3b01      	subs	r3, #1
 800766a:	613b      	str	r3, [r7, #16]
    while( p1 <= p2 ) {
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	429a      	cmp	r2, r3
 8007672:	d9f0      	bls.n	8007656 <mrbc_string_strip+0x68>
 8007674:	e000      	b.n	8007678 <mrbc_string_strip+0x8a>
      if( !is_space(*p2) ) break;
 8007676:	bf00      	nop
    }
  }

  int new_size = p2 - p1 + 1;
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	3301      	adds	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
  if( mrbc_string_size(src) == new_size ) return 0;
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff fd38 	bl	80070f8 <mrbc_string_size>
 8007688:	4602      	mov	r2, r0
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4293      	cmp	r3, r2
 800768e:	d101      	bne.n	8007694 <mrbc_string_strip+0xa6>
 8007690:	2300      	movs	r3, #0
 8007692:	e01e      	b.n	80076d2 <mrbc_string_strip+0xe4>

  char *buf = mrbc_string_cstr(src);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff fd3c 	bl	8007112 <mrbc_string_cstr>
 800769a:	60b8      	str	r0, [r7, #8]
  if( p1 != buf ) memmove( buf, p1, new_size );
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d005      	beq.n	80076b0 <mrbc_string_strip+0xc2>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	461a      	mov	r2, r3
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	68b8      	ldr	r0, [r7, #8]
 80076ac:	f00e ffef 	bl	801668e <memmove>
  buf[new_size] = '\0';
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	4413      	add	r3, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	701a      	strb	r2, [r3, #0]
  mrbc_raw_realloc(buf, new_size+1);	// shrink suitable size.
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3301      	adds	r3, #1
 80076be:	4619      	mov	r1, r3
 80076c0:	68b8      	ldr	r0, [r7, #8]
 80076c2:	f7fa fc79 	bl	8001fb8 <mrbc_raw_realloc>
  src->string->size = new_size;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	b292      	uxth	r2, r2
 80076ce:	809a      	strh	r2, [r3, #4]

  return 1;
 80076d0:	2301      	movs	r3, #1
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <mrbc_string_chomp>:

  @param  src	pointer to target value
  @return	0 when not removed.
*/
int mrbc_string_chomp(mrbc_value *src)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  char *p1 = mrbc_string_cstr(src);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff fd15 	bl	8007112 <mrbc_string_cstr>
 80076e8:	6138      	str	r0, [r7, #16]
  char *p2 = p1 + mrbc_string_size(src) - 1;
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff fd04 	bl	80070f8 <mrbc_string_size>
 80076f0:	4603      	mov	r3, r0
 80076f2:	3b01      	subs	r3, #1
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4413      	add	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]

  if( *p2 == '\n' ) {
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b0a      	cmp	r3, #10
 8007700:	d102      	bne.n	8007708 <mrbc_string_chomp+0x2e>
    p2--;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	3b01      	subs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
  }
  if( *p2 == '\r' ) {
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b0d      	cmp	r3, #13
 800770e:	d102      	bne.n	8007716 <mrbc_string_chomp+0x3c>
    p2--;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	3b01      	subs	r3, #1
 8007714:	617b      	str	r3, [r7, #20]
  }

  int new_size = p2 - p1 + 1;
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	3301      	adds	r3, #1
 800771e:	60fb      	str	r3, [r7, #12]
  if( mrbc_string_size(src) == new_size ) return 0;
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff fce9 	bl	80070f8 <mrbc_string_size>
 8007726:	4602      	mov	r2, r0
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4293      	cmp	r3, r2
 800772c:	d101      	bne.n	8007732 <mrbc_string_chomp+0x58>
 800772e:	2300      	movs	r3, #0
 8007730:	e00e      	b.n	8007750 <mrbc_string_chomp+0x76>

  char *buf = mrbc_string_cstr(src);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff fced 	bl	8007112 <mrbc_string_cstr>
 8007738:	60b8      	str	r0, [r7, #8]
  buf[new_size] = '\0';
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	4413      	add	r3, r2
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
  src->string->size = new_size;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	b292      	uxth	r2, r2
 800774c:	809a      	strh	r2, [r3, #4]

  return 1;
 800774e:	2301      	movs	r3, #1
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <mrbc_string_upcase>:

  @param    str     pointer to target value
  @return   count   number of upcased characters
*/
static int mrbc_string_upcase(mrbc_value *str)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  int len = str->string->size;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	889b      	ldrh	r3, [r3, #4]
 8007766:	617b      	str	r3, [r7, #20]
  int count = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
  uint8_t *data = str->string->data;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	60fb      	str	r3, [r7, #12]
  while (len != 0) {
 8007774:	e01b      	b.n	80077ae <mrbc_string_upcase+0x56>
    len--;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	3b01      	subs	r3, #1
 800777a:	617b      	str	r3, [r7, #20]
    if ('a' <= data[len] && data[len] <= 'z') {
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b60      	cmp	r3, #96	; 0x60
 8007786:	d912      	bls.n	80077ae <mrbc_string_upcase+0x56>
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4413      	add	r3, r2
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b7a      	cmp	r3, #122	; 0x7a
 8007792:	d80c      	bhi.n	80077ae <mrbc_string_upcase+0x56>
      data[len] = data[len] - ('a' - 'A');
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4413      	add	r3, r2
 800779a:	781a      	ldrb	r2, [r3, #0]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	440b      	add	r3, r1
 80077a2:	3a20      	subs	r2, #32
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	701a      	strb	r2, [r3, #0]
      count++;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	3301      	adds	r3, #1
 80077ac:	613b      	str	r3, [r7, #16]
  while (len != 0) {
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e0      	bne.n	8007776 <mrbc_string_upcase+0x1e>
    }
  }
  return count;
 80077b4:	693b      	ldr	r3, [r7, #16]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <mrbc_string_downcase>:

  @param    str     pointer to target value
  @return   count   number of downcased characters
*/
static int mrbc_string_downcase(mrbc_value *str)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b087      	sub	sp, #28
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  int len = str->string->size;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	889b      	ldrh	r3, [r3, #4]
 80077d0:	617b      	str	r3, [r7, #20]
  int count = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
  uint8_t *data = str->string->data;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	60fb      	str	r3, [r7, #12]
  while (len != 0) {
 80077de:	e01b      	b.n	8007818 <mrbc_string_downcase+0x56>
    len--;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	617b      	str	r3, [r7, #20]
    if ('A' <= data[len] && data[len] <= 'Z') {
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b40      	cmp	r3, #64	; 0x40
 80077f0:	d912      	bls.n	8007818 <mrbc_string_downcase+0x56>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b5a      	cmp	r3, #90	; 0x5a
 80077fc:	d80c      	bhi.n	8007818 <mrbc_string_downcase+0x56>
      data[len] = data[len] + ('a' - 'A');
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	781a      	ldrb	r2, [r3, #0]
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	440b      	add	r3, r1
 800780c:	3220      	adds	r2, #32
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]
      count++;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	3301      	adds	r3, #1
 8007816:	613b      	str	r3, [r7, #16]
  while (len != 0) {
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e0      	bne.n	80077e0 <mrbc_string_downcase+0x1e>
    }
  }
  return count;
 800781e:	693b      	ldr	r3, [r7, #16]
}
 8007820:	4618      	mov	r0, r3
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <c_string_new>:

//================================================================
/*! (method) new
*/
static void c_string_new(struct VM *vm, mrbc_value v[], int argc)
{
 800782c:	b590      	push	{r4, r7, lr}
 800782e:	b091      	sub	sp, #68	; 0x44
 8007830:	af00      	add	r7, sp, #0
 8007832:	61f8      	str	r0, [r7, #28]
 8007834:	61b9      	str	r1, [r7, #24]
 8007836:	617a      	str	r2, [r7, #20]
  if (argc == 1 && mrbc_type(v[1]) != MRBC_TT_STRING) {
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d10b      	bne.n	8007856 <c_string_new+0x2a>
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	3310      	adds	r3, #16
 8007842:	f993 3000 	ldrsb.w	r3, [r3]
 8007846:	2b0b      	cmp	r3, #11
 8007848:	d005      	beq.n	8007856 <c_string_new+0x2a>
    mrbc_raise( vm, MRBC_CLASS(TypeError), "no implicit conversion into String");
 800784a:	4a1e      	ldr	r2, [pc, #120]	; (80078c4 <c_string_new+0x98>)
 800784c:	491e      	ldr	r1, [pc, #120]	; (80078c8 <c_string_new+0x9c>)
 800784e:	69f8      	ldr	r0, [r7, #28]
 8007850:	f003 fdea 	bl	800b428 <mrbc_raise>
    return;
 8007854:	e032      	b.n	80078bc <c_string_new+0x90>
  }
  if (argc > 1) {
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b01      	cmp	r3, #1
 800785a:	dd05      	ble.n	8007868 <c_string_new+0x3c>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "wrong number of arguments (expected 0..1)");
 800785c:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <c_string_new+0xa0>)
 800785e:	491c      	ldr	r1, [pc, #112]	; (80078d0 <c_string_new+0xa4>)
 8007860:	69f8      	ldr	r0, [r7, #28]
 8007862:	f003 fde1 	bl	800b428 <mrbc_raise>
    return;
 8007866:	e029      	b.n	80078bc <c_string_new+0x90>
  }

  mrbc_value value;
  if (argc == 0) {
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d107      	bne.n	800787e <c_string_new+0x52>
    value = mrbc_string_new(vm, NULL, 0);
 800786e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8007872:	2300      	movs	r3, #0
 8007874:	2200      	movs	r2, #0
 8007876:	69f9      	ldr	r1, [r7, #28]
 8007878:	f7ff fc98 	bl	80071ac <mrbc_string_new>
 800787c:	e00d      	b.n	800789a <c_string_new+0x6e>
  } else {
    value = mrbc_string_dup(vm, &v[1]);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	f103 0210 	add.w	r2, r3, #16
 8007884:	463b      	mov	r3, r7
 8007886:	69f9      	ldr	r1, [r7, #28]
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff fd58 	bl	800733e <mrbc_string_dup>
 800788e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007892:	463b      	mov	r3, r7
 8007894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
  SET_RETURN(value);
 800789a:	f107 0420 	add.w	r4, r7, #32
 800789e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80078a8:	69b8      	ldr	r0, [r7, #24]
 80078aa:	f7ff fbc7 	bl	800703c <mrbc_decref>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	461c      	mov	r4, r3
 80078b2:	f107 0320 	add.w	r3, r7, #32
 80078b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80078bc:	3744      	adds	r7, #68	; 0x44
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd90      	pop	{r4, r7, pc}
 80078c2:	bf00      	nop
 80078c4:	0801902c 	.word	0x0801902c
 80078c8:	200001b4 	.word	0x200001b4
 80078cc:	08019050 	.word	0x08019050
 80078d0:	20000154 	.word	0x20000154

080078d4 <c_string_add>:

//================================================================
/*! (method) +
*/
static void c_string_add(struct VM *vm, mrbc_value v[], int argc)
{
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b08d      	sub	sp, #52	; 0x34
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_STRING ) {
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	3310      	adds	r3, #16
 80078e4:	f993 3000 	ldrsb.w	r3, [r3]
 80078e8:	2b0b      	cmp	r3, #11
 80078ea:	d005      	beq.n	80078f8 <c_string_add+0x24>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80078ec:	2200      	movs	r2, #0
 80078ee:	4910      	ldr	r1, [pc, #64]	; (8007930 <c_string_add+0x5c>)
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f003 fd99 	bl	800b428 <mrbc_raise>
 80078f6:	e018      	b.n	800792a <c_string_add+0x56>
    return;
  }

  mrbc_value value = mrbc_string_add(vm, &v[0], &v[1]);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	3310      	adds	r3, #16
 80078fc:	f107 0020 	add.w	r0, r7, #32
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	f7ff fd4c 	bl	80073a0 <mrbc_string_add>
  SET_RETURN(value);
 8007908:	f107 0410 	add.w	r4, r7, #16
 800790c:	f107 0320 	add.w	r3, r7, #32
 8007910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007916:	68b8      	ldr	r0, [r7, #8]
 8007918:	f7ff fb90 	bl	800703c <mrbc_decref>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	461c      	mov	r4, r3
 8007920:	f107 0310 	add.w	r3, r7, #16
 8007924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007926:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800792a:	3734      	adds	r7, #52	; 0x34
 800792c:	46bd      	mov	sp, r7
 800792e:	bd90      	pop	{r4, r7, pc}
 8007930:	20000154 	.word	0x20000154

08007934 <c_string_mul>:

//================================================================
/*! (method) *
*/
static void c_string_mul(struct VM *vm, mrbc_value v[], int argc)
{
 8007934:	b590      	push	{r4, r7, lr}
 8007936:	b08f      	sub	sp, #60	; 0x3c
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_INTEGER ) {
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3310      	adds	r3, #16
 8007944:	f993 3000 	ldrsb.w	r3, [r3]
 8007948:	2b04      	cmp	r3, #4
 800794a:	d005      	beq.n	8007958 <c_string_mul+0x24>
    mrbc_raise( vm, MRBC_CLASS(TypeError), "no implicit conversion into String");
 800794c:	4a2f      	ldr	r2, [pc, #188]	; (8007a0c <c_string_mul+0xd8>)
 800794e:	4930      	ldr	r1, [pc, #192]	; (8007a10 <c_string_mul+0xdc>)
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f003 fd69 	bl	800b428 <mrbc_raise>
    return;
 8007956:	e056      	b.n	8007a06 <c_string_mul+0xd2>
  }

  if( v[1].i < 0 ) {
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3310      	adds	r3, #16
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	da05      	bge.n	800796e <c_string_mul+0x3a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "negative argument");
 8007962:	4a2c      	ldr	r2, [pc, #176]	; (8007a14 <c_string_mul+0xe0>)
 8007964:	492c      	ldr	r1, [pc, #176]	; (8007a18 <c_string_mul+0xe4>)
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f003 fd5e 	bl	800b428 <mrbc_raise>
    return;
 800796c:	e04b      	b.n	8007a06 <c_string_mul+0xd2>
  }

  mrbc_value value = mrbc_string_new(vm, NULL,
			mrbc_string_size(&v[0]) * mrbc_integer(v[1]));
 800796e:	68b8      	ldr	r0, [r7, #8]
 8007970:	f7ff fbc2 	bl	80070f8 <mrbc_string_size>
 8007974:	4602      	mov	r2, r0
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3310      	adds	r3, #16
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	fb02 f303 	mul.w	r3, r2, r3
  mrbc_value value = mrbc_string_new(vm, NULL,
 8007980:	f107 0020 	add.w	r0, r7, #32
 8007984:	2200      	movs	r2, #0
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	f7ff fc10 	bl	80071ac <mrbc_string_new>
  if( value.string == NULL ) return;		// ENOMEM
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	2b00      	cmp	r3, #0
 8007990:	d038      	beq.n	8007a04 <c_string_mul+0xd0>

  uint8_t *p = value.string->data;
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	637b      	str	r3, [r7, #52]	; 0x34
  int i;
  for( i = 0; i < v[1].i; i++ ) {
 8007998:	2300      	movs	r3, #0
 800799a:	633b      	str	r3, [r7, #48]	; 0x30
 800799c:	e017      	b.n	80079ce <c_string_mul+0x9a>
    memcpy( p, mrbc_string_cstr(&v[0]), mrbc_string_size(&v[0]) );
 800799e:	68b8      	ldr	r0, [r7, #8]
 80079a0:	f7ff fbb7 	bl	8007112 <mrbc_string_cstr>
 80079a4:	4604      	mov	r4, r0
 80079a6:	68b8      	ldr	r0, [r7, #8]
 80079a8:	f7ff fba6 	bl	80070f8 <mrbc_string_size>
 80079ac:	4603      	mov	r3, r0
 80079ae:	461a      	mov	r2, r3
 80079b0:	4621      	mov	r1, r4
 80079b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80079b4:	f00e ff1f 	bl	80167f6 <memcpy>
    p += mrbc_string_size(&v[0]);
 80079b8:	68b8      	ldr	r0, [r7, #8]
 80079ba:	f7ff fb9d 	bl	80070f8 <mrbc_string_size>
 80079be:	4603      	mov	r3, r0
 80079c0:	461a      	mov	r2, r3
 80079c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c4:	4413      	add	r3, r2
 80079c6:	637b      	str	r3, [r7, #52]	; 0x34
  for( i = 0; i < v[1].i; i++ ) {
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	3301      	adds	r3, #1
 80079cc:	633b      	str	r3, [r7, #48]	; 0x30
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	3310      	adds	r3, #16
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d6:	429a      	cmp	r2, r3
 80079d8:	dbe1      	blt.n	800799e <c_string_mul+0x6a>
  }
  *p = 0;
 80079da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]

  SET_RETURN(value);
 80079e0:	f107 0410 	add.w	r4, r7, #16
 80079e4:	f107 0320 	add.w	r3, r7, #32
 80079e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80079ee:	68b8      	ldr	r0, [r7, #8]
 80079f0:	f7ff fb24 	bl	800703c <mrbc_decref>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	461c      	mov	r4, r3
 80079f8:	f107 0310 	add.w	r3, r7, #16
 80079fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007a02:	e000      	b.n	8007a06 <c_string_mul+0xd2>
  if( value.string == NULL ) return;		// ENOMEM
 8007a04:	bf00      	nop
}
 8007a06:	373c      	adds	r7, #60	; 0x3c
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd90      	pop	{r4, r7, pc}
 8007a0c:	0801902c 	.word	0x0801902c
 8007a10:	200001b4 	.word	0x200001b4
 8007a14:	0801907c 	.word	0x0801907c
 8007a18:	20000154 	.word	0x20000154

08007a1c <c_string_size>:

//================================================================
/*! (method) size, length
*/
static void c_string_size(struct VM *vm, mrbc_value v[], int argc)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
  mrbc_int_t size = mrbc_string_size(&v[0]);
 8007a28:	68b8      	ldr	r0, [r7, #8]
 8007a2a:	f7ff fb65 	bl	80070f8 <mrbc_string_size>
 8007a2e:	6178      	str	r0, [r7, #20]

  SET_INT_RETURN( size );
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	68b8      	ldr	r0, [r7, #8]
 8007a36:	f7ff fb01 	bl	800703c <mrbc_decref>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	609a      	str	r2, [r3, #8]
}
 8007a46:	bf00      	nop
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <c_string_to_i>:

//================================================================
/*! (method) to_i
*/
static void c_string_to_i(struct VM *vm, mrbc_value v[], int argc)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  int base = 10;
 8007a5c:	230a      	movs	r3, #10
 8007a5e:	61fb      	str	r3, [r7, #28]
  if( argc ) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00f      	beq.n	8007a86 <c_string_to_i+0x36>
    base = v[1].i;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	3310      	adds	r3, #16
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	61fb      	str	r3, [r7, #28]
    if( base < 2 || base > 36 ) {
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	dd02      	ble.n	8007a7a <c_string_to_i+0x2a>
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	2b24      	cmp	r3, #36	; 0x24
 8007a78:	dd05      	ble.n	8007a86 <c_string_to_i+0x36>
      mrbc_raise( vm, MRBC_CLASS(ArgumentError), "invalid radix");
 8007a7a:	4a0e      	ldr	r2, [pc, #56]	; (8007ab4 <c_string_to_i+0x64>)
 8007a7c:	490e      	ldr	r1, [pc, #56]	; (8007ab8 <c_string_to_i+0x68>)
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f003 fcd2 	bl	800b428 <mrbc_raise>
      return;
 8007a84:	e013      	b.n	8007aae <c_string_to_i+0x5e>
    }
  }

  mrbc_int_t i = mrbc_atoi( mrbc_string_cstr(v), base );
 8007a86:	68b8      	ldr	r0, [r7, #8]
 8007a88:	f7ff fb43 	bl	8007112 <mrbc_string_cstr>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	69f9      	ldr	r1, [r7, #28]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f006 fc69 	bl	800e368 <mrbc_atoi>
 8007a96:	61b8      	str	r0, [r7, #24]

  SET_INT_RETURN( i );
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	68b8      	ldr	r0, [r7, #8]
 8007a9e:	f7ff facd 	bl	800703c <mrbc_decref>
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2204      	movs	r2, #4
 8007aa6:	701a      	strb	r2, [r3, #0]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	609a      	str	r2, [r3, #8]
}
 8007aae:	3720      	adds	r7, #32
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	08019090 	.word	0x08019090
 8007ab8:	20000154 	.word	0x20000154

08007abc <c_string_to_f>:
#if MRBC_USE_FLOAT
//================================================================
/*! (method) to_f
*/
static void c_string_to_f(struct VM *vm, mrbc_value v[], int argc)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  mrbc_float_t d = atof(mrbc_string_cstr(v));
 8007ac8:	68b8      	ldr	r0, [r7, #8]
 8007aca:	f7ff fb22 	bl	8007112 <mrbc_string_cstr>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f00d fdd5 	bl	8015680 <atof>
 8007ad6:	ed87 0b06 	vstr	d0, [r7, #24]

  SET_FLOAT_RETURN( d );
 8007ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ade:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007ae2:	68b8      	ldr	r0, [r7, #8]
 8007ae4:	f7ff faaa 	bl	800703c <mrbc_decref>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2205      	movs	r2, #5
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007af4:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8007af8:	bf00      	nop
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <c_string_to_s>:

//================================================================
/*! (method) to_s
*/
static void c_string_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b089      	sub	sp, #36	; 0x24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	61f8      	str	r0, [r7, #28]
 8007b08:	61b9      	str	r1, [r7, #24]
 8007b0a:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8007b12:	2b07      	cmp	r3, #7
 8007b14:	d112      	bne.n	8007b3c <c_string_to_s+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f006 f88e 	bl	800dc40 <mrbc_symid_to_str>
 8007b24:	4602      	mov	r2, r0
 8007b26:	69bc      	ldr	r4, [r7, #24]
 8007b28:	463b      	mov	r3, r7
 8007b2a:	69f9      	ldr	r1, [r7, #28]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff facb 	bl	80070c8 <mrbc_string_new_cstr>
 8007b32:	463b      	mov	r3, r7
 8007b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8007b3a:	bf00      	nop
  }
}
 8007b3c:	3724      	adds	r7, #36	; 0x24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd90      	pop	{r4, r7, pc}

08007b42 <c_string_append>:

//================================================================
/*! (method) <<
*/
static void c_string_append(struct VM *vm, mrbc_value v[], int argc)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
  if( !mrbc_string_append( &v[0], &v[1] ) ) {
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	3310      	adds	r3, #16
 8007b52:	4619      	mov	r1, r3
 8007b54:	68b8      	ldr	r0, [r7, #8]
 8007b56:	f7ff fc68 	bl	800742a <mrbc_string_append>
    // raise ? ENOMEM
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <c_string_slice>:

//================================================================
/*! (method) []
*/
static void c_string_slice(struct VM *vm, mrbc_value v[], int argc)
{
 8007b64:	b590      	push	{r4, r7, lr}
 8007b66:	b091      	sub	sp, #68	; 0x44
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  int target_len = mrbc_string_size(v);
 8007b70:	68b8      	ldr	r0, [r7, #8]
 8007b72:	f7ff fac1 	bl	80070f8 <mrbc_string_size>
 8007b76:	6378      	str	r0, [r7, #52]	; 0x34
  int pos = mrbc_integer(v[1]);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	3310      	adds	r3, #16
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  int len;

  // in case of slice!(nth) -> String | nil
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d108      	bne.n	8007b98 <c_string_slice+0x34>
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	3310      	adds	r3, #16
 8007b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d102      	bne.n	8007b98 <c_string_slice+0x34>
    len = 1;
 8007b92:	2301      	movs	r3, #1
 8007b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b96:	e019      	b.n	8007bcc <c_string_slice+0x68>

  // in case of slice!(nth, len) -> String | nil
  } else if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d110      	bne.n	8007bc0 <c_string_slice+0x5c>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3310      	adds	r3, #16
 8007ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d10a      	bne.n	8007bc0 <c_string_slice+0x5c>
	                  mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	3320      	adds	r3, #32
 8007bae:	f993 3000 	ldrsb.w	r3, [r3]
  } else if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d104      	bne.n	8007bc0 <c_string_slice+0x5c>
    len = mrbc_integer(v[2]);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	3320      	adds	r3, #32
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bbe:	e005      	b.n	8007bcc <c_string_slice+0x68>

  // other case
  } else {
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	4929      	ldr	r1, [pc, #164]	; (8007c68 <c_string_slice+0x104>)
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f003 fc2f 	bl	800b428 <mrbc_raise>
    return;
 8007bca:	e04a      	b.n	8007c62 <c_string_slice+0xfe>
  }

  if( pos < 0 ) pos += target_len;
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da03      	bge.n	8007bda <c_string_slice+0x76>
 8007bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd6:	4413      	add	r3, r2
 8007bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if( pos < 0 ) goto RETURN_NIL;
 8007bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	db33      	blt.n	8007c48 <c_string_slice+0xe4>
  if( len > (target_len - pos) ) len = target_len - pos;
 8007be0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007be8:	429a      	cmp	r2, r3
 8007bea:	dd03      	ble.n	8007bf4 <c_string_slice+0x90>
 8007bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  if( len < 0 ) goto RETURN_NIL;
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	db28      	blt.n	8007c4c <c_string_slice+0xe8>
  if( argc == 1 && len <= 0 ) goto RETURN_NIL;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d102      	bne.n	8007c06 <c_string_slice+0xa2>
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	dd24      	ble.n	8007c50 <c_string_slice+0xec>

  mrbc_value ret = mrbc_string_new(vm, mrbc_string_cstr(v) + pos, len);
 8007c06:	68b8      	ldr	r0, [r7, #8]
 8007c08:	f7ff fa83 	bl	8007112 <mrbc_string_cstr>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c10:	441a      	add	r2, r3
 8007c12:	f107 0020 	add.w	r0, r7, #32
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	68f9      	ldr	r1, [r7, #12]
 8007c1a:	f7ff fac7 	bl	80071ac <mrbc_string_new>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d017      	beq.n	8007c54 <c_string_slice+0xf0>

  SET_RETURN(ret);
 8007c24:	f107 0410 	add.w	r4, r7, #16
 8007c28:	f107 0320 	add.w	r3, r7, #32
 8007c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007c32:	68b8      	ldr	r0, [r7, #8]
 8007c34:	f7ff fa02 	bl	800703c <mrbc_decref>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	461c      	mov	r4, r3
 8007c3c:	f107 0310 	add.w	r3, r7, #16
 8007c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;		// normal return
 8007c46:	e00c      	b.n	8007c62 <c_string_slice+0xfe>
  if( pos < 0 ) goto RETURN_NIL;
 8007c48:	bf00      	nop
 8007c4a:	e004      	b.n	8007c56 <c_string_slice+0xf2>
  if( len < 0 ) goto RETURN_NIL;
 8007c4c:	bf00      	nop
 8007c4e:	e002      	b.n	8007c56 <c_string_slice+0xf2>
  if( argc == 1 && len <= 0 ) goto RETURN_NIL;
 8007c50:	bf00      	nop
 8007c52:	e000      	b.n	8007c56 <c_string_slice+0xf2>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8007c54:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 8007c56:	68b8      	ldr	r0, [r7, #8]
 8007c58:	f7ff f9f0 	bl	800703c <mrbc_decref>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	701a      	strb	r2, [r3, #0]
}
 8007c62:	3744      	adds	r7, #68	; 0x44
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd90      	pop	{r4, r7, pc}
 8007c68:	20000154 	.word	0x20000154

08007c6c <c_string_insert>:

//================================================================
/*! (method) []=
*/
static void c_string_insert(struct VM *vm, mrbc_value v[], int argc)
{
 8007c6c:	b590      	push	{r4, r7, lr}
 8007c6e:	b08d      	sub	sp, #52	; 0x34
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  const mrbc_value *val;

  /*
    in case of self[nth] = val
  */
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d115      	bne.n	8007caa <c_string_insert+0x3e>
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3310      	adds	r3, #16
 8007c82:	f993 3000 	ldrsb.w	r3, [r3]
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d10f      	bne.n	8007caa <c_string_insert+0x3e>
                   mrbc_type(v[2]) == MRBC_TT_STRING ) {
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	3320      	adds	r3, #32
 8007c8e:	f993 3000 	ldrsb.w	r3, [r3]
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007c92:	2b0b      	cmp	r3, #11
 8007c94:	d109      	bne.n	8007caa <c_string_insert+0x3e>
    nth = v[1].i;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	3310      	adds	r3, #16
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    len = 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    val = &v[2];
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	3320      	adds	r3, #32
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca8:	e026      	b.n	8007cf8 <c_string_insert+0x8c>
  }
  /*
    in case of self[nth, len] = val
  */
  else if( argc == 3 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d11d      	bne.n	8007cec <c_string_insert+0x80>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d117      	bne.n	8007cec <c_string_insert+0x80>
	                mrbc_type(v[2]) == MRBC_TT_INTEGER &&
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	3320      	adds	r3, #32
 8007cc0:	f993 3000 	ldrsb.w	r3, [r3]
  else if( argc == 3 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d111      	bne.n	8007cec <c_string_insert+0x80>
	                mrbc_type(v[3]) == MRBC_TT_STRING ) {
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	3330      	adds	r3, #48	; 0x30
 8007ccc:	f993 3000 	ldrsb.w	r3, [r3]
	                mrbc_type(v[2]) == MRBC_TT_INTEGER &&
 8007cd0:	2b0b      	cmp	r3, #11
 8007cd2:	d10b      	bne.n	8007cec <c_string_insert+0x80>
    nth = v[1].i;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	3310      	adds	r3, #16
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    len = v[2].i;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	3320      	adds	r3, #32
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    val = &v[3];
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3330      	adds	r3, #48	; 0x30
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cea:	e005      	b.n	8007cf8 <c_string_insert+0x8c>
  }
  /*
    other cases
  */
  else {
    mrbc_raise( vm, MRBC_CLASS(TypeError), "Not supported." );
 8007cec:	4a43      	ldr	r2, [pc, #268]	; (8007dfc <c_string_insert+0x190>)
 8007cee:	4944      	ldr	r1, [pc, #272]	; (8007e00 <c_string_insert+0x194>)
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f003 fb99 	bl	800b428 <mrbc_raise>
    return;
 8007cf6:	e07e      	b.n	8007df6 <c_string_insert+0x18a>
  }

  int len1 = v->string->size;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	889b      	ldrh	r3, [r3, #4]
 8007cfe:	61fb      	str	r3, [r7, #28]
  int len2 = val->string->size;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	889b      	ldrh	r3, [r3, #4]
 8007d06:	61bb      	str	r3, [r7, #24]
  if( nth < 0 ) nth = len1 + nth;		// adjust to positive number.
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	da03      	bge.n	8007d16 <c_string_insert+0xaa>
 8007d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if( len > len1 - nth ) len = len1 - nth;
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	dd03      	ble.n	8007d2a <c_string_insert+0xbe>
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
  if( nth < 0 || nth > len1 || len < 0) {
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	db06      	blt.n	8007d3e <c_string_insert+0xd2>
 8007d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	dc02      	bgt.n	8007d3e <c_string_insert+0xd2>
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	da06      	bge.n	8007d4c <c_string_insert+0xe0>
    mrbc_raisef( vm, MRBC_CLASS(IndexError), "index %d out of string", nth );
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	4a30      	ldr	r2, [pc, #192]	; (8007e04 <c_string_insert+0x198>)
 8007d42:	4931      	ldr	r1, [pc, #196]	; (8007e08 <c_string_insert+0x19c>)
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f003 fbc3 	bl	800b4d0 <mrbc_raisef>
    return;
 8007d4a:	e054      	b.n	8007df6 <c_string_insert+0x18a>
  }

  int len3 = len1 + len2 - len;			// final length.
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	441a      	add	r2, r3
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	617b      	str	r3, [r7, #20]
  uint8_t *str = v->string->data;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	623b      	str	r3, [r7, #32]
  if( len1 < len3 ) {
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	da09      	bge.n	8007d7c <c_string_insert+0x110>
    str = mrbc_realloc(vm, str, len3+1);	// expand
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6a38      	ldr	r0, [r7, #32]
 8007d70:	f7fa f922 	bl	8001fb8 <mrbc_raw_realloc>
 8007d74:	6238      	str	r0, [r7, #32]
    if( !str ) return;
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d03b      	beq.n	8007df4 <c_string_insert+0x188>
  }

  memmove( str + nth + len2, str + nth + len, len1 - nth - len + 1 );
 8007d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	4413      	add	r3, r2
 8007d82:	6a3a      	ldr	r2, [r7, #32]
 8007d84:	18d0      	adds	r0, r2, r3
 8007d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	4413      	add	r3, r2
 8007d8c:	6a3a      	ldr	r2, [r7, #32]
 8007d8e:	18d1      	adds	r1, r2, r3
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	1ad2      	subs	r2, r2, r3
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f00e fc76 	bl	801668e <memmove>
  memcpy( str + nth, mrbc_string_cstr(val), len2 );
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	6a3a      	ldr	r2, [r7, #32]
 8007da6:	18d4      	adds	r4, r2, r3
 8007da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007daa:	f7ff f9b2 	bl	8007112 <mrbc_string_cstr>
 8007dae:	4601      	mov	r1, r0
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	461a      	mov	r2, r3
 8007db4:	4620      	mov	r0, r4
 8007db6:	f00e fd1e 	bl	80167f6 <memcpy>

  if( len1 > len3 ) {
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	dd06      	ble.n	8007dd0 <c_string_insert+0x164>
    str = mrbc_realloc(vm, str, len3+1);	// shrink
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6a38      	ldr	r0, [r7, #32]
 8007dca:	f7fa f8f5 	bl	8001fb8 <mrbc_raw_realloc>
 8007dce:	6238      	str	r0, [r7, #32]
  }

  v->string->size = len1 + len2 - len;
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4413      	add	r3, r2
 8007dda:	b299      	uxth	r1, r3
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	1a8a      	subs	r2, r1, r2
 8007de6:	b292      	uxth	r2, r2
 8007de8:	809a      	strh	r2, [r3, #4]
  v->string->data = str;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	6a3a      	ldr	r2, [r7, #32]
 8007df0:	609a      	str	r2, [r3, #8]
 8007df2:	e000      	b.n	8007df6 <c_string_insert+0x18a>
    if( !str ) return;
 8007df4:	bf00      	nop
}
 8007df6:	3734      	adds	r7, #52	; 0x34
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd90      	pop	{r4, r7, pc}
 8007dfc:	080190a0 	.word	0x080190a0
 8007e00:	200001b4 	.word	0x200001b4
 8007e04:	080190b0 	.word	0x080190b0
 8007e08:	20000164 	.word	0x20000164

08007e0c <c_string_chomp>:

//================================================================
/*! (method) chomp
*/
static void c_string_chomp(struct VM *vm, mrbc_value v[], int argc)
{
 8007e0c:	b590      	push	{r4, r7, lr}
 8007e0e:	b08d      	sub	sp, #52	; 0x34
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8007e18:	f107 0320 	add.w	r3, r7, #32
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	68f9      	ldr	r1, [r7, #12]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff fa8c 	bl	800733e <mrbc_string_dup>

  mrbc_string_chomp(&ret);
 8007e26:	f107 0320 	add.w	r3, r7, #32
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff fc55 	bl	80076da <mrbc_string_chomp>

  SET_RETURN(ret);
 8007e30:	f107 0410 	add.w	r4, r7, #16
 8007e34:	f107 0320 	add.w	r3, r7, #32
 8007e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e3e:	68b8      	ldr	r0, [r7, #8]
 8007e40:	f7ff f8fc 	bl	800703c <mrbc_decref>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	461c      	mov	r4, r3
 8007e48:	f107 0310 	add.w	r3, r7, #16
 8007e4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007e52:	bf00      	nop
 8007e54:	3734      	adds	r7, #52	; 0x34
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd90      	pop	{r4, r7, pc}

08007e5a <c_string_clear>:

//================================================================
/*! (method) clear
*/
static void c_string_clear(struct VM *vm, mrbc_value v[], int argc)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	607a      	str	r2, [r7, #4]
  mrbc_string_clear(&v[0]);
 8007e66:	68b8      	ldr	r0, [r7, #8]
 8007e68:	f7ff fa51 	bl	800730e <mrbc_string_clear>
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <c_string_chomp_self>:

//================================================================
/*! (method) chomp!
*/
static void c_string_chomp_self(struct VM *vm, mrbc_value v[], int argc)
{
 8007e74:	b590      	push	{r4, r7, lr}
 8007e76:	b08d      	sub	sp, #52	; 0x34
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  if( mrbc_string_chomp(&v[0]) == 0 ) {
 8007e80:	68b8      	ldr	r0, [r7, #8]
 8007e82:	f7ff fc2a 	bl	80076da <mrbc_string_chomp>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d113      	bne.n	8007eb4 <c_string_chomp_self+0x40>
    SET_RETURN( mrbc_nil_value() );
 8007e8c:	f107 0320 	add.w	r3, r7, #32
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	605a      	str	r2, [r3, #4]
 8007e96:	609a      	str	r2, [r3, #8]
 8007e98:	60da      	str	r2, [r3, #12]
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 3020 	strb.w	r3, [r7, #32]
 8007ea0:	68b8      	ldr	r0, [r7, #8]
 8007ea2:	f7ff f8cb 	bl	800703c <mrbc_decref>
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	461c      	mov	r4, r3
 8007eaa:	f107 0320 	add.w	r3, r7, #32
 8007eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
}
 8007eb4:	bf00      	nop
 8007eb6:	3734      	adds	r7, #52	; 0x34
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd90      	pop	{r4, r7, pc}

08007ebc <c_string_dup>:

//================================================================
/*! (method) dup
*/
static void c_string_dup(struct VM *vm, mrbc_value v[], int argc)
{
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b08d      	sub	sp, #52	; 0x34
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8007ec8:	f107 0320 	add.w	r3, r7, #32
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	68f9      	ldr	r1, [r7, #12]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7ff fa34 	bl	800733e <mrbc_string_dup>

  SET_RETURN(ret);
 8007ed6:	f107 0410 	add.w	r4, r7, #16
 8007eda:	f107 0320 	add.w	r3, r7, #32
 8007ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007ee4:	68b8      	ldr	r0, [r7, #8]
 8007ee6:	f7ff f8a9 	bl	800703c <mrbc_decref>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	461c      	mov	r4, r3
 8007eee:	f107 0310 	add.w	r3, r7, #16
 8007ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007ef8:	bf00      	nop
 8007efa:	3734      	adds	r7, #52	; 0x34
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd90      	pop	{r4, r7, pc}

08007f00 <c_string_empty>:

//================================================================
/*! (method) empty?
*/
static void c_string_empty(struct VM *vm, mrbc_value v[], int argc)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  SET_BOOL_RETURN( !mrbc_string_size( &v[0] ));
 8007f0c:	68b8      	ldr	r0, [r7, #8]
 8007f0e:	f7ff f8f3 	bl	80070f8 <mrbc_string_size>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <c_string_empty+0x1c>
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e000      	b.n	8007f1e <c_string_empty+0x1e>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	68b8      	ldr	r0, [r7, #8]
 8007f22:	f7ff f88b 	bl	800703c <mrbc_decref>
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	b25a      	sxtb	r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	701a      	strb	r2, [r3, #0]
}
 8007f2e:	bf00      	nop
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <c_string_getbyte>:

//================================================================
/*! (method) getbyte
*/
static void c_string_getbyte(struct VM *vm, mrbc_value v[], int argc)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b088      	sub	sp, #32
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	607a      	str	r2, [r7, #4]
  int len = mrbc_string_size(&v[0]);
 8007f42:	68b8      	ldr	r0, [r7, #8]
 8007f44:	f7ff f8d8 	bl	80070f8 <mrbc_string_size>
 8007f48:	61b8      	str	r0, [r7, #24]
  mrbc_int_t idx = mrbc_integer(v[1]);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	3310      	adds	r3, #16
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	61fb      	str	r3, [r7, #28]

  if( idx >= 0 ) {
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	db07      	blt.n	8007f68 <c_string_getbyte+0x32>
    if( idx >= len ) idx = -1;
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	db07      	blt.n	8007f70 <c_string_getbyte+0x3a>
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	e003      	b.n	8007f70 <c_string_getbyte+0x3a>
  } else {
    idx += len;
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	61fb      	str	r3, [r7, #28]
  }
  if( idx >= 0 ) {
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	db11      	blt.n	8007f9a <c_string_getbyte+0x64>
    SET_INT_RETURN( ((uint8_t *)mrbc_string_cstr(&v[0]))[idx] );
 8007f76:	68b8      	ldr	r0, [r7, #8]
 8007f78:	f7ff f8cb 	bl	8007112 <mrbc_string_cstr>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	4413      	add	r3, r2
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	68b8      	ldr	r0, [r7, #8]
 8007f88:	f7ff f858 	bl	800703c <mrbc_decref>
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2204      	movs	r2, #4
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	609a      	str	r2, [r3, #8]
  } else {
    SET_NIL_RETURN();
  }
}
 8007f98:	e005      	b.n	8007fa6 <c_string_getbyte+0x70>
    SET_NIL_RETURN();
 8007f9a:	68b8      	ldr	r0, [r7, #8]
 8007f9c:	f7ff f84e 	bl	800703c <mrbc_decref>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	701a      	strb	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3720      	adds	r7, #32
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <c_string_index>:

//================================================================
/*! (method) index
*/
static void c_string_index(struct VM *vm, mrbc_value v[], int argc)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  int index;
  int offset;

  if( argc == 1 ) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d102      	bne.n	8007fc8 <c_string_index+0x18>
    offset = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
 8007fc6:	e020      	b.n	800800a <c_string_index+0x5a>

  } else if( argc == 2 && mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d117      	bne.n	8007ffe <c_string_index+0x4e>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	3320      	adds	r3, #32
 8007fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d111      	bne.n	8007ffe <c_string_index+0x4e>
    offset = v[2].i;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	3320      	adds	r3, #32
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	61fb      	str	r3, [r7, #28]
    if( offset < 0 ) offset += mrbc_string_size(&v[0]);
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	da06      	bge.n	8007ff6 <c_string_index+0x46>
 8007fe8:	68b8      	ldr	r0, [r7, #8]
 8007fea:	f7ff f885 	bl	80070f8 <mrbc_string_size>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	61fb      	str	r3, [r7, #28]
    if( offset < 0 ) goto NIL_RETURN;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	da06      	bge.n	800800a <c_string_index+0x5a>
 8007ffc:	e01d      	b.n	800803a <c_string_index+0x8a>

  } else {
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8007ffe:	2200      	movs	r2, #0
 8008000:	4912      	ldr	r1, [pc, #72]	; (800804c <c_string_index+0x9c>)
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f003 fa10 	bl	800b428 <mrbc_raise>
    return;
 8008008:	e01d      	b.n	8008046 <c_string_index+0x96>
  }

  index = mrbc_string_index(&v[0], &v[1], offset);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	3310      	adds	r3, #16
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	4619      	mov	r1, r3
 8008012:	68b8      	ldr	r0, [r7, #8]
 8008014:	f7ff faab 	bl	800756e <mrbc_string_index>
 8008018:	61b8      	str	r0, [r7, #24]
  if( index < 0 ) goto NIL_RETURN;
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	db0b      	blt.n	8008038 <c_string_index+0x88>

  SET_INT_RETURN(index);
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	68b8      	ldr	r0, [r7, #8]
 8008026:	f7ff f809 	bl	800703c <mrbc_decref>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2204      	movs	r2, #4
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	609a      	str	r2, [r3, #8]
  return;
 8008036:	e006      	b.n	8008046 <c_string_index+0x96>
  if( index < 0 ) goto NIL_RETURN;
 8008038:	bf00      	nop

 NIL_RETURN:
  SET_NIL_RETURN();
 800803a:	68b8      	ldr	r0, [r7, #8]
 800803c:	f7fe fffe 	bl	800703c <mrbc_decref>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2201      	movs	r2, #1
 8008044:	701a      	strb	r2, [r3, #0]
}
 8008046:	3720      	adds	r7, #32
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20000154 	.word	0x20000154

08008050 <c_string_inspect>:

//================================================================
/*! (method) inspect
*/
static void c_string_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 8008050:	b590      	push	{r4, r7, lr}
 8008052:	b093      	sub	sp, #76	; 0x4c
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  char buf[10] = "\\x";
 800805c:	f647 035c 	movw	r3, #30812	; 0x785c
 8008060:	637b      	str	r3, [r7, #52]	; 0x34
 8008062:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	809a      	strh	r2, [r3, #4]
  mrbc_value ret = mrbc_string_new_cstr(vm, "\"");
 800806c:	f107 0320 	add.w	r3, r7, #32
 8008070:	4a34      	ldr	r2, [pc, #208]	; (8008144 <c_string_inspect+0xf4>)
 8008072:	68f9      	ldr	r1, [r7, #12]
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff f827 	bl	80070c8 <mrbc_string_new_cstr>
  const unsigned char *s = (const unsigned char *)mrbc_string_cstr(v);
 800807a:	68b8      	ldr	r0, [r7, #8]
 800807c:	f7ff f849 	bl	8007112 <mrbc_string_cstr>
 8008080:	6438      	str	r0, [r7, #64]	; 0x40
  int i;
  for( i = 0; i < mrbc_string_size(v); i++ ) {
 8008082:	2300      	movs	r3, #0
 8008084:	647b      	str	r3, [r7, #68]	; 0x44
 8008086:	e03b      	b.n	8008100 <c_string_inspect+0xb0>
    if( s[i] < ' ' || 0x7f <= s[i] ) {	// tiny isprint()
 8008088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800808a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800808c:	4413      	add	r3, r2
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b1f      	cmp	r3, #31
 8008092:	d905      	bls.n	80080a0 <c_string_inspect+0x50>
 8008094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008098:	4413      	add	r3, r2
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b7e      	cmp	r3, #126	; 0x7e
 800809e:	d91d      	bls.n	80080dc <c_string_inspect+0x8c>
      buf[2] = "0123456789ABCDEF"[s[i] >> 4];
 80080a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080a4:	4413      	add	r3, r2
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	091b      	lsrs	r3, r3, #4
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	4b26      	ldr	r3, [pc, #152]	; (8008148 <c_string_inspect+0xf8>)
 80080b0:	5c9b      	ldrb	r3, [r3, r2]
 80080b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      buf[3] = "0123456789ABCDEF"[s[i] & 0x0f];
 80080b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080ba:	4413      	add	r3, r2
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f003 030f 	and.w	r3, r3, #15
 80080c2:	4a21      	ldr	r2, [pc, #132]	; (8008148 <c_string_inspect+0xf8>)
 80080c4:	5cd3      	ldrb	r3, [r2, r3]
 80080c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      mrbc_string_append_cstr(&ret, buf);
 80080ca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80080ce:	f107 0320 	add.w	r3, r7, #32
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff f829 	bl	800712c <mrbc_string_append_cstr>
 80080da:	e00e      	b.n	80080fa <c_string_inspect+0xaa>
    } else {
      buf[3] = s[i];
 80080dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080e0:	4413      	add	r3, r2
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      mrbc_string_append_cstr(&ret, buf+3);
 80080e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80080ec:	3303      	adds	r3, #3
 80080ee:	f107 0220 	add.w	r2, r7, #32
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7ff f819 	bl	800712c <mrbc_string_append_cstr>
  for( i = 0; i < mrbc_string_size(v); i++ ) {
 80080fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080fc:	3301      	adds	r3, #1
 80080fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008100:	68b8      	ldr	r0, [r7, #8]
 8008102:	f7fe fff9 	bl	80070f8 <mrbc_string_size>
 8008106:	4602      	mov	r2, r0
 8008108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800810a:	4293      	cmp	r3, r2
 800810c:	dbbc      	blt.n	8008088 <c_string_inspect+0x38>
    }
  }
  mrbc_string_append_cstr(&ret, "\"");
 800810e:	f107 0320 	add.w	r3, r7, #32
 8008112:	490c      	ldr	r1, [pc, #48]	; (8008144 <c_string_inspect+0xf4>)
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff f809 	bl	800712c <mrbc_string_append_cstr>

  SET_RETURN( ret );
 800811a:	f107 0410 	add.w	r4, r7, #16
 800811e:	f107 0320 	add.w	r3, r7, #32
 8008122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008128:	68b8      	ldr	r0, [r7, #8]
 800812a:	f7fe ff87 	bl	800703c <mrbc_decref>
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	461c      	mov	r4, r3
 8008132:	f107 0310 	add.w	r3, r7, #16
 8008136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800813c:	bf00      	nop
 800813e:	374c      	adds	r7, #76	; 0x4c
 8008140:	46bd      	mov	sp, r7
 8008142:	bd90      	pop	{r4, r7, pc}
 8008144:	080190c8 	.word	0x080190c8
 8008148:	080190cc 	.word	0x080190cc

0800814c <c_string_ord>:

//================================================================
/*! (method) ord
*/
static void c_string_ord(struct VM *vm, mrbc_value v[], int argc)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  if( mrbc_string_size(v) == 0 ) {
 8008158:	68b8      	ldr	r0, [r7, #8]
 800815a:	f7fe ffcd 	bl	80070f8 <mrbc_string_size>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d105      	bne.n	8008170 <c_string_ord+0x24>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "empty string");
 8008164:	4a0c      	ldr	r2, [pc, #48]	; (8008198 <c_string_ord+0x4c>)
 8008166:	490d      	ldr	r1, [pc, #52]	; (800819c <c_string_ord+0x50>)
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f003 f95d 	bl	800b428 <mrbc_raise>
    return;
 800816e:	e010      	b.n	8008192 <c_string_ord+0x46>
  }

  int i = ((uint8_t *)mrbc_string_cstr(v))[0];
 8008170:	68b8      	ldr	r0, [r7, #8]
 8008172:	f7fe ffce 	bl	8007112 <mrbc_string_cstr>
 8008176:	4603      	mov	r3, r0
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	617b      	str	r3, [r7, #20]

  SET_INT_RETURN( i );
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	68b8      	ldr	r0, [r7, #8]
 8008182:	f7fe ff5b 	bl	800703c <mrbc_decref>
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2204      	movs	r2, #4
 800818a:	701a      	strb	r2, [r3, #0]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	609a      	str	r2, [r3, #8]
}
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	080190e0 	.word	0x080190e0
 800819c:	20000154 	.word	0x20000154

080081a0 <c_string_slice_self>:

//================================================================
/*! (method) slice!
*/
static void c_string_slice_self(struct VM *vm, mrbc_value v[], int argc)
{
 80081a0:	b5b0      	push	{r4, r5, r7, lr}
 80081a2:	b090      	sub	sp, #64	; 0x40
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  int target_len = mrbc_string_size(v);
 80081ac:	68b8      	ldr	r0, [r7, #8]
 80081ae:	f7fe ffa3 	bl	80070f8 <mrbc_string_size>
 80081b2:	6378      	str	r0, [r7, #52]	; 0x34
  int pos = mrbc_integer(v[1]);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	3310      	adds	r3, #16
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  int len;

  // in case of slice!(nth) -> String | nil
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d108      	bne.n	80081d4 <c_string_slice_self+0x34>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3310      	adds	r3, #16
 80081c6:	f993 3000 	ldrsb.w	r3, [r3]
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d102      	bne.n	80081d4 <c_string_slice_self+0x34>
    len = 1;
 80081ce:	2301      	movs	r3, #1
 80081d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80081d2:	e019      	b.n	8008208 <c_string_slice_self+0x68>

  // in case of slice!(nth, len) -> String | nil
  } else if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d110      	bne.n	80081fc <c_string_slice_self+0x5c>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	3310      	adds	r3, #16
 80081de:	f993 3000 	ldrsb.w	r3, [r3]
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d10a      	bne.n	80081fc <c_string_slice_self+0x5c>
	                  mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	3320      	adds	r3, #32
 80081ea:	f993 3000 	ldrsb.w	r3, [r3]
  } else if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d104      	bne.n	80081fc <c_string_slice_self+0x5c>
    len = mrbc_integer(v[2]);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	3320      	adds	r3, #32
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80081fa:	e005      	b.n	8008208 <c_string_slice_self+0x68>

  // other case
  } else {
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80081fc:	2200      	movs	r2, #0
 80081fe:	4945      	ldr	r1, [pc, #276]	; (8008314 <c_string_slice_self+0x174>)
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f003 f911 	bl	800b428 <mrbc_raise>
    return;
 8008206:	e082      	b.n	800830e <c_string_slice_self+0x16e>
  }

  if( pos < 0 ) pos += target_len;
 8008208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820a:	2b00      	cmp	r3, #0
 800820c:	da03      	bge.n	8008216 <c_string_slice_self+0x76>
 800820e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008212:	4413      	add	r3, r2
 8008214:	63fb      	str	r3, [r7, #60]	; 0x3c
  if( pos < 0 ) goto RETURN_NIL;
 8008216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008218:	2b00      	cmp	r3, #0
 800821a:	db6b      	blt.n	80082f4 <c_string_slice_self+0x154>
  if( len > (target_len - pos) ) len = target_len - pos;
 800821c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800821e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008224:	429a      	cmp	r2, r3
 8008226:	dd03      	ble.n	8008230 <c_string_slice_self+0x90>
 8008228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800822a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	63bb      	str	r3, [r7, #56]	; 0x38
  if( len < 0 ) goto RETURN_NIL;
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	2b00      	cmp	r3, #0
 8008234:	db60      	blt.n	80082f8 <c_string_slice_self+0x158>
  if( argc == 1 && len <= 0 ) goto RETURN_NIL;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d102      	bne.n	8008242 <c_string_slice_self+0xa2>
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	2b00      	cmp	r3, #0
 8008240:	dd5c      	ble.n	80082fc <c_string_slice_self+0x15c>

  mrbc_value ret = mrbc_string_new(vm, mrbc_string_cstr(v) + pos, len);
 8008242:	68b8      	ldr	r0, [r7, #8]
 8008244:	f7fe ff65 	bl	8007112 <mrbc_string_cstr>
 8008248:	4602      	mov	r2, r0
 800824a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824c:	441a      	add	r2, r3
 800824e:	f107 0020 	add.w	r0, r7, #32
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	68f9      	ldr	r1, [r7, #12]
 8008256:	f7fe ffa9 	bl	80071ac <mrbc_string_new>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	2b00      	cmp	r3, #0
 800825e:	d04f      	beq.n	8008300 <c_string_slice_self+0x160>

  if( len > 0 ) {
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	2b00      	cmp	r3, #0
 8008264:	dd34      	ble.n	80082d0 <c_string_slice_self+0x130>
    memmove( mrbc_string_cstr(v) + pos, mrbc_string_cstr(v) + pos + len,
 8008266:	68b8      	ldr	r0, [r7, #8]
 8008268:	f7fe ff53 	bl	8007112 <mrbc_string_cstr>
 800826c:	4602      	mov	r2, r0
 800826e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008270:	18d4      	adds	r4, r2, r3
 8008272:	68b8      	ldr	r0, [r7, #8]
 8008274:	f7fe ff4d 	bl	8007112 <mrbc_string_cstr>
 8008278:	4601      	mov	r1, r0
 800827a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	4413      	add	r3, r2
 8008280:	18cd      	adds	r5, r1, r3
	     mrbc_string_size(v) - pos - len + 1 );
 8008282:	68b8      	ldr	r0, [r7, #8]
 8008284:	f7fe ff38 	bl	80070f8 <mrbc_string_size>
 8008288:	4602      	mov	r2, r0
 800828a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828c:	1ad2      	subs	r2, r2, r3
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	3301      	adds	r3, #1
    memmove( mrbc_string_cstr(v) + pos, mrbc_string_cstr(v) + pos + len,
 8008294:	461a      	mov	r2, r3
 8008296:	4629      	mov	r1, r5
 8008298:	4620      	mov	r0, r4
 800829a:	f00e f9f8 	bl	801668e <memmove>
    v->string->size = mrbc_string_size(v) - len;
 800829e:	68b8      	ldr	r0, [r7, #8]
 80082a0:	f7fe ff2a 	bl	80070f8 <mrbc_string_size>
 80082a4:	4603      	mov	r3, r0
 80082a6:	b299      	uxth	r1, r3
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	1a8a      	subs	r2, r1, r2
 80082b2:	b292      	uxth	r2, r2
 80082b4:	809a      	strh	r2, [r3, #4]
    mrbc_raw_realloc( mrbc_string_cstr(v), mrbc_string_size(v)+1 );
 80082b6:	68b8      	ldr	r0, [r7, #8]
 80082b8:	f7fe ff2b 	bl	8007112 <mrbc_string_cstr>
 80082bc:	4604      	mov	r4, r0
 80082be:	68b8      	ldr	r0, [r7, #8]
 80082c0:	f7fe ff1a 	bl	80070f8 <mrbc_string_size>
 80082c4:	4603      	mov	r3, r0
 80082c6:	3301      	adds	r3, #1
 80082c8:	4619      	mov	r1, r3
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7f9 fe74 	bl	8001fb8 <mrbc_raw_realloc>
  }

  SET_RETURN(ret);
 80082d0:	f107 0410 	add.w	r4, r7, #16
 80082d4:	f107 0320 	add.w	r3, r7, #32
 80082d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80082de:	68b8      	ldr	r0, [r7, #8]
 80082e0:	f7fe feac 	bl	800703c <mrbc_decref>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	461c      	mov	r4, r3
 80082e8:	f107 0310 	add.w	r3, r7, #16
 80082ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;		// normal return
 80082f2:	e00c      	b.n	800830e <c_string_slice_self+0x16e>
  if( pos < 0 ) goto RETURN_NIL;
 80082f4:	bf00      	nop
 80082f6:	e004      	b.n	8008302 <c_string_slice_self+0x162>
  if( len < 0 ) goto RETURN_NIL;
 80082f8:	bf00      	nop
 80082fa:	e002      	b.n	8008302 <c_string_slice_self+0x162>
  if( argc == 1 && len <= 0 ) goto RETURN_NIL;
 80082fc:	bf00      	nop
 80082fe:	e000      	b.n	8008302 <c_string_slice_self+0x162>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8008300:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 8008302:	68b8      	ldr	r0, [r7, #8]
 8008304:	f7fe fe9a 	bl	800703c <mrbc_decref>
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2201      	movs	r2, #1
 800830c:	701a      	strb	r2, [r3, #0]
}
 800830e:	3740      	adds	r7, #64	; 0x40
 8008310:	46bd      	mov	sp, r7
 8008312:	bdb0      	pop	{r4, r5, r7, pc}
 8008314:	20000154 	.word	0x20000154

08008318 <c_string_split>:

//================================================================
/*! (method) split
*/
static void c_string_split(struct VM *vm, mrbc_value v[], int argc)
{
 8008318:	b590      	push	{r4, r7, lr}
 800831a:	b0a5      	sub	sp, #148	; 0x94
 800831c:	af00      	add	r7, sp, #0
 800831e:	61f8      	str	r0, [r7, #28]
 8008320:	61b9      	str	r1, [r7, #24]
 8008322:	617a      	str	r2, [r7, #20]
  mrbc_value ret = mrbc_array_new(vm, 0);
 8008324:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008328:	2200      	movs	r2, #0
 800832a:	69f9      	ldr	r1, [r7, #28]
 800832c:	4618      	mov	r0, r3
 800832e:	f7fa f812 	bl	8002356 <mrbc_array_new>
  if( mrbc_string_size(&v[0]) == 0 ) goto DONE;
 8008332:	69b8      	ldr	r0, [r7, #24]
 8008334:	f7fe fee0 	bl	80070f8 <mrbc_string_size>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 817f 	beq.w	800863e <c_string_split+0x326>

  // check limit parameter.
  int limit = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if( argc >= 2 ) {
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b01      	cmp	r3, #1
 800834a:	dd1e      	ble.n	800838a <c_string_split+0x72>
    if( mrbc_type(v[2]) != MRBC_TT_INTEGER ) {
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	3320      	adds	r3, #32
 8008350:	f993 3000 	ldrsb.w	r3, [r3]
 8008354:	2b04      	cmp	r3, #4
 8008356:	d005      	beq.n	8008364 <c_string_split+0x4c>
      mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008358:	2200      	movs	r2, #0
 800835a:	49ba      	ldr	r1, [pc, #744]	; (8008644 <c_string_split+0x32c>)
 800835c:	69f8      	ldr	r0, [r7, #28]
 800835e:	f003 f863 	bl	800b428 <mrbc_raise>
      return;
 8008362:	e187      	b.n	8008674 <c_string_split+0x35c>
    }
    limit = v[2].i;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	3320      	adds	r3, #32
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if( limit == 1 ) {
 800836e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008372:	2b01      	cmp	r3, #1
 8008374:	d109      	bne.n	800838a <c_string_split+0x72>
      mrbc_array_push( &ret, &v[0] );
 8008376:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800837a:	69b9      	ldr	r1, [r7, #24]
 800837c:	4618      	mov	r0, r3
 800837e:	f7fa f91a 	bl	80025b6 <mrbc_array_push>
      mrbc_incref( &v[0] );
 8008382:	69b8      	ldr	r0, [r7, #24]
 8008384:	f7fe fe26 	bl	8006fd4 <mrbc_incref>
      goto DONE;
 8008388:	e163      	b.n	8008652 <c_string_split+0x33a>
    }
  }

  // check separator parameter.
  mrbc_value sep = (argc == 0) ? mrbc_string_new_cstr(vm, " ") : v[1];
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d107      	bne.n	80083a0 <c_string_split+0x88>
 8008390:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008394:	4aac      	ldr	r2, [pc, #688]	; (8008648 <c_string_split+0x330>)
 8008396:	69f9      	ldr	r1, [r7, #28]
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fe95 	bl	80070c8 <mrbc_string_new_cstr>
 800839e:	e006      	b.n	80083ae <c_string_split+0x96>
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80083a6:	3310      	adds	r3, #16
 80083a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80083aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  switch( mrbc_type(sep) ) {
 80083ae:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d002      	beq.n	80083bc <c_string_split+0xa4>
 80083b6:	2b0b      	cmp	r3, #11
 80083b8:	d013      	beq.n	80083e2 <c_string_split+0xca>
 80083ba:	e00c      	b.n	80083d6 <c_string_split+0xbe>
  case MRBC_TT_NIL:
    sep = mrbc_string_new_cstr(vm, " ");
 80083bc:	463b      	mov	r3, r7
 80083be:	4aa2      	ldr	r2, [pc, #648]	; (8008648 <c_string_split+0x330>)
 80083c0:	69f9      	ldr	r1, [r7, #28]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fe80 	bl	80070c8 <mrbc_string_new_cstr>
 80083c8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80083cc:	463b      	mov	r3, r7
 80083ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80083d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    break;
 80083d4:	e006      	b.n	80083e4 <c_string_split+0xcc>

  case MRBC_TT_STRING:
    break;

  default:
    mrbc_raise( vm, MRBC_CLASS(TypeError), 0 );
 80083d6:	2200      	movs	r2, #0
 80083d8:	499c      	ldr	r1, [pc, #624]	; (800864c <c_string_split+0x334>)
 80083da:	69f8      	ldr	r0, [r7, #28]
 80083dc:	f003 f824 	bl	800b428 <mrbc_raise>
    return;
 80083e0:	e148      	b.n	8008674 <c_string_split+0x35c>
    break;
 80083e2:	bf00      	nop
  }

  int flag_strip = (mrbc_string_cstr(&sep)[0] == ' ') &&
 80083e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fe92 	bl	8007112 <mrbc_string_cstr>
 80083ee:	4603      	mov	r3, r0
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	d109      	bne.n	800840a <c_string_split+0xf2>
		   (mrbc_string_size(&sep) == 1);
 80083f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fe7c 	bl	80070f8 <mrbc_string_size>
 8008400:	4603      	mov	r3, r0
  int flag_strip = (mrbc_string_cstr(&sep)[0] == ' ') &&
 8008402:	2b01      	cmp	r3, #1
 8008404:	d101      	bne.n	800840a <c_string_split+0xf2>
 8008406:	2301      	movs	r3, #1
 8008408:	e000      	b.n	800840c <c_string_split+0xf4>
 800840a:	2300      	movs	r3, #0
 800840c:	67bb      	str	r3, [r7, #120]	; 0x78
  int offset = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int sep_len = mrbc_string_size(&sep);
 8008414:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fe6d 	bl	80070f8 <mrbc_string_size>
 800841e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  if( sep_len == 0 ) sep_len++;
 8008422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008426:	2b00      	cmp	r3, #0
 8008428:	d104      	bne.n	8008434 <c_string_split+0x11c>
 800842a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800842e:	3301      	adds	r3, #1
 8008430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  while( 1 ) {
    int pos, len = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	67fb      	str	r3, [r7, #124]	; 0x7c

    if( flag_strip ) {
 8008438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800843a:	2b00      	cmp	r3, #0
 800843c:	d026      	beq.n	800848c <c_string_split+0x174>
      for( ; offset < mrbc_string_size(&v[0]); offset++ ) {
 800843e:	e012      	b.n	8008466 <c_string_split+0x14e>
	if( !is_space( mrbc_string_cstr(&v[0])[offset] )) break;
 8008440:	69b8      	ldr	r0, [r7, #24]
 8008442:	f7fe fe66 	bl	8007112 <mrbc_string_cstr>
 8008446:	4602      	mov	r2, r0
 8008448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800844c:	4413      	add	r3, r2
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fe8b 	bl	800716c <is_space>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00d      	beq.n	8008478 <c_string_split+0x160>
      for( ; offset < mrbc_string_size(&v[0]); offset++ ) {
 800845c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008460:	3301      	adds	r3, #1
 8008462:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008466:	69b8      	ldr	r0, [r7, #24]
 8008468:	f7fe fe46 	bl	80070f8 <mrbc_string_size>
 800846c:	4602      	mov	r2, r0
 800846e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008472:	4293      	cmp	r3, r2
 8008474:	dbe4      	blt.n	8008440 <c_string_split+0x128>
 8008476:	e000      	b.n	800847a <c_string_split+0x162>
	if( !is_space( mrbc_string_cstr(&v[0])[offset] )) break;
 8008478:	bf00      	nop
      }
      if( offset > mrbc_string_size(&v[0])) break;
 800847a:	69b8      	ldr	r0, [r7, #24]
 800847c:	f7fe fe3c 	bl	80070f8 <mrbc_string_size>
 8008480:	4602      	mov	r2, r0
 8008482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008486:	4293      	cmp	r3, r2
 8008488:	f300 8098 	bgt.w	80085bc <c_string_split+0x2a4>
    }

    // check limit
    if( limit > 0 && mrbc_array_size(&ret)+1 >= limit ) {
 800848c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008490:	2b00      	cmp	r3, #0
 8008492:	dd0f      	ble.n	80084b4 <c_string_split+0x19c>
 8008494:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe fe5a 	bl	8007152 <mrbc_array_size>
 800849e:	4603      	mov	r3, r0
 80084a0:	3301      	adds	r3, #1
 80084a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80084a6:	429a      	cmp	r2, r3
 80084a8:	dc04      	bgt.n	80084b4 <c_string_split+0x19c>
      pos = -1;
 80084aa:	f04f 33ff 	mov.w	r3, #4294967295
 80084ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      goto SPLIT_ITEM;
 80084b2:	e056      	b.n	8008562 <c_string_split+0x24a>
    }

    // split by space character.
    if( flag_strip ) {
 80084b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d028      	beq.n	800850c <c_string_split+0x1f4>
      pos = offset;
 80084ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      for( ; pos < mrbc_string_size(&v[0]); pos++ ) {
 80084c2:	e012      	b.n	80084ea <c_string_split+0x1d2>
	if( is_space( mrbc_string_cstr(&v[0])[pos] )) break;
 80084c4:	69b8      	ldr	r0, [r7, #24]
 80084c6:	f7fe fe24 	bl	8007112 <mrbc_string_cstr>
 80084ca:	4602      	mov	r2, r0
 80084cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084d0:	4413      	add	r3, r2
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe fe49 	bl	800716c <is_space>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10d      	bne.n	80084fc <c_string_split+0x1e4>
      for( ; pos < mrbc_string_size(&v[0]); pos++ ) {
 80084e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084e4:	3301      	adds	r3, #1
 80084e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084ea:	69b8      	ldr	r0, [r7, #24]
 80084ec:	f7fe fe04 	bl	80070f8 <mrbc_string_size>
 80084f0:	4602      	mov	r2, r0
 80084f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084f6:	4293      	cmp	r3, r2
 80084f8:	dbe4      	blt.n	80084c4 <c_string_split+0x1ac>
 80084fa:	e000      	b.n	80084fe <c_string_split+0x1e6>
	if( is_space( mrbc_string_cstr(&v[0])[pos] )) break;
 80084fc:	bf00      	nop
      }
      len = pos - offset;
 80084fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008502:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	67fb      	str	r3, [r7, #124]	; 0x7c
      goto SPLIT_ITEM;
 800850a:	e02a      	b.n	8008562 <c_string_split+0x24a>
    }

    // split by each character.
    if( mrbc_string_size(&sep) == 0 ) {
 800850c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe fdf1 	bl	80070f8 <mrbc_string_size>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d112      	bne.n	8008542 <c_string_split+0x22a>
      pos = (offset < mrbc_string_size(&v[0])-1) ? offset : -1;
 800851c:	69b8      	ldr	r0, [r7, #24]
 800851e:	f7fe fdeb 	bl	80070f8 <mrbc_string_size>
 8008522:	4603      	mov	r3, r0
 8008524:	3b01      	subs	r3, #1
 8008526:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800852a:	429a      	cmp	r2, r3
 800852c:	da02      	bge.n	8008534 <c_string_split+0x21c>
 800852e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008532:	e001      	b.n	8008538 <c_string_split+0x220>
 8008534:	f04f 33ff 	mov.w	r3, #4294967295
 8008538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      len = 1;
 800853c:	2301      	movs	r3, #1
 800853e:	67fb      	str	r3, [r7, #124]	; 0x7c
      goto SPLIT_ITEM;
 8008540:	e00f      	b.n	8008562 <c_string_split+0x24a>
    }

    // split by specified character.
    pos = mrbc_string_index( &v[0], &sep, offset );
 8008542:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008546:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800854a:	4619      	mov	r1, r3
 800854c:	69b8      	ldr	r0, [r7, #24]
 800854e:	f7ff f80e 	bl	800756e <mrbc_string_index>
 8008552:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    len = pos - offset;
 8008556:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800855a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	67fb      	str	r3, [r7, #124]	; 0x7c


  SPLIT_ITEM:
    if( pos < 0 ) len = mrbc_string_size(&v[0]) - offset;
 8008562:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008566:	2b00      	cmp	r3, #0
 8008568:	da07      	bge.n	800857a <c_string_split+0x262>
 800856a:	69b8      	ldr	r0, [r7, #24]
 800856c:	f7fe fdc4 	bl	80070f8 <mrbc_string_size>
 8008570:	4602      	mov	r2, r0
 8008572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	67fb      	str	r3, [r7, #124]	; 0x7c

    mrbc_value v1 = mrbc_string_new(vm, mrbc_string_cstr(&v[0]) + offset, len);
 800857a:	69b8      	ldr	r0, [r7, #24]
 800857c:	f7fe fdc9 	bl	8007112 <mrbc_string_cstr>
 8008580:	4602      	mov	r2, r0
 8008582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008586:	441a      	add	r2, r3
 8008588:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800858c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800858e:	69f9      	ldr	r1, [r7, #28]
 8008590:	f7fe fe0c 	bl	80071ac <mrbc_string_new>
    mrbc_array_push( &ret, &v1 );
 8008594:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008598:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fa f809 	bl	80025b6 <mrbc_array_push>

    if( pos < 0 ) break;
 80085a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	db09      	blt.n	80085c0 <c_string_split+0x2a8>
    offset = pos + sep_len;
 80085ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085b4:	4413      	add	r3, r2
 80085b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while( 1 ) {
 80085ba:	e73b      	b.n	8008434 <c_string_split+0x11c>
      if( offset > mrbc_string_size(&v[0])) break;
 80085bc:	bf00      	nop
 80085be:	e000      	b.n	80085c2 <c_string_split+0x2aa>
    if( pos < 0 ) break;
 80085c0:	bf00      	nop
  }

  // remove trailing empty item
  if( limit == 0 ) {
 80085c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d12a      	bne.n	8008620 <c_string_split+0x308>
    while( 1 ) {
      int idx = mrbc_array_size(&ret) - 1;
 80085ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fdbf 	bl	8007152 <mrbc_array_size>
 80085d4:	4603      	mov	r3, r0
 80085d6:	3b01      	subs	r3, #1
 80085d8:	677b      	str	r3, [r7, #116]	; 0x74
      if( idx < 0 ) break;
 80085da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085dc:	2b00      	cmp	r3, #0
 80085de:	db1c      	blt.n	800861a <c_string_split+0x302>

      mrbc_value v1 = mrbc_array_get( &ret, idx );
 80085e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085e4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80085e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7f9 ffae 	bl	800254c <mrbc_array_get>
      if( mrbc_string_size(&v1) != 0 ) break;
 80085f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe fd7f 	bl	80070f8 <mrbc_string_size>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10e      	bne.n	800861e <c_string_split+0x306>

      mrbc_array_remove(&ret, idx);
 8008600:	463b      	mov	r3, r7
 8008602:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008606:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008608:	4618      	mov	r0, r3
 800860a:	f7fa f944 	bl	8002896 <mrbc_array_remove>
      mrbc_string_delete( &v1 );
 800860e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fe68 	bl	80072e8 <mrbc_string_delete>
    while( 1 ) {
 8008618:	e7d7      	b.n	80085ca <c_string_split+0x2b2>
      if( idx < 0 ) break;
 800861a:	bf00      	nop
 800861c:	e000      	b.n	8008620 <c_string_split+0x308>
      if( mrbc_string_size(&v1) != 0 ) break;
 800861e:	bf00      	nop
    }
  }

  if( argc == 0 || mrbc_type(v[1]) == MRBC_TT_NIL ) {
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d005      	beq.n	8008632 <c_string_split+0x31a>
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	3310      	adds	r3, #16
 800862a:	f993 3000 	ldrsb.w	r3, [r3]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d10e      	bne.n	8008650 <c_string_split+0x338>
    mrbc_string_delete(&sep);
 8008632:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe fe56 	bl	80072e8 <mrbc_string_delete>
 800863c:	e009      	b.n	8008652 <c_string_split+0x33a>
  if( mrbc_string_size(&v[0]) == 0 ) goto DONE;
 800863e:	bf00      	nop
 8008640:	e007      	b.n	8008652 <c_string_split+0x33a>
 8008642:	bf00      	nop
 8008644:	20000154 	.word	0x20000154
 8008648:	080190f0 	.word	0x080190f0
 800864c:	200001b4 	.word	0x200001b4
  }

 DONE:
 8008650:	bf00      	nop
  SET_RETURN( ret );
 8008652:	f107 0420 	add.w	r4, r7, #32
 8008656:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800865a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800865c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008660:	69b8      	ldr	r0, [r7, #24]
 8008662:	f7fe fceb 	bl	800703c <mrbc_decref>
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	461c      	mov	r4, r3
 800866a:	f107 0320 	add.w	r3, r7, #32
 800866e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8008674:	3794      	adds	r7, #148	; 0x94
 8008676:	46bd      	mov	sp, r7
 8008678:	bd90      	pop	{r4, r7, pc}
 800867a:	bf00      	nop

0800867c <c_string_lstrip>:

//================================================================
/*! (method) lstrip
*/
static void c_string_lstrip(struct VM *vm, mrbc_value v[], int argc)
{
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b08d      	sub	sp, #52	; 0x34
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8008688:	f107 0320 	add.w	r3, r7, #32
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	68f9      	ldr	r1, [r7, #12]
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe fe54 	bl	800733e <mrbc_string_dup>

  mrbc_string_strip(&ret, 0x01);	// 1: left side only
 8008696:	f107 0320 	add.w	r3, r7, #32
 800869a:	2101      	movs	r1, #1
 800869c:	4618      	mov	r0, r3
 800869e:	f7fe ffa6 	bl	80075ee <mrbc_string_strip>

  SET_RETURN(ret);
 80086a2:	f107 0410 	add.w	r4, r7, #16
 80086a6:	f107 0320 	add.w	r3, r7, #32
 80086aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80086b0:	68b8      	ldr	r0, [r7, #8]
 80086b2:	f7fe fcc3 	bl	800703c <mrbc_decref>
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	461c      	mov	r4, r3
 80086ba:	f107 0310 	add.w	r3, r7, #16
 80086be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80086c4:	bf00      	nop
 80086c6:	3734      	adds	r7, #52	; 0x34
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd90      	pop	{r4, r7, pc}

080086cc <c_string_lstrip_self>:

//================================================================
/*! (method) lstrip!
*/
static void c_string_lstrip_self(struct VM *vm, mrbc_value v[], int argc)
{
 80086cc:	b590      	push	{r4, r7, lr}
 80086ce:	b08d      	sub	sp, #52	; 0x34
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  if( mrbc_string_strip(&v[0], 0x01) == 0 ) {	// 1: left side only
 80086d8:	2101      	movs	r1, #1
 80086da:	68b8      	ldr	r0, [r7, #8]
 80086dc:	f7fe ff87 	bl	80075ee <mrbc_string_strip>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d113      	bne.n	800870e <c_string_lstrip_self+0x42>
    SET_RETURN( mrbc_nil_value() );
 80086e6:	f107 0320 	add.w	r3, r7, #32
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	605a      	str	r2, [r3, #4]
 80086f0:	609a      	str	r2, [r3, #8]
 80086f2:	60da      	str	r2, [r3, #12]
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3020 	strb.w	r3, [r7, #32]
 80086fa:	68b8      	ldr	r0, [r7, #8]
 80086fc:	f7fe fc9e 	bl	800703c <mrbc_decref>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	461c      	mov	r4, r3
 8008704:	f107 0320 	add.w	r3, r7, #32
 8008708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800870a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
}
 800870e:	bf00      	nop
 8008710:	3734      	adds	r7, #52	; 0x34
 8008712:	46bd      	mov	sp, r7
 8008714:	bd90      	pop	{r4, r7, pc}

08008716 <c_string_rstrip>:

//================================================================
/*! (method) rstrip
*/
static void c_string_rstrip(struct VM *vm, mrbc_value v[], int argc)
{
 8008716:	b590      	push	{r4, r7, lr}
 8008718:	b08d      	sub	sp, #52	; 0x34
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8008722:	f107 0320 	add.w	r3, r7, #32
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	68f9      	ldr	r1, [r7, #12]
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fe07 	bl	800733e <mrbc_string_dup>

  mrbc_string_strip(&ret, 0x02);	// 2: right side only
 8008730:	f107 0320 	add.w	r3, r7, #32
 8008734:	2102      	movs	r1, #2
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe ff59 	bl	80075ee <mrbc_string_strip>

  SET_RETURN(ret);
 800873c:	f107 0410 	add.w	r4, r7, #16
 8008740:	f107 0320 	add.w	r3, r7, #32
 8008744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800874a:	68b8      	ldr	r0, [r7, #8]
 800874c:	f7fe fc76 	bl	800703c <mrbc_decref>
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	461c      	mov	r4, r3
 8008754:	f107 0310 	add.w	r3, r7, #16
 8008758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800875a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800875e:	bf00      	nop
 8008760:	3734      	adds	r7, #52	; 0x34
 8008762:	46bd      	mov	sp, r7
 8008764:	bd90      	pop	{r4, r7, pc}

08008766 <c_string_rstrip_self>:

//================================================================
/*! (method) rstrip!
*/
static void c_string_rstrip_self(struct VM *vm, mrbc_value v[], int argc)
{
 8008766:	b590      	push	{r4, r7, lr}
 8008768:	b08d      	sub	sp, #52	; 0x34
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
  if( mrbc_string_strip(&v[0], 0x02) == 0 ) {	// 2: right side only
 8008772:	2102      	movs	r1, #2
 8008774:	68b8      	ldr	r0, [r7, #8]
 8008776:	f7fe ff3a 	bl	80075ee <mrbc_string_strip>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d113      	bne.n	80087a8 <c_string_rstrip_self+0x42>
    SET_RETURN( mrbc_nil_value() );
 8008780:	f107 0320 	add.w	r3, r7, #32
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	605a      	str	r2, [r3, #4]
 800878a:	609a      	str	r2, [r3, #8]
 800878c:	60da      	str	r2, [r3, #12]
 800878e:	2301      	movs	r3, #1
 8008790:	f887 3020 	strb.w	r3, [r7, #32]
 8008794:	68b8      	ldr	r0, [r7, #8]
 8008796:	f7fe fc51 	bl	800703c <mrbc_decref>
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	461c      	mov	r4, r3
 800879e:	f107 0320 	add.w	r3, r7, #32
 80087a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
}
 80087a8:	bf00      	nop
 80087aa:	3734      	adds	r7, #52	; 0x34
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd90      	pop	{r4, r7, pc}

080087b0 <c_string_strip>:

//================================================================
/*! (method) strip
*/
static void c_string_strip(struct VM *vm, mrbc_value v[], int argc)
{
 80087b0:	b590      	push	{r4, r7, lr}
 80087b2:	b08d      	sub	sp, #52	; 0x34
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 80087bc:	f107 0320 	add.w	r3, r7, #32
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fdba 	bl	800733e <mrbc_string_dup>

  mrbc_string_strip(&ret, 0x03);	// 3: left and right
 80087ca:	f107 0320 	add.w	r3, r7, #32
 80087ce:	2103      	movs	r1, #3
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe ff0c 	bl	80075ee <mrbc_string_strip>

  SET_RETURN(ret);
 80087d6:	f107 0410 	add.w	r4, r7, #16
 80087da:	f107 0320 	add.w	r3, r7, #32
 80087de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80087e4:	68b8      	ldr	r0, [r7, #8]
 80087e6:	f7fe fc29 	bl	800703c <mrbc_decref>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	461c      	mov	r4, r3
 80087ee:	f107 0310 	add.w	r3, r7, #16
 80087f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80087f8:	bf00      	nop
 80087fa:	3734      	adds	r7, #52	; 0x34
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd90      	pop	{r4, r7, pc}

08008800 <c_string_strip_self>:

//================================================================
/*! (method) strip!
*/
static void c_string_strip_self(struct VM *vm, mrbc_value v[], int argc)
{
 8008800:	b590      	push	{r4, r7, lr}
 8008802:	b08d      	sub	sp, #52	; 0x34
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  if( mrbc_string_strip(&v[0], 0x03) == 0 ) {	// 3: left and right
 800880c:	2103      	movs	r1, #3
 800880e:	68b8      	ldr	r0, [r7, #8]
 8008810:	f7fe feed 	bl	80075ee <mrbc_string_strip>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d113      	bne.n	8008842 <c_string_strip_self+0x42>
    SET_RETURN( mrbc_nil_value() );
 800881a:	f107 0320 	add.w	r3, r7, #32
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	605a      	str	r2, [r3, #4]
 8008824:	609a      	str	r2, [r3, #8]
 8008826:	60da      	str	r2, [r3, #12]
 8008828:	2301      	movs	r3, #1
 800882a:	f887 3020 	strb.w	r3, [r7, #32]
 800882e:	68b8      	ldr	r0, [r7, #8]
 8008830:	f7fe fc04 	bl	800703c <mrbc_decref>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	461c      	mov	r4, r3
 8008838:	f107 0320 	add.w	r3, r7, #32
 800883c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800883e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
}
 8008842:	bf00      	nop
 8008844:	3734      	adds	r7, #52	; 0x34
 8008846:	46bd      	mov	sp, r7
 8008848:	bd90      	pop	{r4, r7, pc}

0800884a <c_string_to_sym>:

//================================================================
/*! (method) to_sym
*/
static void c_string_to_sym(struct VM *vm, mrbc_value v[], int argc)
{
 800884a:	b590      	push	{r4, r7, lr}
 800884c:	b08d      	sub	sp, #52	; 0x34
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_symbol_new(vm, mrbc_string_cstr(&v[0]));
 8008856:	68b8      	ldr	r0, [r7, #8]
 8008858:	f7fe fc5b 	bl	8007112 <mrbc_string_cstr>
 800885c:	4602      	mov	r2, r0
 800885e:	f107 0320 	add.w	r3, r7, #32
 8008862:	68f9      	ldr	r1, [r7, #12]
 8008864:	4618      	mov	r0, r3
 8008866:	f005 fb19 	bl	800de9c <mrbc_symbol_new>

  SET_RETURN(ret);
 800886a:	f107 0410 	add.w	r4, r7, #16
 800886e:	f107 0320 	add.w	r3, r7, #32
 8008872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008878:	68b8      	ldr	r0, [r7, #8]
 800887a:	f7fe fbdf 	bl	800703c <mrbc_decref>
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	461c      	mov	r4, r3
 8008882:	f107 0310 	add.w	r3, r7, #16
 8008886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800888c:	bf00      	nop
 800888e:	3734      	adds	r7, #52	; 0x34
 8008890:	46bd      	mov	sp, r7
 8008892:	bd90      	pop	{r4, r7, pc}

08008894 <tr_free_pattern>:
  struct tr_pattern *next;
  char ch[];
};

static void tr_free_pattern( struct tr_pattern *pat )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  while( pat ) {
 800889c:	e007      	b.n	80088ae <tr_free_pattern+0x1a>
    struct tr_pattern *p = pat->next;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	60fb      	str	r3, [r7, #12]
    mrbc_raw_free( pat );
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7f9 faeb 	bl	8001e80 <mrbc_raw_free>
    pat = p;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	607b      	str	r3, [r7, #4]
  while( pat ) {
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f4      	bne.n	800889e <tr_free_pattern+0xa>
  }
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <tr_parse_pattern>:

static struct tr_pattern * tr_parse_pattern( struct VM *vm, const mrbc_value *v_pattern, int flag_reverse_enable )
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b08e      	sub	sp, #56	; 0x38
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
  const char *pattern = mrbc_string_cstr( v_pattern );
 80088ca:	68b8      	ldr	r0, [r7, #8]
 80088cc:	f7fe fc21 	bl	8007112 <mrbc_string_cstr>
 80088d0:	6238      	str	r0, [r7, #32]
  int pattern_length = mrbc_string_size( v_pattern );
 80088d2:	68b8      	ldr	r0, [r7, #8]
 80088d4:	f7fe fc10 	bl	80070f8 <mrbc_string_size>
 80088d8:	61f8      	str	r0, [r7, #28]
  int flag_reverse = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
  struct tr_pattern *ret = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	633b      	str	r3, [r7, #48]	; 0x30

  int i = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if( flag_reverse_enable && pattern_length >= 2 && pattern[i] == '^' ) {
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80a3 	beq.w	8008a34 <tr_parse_pattern+0x176>
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	f340 809f 	ble.w	8008a34 <tr_parse_pattern+0x176>
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	6a3a      	ldr	r2, [r7, #32]
 80088fa:	4413      	add	r3, r2
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b5e      	cmp	r3, #94	; 0x5e
 8008900:	f040 8098 	bne.w	8008a34 <tr_parse_pattern+0x176>
    flag_reverse = 1;
 8008904:	2301      	movs	r3, #1
 8008906:	637b      	str	r3, [r7, #52]	; 0x34
    i++;
 8008908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890a:	3301      	adds	r3, #1
 800890c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  struct tr_pattern *pat1;
  while( i < pattern_length ) {
 800890e:	e091      	b.n	8008a34 <tr_parse_pattern+0x176>
    // is range pattern ?
    if( (i+2) < pattern_length && pattern[i+1] == '-' ) {
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	3302      	adds	r3, #2
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	429a      	cmp	r2, r3
 8008918:	dd3a      	ble.n	8008990 <tr_parse_pattern+0xd2>
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	3301      	adds	r3, #1
 800891e:	6a3a      	ldr	r2, [r7, #32]
 8008920:	4413      	add	r3, r2
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b2d      	cmp	r3, #45	; 0x2d
 8008926:	d133      	bne.n	8008990 <tr_parse_pattern+0xd2>
      pat1 = mrbc_alloc( vm, sizeof(struct tr_pattern) + 2 );
 8008928:	200a      	movs	r0, #10
 800892a:	f7f9 f8cd 	bl	8001ac8 <mrbc_raw_alloc>
 800892e:	62b8      	str	r0, [r7, #40]	; 0x28
      if( pat1 != NULL ) {
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d028      	beq.n	8008988 <tr_parse_pattern+0xca>
	pat1->type = 2;
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	2202      	movs	r2, #2
 800893a:	701a      	strb	r2, [r3, #0]
	pat1->flag_reverse = flag_reverse;
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	b2da      	uxtb	r2, r3
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	705a      	strb	r2, [r3, #1]
	pat1->n = pattern[i+2] - pattern[i] + 1;
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	3302      	adds	r3, #2
 8008948:	6a3a      	ldr	r2, [r7, #32]
 800894a:	4413      	add	r3, r2
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	b29a      	uxth	r2, r3
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	6a39      	ldr	r1, [r7, #32]
 8008954:	440b      	add	r3, r1
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	b29b      	uxth	r3, r3
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	b29b      	uxth	r3, r3
 800895e:	3301      	adds	r3, #1
 8008960:	b29b      	uxth	r3, r3
 8008962:	b21a      	sxth	r2, r3
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	805a      	strh	r2, [r3, #2]
	pat1->next = NULL;
 8008968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896a:	2200      	movs	r2, #0
 800896c:	605a      	str	r2, [r3, #4]
	pat1->ch[0] = pattern[i];
 800896e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008970:	6a3a      	ldr	r2, [r7, #32]
 8008972:	4413      	add	r3, r2
 8008974:	781a      	ldrb	r2, [r3, #0]
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	721a      	strb	r2, [r3, #8]
	pat1->ch[1] = pattern[i+2];
 800897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897c:	3302      	adds	r3, #2
 800897e:	6a3a      	ldr	r2, [r7, #32]
 8008980:	4413      	add	r3, r2
 8008982:	781a      	ldrb	r2, [r3, #0]
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	725a      	strb	r2, [r3, #9]
      }
      i += 3;
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	3303      	adds	r3, #3
 800898c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800898e:	e03e      	b.n	8008a0e <tr_parse_pattern+0x150>

    } else {
      // in order pattern.
      int start_pos = i++;
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008996:	61bb      	str	r3, [r7, #24]
      while( i < pattern_length ) {
 8008998:	e00e      	b.n	80089b8 <tr_parse_pattern+0xfa>
	if( (i+2) < pattern_length && pattern[i+1] == '-' ) break;
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	3302      	adds	r3, #2
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	dd06      	ble.n	80089b2 <tr_parse_pattern+0xf4>
 80089a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a6:	3301      	adds	r3, #1
 80089a8:	6a3a      	ldr	r2, [r7, #32]
 80089aa:	4413      	add	r3, r2
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b2d      	cmp	r3, #45	; 0x2d
 80089b0:	d007      	beq.n	80089c2 <tr_parse_pattern+0x104>
	i++;
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	3301      	adds	r3, #1
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      while( i < pattern_length ) {
 80089b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	429a      	cmp	r2, r3
 80089be:	dbec      	blt.n	800899a <tr_parse_pattern+0xdc>
 80089c0:	e000      	b.n	80089c4 <tr_parse_pattern+0x106>
	if( (i+2) < pattern_length && pattern[i+1] == '-' ) break;
 80089c2:	bf00      	nop
      }

      int len = i - start_pos;
 80089c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	617b      	str	r3, [r7, #20]
      pat1 = mrbc_alloc( vm, sizeof(struct tr_pattern) + len );
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	3308      	adds	r3, #8
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7f9 f879 	bl	8001ac8 <mrbc_raw_alloc>
 80089d6:	62b8      	str	r0, [r7, #40]	; 0x28
      if( pat1 != NULL ) {
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d017      	beq.n	8008a0e <tr_parse_pattern+0x150>
	pat1->type = 1;
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	2201      	movs	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]
	pat1->flag_reverse = flag_reverse;
 80089e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	705a      	strb	r2, [r3, #1]
	pat1->n = len;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	b21a      	sxth	r2, r3
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	805a      	strh	r2, [r3, #2]
	pat1->next = NULL;
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	2200      	movs	r2, #0
 80089f8:	605a      	str	r2, [r3, #4]
	memcpy( pat1->ch, &pattern[start_pos], len );
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	f103 0008 	add.w	r0, r3, #8
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	6a3a      	ldr	r2, [r7, #32]
 8008a04:	4413      	add	r3, r2
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f00d fef4 	bl	80167f6 <memcpy>
      }
    }

    // connect linked list.
    if( ret == NULL ) {
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <tr_parse_pattern+0x15c>
      ret = pat1;
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	633b      	str	r3, [r7, #48]	; 0x30
 8008a18:	e00c      	b.n	8008a34 <tr_parse_pattern+0x176>
    } else {
      struct tr_pattern *p = ret;
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
      while( p->next != NULL ) { p = p->next; }
 8008a1e:	e002      	b.n	8008a26 <tr_parse_pattern+0x168>
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1f8      	bne.n	8008a20 <tr_parse_pattern+0x162>
      p->next = pat1;
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a32:	605a      	str	r2, [r3, #4]
  while( i < pattern_length ) {
 8008a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	f6ff af69 	blt.w	8008910 <tr_parse_pattern+0x52>
    }
  }

  return ret;
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3738      	adds	r7, #56	; 0x38
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <tr_find_character>:

static int tr_find_character( const struct tr_pattern *pat, int ch )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  int ret = -1;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295
 8008a56:	617b      	str	r3, [r7, #20]
  int n_sum = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	613b      	str	r3, [r7, #16]
  int flag_reverse = pat ? pat->flag_reverse : 0;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <tr_find_character+0x20>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	e000      	b.n	8008a6a <tr_find_character+0x22>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60bb      	str	r3, [r7, #8]

  while( pat != NULL ) {
 8008a6c:	e03b      	b.n	8008ae6 <tr_find_character+0x9e>
    if( pat->type == 1 ) {	// in-order
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d11a      	bne.n	8008aac <tr_find_character+0x64>
      int i;
      for( i = 0; i < pat->n; i++ ) {
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e00f      	b.n	8008a9c <tr_find_character+0x54>
	if( pat->ch[i] == ch ) ret = n_sum + i;
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	4413      	add	r3, r2
 8008a82:	3308      	adds	r3, #8
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d103      	bne.n	8008a96 <tr_find_character+0x4e>
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]
      for( i = 0; i < pat->n; i++ ) {
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	dbe8      	blt.n	8008a7c <tr_find_character+0x34>
 8008aaa:	e012      	b.n	8008ad2 <tr_find_character+0x8a>
      }
    } else {	// pat->type == 2  range
      if( pat->ch[0] <= ch && ch <= pat->ch[1] ) ret = n_sum + ch - pat->ch[0];
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	7a1b      	ldrb	r3, [r3, #8]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	db0c      	blt.n	8008ad2 <tr_find_character+0x8a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7a5b      	ldrb	r3, [r3, #9]
 8008abc:	461a      	mov	r2, r3
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	dc06      	bgt.n	8008ad2 <tr_find_character+0x8a>
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	4413      	add	r3, r2
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	7a12      	ldrb	r2, [r2, #8]
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]
    }
    n_sum += pat->n;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	4413      	add	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
    pat = pat->next;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	607b      	str	r3, [r7, #4]
  while( pat != NULL ) {
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1c0      	bne.n	8008a6e <tr_find_character+0x26>
  }

  if( flag_reverse ) {
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d008      	beq.n	8008b04 <tr_find_character+0xbc>
    return (ret < 0) ? INT_MAX : -1;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	da02      	bge.n	8008afe <tr_find_character+0xb6>
 8008af8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008afc:	e003      	b.n	8008b06 <tr_find_character+0xbe>
 8008afe:	f04f 33ff 	mov.w	r3, #4294967295
 8008b02:	e000      	b.n	8008b06 <tr_find_character+0xbe>
  }
  return ret;
 8008b04:	697b      	ldr	r3, [r7, #20]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <tr_get_character>:

static int tr_get_character( const struct tr_pattern *pat, int n_th )
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  int n_sum = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]
  while( pat != NULL ) {
 8008b20:	e039      	b.n	8008b96 <tr_get_character+0x84>
    if( n_th < (n_sum + pat->n) ) {
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	da13      	bge.n	8008b5c <tr_get_character+0x4a>
      int i = (n_th - n_sum);
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	60bb      	str	r3, [r7, #8]
      return (pat->type == 1) ? pat->ch[i] :pat->ch[0] + i;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d105      	bne.n	8008b50 <tr_get_character+0x3e>
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	4413      	add	r3, r2
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	e027      	b.n	8008ba0 <tr_get_character+0x8e>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	7a1b      	ldrb	r3, [r3, #8]
 8008b54:	461a      	mov	r2, r3
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	e021      	b.n	8008ba0 <tr_get_character+0x8e>
    }
    if( pat->next == NULL ) {
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10e      	bne.n	8008b82 <tr_get_character+0x70>
      return (pat->type == 1) ? pat->ch[pat->n - 1] : pat->ch[1];
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d107      	bne.n	8008b7c <tr_get_character+0x6a>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	4413      	add	r3, r2
 8008b78:	7a1b      	ldrb	r3, [r3, #8]
 8008b7a:	e011      	b.n	8008ba0 <tr_get_character+0x8e>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7a5b      	ldrb	r3, [r3, #9]
 8008b80:	e00e      	b.n	8008ba0 <tr_get_character+0x8e>
    }
    n_sum += pat->n;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]
    pat = pat->next;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	607b      	str	r3, [r7, #4]
  while( pat != NULL ) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1c2      	bne.n	8008b22 <tr_get_character+0x10>
  }

  return -1;
 8008b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <tr_main>:

static int tr_main( struct VM *vm, mrbc_value v[], int argc )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08c      	sub	sp, #48	; 0x30
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  if( !(argc == 2 && mrbc_type(v[1]) == MRBC_TT_STRING &&
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d10b      	bne.n	8008bd6 <tr_main+0x2a>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8008bc6:	2b0b      	cmp	r3, #11
 8008bc8:	d105      	bne.n	8008bd6 <tr_main+0x2a>
	             mrbc_type(v[2]) == MRBC_TT_STRING)) {
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	3320      	adds	r3, #32
 8008bce:	f993 3000 	ldrsb.w	r3, [r3]
  if( !(argc == 2 && mrbc_type(v[1]) == MRBC_TT_STRING &&
 8008bd2:	2b0b      	cmp	r3, #11
 8008bd4:	d007      	beq.n	8008be6 <tr_main+0x3a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	493b      	ldr	r1, [pc, #236]	; (8008cc8 <tr_main+0x11c>)
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f002 fc24 	bl	800b428 <mrbc_raise>
    return -1;
 8008be0:	f04f 33ff 	mov.w	r3, #4294967295
 8008be4:	e06c      	b.n	8008cc0 <tr_main+0x114>
  }

  struct tr_pattern *pat = tr_parse_pattern( vm, &v[1], 1 );
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	3310      	adds	r3, #16
 8008bea:	2201      	movs	r2, #1
 8008bec:	4619      	mov	r1, r3
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f7ff fe65 	bl	80088be <tr_parse_pattern>
 8008bf4:	6238      	str	r0, [r7, #32]
  if( pat == NULL ) return 0;
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <tr_main+0x54>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e05f      	b.n	8008cc0 <tr_main+0x114>

  struct tr_pattern *rep = tr_parse_pattern( vm, &v[2], 0 );
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	3320      	adds	r3, #32
 8008c04:	2200      	movs	r2, #0
 8008c06:	4619      	mov	r1, r3
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f7ff fe58 	bl	80088be <tr_parse_pattern>
 8008c0e:	61f8      	str	r0, [r7, #28]

  int flag_changed = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  char *s = mrbc_string_cstr( &v[0] );
 8008c14:	68b8      	ldr	r0, [r7, #8]
 8008c16:	f7fe fa7c 	bl	8007112 <mrbc_string_cstr>
 8008c1a:	61b8      	str	r0, [r7, #24]
  int len = mrbc_string_size( &v[0] );
 8008c1c:	68b8      	ldr	r0, [r7, #8]
 8008c1e:	f7fe fa6b 	bl	80070f8 <mrbc_string_size>
 8008c22:	62b8      	str	r0, [r7, #40]	; 0x28
  int i;
  for( i = 0; i < len; i++ ) {
 8008c24:	2300      	movs	r3, #0
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
 8008c28:	e033      	b.n	8008c92 <tr_main+0xe6>
    int n = tr_find_character( pat, s[i] );
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4413      	add	r3, r2
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6a38      	ldr	r0, [r7, #32]
 8008c36:	f7ff ff07 	bl	8008a48 <tr_find_character>
 8008c3a:	6178      	str	r0, [r7, #20]
    if( n < 0 ) continue;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	db23      	blt.n	8008c8a <tr_main+0xde>

    flag_changed = 1;
 8008c42:	2301      	movs	r3, #1
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( rep == NULL ) {
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d113      	bne.n	8008c74 <tr_main+0xc8>
      memmove( s + i, s + i + 1, len - i );
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	18d0      	adds	r0, r2, r3
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	3301      	adds	r3, #1
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	18d1      	adds	r1, r2, r3
 8008c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	f00d fd14 	bl	801668e <memmove>
      len--;
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	62bb      	str	r3, [r7, #40]	; 0x28
      i--;
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
 8008c72:	e00b      	b.n	8008c8c <tr_main+0xe0>
    } else {
      s[i] = tr_get_character( rep, n );
 8008c74:	6979      	ldr	r1, [r7, #20]
 8008c76:	69f8      	ldr	r0, [r7, #28]
 8008c78:	f7ff ff4b 	bl	8008b12 <tr_get_character>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	4413      	add	r3, r2
 8008c84:	b2ca      	uxtb	r2, r1
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	e000      	b.n	8008c8c <tr_main+0xe0>
    if( n < 0 ) continue;
 8008c8a:	bf00      	nop
  for( i = 0; i < len; i++ ) {
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	3301      	adds	r3, #1
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
 8008c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	429a      	cmp	r2, r3
 8008c98:	dbc7      	blt.n	8008c2a <tr_main+0x7e>
    }
  }

  tr_free_pattern( pat );
 8008c9a:	6a38      	ldr	r0, [r7, #32]
 8008c9c:	f7ff fdfa 	bl	8008894 <tr_free_pattern>
  tr_free_pattern( rep );
 8008ca0:	69f8      	ldr	r0, [r7, #28]
 8008ca2:	f7ff fdf7 	bl	8008894 <tr_free_pattern>

  v[0].string->size = len;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cac:	b292      	uxth	r2, r2
 8008cae:	809a      	strh	r2, [r3, #4]
  v[0].string->data[len] = 0;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	4413      	add	r3, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]

  return flag_changed;
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3730      	adds	r7, #48	; 0x30
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	20000154 	.word	0x20000154

08008ccc <c_string_tr>:

static void c_string_tr(struct VM *vm, mrbc_value v[], int argc)
{
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b08d      	sub	sp, #52	; 0x34
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup( vm, &v[0] );
 8008cd8:	f107 0320 	add.w	r3, r7, #32
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fb2c 	bl	800733e <mrbc_string_dup>
  SET_RETURN( ret );
 8008ce6:	f107 0410 	add.w	r4, r7, #16
 8008cea:	f107 0320 	add.w	r3, r7, #32
 8008cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008cf4:	68b8      	ldr	r0, [r7, #8]
 8008cf6:	f7fe f9a1 	bl	800703c <mrbc_decref>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	461c      	mov	r4, r3
 8008cfe:	f107 0310 	add.w	r3, r7, #16
 8008d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  tr_main(vm, v, argc);
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff ff4d 	bl	8008bac <tr_main>
}
 8008d12:	bf00      	nop
 8008d14:	3734      	adds	r7, #52	; 0x34
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd90      	pop	{r4, r7, pc}

08008d1a <c_string_tr_self>:

//================================================================
/*! (method) tr!
*/
static void c_string_tr_self(struct VM *vm, mrbc_value v[], int argc)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b086      	sub	sp, #24
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	60f8      	str	r0, [r7, #12]
 8008d22:	60b9      	str	r1, [r7, #8]
 8008d24:	607a      	str	r2, [r7, #4]
  int flag_changed = tr_main(vm, v, argc);
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f7ff ff3e 	bl	8008bac <tr_main>
 8008d30:	6178      	str	r0, [r7, #20]

  if( !flag_changed ) {
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d105      	bne.n	8008d44 <c_string_tr_self+0x2a>
    SET_NIL_RETURN();
 8008d38:	68b8      	ldr	r0, [r7, #8]
 8008d3a:	f7fe f97f 	bl	800703c <mrbc_decref>
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2201      	movs	r2, #1
 8008d42:	701a      	strb	r2, [r3, #0]
  }
}
 8008d44:	bf00      	nop
 8008d46:	3718      	adds	r7, #24
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <c_string_start_with>:

//================================================================
/*! (method) start_with?
*/
static void c_string_start_with(struct VM *vm, mrbc_value v[], int argc)
{
 8008d4c:	b5b0      	push	{r4, r5, r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  if( !(argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING)) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d105      	bne.n	8008d6a <c_string_start_with+0x1e>
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	3310      	adds	r3, #16
 8008d62:	f993 3000 	ldrsb.w	r3, [r3]
 8008d66:	2b0b      	cmp	r3, #11
 8008d68:	d005      	beq.n	8008d76 <c_string_start_with+0x2a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4920      	ldr	r1, [pc, #128]	; (8008df0 <c_string_start_with+0xa4>)
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f002 fb5a 	bl	800b428 <mrbc_raise>
    return;
 8008d74:	e038      	b.n	8008de8 <c_string_start_with+0x9c>
  }

  int ret;
  if( mrbc_string_size(&v[0]) < mrbc_string_size(&v[1]) ) {
 8008d76:	68b8      	ldr	r0, [r7, #8]
 8008d78:	f7fe f9be 	bl	80070f8 <mrbc_string_size>
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	3310      	adds	r3, #16
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe f9b8 	bl	80070f8 <mrbc_string_size>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	429c      	cmp	r4, r3
 8008d8c:	da02      	bge.n	8008d94 <c_string_start_with+0x48>
    ret = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	e01b      	b.n	8008dcc <c_string_start_with+0x80>
  } else {
    ret = (memcmp( mrbc_string_cstr(&v[0]), mrbc_string_cstr(&v[1]),
 8008d94:	68b8      	ldr	r0, [r7, #8]
 8008d96:	f7fe f9bc 	bl	8007112 <mrbc_string_cstr>
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	3310      	adds	r3, #16
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe f9b6 	bl	8007112 <mrbc_string_cstr>
 8008da6:	4605      	mov	r5, r0
		   mrbc_string_size(&v[1]) ) == 0);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	3310      	adds	r3, #16
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe f9a3 	bl	80070f8 <mrbc_string_size>
 8008db2:	4603      	mov	r3, r0
    ret = (memcmp( mrbc_string_cstr(&v[0]), mrbc_string_cstr(&v[1]),
 8008db4:	461a      	mov	r2, r3
 8008db6:	4629      	mov	r1, r5
 8008db8:	4620      	mov	r0, r4
 8008dba:	f00d fc58 	bl	801666e <memcmp>
 8008dbe:	4603      	mov	r3, r0
		   mrbc_string_size(&v[1]) ) == 0);
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	bf0c      	ite	eq
 8008dc4:	2301      	moveq	r3, #1
 8008dc6:	2300      	movne	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
    ret = (memcmp( mrbc_string_cstr(&v[0]), mrbc_string_cstr(&v[1]),
 8008dca:	617b      	str	r3, [r7, #20]
  }

  SET_BOOL_RETURN(ret);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <c_string_start_with+0x8a>
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e000      	b.n	8008dd8 <c_string_start_with+0x8c>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	68b8      	ldr	r0, [r7, #8]
 8008ddc:	f7fe f92e 	bl	800703c <mrbc_decref>
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	b25a      	sxtb	r2, r3
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	701a      	strb	r2, [r3, #0]
}
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bdb0      	pop	{r4, r5, r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20000154 	.word	0x20000154

08008df4 <c_string_end_with>:

//================================================================
/*! (method) end_with?
*/
static void c_string_end_with(struct VM *vm, mrbc_value v[], int argc)
{
 8008df4:	b5b0      	push	{r4, r5, r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  if( !(argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING)) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d105      	bne.n	8008e12 <c_string_end_with+0x1e>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	3310      	adds	r3, #16
 8008e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8008e0e:	2b0b      	cmp	r3, #11
 8008e10:	d005      	beq.n	8008e1e <c_string_end_with+0x2a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008e12:	2200      	movs	r2, #0
 8008e14:	4922      	ldr	r1, [pc, #136]	; (8008ea0 <c_string_end_with+0xac>)
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f002 fb06 	bl	800b428 <mrbc_raise>
    return;
 8008e1c:	e03d      	b.n	8008e9a <c_string_end_with+0xa6>
  }

  int ret;
  int offset = mrbc_string_size(&v[0]) - mrbc_string_size(&v[1]);
 8008e1e:	68b8      	ldr	r0, [r7, #8]
 8008e20:	f7fe f96a 	bl	80070f8 <mrbc_string_size>
 8008e24:	4604      	mov	r4, r0
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	3310      	adds	r3, #16
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe f964 	bl	80070f8 <mrbc_string_size>
 8008e30:	4603      	mov	r3, r0
 8008e32:	1ae3      	subs	r3, r4, r3
 8008e34:	61bb      	str	r3, [r7, #24]
  if( offset < 0 ) {
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	da02      	bge.n	8008e42 <c_string_end_with+0x4e>
    ret = 0;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61fb      	str	r3, [r7, #28]
 8008e40:	e01d      	b.n	8008e7e <c_string_end_with+0x8a>
  } else {
    ret = (memcmp( mrbc_string_cstr(&v[0]) + offset, mrbc_string_cstr(&v[1]),
 8008e42:	68b8      	ldr	r0, [r7, #8]
 8008e44:	f7fe f965 	bl	8007112 <mrbc_string_cstr>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	18d4      	adds	r4, r2, r3
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	3310      	adds	r3, #16
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe f95d 	bl	8007112 <mrbc_string_cstr>
 8008e58:	4605      	mov	r5, r0
		   mrbc_string_size(&v[1]) ) == 0);
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	3310      	adds	r3, #16
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe f94a 	bl	80070f8 <mrbc_string_size>
 8008e64:	4603      	mov	r3, r0
    ret = (memcmp( mrbc_string_cstr(&v[0]) + offset, mrbc_string_cstr(&v[1]),
 8008e66:	461a      	mov	r2, r3
 8008e68:	4629      	mov	r1, r5
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f00d fbff 	bl	801666e <memcmp>
 8008e70:	4603      	mov	r3, r0
		   mrbc_string_size(&v[1]) ) == 0);
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf0c      	ite	eq
 8008e76:	2301      	moveq	r3, #1
 8008e78:	2300      	movne	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
    ret = (memcmp( mrbc_string_cstr(&v[0]) + offset, mrbc_string_cstr(&v[1]),
 8008e7c:	61fb      	str	r3, [r7, #28]
  }

  SET_BOOL_RETURN(ret);
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <c_string_end_with+0x94>
 8008e84:	2303      	movs	r3, #3
 8008e86:	e000      	b.n	8008e8a <c_string_end_with+0x96>
 8008e88:	2302      	movs	r3, #2
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	68b8      	ldr	r0, [r7, #8]
 8008e8e:	f7fe f8d5 	bl	800703c <mrbc_decref>
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	b25a      	sxtb	r2, r3
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	701a      	strb	r2, [r3, #0]
}
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8008ea0:	20000154 	.word	0x20000154

08008ea4 <c_string_include>:

//================================================================
/*! (method) include?
*/
static void c_string_include(struct VM *vm, mrbc_value v[], int argc)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  if( !(argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING)) {
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d105      	bne.n	8008ec2 <c_string_include+0x1e>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	3310      	adds	r3, #16
 8008eba:	f993 3000 	ldrsb.w	r3, [r3]
 8008ebe:	2b0b      	cmp	r3, #11
 8008ec0:	d005      	beq.n	8008ece <c_string_include+0x2a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	490e      	ldr	r1, [pc, #56]	; (8008f00 <c_string_include+0x5c>)
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f002 faae 	bl	800b428 <mrbc_raise>
    return;
 8008ecc:	e015      	b.n	8008efa <c_string_include+0x56>
  }

  int ret = mrbc_string_index( &v[0], &v[1], 0 );
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	3310      	adds	r3, #16
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	68b8      	ldr	r0, [r7, #8]
 8008ed8:	f7fe fb49 	bl	800756e <mrbc_string_index>
 8008edc:	6178      	str	r0, [r7, #20]
  SET_BOOL_RETURN(ret >= 0);
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	db01      	blt.n	8008ee8 <c_string_include+0x44>
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e000      	b.n	8008eea <c_string_include+0x46>
 8008ee8:	2302      	movs	r3, #2
 8008eea:	613b      	str	r3, [r7, #16]
 8008eec:	68b8      	ldr	r0, [r7, #8]
 8008eee:	f7fe f8a5 	bl	800703c <mrbc_decref>
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	b25a      	sxtb	r2, r3
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	701a      	strb	r2, [r3, #0]
}
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20000154 	.word	0x20000154

08008f04 <c_string_bytes>:

//================================================================
/*! (method) bytes
*/
static void c_string_bytes(struct VM *vm, mrbc_value v[], int argc)
{
 8008f04:	b590      	push	{r4, r7, lr}
 8008f06:	b093      	sub	sp, #76	; 0x4c
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
  /*
   * Note: This String#bytes doesn't support taking a block parameter.
   *       Use String#each_byte instead.
   */
  int len = mrbc_string_size(&v[0]);
 8008f10:	68b8      	ldr	r0, [r7, #8]
 8008f12:	f7fe f8f1 	bl	80070f8 <mrbc_string_size>
 8008f16:	6438      	str	r0, [r7, #64]	; 0x40
  mrbc_value ret = mrbc_array_new(vm, len);
 8008f18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f1e:	68f9      	ldr	r1, [r7, #12]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7f9 fa18 	bl	8002356 <mrbc_array_new>
  int i;
  for (i = 0; i < len; i++) {
 8008f26:	2300      	movs	r3, #0
 8008f28:	647b      	str	r3, [r7, #68]	; 0x44
 8008f2a:	e01b      	b.n	8008f64 <c_string_bytes+0x60>
    mrbc_array_set(&ret, i, &mrbc_integer_value(v[0].string->data[i]));
 8008f2c:	f107 0320 	add.w	r3, r7, #32
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	609a      	str	r2, [r3, #8]
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	2304      	movs	r3, #4
 8008f3c:	f887 3020 	strb.w	r3, [r7, #32]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	689a      	ldr	r2, [r3, #8]
 8008f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f48:	4413      	add	r3, r2
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f4e:	f107 0220 	add.w	r2, r7, #32
 8008f52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7f9 fa93 	bl	8002484 <mrbc_array_set>
  for (i = 0; i < len; i++) {
 8008f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f60:	3301      	adds	r3, #1
 8008f62:	647b      	str	r3, [r7, #68]	; 0x44
 8008f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	dbdf      	blt.n	8008f2c <c_string_bytes+0x28>
  }
  SET_RETURN(ret);
 8008f6c:	f107 0410 	add.w	r4, r7, #16
 8008f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008f7a:	68b8      	ldr	r0, [r7, #8]
 8008f7c:	f7fe f85e 	bl	800703c <mrbc_decref>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	461c      	mov	r4, r3
 8008f84:	f107 0310 	add.w	r3, r7, #16
 8008f88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8008f8e:	bf00      	nop
 8008f90:	374c      	adds	r7, #76	; 0x4c
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd90      	pop	{r4, r7, pc}

08008f96 <c_string_upcase>:

//================================================================
/*! (method) upcase
*/
static void c_string_upcase(struct VM *vm, mrbc_value v[], int argc)
{
 8008f96:	b590      	push	{r4, r7, lr}
 8008f98:	b08d      	sub	sp, #52	; 0x34
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8008fa2:	f107 0320 	add.w	r3, r7, #32
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	68f9      	ldr	r1, [r7, #12]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe f9c7 	bl	800733e <mrbc_string_dup>
  mrbc_string_upcase(&ret);
 8008fb0:	f107 0320 	add.w	r3, r7, #32
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe fbcf 	bl	8007758 <mrbc_string_upcase>
  SET_RETURN(ret);
 8008fba:	f107 0410 	add.w	r4, r7, #16
 8008fbe:	f107 0320 	add.w	r3, r7, #32
 8008fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008fc8:	68b8      	ldr	r0, [r7, #8]
 8008fca:	f7fe f837 	bl	800703c <mrbc_decref>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	461c      	mov	r4, r3
 8008fd2:	f107 0310 	add.w	r3, r7, #16
 8008fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8008fdc:	bf00      	nop
 8008fde:	3734      	adds	r7, #52	; 0x34
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd90      	pop	{r4, r7, pc}

08008fe4 <c_string_upcase_self>:

//================================================================
/*! (method) upcase!
*/
static void c_string_upcase_self(struct VM *vm, mrbc_value v[], int argc)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  if (mrbc_string_upcase(&v[0]) == 0) {
 8008ff0:	68b8      	ldr	r0, [r7, #8]
 8008ff2:	f7fe fbb1 	bl	8007758 <mrbc_string_upcase>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <c_string_upcase_self+0x24>
    SET_NIL_RETURN();
 8008ffc:	68b8      	ldr	r0, [r7, #8]
 8008ffe:	f7fe f81d 	bl	800703c <mrbc_decref>
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2201      	movs	r2, #1
 8009006:	701a      	strb	r2, [r3, #0]
  }
}
 8009008:	bf00      	nop
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <c_string_downcase>:

//================================================================
/*! (method) downcase
*/
static void c_string_downcase(struct VM *vm, mrbc_value v[], int argc)
{
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b08d      	sub	sp, #52	; 0x34
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 800901c:	f107 0320 	add.w	r3, r7, #32
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	68f9      	ldr	r1, [r7, #12]
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe f98a 	bl	800733e <mrbc_string_dup>
  mrbc_string_downcase(&ret);
 800902a:	f107 0320 	add.w	r3, r7, #32
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fbc7 	bl	80077c2 <mrbc_string_downcase>
  SET_RETURN(ret);
 8009034:	f107 0410 	add.w	r4, r7, #16
 8009038:	f107 0320 	add.w	r3, r7, #32
 800903c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800903e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009042:	68b8      	ldr	r0, [r7, #8]
 8009044:	f7fd fffa 	bl	800703c <mrbc_decref>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	461c      	mov	r4, r3
 800904c:	f107 0310 	add.w	r3, r7, #16
 8009050:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009052:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009056:	bf00      	nop
 8009058:	3734      	adds	r7, #52	; 0x34
 800905a:	46bd      	mov	sp, r7
 800905c:	bd90      	pop	{r4, r7, pc}

0800905e <c_string_downcase_self>:

//================================================================
/*! (method) downcase!
*/
static void c_string_downcase_self(struct VM *vm, mrbc_value v[], int argc)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	607a      	str	r2, [r7, #4]
  if (mrbc_string_downcase(&v[0]) == 0) {
 800906a:	68b8      	ldr	r0, [r7, #8]
 800906c:	f7fe fba9 	bl	80077c2 <mrbc_string_downcase>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d105      	bne.n	8009082 <c_string_downcase_self+0x24>
    SET_NIL_RETURN();
 8009076:	68b8      	ldr	r0, [r7, #8]
 8009078:	f7fd ffe0 	bl	800703c <mrbc_decref>
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2201      	movs	r2, #1
 8009080:	701a      	strb	r2, [r3, #0]
  }
}
 8009082:	bf00      	nop
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
	...

0800908c <mrbc_incref>:
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f993 3000 	ldrsb.w	r3, [r3]
 800909a:	2b07      	cmp	r3, #7
 800909c:	dd1e      	ble.n	80090dc <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	885b      	ldrh	r3, [r3, #2]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d106      	bne.n	80090b6 <mrbc_incref+0x2a>
 80090a8:	4b0e      	ldr	r3, [pc, #56]	; (80090e4 <mrbc_incref+0x58>)
 80090aa:	4a0f      	ldr	r2, [pc, #60]	; (80090e8 <mrbc_incref+0x5c>)
 80090ac:	f240 11c3 	movw	r1, #451	; 0x1c3
 80090b0:	480e      	ldr	r0, [pc, #56]	; (80090ec <mrbc_incref+0x60>)
 80090b2:	f00c fac7 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	885b      	ldrh	r3, [r3, #2]
 80090bc:	2bff      	cmp	r3, #255	; 0xff
 80090be:	d106      	bne.n	80090ce <mrbc_incref+0x42>
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <mrbc_incref+0x64>)
 80090c2:	4a09      	ldr	r2, [pc, #36]	; (80090e8 <mrbc_incref+0x5c>)
 80090c4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80090c8:	4808      	ldr	r0, [pc, #32]	; (80090ec <mrbc_incref+0x60>)
 80090ca:	f00c fabb 	bl	8015644 <__assert_func>
  v->obj->ref_count++;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	885a      	ldrh	r2, [r3, #2]
 80090d4:	3201      	adds	r2, #1
 80090d6:	b292      	uxth	r2, r2
 80090d8:	805a      	strh	r2, [r3, #2]
 80090da:	e000      	b.n	80090de <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80090dc:	bf00      	nop
}
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	080190fc 	.word	0x080190fc
 80090e8:	0801ae48 	.word	0x0801ae48
 80090ec:	08019114 	.word	0x08019114
 80090f0:	08019130 	.word	0x08019130

080090f4 <mrbc_decref>:
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f993 3000 	ldrsb.w	r3, [r3]
 8009102:	2b07      	cmp	r3, #7
 8009104:	dd2c      	ble.n	8009160 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	885b      	ldrh	r3, [r3, #2]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d106      	bne.n	800911e <mrbc_decref+0x2a>
 8009110:	4b16      	ldr	r3, [pc, #88]	; (800916c <mrbc_decref+0x78>)
 8009112:	4a17      	ldr	r2, [pc, #92]	; (8009170 <mrbc_decref+0x7c>)
 8009114:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8009118:	4816      	ldr	r0, [pc, #88]	; (8009174 <mrbc_decref+0x80>)
 800911a:	f00c fa93 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	885b      	ldrh	r3, [r3, #2]
 8009124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009128:	4293      	cmp	r3, r2
 800912a:	d106      	bne.n	800913a <mrbc_decref+0x46>
 800912c:	4b12      	ldr	r3, [pc, #72]	; (8009178 <mrbc_decref+0x84>)
 800912e:	4a10      	ldr	r2, [pc, #64]	; (8009170 <mrbc_decref+0x7c>)
 8009130:	f240 11d3 	movw	r1, #467	; 0x1d3
 8009134:	480f      	ldr	r0, [pc, #60]	; (8009174 <mrbc_decref+0x80>)
 8009136:	f00c fa85 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	885a      	ldrh	r2, [r3, #2]
 8009140:	3a01      	subs	r2, #1
 8009142:	b292      	uxth	r2, r2
 8009144:	805a      	strh	r2, [r3, #2]
 8009146:	885b      	ldrh	r3, [r3, #2]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10b      	bne.n	8009164 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f993 3000 	ldrsb.w	r3, [r3]
 8009152:	461a      	mov	r2, r3
 8009154:	4b09      	ldr	r3, [pc, #36]	; (800917c <mrbc_decref+0x88>)
 8009156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
 800915e:	e002      	b.n	8009166 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8009160:	bf00      	nop
 8009162:	e000      	b.n	8009166 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8009164:	bf00      	nop
}
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	080190fc 	.word	0x080190fc
 8009170:	0801ae6c 	.word	0x0801ae6c
 8009174:	08019114 	.word	0x08019114
 8009178:	0801914c 	.word	0x0801914c
 800917c:	0801be98 	.word	0x0801be98

08009180 <find_class_by_object>:
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  assert( mrbc_type(*obj) >= 0 );
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f993 3000 	ldrsb.w	r3, [r3]
 800918e:	2b00      	cmp	r3, #0
 8009190:	da05      	bge.n	800919e <find_class_by_object+0x1e>
 8009192:	4b20      	ldr	r3, [pc, #128]	; (8009214 <find_class_by_object+0x94>)
 8009194:	4a20      	ldr	r2, [pc, #128]	; (8009218 <find_class_by_object+0x98>)
 8009196:	21bf      	movs	r1, #191	; 0xbf
 8009198:	4820      	ldr	r0, [pc, #128]	; (800921c <find_class_by_object+0x9c>)
 800919a:	f00c fa53 	bl	8015644 <__assert_func>
  assert( mrbc_type(*obj) <= MRBC_TT_MAXVAL );
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f993 3000 	ldrsb.w	r3, [r3]
 80091a4:	2b0e      	cmp	r3, #14
 80091a6:	dd05      	ble.n	80091b4 <find_class_by_object+0x34>
 80091a8:	4b1d      	ldr	r3, [pc, #116]	; (8009220 <find_class_by_object+0xa0>)
 80091aa:	4a1b      	ldr	r2, [pc, #108]	; (8009218 <find_class_by_object+0x98>)
 80091ac:	21c0      	movs	r1, #192	; 0xc0
 80091ae:	481b      	ldr	r0, [pc, #108]	; (800921c <find_class_by_object+0x9c>)
 80091b0:	f00c fa48 	bl	8015644 <__assert_func>
  mrbc_class *cls = mrbc_class_tbl[ mrbc_type(*obj) ];
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f993 3000 	ldrsb.w	r3, [r3]
 80091ba:	461a      	mov	r2, r3
 80091bc:	4b19      	ldr	r3, [pc, #100]	; (8009224 <find_class_by_object+0xa4>)
 80091be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c2:	60fb      	str	r3, [r7, #12]
  if( !cls ) {
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d11f      	bne.n	800920a <find_class_by_object+0x8a>
    switch( mrbc_type(*obj) ) {
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f993 3000 	ldrsb.w	r3, [r3]
 80091d0:	2b0e      	cmp	r3, #14
 80091d2:	d00f      	beq.n	80091f4 <find_class_by_object+0x74>
 80091d4:	2b0e      	cmp	r3, #14
 80091d6:	dc12      	bgt.n	80091fe <find_class_by_object+0x7e>
 80091d8:	2b07      	cmp	r3, #7
 80091da:	d002      	beq.n	80091e2 <find_class_by_object+0x62>
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d004      	beq.n	80091ea <find_class_by_object+0x6a>
 80091e0:	e00d      	b.n	80091fe <find_class_by_object+0x7e>
    case MRBC_TT_CLASS:		cls = obj->cls;			break;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	e00f      	b.n	800920a <find_class_by_object+0x8a>
    case MRBC_TT_OBJECT:	cls = obj->instance->cls;	break;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	e00a      	b.n	800920a <find_class_by_object+0x8a>
    case MRBC_TT_EXCEPTION:	cls = obj->exception->cls;	break;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	e005      	b.n	800920a <find_class_by_object+0x8a>
      assert(!"Invalid value type.");
 80091fe:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <find_class_by_object+0xa8>)
 8009200:	4a05      	ldr	r2, [pc, #20]	; (8009218 <find_class_by_object+0x98>)
 8009202:	21c9      	movs	r1, #201	; 0xc9
 8009204:	4805      	ldr	r0, [pc, #20]	; (800921c <find_class_by_object+0x9c>)
 8009206:	f00c fa1d 	bl	8015644 <__assert_func>
  return cls;
 800920a:	68fb      	ldr	r3, [r7, #12]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	08019168 	.word	0x08019168
 8009218:	0801ae54 	.word	0x0801ae54
 800921c:	08019180 	.word	0x08019180
 8009220:	0801919c 	.word	0x0801919c
 8009224:	0801adf4 	.word	0x0801adf4
 8009228:	080191c0 	.word	0x080191c0

0800922c <mrbc_define_class>:
  @param  name		class name.
  @param  super		super class.
  @return		pointer to defined class.
*/
mrbc_class * mrbc_define_class(struct VM *vm, const char *name, mrbc_class *super)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08c      	sub	sp, #48	; 0x30
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
  mrbc_sym sym_id = mrbc_str_to_symid(name);
 8009238:	68b8      	ldr	r0, [r7, #8]
 800923a:	f004 fcc9 	bl	800dbd0 <mrbc_str_to_symid>
 800923e:	4603      	mov	r3, r0
 8009240:	85fb      	strh	r3, [r7, #46]	; 0x2e
  if( sym_id < 0 ) {
 8009242:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009246:	2b00      	cmp	r3, #0
 8009248:	da06      	bge.n	8009258 <mrbc_define_class+0x2c>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 800924a:	4a29      	ldr	r2, [pc, #164]	; (80092f0 <mrbc_define_class+0xc4>)
 800924c:	4929      	ldr	r1, [pc, #164]	; (80092f4 <mrbc_define_class+0xc8>)
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f002 f8ea 	bl	800b428 <mrbc_raise>
    return 0;
 8009254:	2300      	movs	r3, #0
 8009256:	e047      	b.n	80092e8 <mrbc_define_class+0xbc>
  }

  // already defined?
  const mrbc_value *val = mrbc_get_const(sym_id);
 8009258:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800925c:	4618      	mov	r0, r3
 800925e:	f002 fb23 	bl	800b8a8 <mrbc_get_const>
 8009262:	62b8      	str	r0, [r7, #40]	; 0x28
  if( val ) {
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00d      	beq.n	8009286 <mrbc_define_class+0x5a>
    if( mrbc_type(*val) != MRBC_TT_CLASS ) {
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	f993 3000 	ldrsb.w	r3, [r3]
 8009270:	2b07      	cmp	r3, #7
 8009272:	d005      	beq.n	8009280 <mrbc_define_class+0x54>
      mrbc_raisef(vm, MRBC_CLASS(TypeError), "%s is not a class", name);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	4a20      	ldr	r2, [pc, #128]	; (80092f8 <mrbc_define_class+0xcc>)
 8009278:	4920      	ldr	r1, [pc, #128]	; (80092fc <mrbc_define_class+0xd0>)
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f002 f928 	bl	800b4d0 <mrbc_raisef>
    }
    return val->cls;
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	e030      	b.n	80092e8 <mrbc_define_class+0xbc>
  }

  // create a new class.
  mrbc_class *cls = mrbc_raw_alloc_no_free( sizeof(mrbc_class) );
 8009286:	2010      	movs	r0, #16
 8009288:	f7f8 fd7e 	bl	8001d88 <mrbc_raw_alloc_no_free>
 800928c:	6278      	str	r0, [r7, #36]	; 0x24
  if( !cls ) return cls;	// ENOMEM
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <mrbc_define_class+0x6c>
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	e027      	b.n	80092e8 <mrbc_define_class+0xbc>

  cls->sym_id = sym_id;
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800929c:	801a      	strh	r2, [r3, #0]
  cls->num_builtin_method = 0;
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	2200      	movs	r2, #0
 80092a2:	805a      	strh	r2, [r3, #2]
  cls->super = super ? super : mrbc_class_object;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <mrbc_define_class+0x82>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	e000      	b.n	80092b0 <mrbc_define_class+0x84>
 80092ae:	4b14      	ldr	r3, [pc, #80]	; (8009300 <mrbc_define_class+0xd4>)
 80092b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b2:	6053      	str	r3, [r2, #4]
  cls->method_link = 0;
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	2200      	movs	r2, #0
 80092b8:	609a      	str	r2, [r3, #8]
#if defined(MRBC_DEBUG)
  cls->name = name;
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	60da      	str	r2, [r3, #12]
#endif

  // register to global constant
  mrbc_set_const( sym_id, &(mrbc_value){.tt = MRBC_TT_CLASS, .cls = cls});
 80092c0:	f107 0310 	add.w	r3, r7, #16
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	605a      	str	r2, [r3, #4]
 80092ca:	609a      	str	r2, [r3, #8]
 80092cc:	60da      	str	r2, [r3, #12]
 80092ce:	2307      	movs	r3, #7
 80092d0:	743b      	strb	r3, [r7, #16]
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	61bb      	str	r3, [r7, #24]
 80092d6:	f107 0210 	add.w	r2, r7, #16
 80092da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80092de:	4611      	mov	r1, r2
 80092e0:	4618      	mov	r0, r3
 80092e2:	f002 fa99 	bl	800b818 <mrbc_set_const>

  return cls;
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3730      	adds	r7, #48	; 0x30
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	080191d8 	.word	0x080191d8
 80092f4:	2000010c 	.word	0x2000010c
 80092f8:	080191f4 	.word	0x080191f4
 80092fc:	200001b4 	.word	0x200001b4
 8009300:	20000064 	.word	0x20000064

08009304 <mrbc_define_class_under>:
  @param  name		class name.
  @param  super		super class.
  @return		pointer to defined class.
*/
mrbc_class * mrbc_define_class_under(struct VM *vm, const mrbc_class *outer, const char *name, mrbc_class *super)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b094      	sub	sp, #80	; 0x50
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	603b      	str	r3, [r7, #0]
  mrbc_sym sym_id = mrbc_str_to_symid(name);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f004 fc5c 	bl	800dbd0 <mrbc_str_to_symid>
 8009318:	4603      	mov	r3, r0
 800931a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  if( sym_id < 0 ) {
 800931e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009322:	2b00      	cmp	r3, #0
 8009324:	da06      	bge.n	8009334 <mrbc_define_class_under+0x30>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 8009326:	4a33      	ldr	r2, [pc, #204]	; (80093f4 <mrbc_define_class_under+0xf0>)
 8009328:	4933      	ldr	r1, [pc, #204]	; (80093f8 <mrbc_define_class_under+0xf4>)
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f002 f87c 	bl	800b428 <mrbc_raise>
    return 0;
 8009330:	2300      	movs	r3, #0
 8009332:	e05b      	b.n	80093ec <mrbc_define_class_under+0xe8>
  }

  // already defined?
  const mrbc_value *val = mrbc_get_class_const( outer, sym_id );
 8009334:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009338:	4619      	mov	r1, r3
 800933a:	68b8      	ldr	r0, [r7, #8]
 800933c:	f002 fac6 	bl	800b8cc <mrbc_get_class_const>
 8009340:	64b8      	str	r0, [r7, #72]	; 0x48
  if( val ) {
 8009342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00d      	beq.n	8009364 <mrbc_define_class_under+0x60>
    assert( mrbc_type(*val) == MRBC_TT_CLASS );
 8009348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934a:	f993 3000 	ldrsb.w	r3, [r3]
 800934e:	2b07      	cmp	r3, #7
 8009350:	d005      	beq.n	800935e <mrbc_define_class_under+0x5a>
 8009352:	4b2a      	ldr	r3, [pc, #168]	; (80093fc <mrbc_define_class_under+0xf8>)
 8009354:	4a2a      	ldr	r2, [pc, #168]	; (8009400 <mrbc_define_class_under+0xfc>)
 8009356:	2188      	movs	r1, #136	; 0x88
 8009358:	482a      	ldr	r0, [pc, #168]	; (8009404 <mrbc_define_class_under+0x100>)
 800935a:	f00c f973 	bl	8015644 <__assert_func>
    return val->cls;
 800935e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	e043      	b.n	80093ec <mrbc_define_class_under+0xe8>
  }

  // create a new nested class.
  mrbc_class *cls = mrbc_raw_alloc_no_free( sizeof(mrbc_class) );
 8009364:	2010      	movs	r0, #16
 8009366:	f7f8 fd0f 	bl	8001d88 <mrbc_raw_alloc_no_free>
 800936a:	6478      	str	r0, [r7, #68]	; 0x44
  if( !cls ) return cls;	// ENOMEM
 800936c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <mrbc_define_class_under+0x72>
 8009372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009374:	e03a      	b.n	80093ec <mrbc_define_class_under+0xe8>

  char buf[sizeof(mrbc_sym)*4+1];
  make_nested_symbol_s( buf, outer->sym_id, sym_id );
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f9b3 1000 	ldrsh.w	r1, [r3]
 800937c:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8009380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009384:	4618      	mov	r0, r3
 8009386:	f004 fcbb 	bl	800dd00 <make_nested_symbol_s>

  cls->sym_id = mrbc_symbol( mrbc_symbol_new( vm, buf ));
 800938a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800938e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009392:	68f9      	ldr	r1, [r7, #12]
 8009394:	4618      	mov	r0, r3
 8009396:	f004 fd81 	bl	800de9c <mrbc_symbol_new>
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	b21a      	sxth	r2, r3
 800939e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a0:	801a      	strh	r2, [r3, #0]
  cls->num_builtin_method = 0;
 80093a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a4:	2200      	movs	r2, #0
 80093a6:	805a      	strh	r2, [r3, #2]
  cls->super = super ? super : mrbc_class_object;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <mrbc_define_class_under+0xae>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	e000      	b.n	80093b4 <mrbc_define_class_under+0xb0>
 80093b2:	4b15      	ldr	r3, [pc, #84]	; (8009408 <mrbc_define_class_under+0x104>)
 80093b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093b6:	6053      	str	r3, [r2, #4]
  cls->method_link = 0;
 80093b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ba:	2200      	movs	r2, #0
 80093bc:	609a      	str	r2, [r3, #8]
#if defined(MRBC_DEBUG)
  cls->name = name;
 80093be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	60da      	str	r2, [r3, #12]
#endif

  mrbc_set_class_const( outer, sym_id,
			&(mrbc_value){.tt = MRBC_TT_CLASS, .cls = cls});
 80093c4:	f107 0310 	add.w	r3, r7, #16
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	605a      	str	r2, [r3, #4]
 80093ce:	609a      	str	r2, [r3, #8]
 80093d0:	60da      	str	r2, [r3, #12]
 80093d2:	2307      	movs	r3, #7
 80093d4:	743b      	strb	r3, [r7, #16]
 80093d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d8:	61bb      	str	r3, [r7, #24]
  mrbc_set_class_const( outer, sym_id,
 80093da:	f107 0210 	add.w	r2, r7, #16
 80093de:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80093e2:	4619      	mov	r1, r3
 80093e4:	68b8      	ldr	r0, [r7, #8]
 80093e6:	f002 fa39 	bl	800b85c <mrbc_set_class_const>

  return cls;
 80093ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3750      	adds	r7, #80	; 0x50
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	080191d8 	.word	0x080191d8
 80093f8:	2000010c 	.word	0x2000010c
 80093fc:	08019208 	.word	0x08019208
 8009400:	0801ae30 	.word	0x0801ae30
 8009404:	0801922c 	.word	0x0801922c
 8009408:	20000064 	.word	0x20000064

0800940c <mrbc_define_method>:
  @param  cls		pointer to class.
  @param  name		method name.
  @param  cfunc		pointer to function.
*/
void mrbc_define_method(struct VM *vm, mrbc_class *cls, const char *name, mrbc_func_t cfunc)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
  if( cls == NULL ) cls = mrbc_class_object;	// set default to Object.
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <mrbc_define_method+0x18>
 8009420:	4b17      	ldr	r3, [pc, #92]	; (8009480 <mrbc_define_method+0x74>)
 8009422:	60bb      	str	r3, [r7, #8]

  mrbc_method *method = mrbc_raw_alloc_no_free( sizeof(mrbc_method) );
 8009424:	200c      	movs	r0, #12
 8009426:	f7f8 fcaf 	bl	8001d88 <mrbc_raw_alloc_no_free>
 800942a:	6178      	str	r0, [r7, #20]
  if( !method ) return; // ENOMEM
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d021      	beq.n	8009476 <mrbc_define_method+0x6a>

  method->type = 'm';
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	226d      	movs	r2, #109	; 0x6d
 8009436:	701a      	strb	r2, [r3, #0]
  method->c_func = 1;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2201      	movs	r2, #1
 800943c:	705a      	strb	r2, [r3, #1]
  method->sym_id = mrbc_str_to_symid( name );
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f004 fbc6 	bl	800dbd0 <mrbc_str_to_symid>
 8009444:	4603      	mov	r3, r0
 8009446:	461a      	mov	r2, r3
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	805a      	strh	r2, [r3, #2]
  if( method->sym_id < 0 ) {
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009452:	2b00      	cmp	r3, #0
 8009454:	da04      	bge.n	8009460 <mrbc_define_method+0x54>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 8009456:	4a0b      	ldr	r2, [pc, #44]	; (8009484 <mrbc_define_method+0x78>)
 8009458:	490b      	ldr	r1, [pc, #44]	; (8009488 <mrbc_define_method+0x7c>)
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f001 ffe4 	bl	800b428 <mrbc_raise>
  }
  method->func = cfunc;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	605a      	str	r2, [r3, #4]
  method->next = cls->method_link;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	609a      	str	r2, [r3, #8]
  cls->method_link = method;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	609a      	str	r2, [r3, #8]
 8009474:	e000      	b.n	8009478 <mrbc_define_method+0x6c>
  if( !method ) return; // ENOMEM
 8009476:	bf00      	nop
}
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000064 	.word	0x20000064
 8009484:	080191d8 	.word	0x080191d8
 8009488:	2000010c 	.word	0x2000010c

0800948c <mrbc_instance_new>:
  @param  cls	Pointer to Class (mrbc_class).
  @param  size	size of additional data.
  @return       mrbc_instance object.
*/
mrbc_value mrbc_instance_new(struct VM *vm, mrbc_class *cls, int size)
{
 800948c:	b590      	push	{r4, r7, lr}
 800948e:	b089      	sub	sp, #36	; 0x24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
  mrbc_value v = {.tt = MRBC_TT_OBJECT};
 800949a:	f107 0310 	add.w	r3, r7, #16
 800949e:	2200      	movs	r2, #0
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	605a      	str	r2, [r3, #4]
 80094a4:	609a      	str	r2, [r3, #8]
 80094a6:	60da      	str	r2, [r3, #12]
 80094a8:	2308      	movs	r3, #8
 80094aa:	743b      	strb	r3, [r7, #16]
  v.instance = mrbc_alloc(vm, sizeof(mrbc_instance) + size);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	3310      	adds	r3, #16
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7f8 fb09 	bl	8001ac8 <mrbc_raw_alloc>
 80094b6:	4603      	mov	r3, r0
 80094b8:	61bb      	str	r3, [r7, #24]
  if( v.instance == NULL ) return v;	// ENOMEM
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d107      	bne.n	80094d0 <mrbc_instance_new+0x44>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	461c      	mov	r4, r3
 80094c4:	f107 0310 	add.w	r3, r7, #16
 80094c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80094ce:	e02a      	b.n	8009526 <mrbc_instance_new+0x9a>

  if( mrbc_kv_init_handle(vm, &v.instance->ivar, 0) != 0 ) {
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	3308      	adds	r3, #8
 80094d4:	2200      	movs	r2, #0
 80094d6:	4619      	mov	r1, r3
 80094d8:	68b8      	ldr	r0, [r7, #8]
 80094da:	f002 fb83 	bl	800bbe4 <mrbc_kv_init_handle>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00d      	beq.n	8009500 <mrbc_instance_new+0x74>
    mrbc_raw_free(v.instance);
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f8 fcca 	bl	8001e80 <mrbc_raw_free>
    v.instance = NULL;
 80094ec:	2300      	movs	r3, #0
 80094ee:	61bb      	str	r3, [r7, #24]
    return v;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	461c      	mov	r4, r3
 80094f4:	f107 0310 	add.w	r3, r7, #16
 80094f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80094fe:	e012      	b.n	8009526 <mrbc_instance_new+0x9a>
  }

  MRBC_INIT_OBJECT_HEADER( v.instance, "IN" );
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	2201      	movs	r2, #1
 8009504:	805a      	strh	r2, [r3, #2]
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	2249      	movs	r2, #73	; 0x49
 800950a:	701a      	strb	r2, [r3, #0]
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	224e      	movs	r2, #78	; 0x4e
 8009510:	705a      	strb	r2, [r3, #1]
  v.instance->cls = cls;
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	605a      	str	r2, [r3, #4]

  return v;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	461c      	mov	r4, r3
 800951c:	f107 0310 	add.w	r3, r7, #16
 8009520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	3724      	adds	r7, #36	; 0x24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd90      	pop	{r4, r7, pc}

0800952e <mrbc_instance_delete>:
/*! instance destructor

  @param  v	pointer to target value
*/
void mrbc_instance_delete(mrbc_value *v)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  mrbc_kv_delete_data( &v->instance->ivar );
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	3308      	adds	r3, #8
 800953c:	4618      	mov	r0, r3
 800953e:	f002 fb85 	bl	800bc4c <mrbc_kv_delete_data>
  mrbc_raw_free( v->instance );
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	4618      	mov	r0, r3
 8009548:	f7f8 fc9a 	bl	8001e80 <mrbc_raw_free>
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <mrbc_instance_setiv>:
  @param  obj		pointer to target.
  @param  sym_id	key symbol ID.
  @param  v		pointer to value.
*/
void mrbc_instance_setiv(mrbc_value *obj, mrbc_sym sym_id, mrbc_value *v)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	460b      	mov	r3, r1
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	817b      	strh	r3, [r7, #10]
  mrbc_incref(v);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff fd92 	bl	800908c <mrbc_incref>
  mrbc_kv_set( &obj->instance->ivar, sym_id, v );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	3308      	adds	r3, #8
 800956e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	4618      	mov	r0, r3
 8009576:	f002 fba3 	bl	800bcc0 <mrbc_kv_set>
}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <mrbc_instance_getiv>:
  @param  obj		pointer to target.
  @param  sym_id	key symbol ID.
  @return		value.
*/
mrbc_value mrbc_instance_getiv(mrbc_value *obj, mrbc_sym sym_id)
{
 8009582:	b590      	push	{r4, r7, lr}
 8009584:	b08b      	sub	sp, #44	; 0x2c
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	4613      	mov	r3, r2
 800958e:	80fb      	strh	r3, [r7, #6]
  mrbc_value *v = mrbc_kv_get( &obj->instance->ivar, sym_id );
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	3308      	adds	r3, #8
 8009596:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800959a:	4611      	mov	r1, r2
 800959c:	4618      	mov	r0, r3
 800959e:	f002 fc5b 	bl	800be58 <mrbc_kv_get>
 80095a2:	6278      	str	r0, [r7, #36]	; 0x24
  if( !v ) return mrbc_nil_value();
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10a      	bne.n	80095c0 <mrbc_instance_getiv+0x3e>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	461a      	mov	r2, r3
 80095ae:	2300      	movs	r3, #0
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	6053      	str	r3, [r2, #4]
 80095b4:	6093      	str	r3, [r2, #8]
 80095b6:	60d3      	str	r3, [r2, #12]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	701a      	strb	r2, [r3, #0]

  mrbc_incref(v);
  return *v;
}
 80095be:	e008      	b.n	80095d2 <mrbc_instance_getiv+0x50>
  mrbc_incref(v);
 80095c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095c2:	f7ff fd63 	bl	800908c <mrbc_incref>
  return *v;
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	4614      	mov	r4, r2
 80095cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	372c      	adds	r7, #44	; 0x2c
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd90      	pop	{r4, r7, pc}

080095da <mrbc_proc_new>:
  @param  vm		Pointer to VM.
  @param  irep		Pointer to IREP.
  @return		mrbc_value of Proc object.
*/
mrbc_value mrbc_proc_new(struct VM *vm, void *irep)
{
 80095da:	b590      	push	{r4, r7, lr}
 80095dc:	b089      	sub	sp, #36	; 0x24
 80095de:	af00      	add	r7, sp, #0
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	607a      	str	r2, [r7, #4]
  mrbc_value val = {.tt = MRBC_TT_PROC};
 80095e6:	f107 0310 	add.w	r3, r7, #16
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	605a      	str	r2, [r3, #4]
 80095f0:	609a      	str	r2, [r3, #8]
 80095f2:	60da      	str	r2, [r3, #12]
 80095f4:	2309      	movs	r3, #9
 80095f6:	743b      	strb	r3, [r7, #16]

  val.proc = mrbc_alloc(vm, sizeof(mrbc_proc));
 80095f8:	2020      	movs	r0, #32
 80095fa:	f7f8 fa65 	bl	8001ac8 <mrbc_raw_alloc>
 80095fe:	4603      	mov	r3, r0
 8009600:	61bb      	str	r3, [r7, #24]
  if( !val.proc ) return val;	// ENOMEM
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d107      	bne.n	8009618 <mrbc_proc_new+0x3e>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	461c      	mov	r4, r3
 800960c:	f107 0310 	add.w	r3, r7, #16
 8009610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009616:	e027      	b.n	8009668 <mrbc_proc_new+0x8e>

  MRBC_INIT_OBJECT_HEADER( val.proc, "PR" );
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	2201      	movs	r2, #1
 800961c:	805a      	strh	r2, [r3, #2]
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	2250      	movs	r2, #80	; 0x50
 8009622:	701a      	strb	r2, [r3, #0]
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2252      	movs	r2, #82	; 0x52
 8009628:	705a      	strb	r2, [r3, #1]
  val.proc->callinfo = vm->callinfo_tail;
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	69d2      	ldr	r2, [r2, #28]
 8009630:	605a      	str	r2, [r3, #4]

  if( mrbc_type(vm->cur_regs[0]) == MRBC_TT_PROC ) {
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	f993 3000 	ldrsb.w	r3, [r3]
 800963a:	2b09      	cmp	r3, #9
 800963c:	d106      	bne.n	800964c <mrbc_proc_new+0x72>
    val.proc->callinfo_self = vm->cur_regs[0].proc->callinfo_self;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	6892      	ldr	r2, [r2, #8]
 8009648:	609a      	str	r2, [r3, #8]
 800964a:	e003      	b.n	8009654 <mrbc_proc_new+0x7a>
  } else {
    val.proc->callinfo_self = vm->callinfo_tail;
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	69d2      	ldr	r2, [r2, #28]
 8009652:	609a      	str	r2, [r3, #8]
  }

  val.proc->irep = irep;
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	60da      	str	r2, [r3, #12]

  return val;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	461c      	mov	r4, r3
 800965e:	f107 0310 	add.w	r3, r7, #16
 8009662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	3724      	adds	r7, #36	; 0x24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd90      	pop	{r4, r7, pc}

08009670 <mrbc_proc_delete>:
/*! proc destructor

  @param  val	pointer to target value
*/
void mrbc_proc_delete(mrbc_value *val)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  mrbc_raw_free(val->proc);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	4618      	mov	r0, r3
 800967e:	f7f8 fbff 	bl	8001e80 <mrbc_raw_free>
}
 8009682:	bf00      	nop
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <mrbc_obj_is_kind_of>:
  @param  obj	target object
  @param  cls	class
  @return	result
*/
int mrbc_obj_is_kind_of( const mrbc_value *obj, const mrbc_class *cls )
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  const mrbc_class *c = find_class_by_object( obj );
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff fd73 	bl	8009180 <find_class_by_object>
 800969a:	60f8      	str	r0, [r7, #12]
  while( c != NULL ) {
 800969c:	e008      	b.n	80096b0 <mrbc_obj_is_kind_of+0x26>
    if( c == cls ) return 1;
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d101      	bne.n	80096aa <mrbc_obj_is_kind_of+0x20>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e006      	b.n	80096b8 <mrbc_obj_is_kind_of+0x2e>
    c = c->super;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	60fb      	str	r3, [r7, #12]
  while( c != NULL ) {
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1f3      	bne.n	800969e <mrbc_obj_is_kind_of+0x14>
  }

  return 0;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <mrbc_find_method>:
  @param  cls		search class.
  @param  sym_id	symbol id.
  @return		pointer to method or NULL.
*/
mrbc_method * mrbc_find_method( mrbc_method *r_method, mrbc_class *cls, mrbc_sym sym_id )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b08d      	sub	sp, #52	; 0x34
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	80fb      	strh	r3, [r7, #6]
  do {
    mrbc_method *method;
    for( method = cls->method_link; method != 0; method = method->next ) {
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096d4:	e013      	b.n	80096fe <mrbc_find_method+0x3e>
      if( method->sym_id == sym_id ) {
 80096d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80096dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d109      	bne.n	80096f8 <mrbc_find_method+0x38>
	*r_method = *method;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80096ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	r_method->cls = cls;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	609a      	str	r2, [r3, #8]
	return r_method;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	e058      	b.n	80097aa <mrbc_find_method+0xea>
    for( method = cls->method_link; method != 0; method = method->next ) {
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e8      	bne.n	80096d6 <mrbc_find_method+0x16>
      }
    }

    struct RBuiltinClass *c = (struct RBuiltinClass *)cls;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	623b      	str	r3, [r7, #32]
    int right = c->num_builtin_method;
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800970e:	62bb      	str	r3, [r7, #40]	; 0x28
    if( right == 0 ) goto NEXT;
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	2b00      	cmp	r3, #0
 8009714:	d03f      	beq.n	8009796 <mrbc_find_method+0xd6>
    int left = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	627b      	str	r3, [r7, #36]	; 0x24

    while( left < right ) {
 800971a:	e017      	b.n	800974c <mrbc_find_method+0x8c>
      int mid = (left + right) / 2;
 800971c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	4413      	add	r3, r2
 8009722:	0fda      	lsrs	r2, r3, #31
 8009724:	4413      	add	r3, r2
 8009726:	105b      	asrs	r3, r3, #1
 8009728:	61fb      	str	r3, [r7, #28]
      if( c->method_symbols[mid] < sym_id ) {
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	691a      	ldr	r2, [r3, #16]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	005b      	lsls	r3, r3, #1
 8009732:	4413      	add	r3, r2
 8009734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009738:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800973c:	429a      	cmp	r2, r3
 800973e:	dd03      	ble.n	8009748 <mrbc_find_method+0x88>
	left = mid + 1;
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	3301      	adds	r3, #1
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
 8009746:	e001      	b.n	800974c <mrbc_find_method+0x8c>
      } else {
	right = mid;
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	62bb      	str	r3, [r7, #40]	; 0x28
    while( left < right ) {
 800974c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	429a      	cmp	r2, r3
 8009752:	dbe3      	blt.n	800971c <mrbc_find_method+0x5c>
      }
    }

    if( c->method_symbols[right] == sym_id ) {
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	4413      	add	r3, r2
 800975e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009766:	429a      	cmp	r2, r3
 8009768:	d117      	bne.n	800979a <mrbc_find_method+0xda>
      *r_method = (mrbc_method){
	.type = 'm',
	.c_func = 2,
	.sym_id = sym_id,
	.func = c->method_functions[right],
 800976a:	6a3b      	ldr	r3, [r7, #32]
 800976c:	695a      	ldr	r2, [r3, #20]
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	681a      	ldr	r2, [r3, #0]
      *r_method = (mrbc_method){
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	216d      	movs	r1, #109	; 0x6d
 800977a:	7019      	strb	r1, [r3, #0]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2102      	movs	r1, #2
 8009780:	7059      	strb	r1, [r3, #1]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	88f9      	ldrh	r1, [r7, #6]
 8009786:	8059      	strh	r1, [r3, #2]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	605a      	str	r2, [r3, #4]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	609a      	str	r2, [r3, #8]
	.cls = cls };
      return r_method;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	e009      	b.n	80097aa <mrbc_find_method+0xea>
    if( right == 0 ) goto NEXT;
 8009796:	bf00      	nop
 8009798:	e000      	b.n	800979c <mrbc_find_method+0xdc>
    }

  NEXT:
 800979a:	bf00      	nop
    cls = cls->super;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	60bb      	str	r3, [r7, #8]
  } while( cls != 0 );
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d192      	bne.n	80096ce <mrbc_find_method+0xe>

  return 0;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3734      	adds	r7, #52	; 0x34
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <mrbc_get_class_by_name>:

  @param  name		class name.
  @return		pointer to class object.
*/
mrbc_class * mrbc_get_class_by_name( const char *name )
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  mrbc_sym sym_id = mrbc_search_symid(name);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f004 fa72 	bl	800dca8 <mrbc_search_symid>
 80097c4:	4603      	mov	r3, r0
 80097c6:	81fb      	strh	r3, [r7, #14]
  if( sym_id < 0 ) return NULL;
 80097c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	da01      	bge.n	80097d4 <mrbc_get_class_by_name+0x1e>
 80097d0:	2300      	movs	r3, #0
 80097d2:	e013      	b.n	80097fc <mrbc_get_class_by_name+0x46>

  mrbc_value *obj = mrbc_get_const(sym_id);
 80097d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097d8:	4618      	mov	r0, r3
 80097da:	f002 f865 	bl	800b8a8 <mrbc_get_const>
 80097de:	60b8      	str	r0, [r7, #8]
  if( obj == NULL ) return NULL;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <mrbc_get_class_by_name+0x34>
 80097e6:	2300      	movs	r3, #0
 80097e8:	e008      	b.n	80097fc <mrbc_get_class_by_name+0x46>
  if( mrbc_type(*obj) != MRBC_TT_CLASS ) return NULL;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f993 3000 	ldrsb.w	r3, [r3]
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	d001      	beq.n	80097f8 <mrbc_get_class_by_name+0x42>
 80097f4:	2300      	movs	r3, #0
 80097f6:	e001      	b.n	80097fc <mrbc_get_class_by_name+0x46>

  return obj->cls;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	689b      	ldr	r3, [r3, #8]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <mrbc_send>:
    SET_RETURN(ret);
  }
 */
mrbc_value mrbc_send( struct VM *vm, mrbc_value *v, int reg_ofs,
		     mrbc_value *recv, const char *method_name, int argc, ... )
{
 8009804:	b590      	push	{r4, r7, lr}
 8009806:	b097      	sub	sp, #92	; 0x5c
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
  mrbc_method method;

  if( mrbc_find_method( &method, find_class_by_object(recv),
 8009812:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009814:	f7ff fcb4 	bl	8009180 <find_class_by_object>
 8009818:	4604      	mov	r4, r0
 800981a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800981c:	f004 f9d8 	bl	800dbd0 <mrbc_str_to_symid>
 8009820:	4603      	mov	r3, r0
 8009822:	461a      	mov	r2, r3
 8009824:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009828:	4621      	mov	r1, r4
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff ff48 	bl	80096c0 <mrbc_find_method>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d108      	bne.n	8009848 <mrbc_send+0x44>
			mrbc_str_to_symid(method_name) ) == 0 ) {
    mrbc_printf("No method. vtype=%d method='%s'\n", mrbc_type(*recv), method_name );
 8009836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009838:	f993 3000 	ldrsb.w	r3, [r3]
 800983c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800983e:	4619      	mov	r1, r3
 8009840:	4840      	ldr	r0, [pc, #256]	; (8009944 <mrbc_send+0x140>)
 8009842:	f000 fc81 	bl	800a148 <mrbc_printf>
    goto ERROR;
 8009846:	e06e      	b.n	8009926 <mrbc_send+0x122>
  }
  if( !method.c_func ) {
 8009848:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <mrbc_send+0x56>
    mrbc_printf("Method %s needs to be C function.\n", method_name );
 8009850:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009852:	483d      	ldr	r0, [pc, #244]	; (8009948 <mrbc_send+0x144>)
 8009854:	f000 fc78 	bl	800a148 <mrbc_printf>
    goto ERROR;
 8009858:	e065      	b.n	8009926 <mrbc_send+0x122>
  }

  // create call stack.
  mrbc_value *regs = v + reg_ofs + 2;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	3302      	adds	r3, #2
 800985e:	011b      	lsls	r3, r3, #4
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	4413      	add	r3, r2
 8009864:	653b      	str	r3, [r7, #80]	; 0x50
  mrbc_decref( &regs[0] );
 8009866:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009868:	f7ff fc44 	bl	80090f4 <mrbc_decref>
  regs[0] = *recv;
 800986c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800986e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009870:	4614      	mov	r4, r2
 8009872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref(recv);
 8009878:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800987a:	f7ff fc07 	bl	800908c <mrbc_incref>

  va_list ap;
  va_start(ap, argc);
 800987e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009882:	643b      	str	r3, [r7, #64]	; 0x40
  int i;
  for( i = 1; i <= argc; i++ ) {
 8009884:	2301      	movs	r3, #1
 8009886:	657b      	str	r3, [r7, #84]	; 0x54
 8009888:	e016      	b.n	80098b8 <mrbc_send+0xb4>
    mrbc_decref( &regs[i] );
 800988a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800988c:	011b      	lsls	r3, r3, #4
 800988e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009890:	4413      	add	r3, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff fc2e 	bl	80090f4 <mrbc_decref>
    regs[i] = *va_arg(ap, mrbc_value *);
 8009898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800989a:	1d1a      	adds	r2, r3, #4
 800989c:	643a      	str	r2, [r7, #64]	; 0x40
 800989e:	6819      	ldr	r1, [r3, #0]
 80098a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098a2:	011b      	lsls	r3, r3, #4
 80098a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098a6:	4413      	add	r3, r2
 80098a8:	461c      	mov	r4, r3
 80098aa:	460b      	mov	r3, r1
 80098ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for( i = 1; i <= argc; i++ ) {
 80098b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b4:	3301      	adds	r3, #1
 80098b6:	657b      	str	r3, [r7, #84]	; 0x54
 80098b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098bc:	429a      	cmp	r2, r3
 80098be:	dde4      	ble.n	800988a <mrbc_send+0x86>
  }
  mrbc_decref( &regs[i] );
 80098c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098c6:	4413      	add	r3, r2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff fc13 	bl	80090f4 <mrbc_decref>
  regs[i] = mrbc_nil_value();
 80098ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098d4:	18d1      	adds	r1, r2, r3
 80098d6:	460a      	mov	r2, r1
 80098d8:	2300      	movs	r3, #0
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	6053      	str	r3, [r2, #4]
 80098de:	6093      	str	r3, [r2, #8]
 80098e0:	60d3      	str	r3, [r2, #12]
 80098e2:	2301      	movs	r3, #1
 80098e4:	700b      	strb	r3, [r1, #0]
  va_end(ap);

  // call method.
  method.func(vm, regs, argc);
 80098e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80098ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098ec:	68b8      	ldr	r0, [r7, #8]
 80098ee:	4798      	blx	r3
  mrbc_value ret = regs[0];
 80098f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098f2:	f107 0420 	add.w	r4, r7, #32
 80098f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(; i >= 0; i-- ) {
 80098fc:	e008      	b.n	8009910 <mrbc_send+0x10c>
    regs[i].tt = MRBC_TT_EMPTY;
 80098fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009900:	011b      	lsls	r3, r3, #4
 8009902:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009904:	4413      	add	r3, r2
 8009906:	2200      	movs	r2, #0
 8009908:	701a      	strb	r2, [r3, #0]
  for(; i >= 0; i-- ) {
 800990a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800990c:	3b01      	subs	r3, #1
 800990e:	657b      	str	r3, [r7, #84]	; 0x54
 8009910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009912:	2b00      	cmp	r3, #0
 8009914:	daf3      	bge.n	80098fe <mrbc_send+0xfa>
  }

  return ret;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	461c      	mov	r4, r3
 800991a:	f107 0320 	add.w	r3, r7, #32
 800991e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009924:	e009      	b.n	800993a <mrbc_send+0x136>

 ERROR:
  return mrbc_nil_value();
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	461a      	mov	r2, r3
 800992a:	2300      	movs	r3, #0
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	6053      	str	r3, [r2, #4]
 8009930:	6093      	str	r3, [r2, #8]
 8009932:	60d3      	str	r3, [r2, #12]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2201      	movs	r2, #1
 8009938:	701a      	strb	r2, [r3, #0]
}
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	375c      	adds	r7, #92	; 0x5c
 800993e:	46bd      	mov	sp, r7
 8009940:	bd90      	pop	{r4, r7, pc}
 8009942:	bf00      	nop
 8009944:	08019248 	.word	0x08019248
 8009948:	0801926c 	.word	0x0801926c

0800994c <c_ineffect>:

//================================================================
/*! (method) Ineffect operator / method
*/
void c_ineffect(struct VM *vm, mrbc_value v[], int argc)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
  // nothing to do.
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <mrbc_run_mrblib>:

  @param  bytecode	bytecode (.mrb file)
  @return		dummy yet.
*/
int mrbc_run_mrblib(const void *bytecode)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  // instead of mrbc_vm_open()
  mrbc_vm *vm = mrbc_vm_new( MAX_REGS_SIZE );
 800996c:	206e      	movs	r0, #110	; 0x6e
 800996e:	f005 f9a9 	bl	800ecc4 <mrbc_vm_new>
 8009972:	60f8      	str	r0, [r7, #12]
  if( !vm ) return -1;	// ENOMEM
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <mrbc_run_mrblib+0x1c>
 800997a:	f04f 33ff 	mov.w	r3, #4294967295
 800997e:	e023      	b.n	80099c8 <mrbc_run_mrblib+0x64>

  if( mrbc_load_mrb(vm, bytecode) ) {
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f002 fd54 	bl	800c430 <mrbc_load_mrb>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d006      	beq.n	800999c <mrbc_run_mrblib+0x38>
    mrbc_print_exception(&vm->exception);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3328      	adds	r3, #40	; 0x28
 8009992:	4618      	mov	r0, r3
 8009994:	f001 fe08 	bl	800b5a8 <mrbc_print_exception>
    return 2;
 8009998:	2302      	movs	r3, #2
 800999a:	e015      	b.n	80099c8 <mrbc_run_mrblib+0x64>
  }

  int ret;

  mrbc_vm_begin(vm);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f005 fa51 	bl	800ee44 <mrbc_vm_begin>
  do {
    ret = mrbc_vm_run(vm);
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f009 faae 	bl	8012f04 <mrbc_vm_run>
 80099a8:	60b8      	str	r0, [r7, #8]
  } while( ret == 0 );
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0f8      	beq.n	80099a2 <mrbc_run_mrblib+0x3e>
  mrbc_vm_end(vm);
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f005 faab 	bl	800ef0c <mrbc_vm_end>

  // instead of mrbc_vm_close()
  mrbc_raw_free( vm->top_irep );	// free only top-level mrbc_irep.
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7f8 fa60 	bl	8001e80 <mrbc_raw_free>
					// (no need to free child ireps.)
  mrbc_raw_free( vm );
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7f8 fa5d 	bl	8001e80 <mrbc_raw_free>

  return ret;
 80099c6:	68bb      	ldr	r3, [r7, #8]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <mrbc_init_class>:

//================================================================
/*! initialize all classes.
 */
void mrbc_init_class(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
  extern const uint8_t mrblib_bytecode[];
  void mrbc_init_class_math(void);
  mrbc_value cls = {.tt = MRBC_TT_CLASS};
 80099d6:	463b      	mov	r3, r7
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	605a      	str	r2, [r3, #4]
 80099de:	609a      	str	r2, [r3, #8]
 80099e0:	60da      	str	r2, [r3, #12]
 80099e2:	2307      	movs	r3, #7
 80099e4:	703b      	strb	r3, [r7, #0]

  cls.cls = MRBC_CLASS(Object);
 80099e6:	4b54      	ldr	r3, [pc, #336]	; (8009b38 <mrbc_init_class+0x168>)
 80099e8:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Object), &cls );
 80099ea:	463b      	mov	r3, r7
 80099ec:	4619      	mov	r1, r3
 80099ee:	2027      	movs	r0, #39	; 0x27
 80099f0:	f001 ff12 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(NilClass);
 80099f4:	4b51      	ldr	r3, [pc, #324]	; (8009b3c <mrbc_init_class+0x16c>)
 80099f6:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(NilClass), &cls );
 80099f8:	463b      	mov	r3, r7
 80099fa:	4619      	mov	r1, r3
 80099fc:	2023      	movs	r0, #35	; 0x23
 80099fe:	f001 ff0b 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(FalseClass);
 8009a02:	4b4f      	ldr	r3, [pc, #316]	; (8009b40 <mrbc_init_class+0x170>)
 8009a04:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(FalseClass), &cls );
 8009a06:	463b      	mov	r3, r7
 8009a08:	4619      	mov	r1, r3
 8009a0a:	2019      	movs	r0, #25
 8009a0c:	f001 ff04 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(TrueClass);
 8009a10:	4b4c      	ldr	r3, [pc, #304]	; (8009b44 <mrbc_init_class+0x174>)
 8009a12:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(TrueClass), &cls );
 8009a14:	463b      	mov	r3, r7
 8009a16:	4619      	mov	r1, r3
 8009a18:	2033      	movs	r0, #51	; 0x33
 8009a1a:	f001 fefd 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Integer);
 8009a1e:	4b4a      	ldr	r3, [pc, #296]	; (8009b48 <mrbc_init_class+0x178>)
 8009a20:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Integer), &cls );
 8009a22:	463b      	mov	r3, r7
 8009a24:	4619      	mov	r1, r3
 8009a26:	201d      	movs	r0, #29
 8009a28:	f001 fef6 	bl	800b818 <mrbc_set_const>

#if MRBC_USE_FLOAT
  cls.cls = MRBC_CLASS(Float);
 8009a2c:	4b47      	ldr	r3, [pc, #284]	; (8009b4c <mrbc_init_class+0x17c>)
 8009a2e:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Float), &cls );
 8009a30:	463b      	mov	r3, r7
 8009a32:	4619      	mov	r1, r3
 8009a34:	201a      	movs	r0, #26
 8009a36:	f001 feef 	bl	800b818 <mrbc_set_const>
#endif

  cls.cls = MRBC_CLASS(Symbol);
 8009a3a:	4b45      	ldr	r3, [pc, #276]	; (8009b50 <mrbc_init_class+0x180>)
 8009a3c:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Symbol), &cls );
 8009a3e:	463b      	mov	r3, r7
 8009a40:	4619      	mov	r1, r3
 8009a42:	2031      	movs	r0, #49	; 0x31
 8009a44:	f001 fee8 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Proc);
 8009a48:	4b42      	ldr	r3, [pc, #264]	; (8009b54 <mrbc_init_class+0x184>)
 8009a4a:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Proc), &cls );
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	4619      	mov	r1, r3
 8009a50:	2029      	movs	r0, #41	; 0x29
 8009a52:	f001 fee1 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Array);
 8009a56:	4b40      	ldr	r3, [pc, #256]	; (8009b58 <mrbc_init_class+0x188>)
 8009a58:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Array), &cls );
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	2016      	movs	r0, #22
 8009a60:	f001 feda 	bl	800b818 <mrbc_set_const>

#if MRBC_USE_STRING
  cls.cls = MRBC_CLASS(String);
 8009a64:	4b3d      	ldr	r3, [pc, #244]	; (8009b5c <mrbc_init_class+0x18c>)
 8009a66:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(String), &cls );
 8009a68:	463b      	mov	r3, r7
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	2030      	movs	r0, #48	; 0x30
 8009a6e:	f001 fed3 	bl	800b818 <mrbc_set_const>
#endif

  cls.cls = MRBC_CLASS(Range);
 8009a72:	4b3b      	ldr	r3, [pc, #236]	; (8009b60 <mrbc_init_class+0x190>)
 8009a74:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Range), &cls );
 8009a76:	463b      	mov	r3, r7
 8009a78:	4619      	mov	r1, r3
 8009a7a:	202c      	movs	r0, #44	; 0x2c
 8009a7c:	f001 fecc 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Hash);
 8009a80:	4b38      	ldr	r3, [pc, #224]	; (8009b64 <mrbc_init_class+0x194>)
 8009a82:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Hash), &cls );
 8009a84:	463b      	mov	r3, r7
 8009a86:	4619      	mov	r1, r3
 8009a88:	201b      	movs	r0, #27
 8009a8a:	f001 fec5 	bl	800b818 <mrbc_set_const>
  cls.cls = MRBC_CLASS(Math);
  mrbc_set_const( MRBC_SYM(Math), &cls );
  mrbc_init_class_math();
#endif

  cls.cls = MRBC_CLASS(Exception);
 8009a8e:	4b36      	ldr	r3, [pc, #216]	; (8009b68 <mrbc_init_class+0x198>)
 8009a90:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Exception), &cls );
 8009a92:	463b      	mov	r3, r7
 8009a94:	4619      	mov	r1, r3
 8009a96:	2018      	movs	r0, #24
 8009a98:	f001 febe 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(NoMemoryError);
 8009a9c:	4b33      	ldr	r3, [pc, #204]	; (8009b6c <mrbc_init_class+0x19c>)
 8009a9e:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(NoMemoryError), &cls );
 8009aa0:	463b      	mov	r3, r7
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	2024      	movs	r0, #36	; 0x24
 8009aa6:	f001 feb7 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(StandardError);
 8009aaa:	4b31      	ldr	r3, [pc, #196]	; (8009b70 <mrbc_init_class+0x1a0>)
 8009aac:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(StandardError), &cls );
 8009aae:	463b      	mov	r3, r7
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	202f      	movs	r0, #47	; 0x2f
 8009ab4:	f001 feb0 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(ArgumentError);
 8009ab8:	4b2e      	ldr	r3, [pc, #184]	; (8009b74 <mrbc_init_class+0x1a4>)
 8009aba:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(ArgumentError), &cls );
 8009abc:	463b      	mov	r3, r7
 8009abe:	4619      	mov	r1, r3
 8009ac0:	2015      	movs	r0, #21
 8009ac2:	f001 fea9 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(IndexError);
 8009ac6:	4b2c      	ldr	r3, [pc, #176]	; (8009b78 <mrbc_init_class+0x1a8>)
 8009ac8:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(IndexError), &cls );
 8009aca:	463b      	mov	r3, r7
 8009acc:	4619      	mov	r1, r3
 8009ace:	201c      	movs	r0, #28
 8009ad0:	f001 fea2 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(NameError);
 8009ad4:	4b29      	ldr	r3, [pc, #164]	; (8009b7c <mrbc_init_class+0x1ac>)
 8009ad6:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(NameError), &cls );
 8009ad8:	463b      	mov	r3, r7
 8009ada:	4619      	mov	r1, r3
 8009adc:	2022      	movs	r0, #34	; 0x22
 8009ade:	f001 fe9b 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(NoMethodError);
 8009ae2:	4b27      	ldr	r3, [pc, #156]	; (8009b80 <mrbc_init_class+0x1b0>)
 8009ae4:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(NoMethodError), &cls );
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	4619      	mov	r1, r3
 8009aea:	2025      	movs	r0, #37	; 0x25
 8009aec:	f001 fe94 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(RangeError);
 8009af0:	4b24      	ldr	r3, [pc, #144]	; (8009b84 <mrbc_init_class+0x1b4>)
 8009af2:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(RangeError), &cls );
 8009af4:	463b      	mov	r3, r7
 8009af6:	4619      	mov	r1, r3
 8009af8:	202d      	movs	r0, #45	; 0x2d
 8009afa:	f001 fe8d 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(RuntimeError);
 8009afe:	4b22      	ldr	r3, [pc, #136]	; (8009b88 <mrbc_init_class+0x1b8>)
 8009b00:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(RuntimeError), &cls );
 8009b02:	463b      	mov	r3, r7
 8009b04:	4619      	mov	r1, r3
 8009b06:	202e      	movs	r0, #46	; 0x2e
 8009b08:	f001 fe86 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(TypeError);
 8009b0c:	4b1f      	ldr	r3, [pc, #124]	; (8009b8c <mrbc_init_class+0x1bc>)
 8009b0e:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(TypeError), &cls );
 8009b10:	463b      	mov	r3, r7
 8009b12:	4619      	mov	r1, r3
 8009b14:	2034      	movs	r0, #52	; 0x34
 8009b16:	f001 fe7f 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(ZeroDivisionError);
 8009b1a:	4b1d      	ldr	r3, [pc, #116]	; (8009b90 <mrbc_init_class+0x1c0>)
 8009b1c:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(ZeroDivisionError), &cls );
 8009b1e:	463b      	mov	r3, r7
 8009b20:	4619      	mov	r1, r3
 8009b22:	2036      	movs	r0, #54	; 0x36
 8009b24:	f001 fe78 	bl	800b818 <mrbc_set_const>

  mrbc_run_mrblib(mrblib_bytecode);
 8009b28:	481a      	ldr	r0, [pc, #104]	; (8009b94 <mrbc_init_class+0x1c4>)
 8009b2a:	f7ff ff1b 	bl	8009964 <mrbc_run_mrblib>
}
 8009b2e:	bf00      	nop
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000064 	.word	0x20000064
 8009b3c:	20000094 	.word	0x20000094
 8009b40:	200000c4 	.word	0x200000c4
 8009b44:	200000ac 	.word	0x200000ac
 8009b48:	20000034 	.word	0x20000034
 8009b4c:	2000004c 	.word	0x2000004c
 8009b50:	20000594 	.word	0x20000594
 8009b54:	2000007c 	.word	0x2000007c
 8009b58:	20000004 	.word	0x20000004
 8009b5c:	200000f4 	.word	0x200000f4
 8009b60:	200000dc 	.word	0x200000dc
 8009b64:	2000001c 	.word	0x2000001c
 8009b68:	2000010c 	.word	0x2000010c
 8009b6c:	20000124 	.word	0x20000124
 8009b70:	20000144 	.word	0x20000144
 8009b74:	20000154 	.word	0x20000154
 8009b78:	20000164 	.word	0x20000164
 8009b7c:	20000174 	.word	0x20000174
 8009b80:	20000184 	.word	0x20000184
 8009b84:	20000194 	.word	0x20000194
 8009b88:	200001a4 	.word	0x200001a4
 8009b8c:	200001b4 	.word	0x200001b4
 8009b90:	200001c4 	.word	0x200001c4
 8009b94:	0801af0c 	.word	0x0801af0c

08009b98 <mrbc_symbol_cstr>:
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  return mrbc_symid_to_str(v->i);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	b21b      	sxth	r3, r3
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f004 f84a 	bl	800dc40 <mrbc_symid_to_str>
 8009bac:	4603      	mov	r3, r0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <mrbc_is_nested_symid>:
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	80fb      	strh	r3, [r7, #6]
  const char *s = mrbc_symid_to_str(sym_id);
 8009bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f004 f83b 	bl	800dc40 <mrbc_symid_to_str>
 8009bca:	60f8      	str	r0, [r7, #12]
  return ('0' <= s[0] && s[0] <= ('9'+6));
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b2f      	cmp	r3, #47	; 0x2f
 8009bd2:	d905      	bls.n	8009be0 <mrbc_is_nested_symid+0x2a>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b3f      	cmp	r3, #63	; 0x3f
 8009bda:	d801      	bhi.n	8009be0 <mrbc_is_nested_symid+0x2a>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e000      	b.n	8009be2 <mrbc_is_nested_symid+0x2c>
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <find_class_by_object>:
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  assert( mrbc_type(*obj) >= 0 );
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da05      	bge.n	8009c0a <find_class_by_object+0x1e>
 8009bfe:	4b20      	ldr	r3, [pc, #128]	; (8009c80 <find_class_by_object+0x94>)
 8009c00:	4a20      	ldr	r2, [pc, #128]	; (8009c84 <find_class_by_object+0x98>)
 8009c02:	21bf      	movs	r1, #191	; 0xbf
 8009c04:	4820      	ldr	r0, [pc, #128]	; (8009c88 <find_class_by_object+0x9c>)
 8009c06:	f00b fd1d 	bl	8015644 <__assert_func>
  assert( mrbc_type(*obj) <= MRBC_TT_MAXVAL );
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f993 3000 	ldrsb.w	r3, [r3]
 8009c10:	2b0e      	cmp	r3, #14
 8009c12:	dd05      	ble.n	8009c20 <find_class_by_object+0x34>
 8009c14:	4b1d      	ldr	r3, [pc, #116]	; (8009c8c <find_class_by_object+0xa0>)
 8009c16:	4a1b      	ldr	r2, [pc, #108]	; (8009c84 <find_class_by_object+0x98>)
 8009c18:	21c0      	movs	r1, #192	; 0xc0
 8009c1a:	481b      	ldr	r0, [pc, #108]	; (8009c88 <find_class_by_object+0x9c>)
 8009c1c:	f00b fd12 	bl	8015644 <__assert_func>
  mrbc_class *cls = mrbc_class_tbl[ mrbc_type(*obj) ];
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f993 3000 	ldrsb.w	r3, [r3]
 8009c26:	461a      	mov	r2, r3
 8009c28:	4b19      	ldr	r3, [pc, #100]	; (8009c90 <find_class_by_object+0xa4>)
 8009c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2e:	60fb      	str	r3, [r7, #12]
  if( !cls ) {
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d11f      	bne.n	8009c76 <find_class_by_object+0x8a>
    switch( mrbc_type(*obj) ) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f993 3000 	ldrsb.w	r3, [r3]
 8009c3c:	2b0e      	cmp	r3, #14
 8009c3e:	d00f      	beq.n	8009c60 <find_class_by_object+0x74>
 8009c40:	2b0e      	cmp	r3, #14
 8009c42:	dc12      	bgt.n	8009c6a <find_class_by_object+0x7e>
 8009c44:	2b07      	cmp	r3, #7
 8009c46:	d002      	beq.n	8009c4e <find_class_by_object+0x62>
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d004      	beq.n	8009c56 <find_class_by_object+0x6a>
 8009c4c:	e00d      	b.n	8009c6a <find_class_by_object+0x7e>
    case MRBC_TT_CLASS:		cls = obj->cls;			break;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	e00f      	b.n	8009c76 <find_class_by_object+0x8a>
    case MRBC_TT_OBJECT:	cls = obj->instance->cls;	break;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	e00a      	b.n	8009c76 <find_class_by_object+0x8a>
    case MRBC_TT_EXCEPTION:	cls = obj->exception->cls;	break;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	e005      	b.n	8009c76 <find_class_by_object+0x8a>
      assert(!"Invalid value type.");
 8009c6a:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <find_class_by_object+0xa8>)
 8009c6c:	4a05      	ldr	r2, [pc, #20]	; (8009c84 <find_class_by_object+0x98>)
 8009c6e:	21c9      	movs	r1, #201	; 0xc9
 8009c70:	4805      	ldr	r0, [pc, #20]	; (8009c88 <find_class_by_object+0x9c>)
 8009c72:	f00b fce7 	bl	8015644 <__assert_func>
  return cls;
 8009c76:	68fb      	ldr	r3, [r7, #12]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	08019290 	.word	0x08019290
 8009c84:	0801ae78 	.word	0x0801ae78
 8009c88:	080192a8 	.word	0x080192a8
 8009c8c:	080192c4 	.word	0x080192c4
 8009c90:	0801adf4 	.word	0x0801adf4
 8009c94:	080192e8 	.word	0x080192e8

08009c98 <mrbc_print>:
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  mrbc_nprint( str, strlen(str) );
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7f6 faa7 	bl	80001f4 <strlen>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	4619      	mov	r1, r3
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fa3e 	bl	800a12c <mrbc_nprint>
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <mrbc_printf_init>:
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	603b      	str	r3, [r7, #0]
  pf->p = pf->buf = buf;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	609a      	str	r2, [r3, #8]
  pf->buf_end = buf + size - 1;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	441a      	add	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	605a      	str	r2, [r3, #4]
  pf->fstr = fstr;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	60da      	str	r2, [r3, #12]
  pf->fmt = (struct RPrintfFormat){0};
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3310      	adds	r3, #16
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	605a      	str	r2, [r3, #4]
}
 8009cf0:	bf00      	nop
 8009cf2:	371c      	adds	r7, #28
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <mrbc_printf_clear>:
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  pf->p = pf->buf;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	609a      	str	r2, [r3, #8]
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <mrbc_printf_end>:
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  *pf->p = '\0';
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	2200      	movs	r2, #0
 8009d26:	701a      	strb	r2, [r3, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <mrbc_printf_len>:
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  return pf->p - pf->buf;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689a      	ldr	r2, [r3, #8]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	1ad3      	subs	r3, r2, r3
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <mrbc_printf_str>:
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	607a      	str	r2, [r7, #4]
  return mrbc_printf_bstr( pf, str, (str ? strlen(str) : 0), pad );
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d005      	beq.n	8009d70 <mrbc_printf_str+0x1e>
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f7f6 fa45 	bl	80001f4 <strlen>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	e000      	b.n	8009d72 <mrbc_printf_str+0x20>
 8009d70:	2200      	movs	r2, #0
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68b9      	ldr	r1, [r7, #8]
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 fec4 	bl	800ab04 <mrbc_printf_bstr>
 8009d7c:	4603      	mov	r3, r0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <mrbc_string_size>:
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  return str->string->size;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	889b      	ldrh	r3, [r3, #4]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <mrbc_string_cstr>:
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	689b      	ldr	r3, [r3, #8]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <mrbc_array_size>:
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  return ary->array->n_stored;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	88db      	ldrh	r3, [r3, #6]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <mrbc_hash_iterator_new>:
{
 8009dd4:	b490      	push	{r4, r7}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  ite.target = v->hash;
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	60fb      	str	r3, [r7, #12]
  ite.point = v->hash->data;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	613b      	str	r3, [r7, #16]
  ite.p_end = ite.point + v->hash->n_stored;
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	88db      	ldrh	r3, [r3, #6]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	4413      	add	r3, r2
 8009df8:	617b      	str	r3, [r7, #20]
  return ite;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	461c      	mov	r4, r3
 8009dfe:	f107 030c 	add.w	r3, r7, #12
 8009e02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc90      	pop	{r4, r7}
 8009e12:	4770      	bx	lr

08009e14 <mrbc_hash_i_has_next>:
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  return ite->point < ite->p_end;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	bf34      	ite	cc
 8009e28:	2301      	movcc	r3, #1
 8009e2a:	2300      	movcs	r3, #0
 8009e2c:	b2db      	uxtb	r3, r3
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <mrbc_hash_i_next>:
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  mrbc_value *ret = ite->point;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	60fb      	str	r3, [r7, #12]
  ite->point += 2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f103 0220 	add.w	r2, r3, #32
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	605a      	str	r2, [r3, #4]
  return ret;
 8009e54:	68fb      	ldr	r3, [r7, #12]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <mrbc_range_first>:
{
 8009e62:	b490      	push	{r4, r7}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  return v->range->first;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	4614      	mov	r4, r2
 8009e74:	3308      	adds	r3, #8
 8009e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bc90      	pop	{r4, r7}
 8009e84:	4770      	bx	lr

08009e86 <mrbc_range_last>:
{
 8009e86:	b490      	push	{r4, r7}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  return v->range->last;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	4614      	mov	r4, r2
 8009e98:	3318      	adds	r3, #24
 8009e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bc90      	pop	{r4, r7}
 8009ea8:	4770      	bx	lr

08009eaa <mrbc_range_exclude_end>:

//================================================================
/*! get exclude_end?
*/
static inline int mrbc_range_exclude_end(const mrbc_value *v)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  return v->range->flag_exclude;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	791b      	ldrb	r3, [r3, #4]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <mrbc_printf_sub_output_arg>:
/***** Local functions ******************************************************/
//----------------------------------------------------------------
/* sub function for mrbc_printf
*/
static int mrbc_printf_sub_output_arg( mrbc_printf_t *pf, va_list *ap )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  int ret;

  switch(pf->fmt.type) {
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	7c1b      	ldrb	r3, [r3, #16]
 8009ed2:	3b42      	subs	r3, #66	; 0x42
 8009ed4:	2b36      	cmp	r3, #54	; 0x36
 8009ed6:	f200 80de 	bhi.w	800a096 <mrbc_printf_sub_output_arg+0x1d2>
 8009eda:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <mrbc_printf_sub_output_arg+0x1c>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	0800a023 	.word	0x0800a023
 8009ee4:	0800a097 	.word	0x0800a097
 8009ee8:	0800a009 	.word	0x0800a009
 8009eec:	0800a057 	.word	0x0800a057
 8009ef0:	0800a097 	.word	0x0800a097
 8009ef4:	0800a057 	.word	0x0800a057
 8009ef8:	0800a097 	.word	0x0800a097
 8009efc:	0800a097 	.word	0x0800a097
 8009f00:	0800a097 	.word	0x0800a097
 8009f04:	0800a097 	.word	0x0800a097
 8009f08:	0800a097 	.word	0x0800a097
 8009f0c:	0800a097 	.word	0x0800a097
 8009f10:	0800a097 	.word	0x0800a097
 8009f14:	0800a097 	.word	0x0800a097
 8009f18:	0800a097 	.word	0x0800a097
 8009f1c:	0800a097 	.word	0x0800a097
 8009f20:	0800a097 	.word	0x0800a097
 8009f24:	0800a097 	.word	0x0800a097
 8009f28:	0800a097 	.word	0x0800a097
 8009f2c:	0800a097 	.word	0x0800a097
 8009f30:	0800a097 	.word	0x0800a097
 8009f34:	0800a097 	.word	0x0800a097
 8009f38:	0800a03d 	.word	0x0800a03d
 8009f3c:	0800a097 	.word	0x0800a097
 8009f40:	0800a097 	.word	0x0800a097
 8009f44:	0800a097 	.word	0x0800a097
 8009f48:	0800a097 	.word	0x0800a097
 8009f4c:	0800a097 	.word	0x0800a097
 8009f50:	0800a097 	.word	0x0800a097
 8009f54:	0800a097 	.word	0x0800a097
 8009f58:	0800a097 	.word	0x0800a097
 8009f5c:	0800a097 	.word	0x0800a097
 8009f60:	0800a023 	.word	0x0800a023
 8009f64:	08009fbd 	.word	0x08009fbd
 8009f68:	08009fef 	.word	0x08009fef
 8009f6c:	0800a057 	.word	0x0800a057
 8009f70:	0800a057 	.word	0x0800a057
 8009f74:	0800a057 	.word	0x0800a057
 8009f78:	0800a097 	.word	0x0800a097
 8009f7c:	08009fef 	.word	0x08009fef
 8009f80:	0800a097 	.word	0x0800a097
 8009f84:	0800a097 	.word	0x0800a097
 8009f88:	0800a097 	.word	0x0800a097
 8009f8c:	0800a097 	.word	0x0800a097
 8009f90:	0800a097 	.word	0x0800a097
 8009f94:	0800a097 	.word	0x0800a097
 8009f98:	0800a07f 	.word	0x0800a07f
 8009f9c:	0800a097 	.word	0x0800a097
 8009fa0:	0800a097 	.word	0x0800a097
 8009fa4:	08009fd5 	.word	0x08009fd5
 8009fa8:	0800a097 	.word	0x0800a097
 8009fac:	08009fef 	.word	0x08009fef
 8009fb0:	0800a097 	.word	0x0800a097
 8009fb4:	0800a097 	.word	0x0800a097
 8009fb8:	0800a03d 	.word	0x0800a03d
  case 'c':
    ret = mrbc_printf_char( pf, va_arg(*ap, int) );
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	1d19      	adds	r1, r3, #4
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	6011      	str	r1, [r2, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fd42 	bl	800aa54 <mrbc_printf_char>
 8009fd0:	60f8      	str	r0, [r7, #12]
    break;
 8009fd2:	e063      	b.n	800a09c <mrbc_printf_sub_output_arg+0x1d8>

  case 's':
    ret = mrbc_printf_str( pf, va_arg(*ap, char *), ' ');
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	1d19      	adds	r1, r3, #4
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	6011      	str	r1, [r2, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff feb4 	bl	8009d52 <mrbc_printf_str>
 8009fea:	60f8      	str	r0, [r7, #12]
    break;
 8009fec:	e056      	b.n	800a09c <mrbc_printf_sub_output_arg+0x1d8>

  case 'd':
  case 'i':
  case 'u':
    ret = mrbc_printf_int( pf, va_arg(*ap, int), 10);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	1d19      	adds	r1, r3, #4
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	6011      	str	r1, [r2, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	220a      	movs	r2, #10
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fe06 	bl	800ac10 <mrbc_printf_int>
 800a004:	60f8      	str	r0, [r7, #12]
    break;
 800a006:	e049      	b.n	800a09c <mrbc_printf_sub_output_arg+0x1d8>

  case 'D':	// for mrbc_int_t (see mrbc_print_sub)
    ret = mrbc_printf_int( pf, va_arg(*ap, mrbc_int_t), 10);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	1d19      	adds	r1, r3, #4
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	6011      	str	r1, [r2, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	220a      	movs	r2, #10
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fdf9 	bl	800ac10 <mrbc_printf_int>
 800a01e:	60f8      	str	r0, [r7, #12]
    break;
 800a020:	e03c      	b.n	800a09c <mrbc_printf_sub_output_arg+0x1d8>

  case 'b':
  case 'B':
    ret = mrbc_printf_bit( pf, va_arg(*ap, unsigned int), 1);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	1d19      	adds	r1, r3, #4
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	6011      	str	r1, [r2, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2201      	movs	r2, #1
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 ff1c 	bl	800ae70 <mrbc_printf_bit>
 800a038:	60f8      	str	r0, [r7, #12]
    break;
 800a03a:	e02f      	b.n	800a09c <mrbc_printf_sub_output_arg+0x1d8>

  case 'x':
  case 'X':
    ret = mrbc_printf_bit( pf, va_arg(*ap, unsigned int), 4);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	1d19      	adds	r1, r3, #4
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	6011      	str	r1, [r2, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2204      	movs	r2, #4
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 ff0f 	bl	800ae70 <mrbc_printf_bit>
 800a052:	60f8      	str	r0, [r7, #12]
    break;
 800a054:	e022      	b.n	800a09c <mrbc_printf_sub_output_arg+0x1d8>
  case 'f':
  case 'e':
  case 'E':
  case 'g':
  case 'G':
    ret = mrbc_printf_float( pf, va_arg(*ap, double) );
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3307      	adds	r3, #7
 800a05c:	f023 0307 	bic.w	r3, r3, #7
 800a060:	f103 0108 	add.w	r1, r3, #8
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	6011      	str	r1, [r2, #0]
 800a068:	ed93 7b00 	vldr	d7, [r3]
 800a06c:	eeb0 0a47 	vmov.f32	s0, s14
 800a070:	eef0 0a67 	vmov.f32	s1, s15
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 ffc9 	bl	800b00c <mrbc_printf_float>
 800a07a:	60f8      	str	r0, [r7, #12]
    break;
 800a07c:	e00e      	b.n	800a09c <mrbc_printf_sub_output_arg+0x1d8>
#endif
  case 'p':
    ret = mrbc_printf_pointer( pf, va_arg(*ap, void *) );
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	1d19      	adds	r1, r3, #4
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	6011      	str	r1, [r2, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f001 f805 	bl	800b09c <mrbc_printf_pointer>
 800a092:	60f8      	str	r0, [r7, #12]
    break;
 800a094:	e002      	b.n	800a09c <mrbc_printf_sub_output_arg+0x1d8>

  default:
    ret = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	60fb      	str	r3, [r7, #12]
    break;
 800a09a:	bf00      	nop
  }

  return ret;
 800a09c:	68fb      	ldr	r3, [r7, #12]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop

0800a0a8 <mrbc_putchar>:
/*! output a character

  @param  c	character
*/
void mrbc_putchar(char c)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	71fb      	strb	r3, [r7, #7]
  } else {
    hal_write(1, &c, 1);
  }

#else
    hal_write(1, &c, 1);
 800a0b2:	1dfb      	adds	r3, r7, #7
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	f001 fc87 	bl	800b9cc <hal_write>
#endif
}
 800a0be:	bf00      	nop
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <mrbc_print_symbol>:
/*! display symbol name.

  @param  sym_id	symbol ID to print.
*/
void mrbc_print_symbol(mrbc_sym sym_id)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	80fb      	strh	r3, [r7, #6]
  // normal case
  if( !mrbc_is_nested_symid(sym_id) ) {
 800a0d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7ff fd6d 	bl	8009bb6 <mrbc_is_nested_symid>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d109      	bne.n	800a0f6 <mrbc_print_symbol+0x2e>
    mrbc_print( mrbc_symid_to_str(sym_id) );
 800a0e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f003 fdaa 	bl	800dc40 <mrbc_symid_to_str>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7ff fdd2 	bl	8009c98 <mrbc_print>
 800a0f4:	e015      	b.n	800a122 <mrbc_print_symbol+0x5a>
    return;
  }

  // nested case
  mrbc_sym id1, id2;
  mrbc_separate_nested_symid( sym_id, &id1, &id2 );
 800a0f6:	f107 020c 	add.w	r2, r7, #12
 800a0fa:	f107 010e 	add.w	r1, r7, #14
 800a0fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a102:	4618      	mov	r0, r3
 800a104:	f003 fe4c 	bl	800dda0 <mrbc_separate_nested_symid>

  mrbc_print_symbol( id1 );
 800a108:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff ffdb 	bl	800a0c8 <mrbc_print_symbol>
  mrbc_print("::");
 800a112:	4805      	ldr	r0, [pc, #20]	; (800a128 <mrbc_print_symbol+0x60>)
 800a114:	f7ff fdc0 	bl	8009c98 <mrbc_print>
  mrbc_print_symbol( id2 );
 800a118:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7ff ffd3 	bl	800a0c8 <mrbc_print_symbol>
}
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	08019300 	.word	0x08019300

0800a12c <mrbc_nprint>:

  @param str	str
  @param size	byte length.
*/
void mrbc_nprint(const char *str, int size)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  if( p1 != p2 ) {
    hal_write(1, p2, p1 - p2);
  }

#else
  hal_write(1, str, size);
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	6879      	ldr	r1, [r7, #4]
 800a13a:	2001      	movs	r0, #1
 800a13c:	f001 fc46 	bl	800b9cc <hal_write>
#endif
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <mrbc_printf>:
/*! formatted output conversion, output to console.

  @param  fstr		format string.
*/
void mrbc_printf(const char *fstr, ...)
{
 800a148:	b40f      	push	{r0, r1, r2, r3}
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fstr);
 800a150:	f107 0314 	add.w	r3, r7, #20
 800a154:	607b      	str	r3, [r7, #4]

  mrbc_vprintf( fstr, ap );
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	6938      	ldr	r0, [r7, #16]
 800a15a:	f000 f83a 	bl	800a1d2 <mrbc_vprintf>

  va_end(ap);
}
 800a15e:	bf00      	nop
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a168:	b004      	add	sp, #16
 800a16a:	4770      	bx	lr

0800a16c <mrbc_snprintf>:
  @param  buf		output buffer.
  @param  bufsiz	buffer size.
  @param  fstr		format string.
*/
void mrbc_snprintf(char *buf, int bufsiz, const char *fstr, ...)
{
 800a16c:	b40c      	push	{r2, r3}
 800a16e:	b580      	push	{r7, lr}
 800a170:	b08a      	sub	sp, #40	; 0x28
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	6039      	str	r1, [r7, #0]
  va_list ap;
  va_start(ap, fstr);
 800a178:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_printf_t pf;
  mrbc_printf_init( &pf, buf, bufsiz, fstr );
 800a17e:	f107 000c 	add.w	r0, r7, #12
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	f7ff fd96 	bl	8009cb8 <mrbc_printf_init>

  while( 1 ) {
    if( mrbc_printf_main( &pf ) <= 0 ) break;
 800a18c:	f107 030c 	add.w	r3, r7, #12
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fb67 	bl	800a864 <mrbc_printf_main>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dd0b      	ble.n	800a1b4 <mrbc_snprintf+0x48>
				// normal end (==0) or buffer full (<0).
    if( mrbc_printf_sub_output_arg( &pf, &ap ) != 0 ) break;
 800a19c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a1a0:	f107 030c 	add.w	r3, r7, #12
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff fe8c 	bl	8009ec4 <mrbc_printf_sub_output_arg>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d102      	bne.n	800a1b8 <mrbc_snprintf+0x4c>
    if( mrbc_printf_main( &pf ) <= 0 ) break;
 800a1b2:	e7eb      	b.n	800a18c <mrbc_snprintf+0x20>
 800a1b4:	bf00      	nop
 800a1b6:	e000      	b.n	800a1ba <mrbc_snprintf+0x4e>
    if( mrbc_printf_sub_output_arg( &pf, &ap ) != 0 ) break;
 800a1b8:	bf00      	nop
  }

  mrbc_printf_end( &pf );
 800a1ba:	f107 030c 	add.w	r3, r7, #12
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff fdaa 	bl	8009d18 <mrbc_printf_end>
  va_end(ap);
}
 800a1c4:	bf00      	nop
 800a1c6:	3728      	adds	r7, #40	; 0x28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1ce:	b002      	add	sp, #8
 800a1d0:	4770      	bx	lr

0800a1d2 <mrbc_vprintf>:

  @param  fstr		format string.
  @param  ap		variable argument pointer.
*/
void mrbc_vprintf(const char *fstr, va_list ap)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b0a0      	sub	sp, #128	; 0x80
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  va_list ap1;
  va_copy( ap1, ap );
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	67bb      	str	r3, [r7, #120]	; 0x78

  mrbc_printf_t pf;
  char buf[MRBC_PRINTF_MAX_WIDTH];
  mrbc_printf_init( &pf, buf, sizeof(buf), fstr );
 800a1e0:	f107 010c 	add.w	r1, r7, #12
 800a1e4:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2252      	movs	r2, #82	; 0x52
 800a1ec:	f7ff fd64 	bl	8009cb8 <mrbc_printf_init>

  while( 1 ) {
    int ret = mrbc_printf_main( &pf );
 800a1f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 fb35 	bl	800a864 <mrbc_printf_main>
 800a1fa:	67f8      	str	r0, [r7, #124]	; 0x7c
    if( mrbc_printf_len( &pf ) ) {
 800a1fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff fd97 	bl	8009d34 <mrbc_printf_len>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d010      	beq.n	800a22e <mrbc_vprintf+0x5c>
      mrbc_nprint( buf, mrbc_printf_len( &pf ) );
 800a20c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff fd8f 	bl	8009d34 <mrbc_printf_len>
 800a216:	4602      	mov	r2, r0
 800a218:	f107 030c 	add.w	r3, r7, #12
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f7ff ff84 	bl	800a12c <mrbc_nprint>
      mrbc_printf_clear( &pf );
 800a224:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff fd67 	bl	8009cfc <mrbc_printf_clear>
    }
    if( ret == 0 ) break;
 800a22e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d01e      	beq.n	800a272 <mrbc_vprintf+0xa0>
    if( ret < 0 ) continue;
 800a234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a236:	2b00      	cmp	r3, #0
 800a238:	db19      	blt.n	800a26e <mrbc_vprintf+0x9c>

    mrbc_printf_sub_output_arg( &pf, &ap1 );
 800a23a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a23e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a242:	4611      	mov	r1, r2
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff fe3d 	bl	8009ec4 <mrbc_printf_sub_output_arg>
    mrbc_nprint( buf, mrbc_printf_len( &pf ) );
 800a24a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff fd70 	bl	8009d34 <mrbc_printf_len>
 800a254:	4602      	mov	r2, r0
 800a256:	f107 030c 	add.w	r3, r7, #12
 800a25a:	4611      	mov	r1, r2
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7ff ff65 	bl	800a12c <mrbc_nprint>
    mrbc_printf_clear( &pf );
 800a262:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a266:	4618      	mov	r0, r3
 800a268:	f7ff fd48 	bl	8009cfc <mrbc_printf_clear>
 800a26c:	e7c0      	b.n	800a1f0 <mrbc_vprintf+0x1e>
    if( ret < 0 ) continue;
 800a26e:	bf00      	nop
  while( 1 ) {
 800a270:	e7be      	b.n	800a1f0 <mrbc_vprintf+0x1e>
    if( ret == 0 ) break;
 800a272:	bf00      	nop
  }

  va_end(ap1);
}
 800a274:	bf00      	nop
 800a276:	3780      	adds	r7, #128	; 0x80
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <mrbc_vasprintf>:
  @param  bufsiz	buffer size.
  @param  fstr		format string.
  @param  ap		variable argument pointer.
*/
void mrbc_vasprintf(char **buf, int bufsiz, const char *fstr, va_list ap)
{
 800a27c:	b5b0      	push	{r4, r5, r7, lr}
 800a27e:	b094      	sub	sp, #80	; 0x50
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
  va_list ap1, ap_bak;
  va_copy( ap1, ap );
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	647b      	str	r3, [r7, #68]	; 0x44

  mrbc_printf_t pf;
  mrbc_printf_init( &pf, *buf, bufsiz, fstr );
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6819      	ldr	r1, [r3, #0]
 800a292:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	f7ff fd0d 	bl	8009cb8 <mrbc_printf_init>

  while( 1 ) {
    va_copy(ap_bak, ap1);
 800a29e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2a0:	643b      	str	r3, [r7, #64]	; 0x40
    mrbc_printf_t pf_bak = pf;
 800a2a2:	f107 0410 	add.w	r4, r7, #16
 800a2a6:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800a2aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a2b2:	e884 0003 	stmia.w	r4, {r0, r1}

    int ret = mrbc_printf_main( &pf );
 800a2b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 fad2 	bl	800a864 <mrbc_printf_main>
 800a2c0:	64f8      	str	r0, [r7, #76]	; 0x4c
    if( ret == 0 ) break;	// normal break loop.
 800a2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d036      	beq.n	800a336 <mrbc_vasprintf+0xba>
    if( ret < 0 ) goto INCREASE_BUFFER;
 800a2c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	db18      	blt.n	800a300 <mrbc_vasprintf+0x84>

    ret = mrbc_printf_sub_output_arg( &pf, &ap1 );
 800a2ce:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a2d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff fdf3 	bl	8009ec4 <mrbc_printf_sub_output_arg>
 800a2de:	64f8      	str	r0, [r7, #76]	; 0x4c
    if( ret >= 0 ) goto NEXT_LOOP;
 800a2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	da25      	bge.n	800a332 <mrbc_vasprintf+0xb6>

    va_end(ap1);
    va_copy(ap1, ap_bak);
 800a2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2e8:	647b      	str	r3, [r7, #68]	; 0x44
    pf = pf_bak;
 800a2ea:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a2ee:	f107 0510 	add.w	r5, r7, #16
 800a2f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a2fa:	e884 0003 	stmia.w	r4, {r0, r1}
 800a2fe:	e000      	b.n	800a302 <mrbc_vasprintf+0x86>
    if( ret < 0 ) goto INCREASE_BUFFER;
 800a300:	bf00      	nop

  INCREASE_BUFFER:
    bufsiz += 64;
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	3340      	adds	r3, #64	; 0x40
 800a306:	60bb      	str	r3, [r7, #8]
    void *newbuf = mrbc_raw_realloc( pf.buf, bufsiz );
 800a308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4611      	mov	r1, r2
 800a30e:	4618      	mov	r0, r3
 800a310:	f7f7 fe52 	bl	8001fb8 <mrbc_raw_realloc>
 800a314:	64b8      	str	r0, [r7, #72]	; 0x48
    if( !newbuf ) break;
 800a316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00e      	beq.n	800a33a <mrbc_vasprintf+0xbe>
    mrbc_printf_replace_buffer( &pf, newbuf, bufsiz );
 800a31c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fa7b 	bl	800a820 <mrbc_printf_replace_buffer>
    *buf = newbuf;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	e7b5      	b.n	800a29e <mrbc_vasprintf+0x22>
    if( ret >= 0 ) goto NEXT_LOOP;
 800a332:	bf00      	nop
  while( 1 ) {
 800a334:	e7b3      	b.n	800a29e <mrbc_vasprintf+0x22>
    if( ret == 0 ) break;	// normal break loop.
 800a336:	bf00      	nop
 800a338:	e000      	b.n	800a33c <mrbc_vasprintf+0xc0>
    if( !newbuf ) break;
 800a33a:	bf00      	nop

  NEXT_LOOP:
    va_end(ap_bak);
  }

  mrbc_printf_end( &pf );
 800a33c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a340:	4618      	mov	r0, r3
 800a342:	f7ff fce9 	bl	8009d18 <mrbc_printf_end>
  va_end(ap1);
  va_end(ap_bak);
}
 800a346:	bf00      	nop
 800a348:	3750      	adds	r7, #80	; 0x50
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bdb0      	pop	{r4, r5, r7, pc}

0800a34e <mrbc_p>:
/*! print mrbc_value

  @param  v	pointer to target value.
*/
void mrbc_p(const mrbc_value *v)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b082      	sub	sp, #8
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  mrbc_p_sub( v );
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f808 	bl	800a36c <mrbc_p_sub>
  mrbc_putchar('\n');
 800a35c:	200a      	movs	r0, #10
 800a35e:	f7ff fea3 	bl	800a0a8 <mrbc_putchar>
}
 800a362:	bf00      	nop
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <mrbc_p_sub>:
/*! p - sub function

  @param  v	pointer to target value.
 */
int mrbc_p_sub(const mrbc_value *v)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b08f      	sub	sp, #60	; 0x3c
 800a370:	af00      	add	r7, sp, #0
 800a372:	6178      	str	r0, [r7, #20]
  if( !v ) {
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d104      	bne.n	800a384 <mrbc_p_sub+0x18>
    mrbc_print("(null)");	// wrong things are happen. but it give me a clue.
 800a37a:	4852      	ldr	r0, [pc, #328]	; (800a4c4 <mrbc_p_sub+0x158>)
 800a37c:	f7ff fc8c 	bl	8009c98 <mrbc_print>
    return 0;
 800a380:	2300      	movs	r3, #0
 800a382:	e09a      	b.n	800a4ba <mrbc_p_sub+0x14e>
  }

  switch( mrbc_type(*v) ) {
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f993 3000 	ldrsb.w	r3, [r3]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	2b0b      	cmp	r3, #11
 800a38e:	f200 808f 	bhi.w	800a4b0 <mrbc_p_sub+0x144>
 800a392:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <mrbc_p_sub+0x2c>)
 800a394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a398:	0800a3c9 	.word	0x0800a3c9
 800a39c:	0800a4b1 	.word	0x0800a4b1
 800a3a0:	0800a4b1 	.word	0x0800a4b1
 800a3a4:	0800a4b1 	.word	0x0800a4b1
 800a3a8:	0800a4b1 	.word	0x0800a4b1
 800a3ac:	0800a3d1 	.word	0x0800a3d1
 800a3b0:	0800a4b1 	.word	0x0800a4b1
 800a3b4:	0800a4b1 	.word	0x0800a4b1
 800a3b8:	0800a4b1 	.word	0x0800a4b1
 800a3bc:	0800a4b1 	.word	0x0800a4b1
 800a3c0:	0800a3f9 	.word	0x0800a3f9
 800a3c4:	0800a461 	.word	0x0800a461
  case MRBC_TT_NIL:
    mrbc_print("nil");
 800a3c8:	483f      	ldr	r0, [pc, #252]	; (800a4c8 <mrbc_p_sub+0x15c>)
 800a3ca:	f7ff fc65 	bl	8009c98 <mrbc_print>
    break;
 800a3ce:	e073      	b.n	800a4b8 <mrbc_p_sub+0x14c>

  case MRBC_TT_SYMBOL:{
    const char *s = mrbc_symbol_cstr( v );
 800a3d0:	6978      	ldr	r0, [r7, #20]
 800a3d2:	f7ff fbe1 	bl	8009b98 <mrbc_symbol_cstr>
 800a3d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    const char *fmt = strchr(s, ':') ? "\":%s\"" : ":%s";
 800a3d8:	213a      	movs	r1, #58	; 0x3a
 800a3da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3dc:	f00c f979 	bl	80166d2 <strchr>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <mrbc_p_sub+0x7e>
 800a3e6:	4b39      	ldr	r3, [pc, #228]	; (800a4cc <mrbc_p_sub+0x160>)
 800a3e8:	e000      	b.n	800a3ec <mrbc_p_sub+0x80>
 800a3ea:	4b39      	ldr	r3, [pc, #228]	; (800a4d0 <mrbc_p_sub+0x164>)
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
    mrbc_printf(fmt, s);
 800a3ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f2:	f7ff fea9 	bl	800a148 <mrbc_printf>
  } break;
 800a3f6:	e05f      	b.n	800a4b8 <mrbc_p_sub+0x14c>

#if MRBC_USE_STRING
  case MRBC_TT_STRING:{
    mrbc_putchar('"');
 800a3f8:	2022      	movs	r0, #34	; 0x22
 800a3fa:	f7ff fe55 	bl	800a0a8 <mrbc_putchar>
    const unsigned char *s = (const unsigned char *)mrbc_string_cstr(v);
 800a3fe:	6978      	ldr	r0, [r7, #20]
 800a400:	f7ff fcce 	bl	8009da0 <mrbc_string_cstr>
 800a404:	6338      	str	r0, [r7, #48]	; 0x30
    int i;
    for( i = 0; i < mrbc_string_size(v); i++ ) {
 800a406:	2300      	movs	r3, #0
 800a408:	637b      	str	r3, [r7, #52]	; 0x34
 800a40a:	e01e      	b.n	800a44a <mrbc_p_sub+0xde>
      if( s[i] < ' ' || 0x7f <= s[i] ) {	// tiny isprint()
 800a40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a410:	4413      	add	r3, r2
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2b1f      	cmp	r3, #31
 800a416:	d905      	bls.n	800a424 <mrbc_p_sub+0xb8>
 800a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a41c:	4413      	add	r3, r2
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b7e      	cmp	r3, #126	; 0x7e
 800a422:	d908      	bls.n	800a436 <mrbc_p_sub+0xca>
	mrbc_printf("\\x%02X", s[i]);
 800a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a428:	4413      	add	r3, r2
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	4619      	mov	r1, r3
 800a42e:	4829      	ldr	r0, [pc, #164]	; (800a4d4 <mrbc_p_sub+0x168>)
 800a430:	f7ff fe8a 	bl	800a148 <mrbc_printf>
 800a434:	e006      	b.n	800a444 <mrbc_p_sub+0xd8>
      } else {
	mrbc_putchar(s[i]);
 800a436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a43a:	4413      	add	r3, r2
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff fe32 	bl	800a0a8 <mrbc_putchar>
    for( i = 0; i < mrbc_string_size(v); i++ ) {
 800a444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a446:	3301      	adds	r3, #1
 800a448:	637b      	str	r3, [r7, #52]	; 0x34
 800a44a:	6978      	ldr	r0, [r7, #20]
 800a44c:	f7ff fc9b 	bl	8009d86 <mrbc_string_size>
 800a450:	4602      	mov	r2, r0
 800a452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a454:	4293      	cmp	r3, r2
 800a456:	dbd9      	blt.n	800a40c <mrbc_p_sub+0xa0>
      }
    }
    mrbc_putchar('"');
 800a458:	2022      	movs	r0, #34	; 0x22
 800a45a:	f7ff fe25 	bl	800a0a8 <mrbc_putchar>
  } break;
 800a45e:	e02b      	b.n	800a4b8 <mrbc_p_sub+0x14c>
#endif

  case MRBC_TT_RANGE:{
    mrbc_value v1 = mrbc_range_first(v);
 800a460:	f107 0318 	add.w	r3, r7, #24
 800a464:	6979      	ldr	r1, [r7, #20]
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff fcfb 	bl	8009e62 <mrbc_range_first>
    mrbc_p_sub(&v1);
 800a46c:	f107 0318 	add.w	r3, r7, #24
 800a470:	4618      	mov	r0, r3
 800a472:	f7ff ff7b 	bl	800a36c <mrbc_p_sub>
    mrbc_print( mrbc_range_exclude_end(v) ? "..." : ".." );
 800a476:	6978      	ldr	r0, [r7, #20]
 800a478:	f7ff fd17 	bl	8009eaa <mrbc_range_exclude_end>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <mrbc_p_sub+0x11a>
 800a482:	4b15      	ldr	r3, [pc, #84]	; (800a4d8 <mrbc_p_sub+0x16c>)
 800a484:	e000      	b.n	800a488 <mrbc_p_sub+0x11c>
 800a486:	4b15      	ldr	r3, [pc, #84]	; (800a4dc <mrbc_p_sub+0x170>)
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff fc05 	bl	8009c98 <mrbc_print>
    v1 = mrbc_range_last(v);
 800a48e:	463b      	mov	r3, r7
 800a490:	6979      	ldr	r1, [r7, #20]
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff fcf7 	bl	8009e86 <mrbc_range_last>
 800a498:	f107 0418 	add.w	r4, r7, #24
 800a49c:	463b      	mov	r3, r7
 800a49e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a4a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_p_sub(&v1);
 800a4a4:	f107 0318 	add.w	r3, r7, #24
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff ff5f 	bl	800a36c <mrbc_p_sub>
  } break;
 800a4ae:	e003      	b.n	800a4b8 <mrbc_p_sub+0x14c>

  default:
    mrbc_print_sub(v);
 800a4b0:	6978      	ldr	r0, [r7, #20]
 800a4b2:	f000 f847 	bl	800a544 <mrbc_print_sub>
    break;
 800a4b6:	bf00      	nop
  if( mrbc_type(*v) > MRBC_TT_INC_DEC_THRESHOLD ) {
    mrbc_printf("(%d)", v->obj->ref_count);
  }
#endif

  return 0;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	373c      	adds	r7, #60	; 0x3c
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd90      	pop	{r4, r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	08019304 	.word	0x08019304
 800a4c8:	0801930c 	.word	0x0801930c
 800a4cc:	08019310 	.word	0x08019310
 800a4d0:	08019318 	.word	0x08019318
 800a4d4:	0801931c 	.word	0x0801931c
 800a4d8:	08019324 	.word	0x08019324
 800a4dc:	08019328 	.word	0x08019328

0800a4e0 <mrbc_puts_sub>:
  @param  v	pointer to target value.
  @retval 0	normal return.
  @retval 1	already output LF.
*/
int mrbc_puts_sub(const mrbc_value *v)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  if( mrbc_type(*v) == MRBC_TT_ARRAY ) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f993 3000 	ldrsb.w	r3, [r3]
 800a4ee:	2b0a      	cmp	r3, #10
 800a4f0:	d120      	bne.n	800a534 <mrbc_puts_sub+0x54>
    int i;
    for( i = 0; i < mrbc_array_size(v); i++ ) {
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61fb      	str	r3, [r7, #28]
 800a4f6:	e014      	b.n	800a522 <mrbc_puts_sub+0x42>
      if( i != 0 ) mrbc_putchar('\n');
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <mrbc_puts_sub+0x24>
 800a4fe:	200a      	movs	r0, #10
 800a500:	f7ff fdd2 	bl	800a0a8 <mrbc_putchar>
      mrbc_value v1 = mrbc_array_get(v, i);
 800a504:	f107 0308 	add.w	r3, r7, #8
 800a508:	69fa      	ldr	r2, [r7, #28]
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7f8 f81d 	bl	800254c <mrbc_array_get>
      mrbc_puts_sub(&v1);
 800a512:	f107 0308 	add.w	r3, r7, #8
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff ffe2 	bl	800a4e0 <mrbc_puts_sub>
    for( i = 0; i < mrbc_array_size(v); i++ ) {
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	3301      	adds	r3, #1
 800a520:	61fb      	str	r3, [r7, #28]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7ff fc49 	bl	8009dba <mrbc_array_size>
 800a528:	4602      	mov	r2, r0
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	4293      	cmp	r3, r2
 800a52e:	dbe3      	blt.n	800a4f8 <mrbc_puts_sub+0x18>
    }
    return 0;
 800a530:	2300      	movs	r3, #0
 800a532:	e003      	b.n	800a53c <mrbc_puts_sub+0x5c>
  }

  return mrbc_print_sub(v);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f805 	bl	800a544 <mrbc_print_sub>
 800a53a:	4603      	mov	r3, r0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3720      	adds	r7, #32
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <mrbc_print_sub>:
  @param  v	pointer to target value.
  @retval 0	normal return.
  @retval 1	already output LF.
*/
int mrbc_print_sub(const mrbc_value *v)
{
 800a544:	b590      	push	{r4, r7, lr}
 800a546:	b097      	sub	sp, #92	; 0x5c
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6178      	str	r0, [r7, #20]
  int ret = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	657b      	str	r3, [r7, #84]	; 0x54

  switch( mrbc_type(*v) ) {
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f993 3000 	ldrsb.w	r3, [r3]
 800a556:	3301      	adds	r3, #1
 800a558:	2b0f      	cmp	r3, #15
 800a55a:	f200 8132 	bhi.w	800a7c2 <mrbc_print_sub+0x27e>
 800a55e:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <mrbc_print_sub+0x20>)
 800a560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a564:	0800a773 	.word	0x0800a773
 800a568:	0800a5a5 	.word	0x0800a5a5
 800a56c:	0800a7d3 	.word	0x0800a7d3
 800a570:	0800a5ad 	.word	0x0800a5ad
 800a574:	0800a5b5 	.word	0x0800a5b5
 800a578:	0800a5bd 	.word	0x0800a5bd
 800a57c:	0800a5cb 	.word	0x0800a5cb
 800a580:	0800a5d9 	.word	0x0800a5d9
 800a584:	0800a5e7 	.word	0x0800a5e7
 800a588:	0800a5f7 	.word	0x0800a5f7
 800a58c:	0800a61d 	.word	0x0800a61d
 800a590:	0800a62b 	.word	0x0800a62b
 800a594:	0800a677 	.word	0x0800a677
 800a598:	0800a6bf 	.word	0x0800a6bf
 800a59c:	0800a70f 	.word	0x0800a70f
 800a5a0:	0800a781 	.word	0x0800a781
  case MRBC_TT_EMPTY:	mrbc_print("(empty)");		break;
 800a5a4:	488f      	ldr	r0, [pc, #572]	; (800a7e4 <mrbc_print_sub+0x2a0>)
 800a5a6:	f7ff fb77 	bl	8009c98 <mrbc_print>
 800a5aa:	e115      	b.n	800a7d8 <mrbc_print_sub+0x294>
  case MRBC_TT_NIL:					break;
  case MRBC_TT_FALSE:	mrbc_print("false");		break;
 800a5ac:	488e      	ldr	r0, [pc, #568]	; (800a7e8 <mrbc_print_sub+0x2a4>)
 800a5ae:	f7ff fb73 	bl	8009c98 <mrbc_print>
 800a5b2:	e111      	b.n	800a7d8 <mrbc_print_sub+0x294>
  case MRBC_TT_TRUE:	mrbc_print("true");		break;
 800a5b4:	488d      	ldr	r0, [pc, #564]	; (800a7ec <mrbc_print_sub+0x2a8>)
 800a5b6:	f7ff fb6f 	bl	8009c98 <mrbc_print>
 800a5ba:	e10d      	b.n	800a7d8 <mrbc_print_sub+0x294>
  case MRBC_TT_INTEGER:	mrbc_printf("%D", v->i);	break;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	488b      	ldr	r0, [pc, #556]	; (800a7f0 <mrbc_print_sub+0x2ac>)
 800a5c4:	f7ff fdc0 	bl	800a148 <mrbc_printf>
 800a5c8:	e106      	b.n	800a7d8 <mrbc_print_sub+0x294>
#if MRBC_USE_FLOAT
  case MRBC_TT_FLOAT:	mrbc_printf("%g", v->d);	break;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a5d0:	4888      	ldr	r0, [pc, #544]	; (800a7f4 <mrbc_print_sub+0x2b0>)
 800a5d2:	f7ff fdb9 	bl	800a148 <mrbc_printf>
 800a5d6:	e0ff      	b.n	800a7d8 <mrbc_print_sub+0x294>
#endif
  case MRBC_TT_SYMBOL:	mrbc_print_symbol(v->i);	break;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	b21b      	sxth	r3, r3
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff fd72 	bl	800a0c8 <mrbc_print_symbol>
 800a5e4:	e0f8      	b.n	800a7d8 <mrbc_print_sub+0x294>
  case MRBC_TT_CLASS:	mrbc_print_symbol(v->cls->sym_id); break;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff fd6a 	bl	800a0c8 <mrbc_print_symbol>
 800a5f4:	e0f0      	b.n	800a7d8 <mrbc_print_sub+0x294>

  case MRBC_TT_OBJECT:
    mrbc_printf("#<");
 800a5f6:	4880      	ldr	r0, [pc, #512]	; (800a7f8 <mrbc_print_sub+0x2b4>)
 800a5f8:	f7ff fda6 	bl	800a148 <mrbc_printf>
    mrbc_print_symbol( find_class_by_object(v)->sym_id );
 800a5fc:	6978      	ldr	r0, [r7, #20]
 800a5fe:	f7ff faf5 	bl	8009bec <find_class_by_object>
 800a602:	4603      	mov	r3, r0
 800a604:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fd5d 	bl	800a0c8 <mrbc_print_symbol>
    mrbc_printf(":%08x>", v->instance );
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	4619      	mov	r1, r3
 800a614:	4879      	ldr	r0, [pc, #484]	; (800a7fc <mrbc_print_sub+0x2b8>)
 800a616:	f7ff fd97 	bl	800a148 <mrbc_printf>
    break;
 800a61a:	e0dd      	b.n	800a7d8 <mrbc_print_sub+0x294>

  case MRBC_TT_PROC:
    mrbc_printf("#<Proc:%08x>", v->proc );
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	4619      	mov	r1, r3
 800a622:	4877      	ldr	r0, [pc, #476]	; (800a800 <mrbc_print_sub+0x2bc>)
 800a624:	f7ff fd90 	bl	800a148 <mrbc_printf>
    //mrbc_printf("#<Proc:%08x, callinfo=%p>", v->proc, v->proc->callinfo );
    break;
 800a628:	e0d6      	b.n	800a7d8 <mrbc_print_sub+0x294>

  case MRBC_TT_ARRAY:{
    mrbc_putchar('[');
 800a62a:	205b      	movs	r0, #91	; 0x5b
 800a62c:	f7ff fd3c 	bl	800a0a8 <mrbc_putchar>
    int i;
    for( i = 0; i < mrbc_array_size(v); i++ ) {
 800a630:	2300      	movs	r3, #0
 800a632:	653b      	str	r3, [r7, #80]	; 0x50
 800a634:	e014      	b.n	800a660 <mrbc_print_sub+0x11c>
      if( i != 0 ) mrbc_print(", ");
 800a636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <mrbc_print_sub+0xfe>
 800a63c:	4871      	ldr	r0, [pc, #452]	; (800a804 <mrbc_print_sub+0x2c0>)
 800a63e:	f7ff fb2b 	bl	8009c98 <mrbc_print>
      mrbc_value v1 = mrbc_array_get(v, i);
 800a642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a648:	6979      	ldr	r1, [r7, #20]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7f7 ff7e 	bl	800254c <mrbc_array_get>
      mrbc_p_sub(&v1);
 800a650:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a654:	4618      	mov	r0, r3
 800a656:	f7ff fe89 	bl	800a36c <mrbc_p_sub>
    for( i = 0; i < mrbc_array_size(v); i++ ) {
 800a65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a65c:	3301      	adds	r3, #1
 800a65e:	653b      	str	r3, [r7, #80]	; 0x50
 800a660:	6978      	ldr	r0, [r7, #20]
 800a662:	f7ff fbaa 	bl	8009dba <mrbc_array_size>
 800a666:	4602      	mov	r2, r0
 800a668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a66a:	4293      	cmp	r3, r2
 800a66c:	dbe3      	blt.n	800a636 <mrbc_print_sub+0xf2>
    }
    mrbc_putchar(']');
 800a66e:	205d      	movs	r0, #93	; 0x5d
 800a670:	f7ff fd1a 	bl	800a0a8 <mrbc_putchar>
  } break;
 800a674:	e0b0      	b.n	800a7d8 <mrbc_print_sub+0x294>

#if MRBC_USE_STRING
  case MRBC_TT_STRING:
    mrbc_nprint( mrbc_string_cstr(v), mrbc_string_size(v) );
 800a676:	6978      	ldr	r0, [r7, #20]
 800a678:	f7ff fb92 	bl	8009da0 <mrbc_string_cstr>
 800a67c:	4604      	mov	r4, r0
 800a67e:	6978      	ldr	r0, [r7, #20]
 800a680:	f7ff fb81 	bl	8009d86 <mrbc_string_size>
 800a684:	4603      	mov	r3, r0
 800a686:	4619      	mov	r1, r3
 800a688:	4620      	mov	r0, r4
 800a68a:	f7ff fd4f 	bl	800a12c <mrbc_nprint>
    if( mrbc_string_size(v) != 0 &&
 800a68e:	6978      	ldr	r0, [r7, #20]
 800a690:	f7ff fb79 	bl	8009d86 <mrbc_string_size>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 809d 	beq.w	800a7d6 <mrbc_print_sub+0x292>
	mrbc_string_cstr(v)[ mrbc_string_size(v) - 1 ] == '\n' ) ret = 1;
 800a69c:	6978      	ldr	r0, [r7, #20]
 800a69e:	f7ff fb7f 	bl	8009da0 <mrbc_string_cstr>
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	6978      	ldr	r0, [r7, #20]
 800a6a6:	f7ff fb6e 	bl	8009d86 <mrbc_string_size>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	4423      	add	r3, r4
 800a6b0:	781b      	ldrb	r3, [r3, #0]
    if( mrbc_string_size(v) != 0 &&
 800a6b2:	2b0a      	cmp	r3, #10
 800a6b4:	f040 808f 	bne.w	800a7d6 <mrbc_print_sub+0x292>
	mrbc_string_cstr(v)[ mrbc_string_size(v) - 1 ] == '\n' ) ret = 1;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	657b      	str	r3, [r7, #84]	; 0x54
    break;
 800a6bc:	e08b      	b.n	800a7d6 <mrbc_print_sub+0x292>
#endif

  case MRBC_TT_RANGE:{
    mrbc_value v1 = mrbc_range_first(v);
 800a6be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6c2:	6979      	ldr	r1, [r7, #20]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff fbcc 	bl	8009e62 <mrbc_range_first>
    mrbc_print_sub(&v1);
 800a6ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7ff ff38 	bl	800a544 <mrbc_print_sub>
    mrbc_print( mrbc_range_exclude_end(v) ? "..." : ".." );
 800a6d4:	6978      	ldr	r0, [r7, #20]
 800a6d6:	f7ff fbe8 	bl	8009eaa <mrbc_range_exclude_end>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <mrbc_print_sub+0x1a0>
 800a6e0:	4b49      	ldr	r3, [pc, #292]	; (800a808 <mrbc_print_sub+0x2c4>)
 800a6e2:	e000      	b.n	800a6e6 <mrbc_print_sub+0x1a2>
 800a6e4:	4b49      	ldr	r3, [pc, #292]	; (800a80c <mrbc_print_sub+0x2c8>)
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7ff fad6 	bl	8009c98 <mrbc_print>
    v1 = mrbc_range_last(v);
 800a6ec:	463b      	mov	r3, r7
 800a6ee:	6979      	ldr	r1, [r7, #20]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7ff fbc8 	bl	8009e86 <mrbc_range_last>
 800a6f6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a6fa:	463b      	mov	r3, r7
 800a6fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a6fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_print_sub(&v1);
 800a702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff ff1c 	bl	800a544 <mrbc_print_sub>
  } break;
 800a70c:	e064      	b.n	800a7d8 <mrbc_print_sub+0x294>

  case MRBC_TT_HASH:{
    mrbc_putchar('{');
 800a70e:	207b      	movs	r0, #123	; 0x7b
 800a710:	f7ff fcca 	bl	800a0a8 <mrbc_putchar>
    mrbc_hash_iterator ite = mrbc_hash_iterator_new(v);
 800a714:	f107 031c 	add.w	r3, r7, #28
 800a718:	6979      	ldr	r1, [r7, #20]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff fb5a 	bl	8009dd4 <mrbc_hash_iterator_new>
    while( mrbc_hash_i_has_next(&ite) ) {
 800a720:	e01b      	b.n	800a75a <mrbc_print_sub+0x216>
      mrbc_value *vk = mrbc_hash_i_next(&ite);
 800a722:	f107 031c 	add.w	r3, r7, #28
 800a726:	4618      	mov	r0, r3
 800a728:	f7ff fb87 	bl	8009e3a <mrbc_hash_i_next>
 800a72c:	64f8      	str	r0, [r7, #76]	; 0x4c
      mrbc_p_sub(vk);
 800a72e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a730:	f7ff fe1c 	bl	800a36c <mrbc_p_sub>
      mrbc_print("=>");
 800a734:	4836      	ldr	r0, [pc, #216]	; (800a810 <mrbc_print_sub+0x2cc>)
 800a736:	f7ff faaf 	bl	8009c98 <mrbc_print>
      mrbc_p_sub(vk+1);
 800a73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a73c:	3310      	adds	r3, #16
 800a73e:	4618      	mov	r0, r3
 800a740:	f7ff fe14 	bl	800a36c <mrbc_p_sub>
      if( mrbc_hash_i_has_next(&ite) ) mrbc_print(", ");
 800a744:	f107 031c 	add.w	r3, r7, #28
 800a748:	4618      	mov	r0, r3
 800a74a:	f7ff fb63 	bl	8009e14 <mrbc_hash_i_has_next>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <mrbc_print_sub+0x216>
 800a754:	482b      	ldr	r0, [pc, #172]	; (800a804 <mrbc_print_sub+0x2c0>)
 800a756:	f7ff fa9f 	bl	8009c98 <mrbc_print>
    while( mrbc_hash_i_has_next(&ite) ) {
 800a75a:	f107 031c 	add.w	r3, r7, #28
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff fb58 	bl	8009e14 <mrbc_hash_i_has_next>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1db      	bne.n	800a722 <mrbc_print_sub+0x1de>
    }
    mrbc_putchar('}');
 800a76a:	207d      	movs	r0, #125	; 0x7d
 800a76c:	f7ff fc9c 	bl	800a0a8 <mrbc_putchar>
  } break;
 800a770:	e032      	b.n	800a7d8 <mrbc_print_sub+0x294>

  case MRBC_TT_HANDLE:
    mrbc_printf("#<Handle:%08x>", v->handle );
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	4619      	mov	r1, r3
 800a778:	4826      	ldr	r0, [pc, #152]	; (800a814 <mrbc_print_sub+0x2d0>)
 800a77a:	f7ff fce5 	bl	800a148 <mrbc_printf>
    break;
 800a77e:	e02b      	b.n	800a7d8 <mrbc_print_sub+0x294>

  case MRBC_TT_EXCEPTION:
    mrbc_printf("#<%s: %s>", mrbc_symid_to_str(v->exception->cls->sym_id),
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f003 fa58 	bl	800dc40 <mrbc_symid_to_str>
 800a790:	4604      	mov	r4, r0
		 v->exception->message ?
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	68db      	ldr	r3, [r3, #12]
    mrbc_printf("#<%s: %s>", mrbc_symid_to_str(v->exception->cls->sym_id),
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <mrbc_print_sub+0x260>
		   (const char *)v->exception->message :
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	689b      	ldr	r3, [r3, #8]
    mrbc_printf("#<%s: %s>", mrbc_symid_to_str(v->exception->cls->sym_id),
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	e008      	b.n	800a7b6 <mrbc_print_sub+0x272>
		   mrbc_symid_to_str(v->exception->cls->sym_id) );
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f003 fa46 	bl	800dc40 <mrbc_symid_to_str>
 800a7b4:	4603      	mov	r3, r0
    mrbc_printf("#<%s: %s>", mrbc_symid_to_str(v->exception->cls->sym_id),
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	4817      	ldr	r0, [pc, #92]	; (800a818 <mrbc_print_sub+0x2d4>)
 800a7bc:	f7ff fcc4 	bl	800a148 <mrbc_printf>
    break;
 800a7c0:	e00a      	b.n	800a7d8 <mrbc_print_sub+0x294>

  default:
    mrbc_printf("Not support MRBC_TT_XX(%d)", mrbc_type(*v));
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f993 3000 	ldrsb.w	r3, [r3]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4814      	ldr	r0, [pc, #80]	; (800a81c <mrbc_print_sub+0x2d8>)
 800a7cc:	f7ff fcbc 	bl	800a148 <mrbc_printf>
    break;
 800a7d0:	e002      	b.n	800a7d8 <mrbc_print_sub+0x294>
  case MRBC_TT_NIL:					break;
 800a7d2:	bf00      	nop
 800a7d4:	e000      	b.n	800a7d8 <mrbc_print_sub+0x294>
    break;
 800a7d6:	bf00      	nop
  }

  return ret;
 800a7d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	375c      	adds	r7, #92	; 0x5c
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd90      	pop	{r4, r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	0801932c 	.word	0x0801932c
 800a7e8:	08019334 	.word	0x08019334
 800a7ec:	0801933c 	.word	0x0801933c
 800a7f0:	08019344 	.word	0x08019344
 800a7f4:	08019348 	.word	0x08019348
 800a7f8:	0801934c 	.word	0x0801934c
 800a7fc:	08019350 	.word	0x08019350
 800a800:	08019358 	.word	0x08019358
 800a804:	08019368 	.word	0x08019368
 800a808:	08019324 	.word	0x08019324
 800a80c:	08019328 	.word	0x08019328
 800a810:	0801936c 	.word	0x0801936c
 800a814:	08019370 	.word	0x08019370
 800a818:	08019380 	.word	0x08019380
 800a81c:	0801938c 	.word	0x0801938c

0800a820 <mrbc_printf_replace_buffer>:
  @param  pf	pointer to mrbc_printf
  @param  buf	pointer to output buffer.
  @param  size	buffer size.
*/
void mrbc_printf_replace_buffer(mrbc_printf_t *pf, char *buf, int size)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  int p_ofs = pf->p - pf->buf;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	617b      	str	r3, [r7, #20]
  pf->buf = buf;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	601a      	str	r2, [r3, #0]
  pf->buf_end = buf + size - 1;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3b01      	subs	r3, #1
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	441a      	add	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	605a      	str	r2, [r3, #4]
  pf->p = pf->buf + p_ofs;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	441a      	add	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	609a      	str	r2, [r3, #8]
}
 800a856:	bf00      	nop
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
	...

0800a864 <mrbc_printf_main>:
  @retval 1	found a format identifier.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_main( mrbc_printf_t *pf )
{
 800a864:	b480      	push	{r7}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  int ch = -1;
 800a86c:	f04f 33ff 	mov.w	r3, #4294967295
 800a870:	617b      	str	r3, [r7, #20]
  pf->fmt = (struct RPrintfFormat){0};
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	3310      	adds	r3, #16
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	605a      	str	r2, [r3, #4]

  while( pf->p < pf->buf_end && (ch = *pf->fstr) != '\0' ) {
 800a87c:	e019      	b.n	800a8b2 <mrbc_printf_main+0x4e>
    pf->fstr++;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	60da      	str	r2, [r3, #12]
    if( ch == '%' ) {
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	2b25      	cmp	r3, #37	; 0x25
 800a88c:	d109      	bne.n	800a8a2 <mrbc_printf_main+0x3e>
      if( *pf->fstr == '%' ) {	// is "%%"
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2b25      	cmp	r3, #37	; 0x25
 800a896:	d121      	bne.n	800a8dc <mrbc_printf_main+0x78>
	pf->fstr++;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	60da      	str	r2, [r3, #12]
      } else {
	goto PARSE_FLAG;
      }
    }
    *pf->p++ = ch;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	1c59      	adds	r1, r3, #1
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	6091      	str	r1, [r2, #8]
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	b2d2      	uxtb	r2, r2
 800a8b0:	701a      	strb	r2, [r3, #0]
  while( pf->p < pf->buf_end && (ch = *pf->fstr) != '\0' ) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d206      	bcs.n	800a8cc <mrbc_printf_main+0x68>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1d8      	bne.n	800a87e <mrbc_printf_main+0x1a>
  }
  return -(ch != '\0');
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bf14      	ite	ne
 800a8d2:	2301      	movne	r3, #1
 800a8d4:	2300      	moveq	r3, #0
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	425b      	negs	r3, r3
 800a8da:	e0b5      	b.n	800aa48 <mrbc_printf_main+0x1e4>
	goto PARSE_FLAG;
 800a8dc:	bf00      	nop


 PARSE_FLAG:
  // parse format - '%' [flag] [width] [.precision] type
  //   e.g. "%05d"
  while( (ch = *pf->fstr) ) {
 800a8de:	e046      	b.n	800a96e <mrbc_printf_main+0x10a>
    switch( ch ) {
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	3b20      	subs	r3, #32
 800a8e4:	2b10      	cmp	r3, #16
 800a8e6:	d84a      	bhi.n	800a97e <mrbc_printf_main+0x11a>
 800a8e8:	a201      	add	r2, pc, #4	; (adr r2, 800a8f0 <mrbc_printf_main+0x8c>)
 800a8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ee:	bf00      	nop
 800a8f0:	0800a941 	.word	0x0800a941
 800a8f4:	0800a97f 	.word	0x0800a97f
 800a8f8:	0800a97f 	.word	0x0800a97f
 800a8fc:	0800a97f 	.word	0x0800a97f
 800a900:	0800a97f 	.word	0x0800a97f
 800a904:	0800a97f 	.word	0x0800a97f
 800a908:	0800a97f 	.word	0x0800a97f
 800a90c:	0800a97f 	.word	0x0800a97f
 800a910:	0800a97f 	.word	0x0800a97f
 800a914:	0800a97f 	.word	0x0800a97f
 800a918:	0800a97f 	.word	0x0800a97f
 800a91c:	0800a935 	.word	0x0800a935
 800a920:	0800a97f 	.word	0x0800a97f
 800a924:	0800a94d 	.word	0x0800a94d
 800a928:	0800a97f 	.word	0x0800a97f
 800a92c:	0800a97f 	.word	0x0800a97f
 800a930:	0800a959 	.word	0x0800a959
    case '+': pf->fmt.flag_plus = 1; break;
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	7c53      	ldrb	r3, [r2, #17]
 800a938:	f043 0301 	orr.w	r3, r3, #1
 800a93c:	7453      	strb	r3, [r2, #17]
 800a93e:	e011      	b.n	800a964 <mrbc_printf_main+0x100>
    case ' ': pf->fmt.flag_space = 1; break;
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	7c53      	ldrb	r3, [r2, #17]
 800a944:	f043 0304 	orr.w	r3, r3, #4
 800a948:	7453      	strb	r3, [r2, #17]
 800a94a:	e00b      	b.n	800a964 <mrbc_printf_main+0x100>
    case '-': pf->fmt.flag_minus = 1; break;
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	7c53      	ldrb	r3, [r2, #17]
 800a950:	f043 0302 	orr.w	r3, r3, #2
 800a954:	7453      	strb	r3, [r2, #17]
 800a956:	e005      	b.n	800a964 <mrbc_printf_main+0x100>
    case '0': pf->fmt.flag_zero = 1; break;
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	7c53      	ldrb	r3, [r2, #17]
 800a95c:	f043 0308 	orr.w	r3, r3, #8
 800a960:	7453      	strb	r3, [r2, #17]
 800a962:	bf00      	nop
    default : goto PARSE_WIDTH;
    }
    pf->fstr++;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60da      	str	r2, [r3, #12]
  while( (ch = *pf->fstr) ) {
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	617b      	str	r3, [r7, #20]
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1b1      	bne.n	800a8e0 <mrbc_printf_main+0x7c>
  }

 PARSE_WIDTH:
 800a97c:	e000      	b.n	800a980 <mrbc_printf_main+0x11c>
    default : goto PARSE_WIDTH;
 800a97e:	bf00      	nop
  while( (void)(ch = *pf->fstr - '0'), (0 <= ch && ch <= 9)) {	// isdigit()
 800a980:	e014      	b.n	800a9ac <mrbc_printf_main+0x148>
    pf->fmt.width = pf->fmt.width * 10 + ch;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	461a      	mov	r2, r3
 800a98c:	0092      	lsls	r2, r2, #2
 800a98e:	4413      	add	r3, r2
 800a990:	005b      	lsls	r3, r3, #1
 800a992:	b29a      	uxth	r2, r3
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	b29b      	uxth	r3, r3
 800a998:	4413      	add	r3, r2
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	b21a      	sxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	825a      	strh	r2, [r3, #18]
    pf->fstr++;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	60da      	str	r2, [r3, #12]
  while( (void)(ch = *pf->fstr - '0'), (0 <= ch && ch <= 9)) {	// isdigit()
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	3b30      	subs	r3, #48	; 0x30
 800a9b4:	617b      	str	r3, [r7, #20]
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	db04      	blt.n	800a9c6 <mrbc_printf_main+0x162>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2b09      	cmp	r3, #9
 800a9c0:	dc01      	bgt.n	800a9c6 <mrbc_printf_main+0x162>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e000      	b.n	800a9c8 <mrbc_printf_main+0x164>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1da      	bne.n	800a982 <mrbc_printf_main+0x11e>
  }
  if( *pf->fstr == '.' ) {
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a9d4:	d12a      	bne.n	800aa2c <mrbc_printf_main+0x1c8>
    pf->fstr++;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	60da      	str	r2, [r3, #12]
    while( (void)(ch = *pf->fstr - '0'), (0 <= ch && ch <= 9)) {
 800a9e0:	e014      	b.n	800aa0c <mrbc_printf_main+0x1a8>
      pf->fmt.precision = pf->fmt.precision * 10 + ch;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	0092      	lsls	r2, r2, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	4413      	add	r3, r2
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	b21a      	sxth	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	829a      	strh	r2, [r3, #20]
      pf->fstr++;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	1c5a      	adds	r2, r3, #1
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60da      	str	r2, [r3, #12]
    while( (void)(ch = *pf->fstr - '0'), (0 <= ch && ch <= 9)) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	3b30      	subs	r3, #48	; 0x30
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	db04      	blt.n	800aa26 <mrbc_printf_main+0x1c2>
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2b09      	cmp	r3, #9
 800aa20:	dc01      	bgt.n	800aa26 <mrbc_printf_main+0x1c2>
 800aa22:	2301      	movs	r3, #1
 800aa24:	e000      	b.n	800aa28 <mrbc_printf_main+0x1c4>
 800aa26:	2300      	movs	r3, #0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1da      	bne.n	800a9e2 <mrbc_printf_main+0x17e>
    }
  }
  if( *pf->fstr ) pf->fmt.type = *pf->fstr++;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d007      	beq.n	800aa46 <mrbc_printf_main+0x1e2>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	1c59      	adds	r1, r3, #1
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	60d1      	str	r1, [r2, #12]
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	741a      	strb	r2, [r3, #16]

  return 1;
 800aa46:	2301      	movs	r3, #1
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	371c      	adds	r7, #28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <mrbc_printf_char>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_char( mrbc_printf_t *pf, int ch )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  if( pf->fmt.flag_minus ) {
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	7c5b      	ldrb	r3, [r3, #17]
 800aa62:	f003 0302 	and.w	r3, r3, #2
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d010      	beq.n	800aa8e <mrbc_printf_char+0x3a>
    if( pf->p == pf->buf_end ) return -1;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d102      	bne.n	800aa7e <mrbc_printf_char+0x2a>
 800aa78:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7c:	e03b      	b.n	800aaf6 <mrbc_printf_char+0xa2>
    *pf->p++ = ch;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	1c59      	adds	r1, r3, #1
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	6091      	str	r1, [r2, #8]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	b2d2      	uxtb	r2, r2
 800aa8c:	701a      	strb	r2, [r3, #0]
  }

  int width = pf->fmt.width;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800aa94:	60fb      	str	r3, [r7, #12]
  while( --width > 0 ) {
 800aa96:	e00f      	b.n	800aab8 <mrbc_printf_char+0x64>
    if( pf->p == pf->buf_end ) return -1;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689a      	ldr	r2, [r3, #8]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d102      	bne.n	800aaaa <mrbc_printf_char+0x56>
 800aaa4:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa8:	e025      	b.n	800aaf6 <mrbc_printf_char+0xa2>
    *pf->p++ = ' ';
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	1c59      	adds	r1, r3, #1
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	6091      	str	r1, [r2, #8]
 800aab4:	2220      	movs	r2, #32
 800aab6:	701a      	strb	r2, [r3, #0]
  while( --width > 0 ) {
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	dce9      	bgt.n	800aa98 <mrbc_printf_char+0x44>
  }

  if( !pf->fmt.flag_minus ) {
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	7c5b      	ldrb	r3, [r3, #17]
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d110      	bne.n	800aaf4 <mrbc_printf_char+0xa0>
    if( pf->p == pf->buf_end ) return -1;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	689a      	ldr	r2, [r3, #8]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d102      	bne.n	800aae4 <mrbc_printf_char+0x90>
 800aade:	f04f 33ff 	mov.w	r3, #4294967295
 800aae2:	e008      	b.n	800aaf6 <mrbc_printf_char+0xa2>
    *pf->p++ = ch;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	1c59      	adds	r1, r3, #1
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	6091      	str	r1, [r2, #8]
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	b2d2      	uxtb	r2, r2
 800aaf2:	701a      	strb	r2, [r3, #0]
  }

  return 0;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
	...

0800ab04 <mrbc_printf_bstr>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_bstr( mrbc_printf_t *pf, const char *str, int len, int pad )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b089      	sub	sp, #36	; 0x24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	61fb      	str	r3, [r7, #28]

  if( str == NULL ) {
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d103      	bne.n	800ab24 <mrbc_printf_bstr+0x20>
    str = "(null)";
 800ab1c:	4b3b      	ldr	r3, [pc, #236]	; (800ac0c <mrbc_printf_bstr+0x108>)
 800ab1e:	60bb      	str	r3, [r7, #8]
    len = 6;
 800ab20:	2306      	movs	r3, #6
 800ab22:	607b      	str	r3, [r7, #4]
  }
  if( pf->fmt.precision && len > pf->fmt.precision ) len = pf->fmt.precision;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00a      	beq.n	800ab44 <mrbc_printf_bstr+0x40>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ab34:	461a      	mov	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	dd03      	ble.n	800ab44 <mrbc_printf_bstr+0x40>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ab42:	607b      	str	r3, [r7, #4]

  int tw = len;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	61bb      	str	r3, [r7, #24]
  if( pf->fmt.width > len ) tw = pf->fmt.width;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4293      	cmp	r3, r2
 800ab54:	da03      	bge.n	800ab5e <mrbc_printf_bstr+0x5a>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ab5c:	61bb      	str	r3, [r7, #24]

  int remain = pf->buf_end - pf->p;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	613b      	str	r3, [r7, #16]
  if( len > remain ) {
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	dd04      	ble.n	800ab7c <mrbc_printf_bstr+0x78>
    len = remain;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	607b      	str	r3, [r7, #4]
    ret = -1;
 800ab76:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7a:	61fb      	str	r3, [r7, #28]
  }
  if( tw > remain ) {
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	dd04      	ble.n	800ab8e <mrbc_printf_bstr+0x8a>
    tw = remain;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	61bb      	str	r3, [r7, #24]
    ret = -1;
 800ab88:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8c:	61fb      	str	r3, [r7, #28]
  }

  int n_pad = tw - len;
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	617b      	str	r3, [r7, #20]

  if( !pf->fmt.flag_minus ) {
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	7c5b      	ldrb	r3, [r3, #17]
 800ab9a:	f003 0302 	and.w	r3, r3, #2
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d118      	bne.n	800abd6 <mrbc_printf_bstr+0xd2>
    while( n_pad-- > 0 ) {
 800aba4:	e007      	b.n	800abb6 <mrbc_printf_bstr+0xb2>
      *pf->p++ = pad;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	1c59      	adds	r1, r3, #1
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	6091      	str	r1, [r2, #8]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	b2d2      	uxtb	r2, r2
 800abb4:	701a      	strb	r2, [r3, #0]
    while( n_pad-- > 0 ) {
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	1e5a      	subs	r2, r3, #1
 800abba:	617a      	str	r2, [r7, #20]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	dcf2      	bgt.n	800aba6 <mrbc_printf_bstr+0xa2>
    }
  }
  while( len-- > 0 ) {
 800abc0:	e009      	b.n	800abd6 <mrbc_printf_bstr+0xd2>
    *pf->p++ = *str++;
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	1c53      	adds	r3, r2, #1
 800abc6:	60bb      	str	r3, [r7, #8]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	1c58      	adds	r0, r3, #1
 800abce:	68f9      	ldr	r1, [r7, #12]
 800abd0:	6088      	str	r0, [r1, #8]
 800abd2:	7812      	ldrb	r2, [r2, #0]
 800abd4:	701a      	strb	r2, [r3, #0]
  while( len-- > 0 ) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	1e5a      	subs	r2, r3, #1
 800abda:	607a      	str	r2, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	dcf0      	bgt.n	800abc2 <mrbc_printf_bstr+0xbe>
  }
  while( n_pad-- > 0 ) {
 800abe0:	e007      	b.n	800abf2 <mrbc_printf_bstr+0xee>
    *pf->p++ = pad;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	1c59      	adds	r1, r3, #1
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	6091      	str	r1, [r2, #8]
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	b2d2      	uxtb	r2, r2
 800abf0:	701a      	strb	r2, [r3, #0]
  while( n_pad-- > 0 ) {
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	1e5a      	subs	r2, r3, #1
 800abf6:	617a      	str	r2, [r7, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dcf2      	bgt.n	800abe2 <mrbc_printf_bstr+0xde>
  }

  return ret;
 800abfc:	69fb      	ldr	r3, [r7, #28]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3724      	adds	r7, #36	; 0x24
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	08019304 	.word	0x08019304

0800ac10 <mrbc_printf_int>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_int( mrbc_printf_t *pf, mrbc_int_t value, unsigned int base )
{
 800ac10:	b480      	push	{r7}
 800ac12:	b097      	sub	sp, #92	; 0x5c
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
  int sign = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	657b      	str	r3, [r7, #84]	; 0x54
  mrbc_uint_t v = value;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	653b      	str	r3, [r7, #80]	; 0x50
  char *pf_p_ini_val = pf->p;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	63bb      	str	r3, [r7, #56]	; 0x38

  if( value < 0 ) {
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	da05      	bge.n	800ac3c <mrbc_printf_int+0x2c>
    sign = '-';
 800ac30:	232d      	movs	r3, #45	; 0x2d
 800ac32:	657b      	str	r3, [r7, #84]	; 0x54
    v = -value;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	425b      	negs	r3, r3
 800ac38:	653b      	str	r3, [r7, #80]	; 0x50
 800ac3a:	e012      	b.n	800ac62 <mrbc_printf_int+0x52>
  } else if( pf->fmt.flag_plus ) {
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	7c5b      	ldrb	r3, [r3, #17]
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <mrbc_printf_int+0x40>
    sign = '+';
 800ac4a:	232b      	movs	r3, #43	; 0x2b
 800ac4c:	657b      	str	r3, [r7, #84]	; 0x54
 800ac4e:	e008      	b.n	800ac62 <mrbc_printf_int+0x52>
  } else if( pf->fmt.flag_space ) {
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	7c5b      	ldrb	r3, [r3, #17]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <mrbc_printf_int+0x52>
    sign = ' ';
 800ac5e:	2320      	movs	r3, #32
 800ac60:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // disable zero padding if conflict parameters exists.
  if( pf->fmt.flag_minus || pf->fmt.width == 0 || pf->fmt.precision != 0 ) {
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	7c5b      	ldrb	r3, [r3, #17]
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d109      	bne.n	800ac84 <mrbc_printf_int+0x74>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d004      	beq.n	800ac84 <mrbc_printf_int+0x74>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <mrbc_printf_int+0x7e>
    pf->fmt.flag_zero = 0;
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	7c53      	ldrb	r3, [r2, #17]
 800ac88:	f36f 03c3 	bfc	r3, #3, #1
 800ac8c:	7453      	strb	r3, [r2, #17]
  }

  // create string to temporary buffer
  char buf[sizeof(mrbc_int_t) * 8];
  char *p = buf + sizeof(buf);
 800ac8e:	f107 0310 	add.w	r3, r7, #16
 800ac92:	3320      	adds	r3, #32
 800ac94:	64fb      	str	r3, [r7, #76]	; 0x4c

  do {
    unsigned int ch = v % base;
 800ac96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	fb01 f202 	mul.w	r2, r1, r2
 800aca4:	1a9b      	subs	r3, r3, r2
 800aca6:	637b      	str	r3, [r7, #52]	; 0x34
    *--p = ch + ((ch < 10)? '0' : 'a' - 10);
 800aca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acaa:	2b09      	cmp	r3, #9
 800acac:	d801      	bhi.n	800acb2 <mrbc_printf_int+0xa2>
 800acae:	2230      	movs	r2, #48	; 0x30
 800acb0:	e000      	b.n	800acb4 <mrbc_printf_int+0xa4>
 800acb2:	2257      	movs	r2, #87	; 0x57
 800acb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800acba:	3901      	subs	r1, #1
 800acbc:	64f9      	str	r1, [r7, #76]	; 0x4c
 800acbe:	4413      	add	r3, r2
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc4:	701a      	strb	r2, [r3, #0]
    v /= base;
 800acc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	fbb2 f3f3 	udiv	r3, r2, r3
 800acce:	653b      	str	r3, [r7, #80]	; 0x50
  } while( v != 0 );
 800acd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1df      	bne.n	800ac96 <mrbc_printf_int+0x86>

  int dig_width = buf + sizeof(buf) - p;
 800acd6:	f107 0310 	add.w	r3, r7, #16
 800acda:	3320      	adds	r3, #32
 800acdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800acde:	1a9b      	subs	r3, r3, r2
 800ace0:	64bb      	str	r3, [r7, #72]	; 0x48

  // write padding character, if adjust right.
  if( !pf->fmt.flag_minus && pf->fmt.width ) {
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	7c5b      	ldrb	r3, [r3, #17]
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b00      	cmp	r3, #0
 800acee:	d13e      	bne.n	800ad6e <mrbc_printf_int+0x15e>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d039      	beq.n	800ad6e <mrbc_printf_int+0x15e>
    int pad = pf->fmt.flag_zero ? '0' : ' ';
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	7c5b      	ldrb	r3, [r3, #17]
 800acfe:	f003 0308 	and.w	r3, r3, #8
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <mrbc_printf_int+0xfc>
 800ad08:	2330      	movs	r3, #48	; 0x30
 800ad0a:	e000      	b.n	800ad0e <mrbc_printf_int+0xfe>
 800ad0c:	2320      	movs	r3, #32
 800ad0e:	633b      	str	r3, [r7, #48]	; 0x30
    int pad_width = pf->fmt.width - !!sign;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	bf14      	ite	ne
 800ad1e:	2301      	movne	r3, #1
 800ad20:	2300      	moveq	r3, #0
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	647b      	str	r3, [r7, #68]	; 0x44
    pad_width -= (pf->fmt.precision > dig_width)? pf->fmt.precision: dig_width;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad32:	4293      	cmp	r3, r2
 800ad34:	bfb8      	it	lt
 800ad36:	4613      	movlt	r3, r2
 800ad38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	647b      	str	r3, [r7, #68]	; 0x44

    for( ; pad_width > 0; pad_width-- ) {
 800ad3e:	e013      	b.n	800ad68 <mrbc_printf_int+0x158>
      *pf->p++ = pad;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	1c59      	adds	r1, r3, #1
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	6091      	str	r1, [r2, #8]
 800ad4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad4c:	b2d2      	uxtb	r2, r2
 800ad4e:	701a      	strb	r2, [r3, #0]
      if( pf->p >= pf->buf_end ) return -1;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	689a      	ldr	r2, [r3, #8]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d302      	bcc.n	800ad62 <mrbc_printf_int+0x152>
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad60:	e07f      	b.n	800ae62 <mrbc_printf_int+0x252>
    for( ; pad_width > 0; pad_width-- ) {
 800ad62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad64:	3b01      	subs	r3, #1
 800ad66:	647b      	str	r3, [r7, #68]	; 0x44
 800ad68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	dce8      	bgt.n	800ad40 <mrbc_printf_int+0x130>
    }
  }

  // sign
  if( sign ) {
 800ad6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d010      	beq.n	800ad96 <mrbc_printf_int+0x186>
    *pf->p++ = sign;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	1c59      	adds	r1, r3, #1
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	6091      	str	r1, [r2, #8]
 800ad7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad80:	b2d2      	uxtb	r2, r2
 800ad82:	701a      	strb	r2, [r3, #0]
    if( pf->p >= pf->buf_end ) return -1;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d302      	bcc.n	800ad96 <mrbc_printf_int+0x186>
 800ad90:	f04f 33ff 	mov.w	r3, #4294967295
 800ad94:	e065      	b.n	800ae62 <mrbc_printf_int+0x252>
  }

  // precision
  int pre_width = pf->fmt.precision - dig_width;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	643b      	str	r3, [r7, #64]	; 0x40
  for( ; pre_width > 0; pre_width-- ) {
 800ada4:	e012      	b.n	800adcc <mrbc_printf_int+0x1bc>
    *pf->p++ = '0';
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	1c59      	adds	r1, r3, #1
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	6091      	str	r1, [r2, #8]
 800adb0:	2230      	movs	r2, #48	; 0x30
 800adb2:	701a      	strb	r2, [r3, #0]
    if( pf->p >= pf->buf_end ) return -1;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d302      	bcc.n	800adc6 <mrbc_printf_int+0x1b6>
 800adc0:	f04f 33ff 	mov.w	r3, #4294967295
 800adc4:	e04d      	b.n	800ae62 <mrbc_printf_int+0x252>
  for( ; pre_width > 0; pre_width-- ) {
 800adc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc8:	3b01      	subs	r3, #1
 800adca:	643b      	str	r3, [r7, #64]	; 0x40
 800adcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adce:	2b00      	cmp	r3, #0
 800add0:	dce9      	bgt.n	800ada6 <mrbc_printf_int+0x196>
  }

  // digit
  for( ; dig_width > 0; dig_width-- ) {
 800add2:	e015      	b.n	800ae00 <mrbc_printf_int+0x1f0>
    *pf->p++ = *p++;
 800add4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800add6:	1c53      	adds	r3, r2, #1
 800add8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	1c58      	adds	r0, r3, #1
 800ade0:	68f9      	ldr	r1, [r7, #12]
 800ade2:	6088      	str	r0, [r1, #8]
 800ade4:	7812      	ldrb	r2, [r2, #0]
 800ade6:	701a      	strb	r2, [r3, #0]
    if( pf->p >= pf->buf_end ) return -1;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	689a      	ldr	r2, [r3, #8]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d302      	bcc.n	800adfa <mrbc_printf_int+0x1ea>
 800adf4:	f04f 33ff 	mov.w	r3, #4294967295
 800adf8:	e033      	b.n	800ae62 <mrbc_printf_int+0x252>
  for( ; dig_width > 0; dig_width-- ) {
 800adfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adfc:	3b01      	subs	r3, #1
 800adfe:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	dce6      	bgt.n	800add4 <mrbc_printf_int+0x1c4>
  }

  // write space, if adjust left.
  if( pf->fmt.flag_minus && pf->fmt.width ) {
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	7c5b      	ldrb	r3, [r3, #17]
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d025      	beq.n	800ae60 <mrbc_printf_int+0x250>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d020      	beq.n	800ae60 <mrbc_printf_int+0x250>
    int pad_width = pf->fmt.width - (pf->p - pf_p_ini_val);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ae24:	4619      	mov	r1, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	689a      	ldr	r2, [r3, #8]
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	1acb      	subs	r3, r1, r3
 800ae30:	63fb      	str	r3, [r7, #60]	; 0x3c
    for( ; pad_width > 0; pad_width-- ) {
 800ae32:	e012      	b.n	800ae5a <mrbc_printf_int+0x24a>
      *pf->p++ = ' ';
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	1c59      	adds	r1, r3, #1
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	6091      	str	r1, [r2, #8]
 800ae3e:	2220      	movs	r2, #32
 800ae40:	701a      	strb	r2, [r3, #0]
      if( pf->p >= pf->buf_end ) return -1;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	689a      	ldr	r2, [r3, #8]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d302      	bcc.n	800ae54 <mrbc_printf_int+0x244>
 800ae4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae52:	e006      	b.n	800ae62 <mrbc_printf_int+0x252>
    for( ; pad_width > 0; pad_width-- ) {
 800ae54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae56:	3b01      	subs	r3, #1
 800ae58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dce9      	bgt.n	800ae34 <mrbc_printf_int+0x224>
    }
  }

  return 0;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	375c      	adds	r7, #92	; 0x5c
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
	...

0800ae70 <mrbc_printf_bit>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_bit( mrbc_printf_t *pf, mrbc_int_t value, int bit )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b096      	sub	sp, #88	; 0x58
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  if( pf->fmt.flag_plus || pf->fmt.flag_space ) {
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	7c5b      	ldrb	r3, [r3, #17]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d106      	bne.n	800ae98 <mrbc_printf_bit+0x28>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	7c5b      	ldrb	r3, [r3, #17]
 800ae8e:	f003 0304 	and.w	r3, r3, #4
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00a      	beq.n	800aeae <mrbc_printf_bit+0x3e>
    return mrbc_printf_int( pf, value, 1 << bit );
 800ae98:	2201      	movs	r2, #1
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aea0:	461a      	mov	r2, r3
 800aea2:	68b9      	ldr	r1, [r7, #8]
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f7ff feb3 	bl	800ac10 <mrbc_printf_int>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	e0a3      	b.n	800aff6 <mrbc_printf_bit+0x186>
  }

  if( pf->fmt.flag_minus || pf->fmt.width == 0 ) {
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	7c5b      	ldrb	r3, [r3, #17]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d104      	bne.n	800aec6 <mrbc_printf_bit+0x56>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d104      	bne.n	800aed0 <mrbc_printf_bit+0x60>
    pf->fmt.flag_zero = 0; // disable zero padding if left align or width zero.
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	7c53      	ldrb	r3, [r2, #17]
 800aeca:	f36f 03c3 	bfc	r3, #3, #1
 800aece:	7453      	strb	r3, [r2, #17]
  }
  pf->fmt.precision = 0;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	829a      	strh	r2, [r3, #20]

  mrbc_int_t v = value;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	657b      	str	r3, [r7, #84]	; 0x54
  int offset_a = (pf->fmt.type == 'X') ? 'A' - 10 : 'a' - 10;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	7c1b      	ldrb	r3, [r3, #16]
 800aede:	2b58      	cmp	r3, #88	; 0x58
 800aee0:	d101      	bne.n	800aee6 <mrbc_printf_bit+0x76>
 800aee2:	2337      	movs	r3, #55	; 0x37
 800aee4:	e000      	b.n	800aee8 <mrbc_printf_bit+0x78>
 800aee6:	2357      	movs	r3, #87	; 0x57
 800aee8:	64bb      	str	r3, [r7, #72]	; 0x48
  int mask = (1 << bit) - 1;	// 0x0f, 0x07, 0x01
 800aeea:	2201      	movs	r2, #1
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	fa02 f303 	lsl.w	r3, r2, r3
 800aef2:	3b01      	subs	r3, #1
 800aef4:	647b      	str	r3, [r7, #68]	; 0x44
  int mchar = mask + ((mask < 10)? '0' : offset_a);
 800aef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef8:	2b09      	cmp	r3, #9
 800aefa:	dd01      	ble.n	800af00 <mrbc_printf_bit+0x90>
 800aefc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aefe:	e000      	b.n	800af02 <mrbc_printf_bit+0x92>
 800af00:	2330      	movs	r3, #48	; 0x30
 800af02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af04:	4413      	add	r3, r2
 800af06:	643b      	str	r3, [r7, #64]	; 0x40

  // create string to local buffer
  char buf[sizeof(mrbc_int_t) * 8 + 5];
  assert( sizeof(buf) > (sizeof(mrbc_int_t) * 8 + 4) );
  char *p = buf + sizeof(buf) - 1;
 800af08:	f107 0314 	add.w	r3, r7, #20
 800af0c:	3324      	adds	r3, #36	; 0x24
 800af0e:	653b      	str	r3, [r7, #80]	; 0x50
  *p = '\0';
 800af10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af12:	2200      	movs	r2, #0
 800af14:	701a      	strb	r2, [r3, #0]
  int n;
  do {
    assert( p >= buf );
 800af16:	f107 0314 	add.w	r3, r7, #20
 800af1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d206      	bcs.n	800af2e <mrbc_printf_bit+0xbe>
 800af20:	4b37      	ldr	r3, [pc, #220]	; (800b000 <mrbc_printf_bit+0x190>)
 800af22:	4a38      	ldr	r2, [pc, #224]	; (800b004 <mrbc_printf_bit+0x194>)
 800af24:	f240 3121 	movw	r1, #801	; 0x321
 800af28:	4837      	ldr	r0, [pc, #220]	; (800b008 <mrbc_printf_bit+0x198>)
 800af2a:	f00a fb8b 	bl	8015644 <__assert_func>
    n = v & mask;
 800af2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af32:	4013      	ands	r3, r2
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
    *--p = n + ((n < 10)? '0' : offset_a);
 800af36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af38:	2b09      	cmp	r3, #9
 800af3a:	dd02      	ble.n	800af42 <mrbc_printf_bit+0xd2>
 800af3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	e000      	b.n	800af44 <mrbc_printf_bit+0xd4>
 800af42:	2330      	movs	r3, #48	; 0x30
 800af44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af46:	b2d2      	uxtb	r2, r2
 800af48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af4a:	3901      	subs	r1, #1
 800af4c:	6539      	str	r1, [r7, #80]	; 0x50
 800af4e:	4413      	add	r3, r2
 800af50:	b2da      	uxtb	r2, r3
 800af52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af54:	701a      	strb	r2, [r3, #0]
    v >>= bit;
 800af56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	fa42 f303 	asr.w	r3, r2, r3
 800af5e:	657b      	str	r3, [r7, #84]	; 0x54
  } while( v != 0 && v != -1 );
 800af60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <mrbc_printf_bit+0xfe>
 800af66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6c:	d1d3      	bne.n	800af16 <mrbc_printf_bit+0xa6>

  // add "..f" for negative value?
  // (note) '0' flag such as "%08x" is incompatible with ruby.
  if( value < 0 && !pf->fmt.flag_zero ) {
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	da29      	bge.n	800afc8 <mrbc_printf_bit+0x158>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	7c5b      	ldrb	r3, [r3, #17]
 800af78:	f003 0308 	and.w	r3, r3, #8
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d122      	bne.n	800afc8 <mrbc_printf_bit+0x158>
    if( n != mask ) *--p = mchar;
 800af82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af86:	429a      	cmp	r2, r3
 800af88:	d006      	beq.n	800af98 <mrbc_printf_bit+0x128>
 800af8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af8c:	3b01      	subs	r3, #1
 800af8e:	653b      	str	r3, [r7, #80]	; 0x50
 800af90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af92:	b2da      	uxtb	r2, r3
 800af94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af96:	701a      	strb	r2, [r3, #0]
    *--p = '.';
 800af98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af9a:	3b01      	subs	r3, #1
 800af9c:	653b      	str	r3, [r7, #80]	; 0x50
 800af9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afa0:	222e      	movs	r2, #46	; 0x2e
 800afa2:	701a      	strb	r2, [r3, #0]
    *--p = '.';
 800afa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afa6:	3b01      	subs	r3, #1
 800afa8:	653b      	str	r3, [r7, #80]	; 0x50
 800afaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afac:	222e      	movs	r2, #46	; 0x2e
 800afae:	701a      	strb	r2, [r3, #0]
    assert( p >= buf );
 800afb0:	f107 0314 	add.w	r3, r7, #20
 800afb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d206      	bcs.n	800afc8 <mrbc_printf_bit+0x158>
 800afba:	4b11      	ldr	r3, [pc, #68]	; (800b000 <mrbc_printf_bit+0x190>)
 800afbc:	4a11      	ldr	r2, [pc, #68]	; (800b004 <mrbc_printf_bit+0x194>)
 800afbe:	f240 312d 	movw	r1, #813	; 0x32d
 800afc2:	4811      	ldr	r0, [pc, #68]	; (800b008 <mrbc_printf_bit+0x198>)
 800afc4:	f00a fb3e 	bl	8015644 <__assert_func>
  }

  // decide pad character and output sign character
  int pad;
  if( pf->fmt.flag_zero ) {
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	7c5b      	ldrb	r3, [r3, #17]
 800afcc:	f003 0308 	and.w	r3, r3, #8
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d007      	beq.n	800afe6 <mrbc_printf_bit+0x176>
    pad = (value < 0) ? mchar : '0';
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	da01      	bge.n	800afe0 <mrbc_printf_bit+0x170>
 800afdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afde:	e000      	b.n	800afe2 <mrbc_printf_bit+0x172>
 800afe0:	2330      	movs	r3, #48	; 0x30
 800afe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afe4:	e001      	b.n	800afea <mrbc_printf_bit+0x17a>
  } else {
    pad = ' ';
 800afe6:	2320      	movs	r3, #32
 800afe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  return mrbc_printf_str( pf, p, pad );
 800afea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7fe feaf 	bl	8009d52 <mrbc_printf_str>
 800aff4:	4603      	mov	r3, r0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3758      	adds	r7, #88	; 0x58
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	080193a8 	.word	0x080193a8
 800b004:	0801ae90 	.word	0x0801ae90
 800b008:	080193b4 	.word	0x080193b4

0800b00c <mrbc_printf_float>:
  @param  value	output value.
  @retval 0	done.
  @retval -1	buffer full.
*/
int mrbc_printf_float( mrbc_printf_t *pf, double value )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b08c      	sub	sp, #48	; 0x30
 800b010:	af02      	add	r7, sp, #8
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	ed87 0b00 	vstr	d0, [r7]
  char fstr[16];
  const char *p1 = pf->fstr;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	627b      	str	r3, [r7, #36]	; 0x24
  char *p2 = fstr + sizeof(fstr) - 1;
 800b01e:	f107 0310 	add.w	r3, r7, #16
 800b022:	330f      	adds	r3, #15
 800b024:	623b      	str	r3, [r7, #32]

  *p2 = '\0';
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	2200      	movs	r2, #0
 800b02a:	701a      	strb	r2, [r3, #0]
  while( (*--p2 = *--p1) != '%' )
 800b02c:	bf00      	nop
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	3b01      	subs	r3, #1
 800b032:	627b      	str	r3, [r7, #36]	; 0x24
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	3b01      	subs	r3, #1
 800b038:	623b      	str	r3, [r7, #32]
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	781a      	ldrb	r2, [r3, #0]
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	2b25      	cmp	r3, #37	; 0x25
 800b048:	d1f1      	bne.n	800b02e <mrbc_printf_float+0x22>
    ;

  snprintf( pf->p, (pf->buf_end - pf->p + 1), p2, value );
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6898      	ldr	r0, [r3, #8]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	3301      	adds	r3, #1
 800b05a:	4619      	mov	r1, r3
 800b05c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b060:	e9cd 2300 	strd	r2, r3, [sp]
 800b064:	6a3a      	ldr	r2, [r7, #32]
 800b066:	f00b fa8b 	bl	8016580 <sniprintf>

  while( *pf->p != '\0' )
 800b06a:	e004      	b.n	800b076 <mrbc_printf_float+0x6a>
    pf->p++;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	1c5a      	adds	r2, r3, #1
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	609a      	str	r2, [r3, #8]
  while( *pf->p != '\0' )
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1f5      	bne.n	800b06c <mrbc_printf_float+0x60>

  return -(pf->p == pf->buf_end);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	429a      	cmp	r2, r3
 800b08a:	bf0c      	ite	eq
 800b08c:	2301      	moveq	r3, #1
 800b08e:	2300      	movne	r3, #0
 800b090:	b2db      	uxtb	r3, r3
 800b092:	425b      	negs	r3, r3
}
 800b094:	4618      	mov	r0, r3
 800b096:	3728      	adds	r7, #40	; 0x28
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <mrbc_printf_pointer>:
    display '$00000000' style only.
    up to 8 digits, even if 64bit machines.
    not support sign, width, precision and other parameters.
*/
int mrbc_printf_pointer( mrbc_printf_t *pf, void *ptr )
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
#if defined(UINTPTR_MAX)
  uintptr_t v = (uintptr_t)ptr;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	617b      	str	r3, [r7, #20]
#else
  int v = (int)ptr; // regal (void* to int), but implementation defined.
#endif
  int n = sizeof(ptr) * 2;
 800b0aa:	2308      	movs	r3, #8
 800b0ac:	613b      	str	r3, [r7, #16]
  if( n > 8 ) n = 8;
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	2b08      	cmp	r3, #8
 800b0b2:	dd01      	ble.n	800b0b8 <mrbc_printf_pointer+0x1c>
 800b0b4:	2308      	movs	r3, #8
 800b0b6:	613b      	str	r3, [r7, #16]

  // check buffer size.
  if( (pf->buf_end - pf->p) < n+1 ) return -1;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	693a      	ldr	r2, [r7, #16]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	db02      	blt.n	800b0ce <mrbc_printf_pointer+0x32>
 800b0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0cc:	e033      	b.n	800b136 <mrbc_printf_pointer+0x9a>

  // write pointer value.
  *pf->p++ = '$';
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	1c59      	adds	r1, r3, #1
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	6091      	str	r1, [r2, #8]
 800b0d8:	2224      	movs	r2, #36	; 0x24
 800b0da:	701a      	strb	r2, [r3, #0]
  pf->p += n;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	689a      	ldr	r2, [r3, #8]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	441a      	add	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	609a      	str	r2, [r3, #8]
  char *p = pf->p - 1;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	60fb      	str	r3, [r7, #12]

  for(; n > 0; n-- ) {
 800b0f0:	e01d      	b.n	800b12e <mrbc_printf_pointer+0x92>
    *p-- = (v & 0xf) < 10 ? (v & 0xf) + '0' : (v & 0xf) - 10 + 'a';
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f003 030f 	and.w	r3, r3, #15
 800b0f8:	2b09      	cmp	r3, #9
 800b0fa:	d807      	bhi.n	800b10c <mrbc_printf_pointer+0x70>
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	b2db      	uxtb	r3, r3
 800b106:	3330      	adds	r3, #48	; 0x30
 800b108:	b2da      	uxtb	r2, r3
 800b10a:	e006      	b.n	800b11a <mrbc_printf_pointer+0x7e>
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	f003 030f 	and.w	r3, r3, #15
 800b114:	b2db      	uxtb	r3, r3
 800b116:	3357      	adds	r3, #87	; 0x57
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	1e59      	subs	r1, r3, #1
 800b11e:	60f9      	str	r1, [r7, #12]
 800b120:	701a      	strb	r2, [r3, #0]
    v >>= 4;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	091b      	lsrs	r3, r3, #4
 800b126:	617b      	str	r3, [r7, #20]
  for(; n > 0; n-- ) {
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	613b      	str	r3, [r7, #16]
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	dcde      	bgt.n	800b0f2 <mrbc_printf_pointer+0x56>
  }

  return 0;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	371c      	adds	r7, #28
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
	...

0800b144 <mrbc_decref>:
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f993 3000 	ldrsb.w	r3, [r3]
 800b152:	2b07      	cmp	r3, #7
 800b154:	dd2c      	ble.n	800b1b0 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	885b      	ldrh	r3, [r3, #2]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d106      	bne.n	800b16e <mrbc_decref+0x2a>
 800b160:	4b16      	ldr	r3, [pc, #88]	; (800b1bc <mrbc_decref+0x78>)
 800b162:	4a17      	ldr	r2, [pc, #92]	; (800b1c0 <mrbc_decref+0x7c>)
 800b164:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800b168:	4816      	ldr	r0, [pc, #88]	; (800b1c4 <mrbc_decref+0x80>)
 800b16a:	f00a fa6b 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	885b      	ldrh	r3, [r3, #2]
 800b174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b178:	4293      	cmp	r3, r2
 800b17a:	d106      	bne.n	800b18a <mrbc_decref+0x46>
 800b17c:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <mrbc_decref+0x84>)
 800b17e:	4a10      	ldr	r2, [pc, #64]	; (800b1c0 <mrbc_decref+0x7c>)
 800b180:	f240 11d3 	movw	r1, #467	; 0x1d3
 800b184:	480f      	ldr	r0, [pc, #60]	; (800b1c4 <mrbc_decref+0x80>)
 800b186:	f00a fa5d 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	885a      	ldrh	r2, [r3, #2]
 800b190:	3a01      	subs	r2, #1
 800b192:	b292      	uxth	r2, r2
 800b194:	805a      	strh	r2, [r3, #2]
 800b196:	885b      	ldrh	r3, [r3, #2]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10b      	bne.n	800b1b4 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f993 3000 	ldrsb.w	r3, [r3]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <mrbc_decref+0x88>)
 800b1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	4798      	blx	r3
 800b1ae:	e002      	b.n	800b1b6 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800b1b0:	bf00      	nop
 800b1b2:	e000      	b.n	800b1b6 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800b1b4:	bf00      	nop
}
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	080193d4 	.word	0x080193d4
 800b1c0:	0801aeac 	.word	0x0801aeac
 800b1c4:	080193ec 	.word	0x080193ec
 800b1c8:	08019408 	.word	0x08019408
 800b1cc:	0801be98 	.word	0x0801be98

0800b1d0 <mrbc_string_new_cstr>:
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d004      	beq.n	800b1ec <mrbc_string_new_cstr+0x1c>
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7f5 f806 	bl	80001f4 <strlen>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	e000      	b.n	800b1ee <mrbc_string_new_cstr+0x1e>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	68b9      	ldr	r1, [r7, #8]
 800b1f4:	f7fb ffda 	bl	80071ac <mrbc_string_new>
}
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <mrbc_string_size>:
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  return str->string->size;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	889b      	ldrh	r3, [r3, #4]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <mrbc_string_cstr>:
{
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	689b      	ldr	r3, [r3, #8]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <sub_exception_new>:
/***** Function prototypes **************************************************/
/***** Local variables ******************************************************/
/***** Global variables *****************************************************/
/***** Local functions ******************************************************/
static mrbc_exception * sub_exception_new(struct VM *vm, struct RClass *exc_cls)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  // allocate memory for instance.
  mrbc_exception *ex = mrbc_alloc( vm, sizeof(mrbc_exception) );
 800b23e:	2020      	movs	r0, #32
 800b240:	f7f6 fc42 	bl	8001ac8 <mrbc_raw_alloc>
 800b244:	60f8      	str	r0, [r7, #12]
  if( !ex ) return ex;		// ENOMEM
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d101      	bne.n	800b250 <sub_exception_new+0x1c>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	e030      	b.n	800b2b2 <sub_exception_new+0x7e>

  MRBC_INIT_OBJECT_HEADER( ex, "EX" );
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2201      	movs	r2, #1
 800b254:	805a      	strh	r2, [r3, #2]
 800b256:	2245      	movs	r2, #69	; 0x45
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	701a      	strb	r2, [r3, #0]
 800b25c:	2258      	movs	r2, #88	; 0x58
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	705a      	strb	r2, [r3, #1]
  ex->cls = exc_cls;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	605a      	str	r2, [r3, #4]
  ex->method_id = 0;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	811a      	strh	r2, [r3, #8]

  mrbc_callinfo *callinfo = vm->callinfo_tail;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	69db      	ldr	r3, [r3, #28]
 800b272:	617b      	str	r3, [r7, #20]
  for( int i = 0; i < MRBC_EXCEPTION_CALL_NEST_LEVEL; i++ ) {
 800b274:	2300      	movs	r3, #0
 800b276:	613b      	str	r3, [r7, #16]
 800b278:	e017      	b.n	800b2aa <sub_exception_new+0x76>
    if( callinfo ) {
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <sub_exception_new+0x64>
      ex->call_nest[i] = callinfo->method_id;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	3208      	adds	r2, #8
 800b28c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      callinfo = callinfo->prev;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	617b      	str	r3, [r7, #20]
 800b296:	e005      	b.n	800b2a4 <sub_exception_new+0x70>
    } else {
      ex->call_nest[i] = 0;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	3208      	adds	r2, #8
 800b29e:	2100      	movs	r1, #0
 800b2a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for( int i = 0; i < MRBC_EXCEPTION_CALL_NEST_LEVEL; i++ ) {
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	613b      	str	r3, [r7, #16]
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b07      	cmp	r3, #7
 800b2ae:	dde4      	ble.n	800b27a <sub_exception_new+0x46>
    }
  }

  return ex;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
	...

0800b2bc <mrbc_exception_new>:
  @param  message	message.
  @param  len		message length or zero.
  @return		exception object.
*/
mrbc_value mrbc_exception_new(struct VM *vm, struct RClass *exc_cls, const void *message, int len )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08e      	sub	sp, #56	; 0x38
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	603b      	str	r3, [r7, #0]
  mrbc_exception *ex = sub_exception_new( vm, exc_cls );
 800b2ca:	6879      	ldr	r1, [r7, #4]
 800b2cc:	68b8      	ldr	r0, [r7, #8]
 800b2ce:	f7ff ffb1 	bl	800b234 <sub_exception_new>
 800b2d2:	6378      	str	r0, [r7, #52]	; 0x34
  if( !ex ) return mrbc_nil_value();
 800b2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10a      	bne.n	800b2f0 <mrbc_exception_new+0x34>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	2300      	movs	r3, #0
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	6053      	str	r3, [r2, #4]
 800b2e4:	6093      	str	r3, [r2, #8]
 800b2e6:	60d3      	str	r3, [r2, #12]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	701a      	strb	r2, [r3, #0]
  }
  ex->message = buf;

 RETURN:
  return (mrbc_value){.tt = MRBC_TT_EXCEPTION, .exception = ex};
}
 800b2ee:	e04a      	b.n	800b386 <mrbc_exception_new+0xca>
  if( !message ) {
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <mrbc_exception_new+0x48>
    ex->message = 0;
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	60da      	str	r2, [r3, #12]
    ex->message_size = 0;
 800b2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fe:	2200      	movs	r2, #0
 800b300:	815a      	strh	r2, [r3, #10]
    goto RETURN;
 800b302:	e033      	b.n	800b36c <mrbc_exception_new+0xb0>
  if( *(const char *)message == 0 ) {
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d106      	bne.n	800b31a <mrbc_exception_new+0x5e>
    ex->message = (const uint8_t *)"";
 800b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30e:	4a20      	ldr	r2, [pc, #128]	; (800b390 <mrbc_exception_new+0xd4>)
 800b310:	60da      	str	r2, [r3, #12]
    ex->message_size = 0;
 800b312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b314:	2200      	movs	r2, #0
 800b316:	815a      	strh	r2, [r3, #10]
    goto RETURN;
 800b318:	e028      	b.n	800b36c <mrbc_exception_new+0xb0>
  if( len == 0 ) {
 800b31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d106      	bne.n	800b32e <mrbc_exception_new+0x72>
    ex->message = message;
 800b320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	60da      	str	r2, [r3, #12]
    ex->message_size = 0;
 800b326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b328:	2200      	movs	r2, #0
 800b32a:	815a      	strh	r2, [r3, #10]
    goto RETURN;
 800b32c:	e01e      	b.n	800b36c <mrbc_exception_new+0xb0>
  uint8_t *buf = mrbc_alloc( vm, len+1 );
 800b32e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b330:	3301      	adds	r3, #1
 800b332:	4618      	mov	r0, r3
 800b334:	f7f6 fbc8 	bl	8001ac8 <mrbc_raw_alloc>
 800b338:	6338      	str	r0, [r7, #48]	; 0x30
  if( buf ) {
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00f      	beq.n	800b360 <mrbc_exception_new+0xa4>
    memcpy( buf, message, len );
 800b340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b342:	461a      	mov	r2, r3
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b348:	f00b fa55 	bl	80167f6 <memcpy>
    buf[len] = 0;
 800b34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b34e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b350:	4413      	add	r3, r2
 800b352:	2200      	movs	r2, #0
 800b354:	701a      	strb	r2, [r3, #0]
    ex->message_size = len;
 800b356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b358:	b29a      	uxth	r2, r3
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	815a      	strh	r2, [r3, #10]
 800b35e:	e002      	b.n	800b366 <mrbc_exception_new+0xaa>
    ex->message_size = 0;
 800b360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b362:	2200      	movs	r2, #0
 800b364:	815a      	strh	r2, [r3, #10]
  ex->message = buf;
 800b366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b36a:	60da      	str	r2, [r3, #12]
  return (mrbc_value){.tt = MRBC_TT_EXCEPTION, .exception = ex};
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	461a      	mov	r2, r3
 800b370:	2300      	movs	r3, #0
 800b372:	6013      	str	r3, [r2, #0]
 800b374:	6053      	str	r3, [r2, #4]
 800b376:	6093      	str	r3, [r2, #8]
 800b378:	60d3      	str	r3, [r2, #12]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	220e      	movs	r2, #14
 800b37e:	701a      	strb	r2, [r3, #0]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b384:	609a      	str	r2, [r3, #8]
}
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	3738      	adds	r7, #56	; 0x38
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	08019424 	.word	0x08019424

0800b394 <mrbc_exception_new_alloc>:
  @param  message	message buffer.
  @param  len		message length.
  @return		exception object.
*/
mrbc_value mrbc_exception_new_alloc(struct VM *vm, struct RClass *exc_cls, const void *message, int len )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b08e      	sub	sp, #56	; 0x38
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
  mrbc_exception *ex = sub_exception_new( vm, exc_cls );
 800b3a2:	6879      	ldr	r1, [r7, #4]
 800b3a4:	68b8      	ldr	r0, [r7, #8]
 800b3a6:	f7ff ff45 	bl	800b234 <sub_exception_new>
 800b3aa:	6378      	str	r0, [r7, #52]	; 0x34
  if( !ex ) return mrbc_nil_value();
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10a      	bne.n	800b3c8 <mrbc_exception_new_alloc+0x34>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	6053      	str	r3, [r2, #4]
 800b3bc:	6093      	str	r3, [r2, #8]
 800b3be:	60d3      	str	r3, [r2, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	701a      	strb	r2, [r3, #0]

  ex->message_size = len;
  ex->message = message;

  return (mrbc_value){.tt = MRBC_TT_EXCEPTION, .exception = ex};
}
 800b3c6:	e013      	b.n	800b3f0 <mrbc_exception_new_alloc+0x5c>
  ex->message_size = len;
 800b3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ce:	815a      	strh	r2, [r3, #10]
  ex->message = message;
 800b3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	60da      	str	r2, [r3, #12]
  return (mrbc_value){.tt = MRBC_TT_EXCEPTION, .exception = ex};
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	2300      	movs	r3, #0
 800b3dc:	6013      	str	r3, [r2, #0]
 800b3de:	6053      	str	r3, [r2, #4]
 800b3e0:	6093      	str	r3, [r2, #8]
 800b3e2:	60d3      	str	r3, [r2, #12]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	220e      	movs	r2, #14
 800b3e8:	701a      	strb	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3ee:	609a      	str	r2, [r3, #8]
}
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	3738      	adds	r7, #56	; 0x38
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <mrbc_exception_delete>:
/*! destructor

  @param  value		target.
*/
void mrbc_exception_delete(mrbc_value *value)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  if( value->exception->message_size ) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	895b      	ldrh	r3, [r3, #10]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d005      	beq.n	800b416 <mrbc_exception_delete+0x1e>
    mrbc_raw_free( (void *)value->exception->message );
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	4618      	mov	r0, r3
 800b412:	f7f6 fd35 	bl	8001e80 <mrbc_raw_free>
  }
  mrbc_raw_free( value->exception );
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7f6 fd30 	bl	8001e80 <mrbc_raw_free>
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <mrbc_raise>:
  @param  exc_cls	pointer to Exception class or NULL.
  @param  msg		message or NULL.
  @note	(usage) mrbc_raise(vm, MRBC_CLASS(TypeError), "message here.");
*/
void mrbc_raise( struct VM *vm, struct RClass *exc_cls, const char *msg )
{
 800b428:	b590      	push	{r4, r7, lr}
 800b42a:	b08d      	sub	sp, #52	; 0x34
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	61f8      	str	r0, [r7, #28]
 800b430:	61b9      	str	r1, [r7, #24]
 800b432:	617a      	str	r2, [r7, #20]
  if( vm ) {
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d02a      	beq.n	800b490 <mrbc_raise+0x68>
    struct RClass *cls = exc_cls ? exc_cls : MRBC_CLASS(RuntimeError);
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <mrbc_raise+0x1c>
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	e000      	b.n	800b446 <mrbc_raise+0x1e>
 800b444:	4b20      	ldr	r3, [pc, #128]	; (800b4c8 <mrbc_raise+0xa0>)
 800b446:	627b      	str	r3, [r7, #36]	; 0x24
    const char msg_len = msg ? strlen(msg) : 0;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d005      	beq.n	800b45a <mrbc_raise+0x32>
 800b44e:	6978      	ldr	r0, [r7, #20]
 800b450:	f7f4 fed0 	bl	80001f4 <strlen>
 800b454:	4603      	mov	r3, r0
 800b456:	b2db      	uxtb	r3, r3
 800b458:	e000      	b.n	800b45c <mrbc_raise+0x34>
 800b45a:	2300      	movs	r3, #0
 800b45c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    mrbc_decref(&vm->exception);
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	3328      	adds	r3, #40	; 0x28
 800b464:	4618      	mov	r0, r3
 800b466:	f7ff fe6d 	bl	800b144 <mrbc_decref>
    vm->exception = mrbc_exception_new( vm, cls, msg, msg_len );
 800b46a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b46e:	69fc      	ldr	r4, [r7, #28]
 800b470:	4638      	mov	r0, r7
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b478:	69f9      	ldr	r1, [r7, #28]
 800b47a:	f7ff ff1f 	bl	800b2bc <mrbc_exception_new>
 800b47e:	3428      	adds	r4, #40	; 0x28
 800b480:	463b      	mov	r3, r7
 800b482:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->flag_preemption = 2;
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	2202      	movs	r2, #2
 800b48c:	70da      	strb	r2, [r3, #3]

  } else {
    mrbc_printf("Exception: %s (%s)\n", msg ? msg : mrbc_symid_to_str(exc_cls->sym_id), mrbc_symid_to_str(exc_cls->sym_id));
  }
}
 800b48e:	e017      	b.n	800b4c0 <mrbc_raise+0x98>
    mrbc_printf("Exception: %s (%s)\n", msg ? msg : mrbc_symid_to_str(exc_cls->sym_id), mrbc_symid_to_str(exc_cls->sym_id));
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d107      	bne.n	800b4a6 <mrbc_raise+0x7e>
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f002 fbcf 	bl	800dc40 <mrbc_symid_to_str>
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	e000      	b.n	800b4a8 <mrbc_raise+0x80>
 800b4a6:	697c      	ldr	r4, [r7, #20]
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f002 fbc6 	bl	800dc40 <mrbc_symid_to_str>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	4804      	ldr	r0, [pc, #16]	; (800b4cc <mrbc_raise+0xa4>)
 800b4bc:	f7fe fe44 	bl	800a148 <mrbc_printf>
}
 800b4c0:	bf00      	nop
 800b4c2:	372c      	adds	r7, #44	; 0x2c
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd90      	pop	{r4, r7, pc}
 800b4c8:	200001a4 	.word	0x200001a4
 800b4cc:	08019428 	.word	0x08019428

0800b4d0 <mrbc_raisef>:
  @param  vm		pointer to VM.
  @param  exc_cls	pointer to Exception class.
  @param  fstr		format string.
*/
void mrbc_raisef( struct VM *vm, struct RClass *exc_cls, const char *fstr, ... )
{
 800b4d0:	b40c      	push	{r2, r3}
 800b4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4d4:	b08b      	sub	sp, #44	; 0x2c
 800b4d6:	af02      	add	r7, sp, #8
 800b4d8:	6178      	str	r0, [r7, #20]
 800b4da:	6139      	str	r1, [r7, #16]
  static const int MESSAGE_INI_LEN = 32;
  va_list ap;
  va_start( ap, fstr );
 800b4dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4e0:	61fb      	str	r3, [r7, #28]

  char *buf = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61bb      	str	r3, [r7, #24]
  if( vm ) buf = mrbc_alloc( vm, MESSAGE_INI_LEN );
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d006      	beq.n	800b4fa <mrbc_raisef+0x2a>
 800b4ec:	4b29      	ldr	r3, [pc, #164]	; (800b594 <mrbc_raisef+0xc4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7f6 fae9 	bl	8001ac8 <mrbc_raw_alloc>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	61bb      	str	r3, [r7, #24]

  if( buf ) {
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d02a      	beq.n	800b556 <mrbc_raisef+0x86>
    mrbc_vasprintf( &buf, MESSAGE_INI_LEN, fstr, ap );
 800b500:	4b24      	ldr	r3, [pc, #144]	; (800b594 <mrbc_raisef+0xc4>)
 800b502:	6819      	ldr	r1, [r3, #0]
 800b504:	f107 0018 	add.w	r0, r7, #24
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b50c:	f7fe feb6 	bl	800a27c <mrbc_vasprintf>
    mrbc_decref(&vm->exception);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	3328      	adds	r3, #40	; 0x28
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff fe15 	bl	800b144 <mrbc_decref>
    vm->exception = mrbc_exception_new_alloc( vm,
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <mrbc_raisef+0x54>
 800b520:	693c      	ldr	r4, [r7, #16]
 800b522:	e000      	b.n	800b526 <mrbc_raisef+0x56>
 800b524:	4c1c      	ldr	r4, [pc, #112]	; (800b598 <mrbc_raisef+0xc8>)
 800b526:	69be      	ldr	r6, [r7, #24]
			exc_cls ? exc_cls : MRBC_CLASS(RuntimeError),
			buf, strlen(buf) );
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7f4 fe62 	bl	80001f4 <strlen>
 800b530:	4603      	mov	r3, r0
    vm->exception = mrbc_exception_new_alloc( vm,
 800b532:	697d      	ldr	r5, [r7, #20]
 800b534:	4638      	mov	r0, r7
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	4633      	mov	r3, r6
 800b53a:	4622      	mov	r2, r4
 800b53c:	6979      	ldr	r1, [r7, #20]
 800b53e:	f7ff ff29 	bl	800b394 <mrbc_exception_new_alloc>
 800b542:	f105 0428 	add.w	r4, r5, #40	; 0x28
 800b546:	463b      	mov	r3, r7
 800b548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b54a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->flag_preemption = 2;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	2202      	movs	r2, #2
 800b552:	70da      	strb	r2, [r3, #3]
    mrbc_vprintf( fstr, ap );
    mrbc_printf(" (%s)\n", exc_cls ? mrbc_symid_to_str(exc_cls->sym_id) : "RuntimeError");
  }

  va_end( ap );
}
 800b554:	e016      	b.n	800b584 <mrbc_raisef+0xb4>
    mrbc_printf("Exception: ");
 800b556:	4811      	ldr	r0, [pc, #68]	; (800b59c <mrbc_raisef+0xcc>)
 800b558:	f7fe fdf6 	bl	800a148 <mrbc_printf>
    mrbc_vprintf( fstr, ap );
 800b55c:	69f9      	ldr	r1, [r7, #28]
 800b55e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b560:	f7fe fe37 	bl	800a1d2 <mrbc_vprintf>
    mrbc_printf(" (%s)\n", exc_cls ? mrbc_symid_to_str(exc_cls->sym_id) : "RuntimeError");
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d007      	beq.n	800b57a <mrbc_raisef+0xaa>
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b570:	4618      	mov	r0, r3
 800b572:	f002 fb65 	bl	800dc40 <mrbc_symid_to_str>
 800b576:	4603      	mov	r3, r0
 800b578:	e000      	b.n	800b57c <mrbc_raisef+0xac>
 800b57a:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <mrbc_raisef+0xd0>)
 800b57c:	4619      	mov	r1, r3
 800b57e:	4809      	ldr	r0, [pc, #36]	; (800b5a4 <mrbc_raisef+0xd4>)
 800b580:	f7fe fde2 	bl	800a148 <mrbc_printf>
}
 800b584:	bf00      	nop
 800b586:	3724      	adds	r7, #36	; 0x24
 800b588:	46bd      	mov	sp, r7
 800b58a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b58e:	b002      	add	sp, #8
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	0801aeb8 	.word	0x0801aeb8
 800b598:	200001a4 	.word	0x200001a4
 800b59c:	0801943c 	.word	0x0801943c
 800b5a0:	08019448 	.word	0x08019448
 800b5a4:	08019458 	.word	0x08019458

0800b5a8 <mrbc_print_exception>:
/*! display exception

  @param  v	pointer to Exception object.
*/
void mrbc_print_exception( const mrbc_value *v )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  if( mrbc_type(*v) != MRBC_TT_EXCEPTION ) return;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f993 3000 	ldrsb.w	r3, [r3]
 800b5b6:	2b0e      	cmp	r3, #14
 800b5b8:	d118      	bne.n	800b5ec <mrbc_print_exception+0x44>

  const mrbc_exception *exc = v->exception;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	60fb      	str	r3, [r7, #12]
  const char *clsname = mrbc_symid_to_str(exc->cls->sym_id);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f002 fb39 	bl	800dc40 <mrbc_symid_to_str>
 800b5ce:	60b8      	str	r0, [r7, #8]

  mrbc_printf("Exception: %s (%s)\n",
	      exc->message ? (const char *)exc->message : clsname, clsname );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	68db      	ldr	r3, [r3, #12]
  mrbc_printf("Exception: %s (%s)\n",
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <mrbc_print_exception+0x36>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	e000      	b.n	800b5e0 <mrbc_print_exception+0x38>
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4803      	ldr	r0, [pc, #12]	; (800b5f4 <mrbc_print_exception+0x4c>)
 800b5e6:	f7fe fdaf 	bl	800a148 <mrbc_printf>
 800b5ea:	e000      	b.n	800b5ee <mrbc_print_exception+0x46>
  if( mrbc_type(*v) != MRBC_TT_EXCEPTION ) return;
 800b5ec:	bf00      	nop
}
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	08019428 	.word	0x08019428

0800b5f8 <mrbc_print_vm_exception>:
/*! display exception in vm.

  @param  vm	pointer to VM
*/
void mrbc_print_vm_exception( const struct VM *vm )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  if( mrbc_type(vm->exception) != MRBC_TT_EXCEPTION ) return;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800b606:	2b0e      	cmp	r3, #14
 800b608:	d14e      	bne.n	800b6a8 <mrbc_print_vm_exception+0xb0>

  const mrbc_exception *exc = vm->exception.exception;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60e:	613b      	str	r3, [r7, #16]
  const char *clsname = mrbc_symid_to_str(exc->cls->sym_id);
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b618:	4618      	mov	r0, r3
 800b61a:	f002 fb11 	bl	800dc40 <mrbc_symid_to_str>
 800b61e:	60f8      	str	r0, [r7, #12]

  mrbc_printf("Exception(vm_id=%d):", vm->vm_id );
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	789b      	ldrb	r3, [r3, #2]
 800b624:	4619      	mov	r1, r3
 800b626:	4823      	ldr	r0, [pc, #140]	; (800b6b4 <mrbc_print_vm_exception+0xbc>)
 800b628:	f7fe fd8e 	bl	800a148 <mrbc_printf>
  if( exc->method_id ) {
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00a      	beq.n	800b64c <mrbc_print_vm_exception+0x54>
    mrbc_printf(" in `%s':", mrbc_symid_to_str(exc->method_id) );
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f002 faff 	bl	800dc40 <mrbc_symid_to_str>
 800b642:	4603      	mov	r3, r0
 800b644:	4619      	mov	r1, r3
 800b646:	481c      	ldr	r0, [pc, #112]	; (800b6b8 <mrbc_print_vm_exception+0xc0>)
 800b648:	f7fe fd7e 	bl	800a148 <mrbc_printf>
  }
  mrbc_printf(" %s (%s)\n",
	      exc->message ? (const char *)exc->message : clsname, clsname );
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	68db      	ldr	r3, [r3, #12]
  mrbc_printf(" %s (%s)\n",
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <mrbc_print_vm_exception+0x62>
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	e000      	b.n	800b65c <mrbc_print_vm_exception+0x64>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4619      	mov	r1, r3
 800b660:	4816      	ldr	r0, [pc, #88]	; (800b6bc <mrbc_print_vm_exception+0xc4>)
 800b662:	f7fe fd71 	bl	800a148 <mrbc_printf>

  for( int i = 0; i < MRBC_EXCEPTION_CALL_NEST_LEVEL; i++ ) {
 800b666:	2300      	movs	r3, #0
 800b668:	617b      	str	r3, [r7, #20]
 800b66a:	e016      	b.n	800b69a <mrbc_print_vm_exception+0xa2>
    if( !exc->call_nest[i] ) return;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	3208      	adds	r2, #8
 800b672:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d018      	beq.n	800b6ac <mrbc_print_vm_exception+0xb4>
    mrbc_printf("\tin `%s'\n", mrbc_symid_to_str(exc->call_nest[i]));
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	3208      	adds	r2, #8
 800b680:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800b684:	4618      	mov	r0, r3
 800b686:	f002 fadb 	bl	800dc40 <mrbc_symid_to_str>
 800b68a:	4603      	mov	r3, r0
 800b68c:	4619      	mov	r1, r3
 800b68e:	480c      	ldr	r0, [pc, #48]	; (800b6c0 <mrbc_print_vm_exception+0xc8>)
 800b690:	f7fe fd5a 	bl	800a148 <mrbc_printf>
  for( int i = 0; i < MRBC_EXCEPTION_CALL_NEST_LEVEL; i++ ) {
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	3301      	adds	r3, #1
 800b698:	617b      	str	r3, [r7, #20]
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2b07      	cmp	r3, #7
 800b69e:	dde5      	ble.n	800b66c <mrbc_print_vm_exception+0x74>
  }
  mrbc_printf("\tin ...\n");
 800b6a0:	4808      	ldr	r0, [pc, #32]	; (800b6c4 <mrbc_print_vm_exception+0xcc>)
 800b6a2:	f7fe fd51 	bl	800a148 <mrbc_printf>
 800b6a6:	e002      	b.n	800b6ae <mrbc_print_vm_exception+0xb6>
  if( mrbc_type(vm->exception) != MRBC_TT_EXCEPTION ) return;
 800b6a8:	bf00      	nop
 800b6aa:	e000      	b.n	800b6ae <mrbc_print_vm_exception+0xb6>
    if( !exc->call_nest[i] ) return;
 800b6ac:	bf00      	nop
}
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	08019460 	.word	0x08019460
 800b6b8:	08019478 	.word	0x08019478
 800b6bc:	08019484 	.word	0x08019484
 800b6c0:	08019490 	.word	0x08019490
 800b6c4:	0801949c 	.word	0x0801949c

0800b6c8 <c_exception_new>:
/***** Exception class ******************************************************/
//================================================================
/*! (method) new
 */
static void c_exception_new(struct VM *vm, mrbc_value v[], int argc)
{
 800b6c8:	b5b0      	push	{r4, r5, r7, lr}
 800b6ca:	b092      	sub	sp, #72	; 0x48
 800b6cc:	af02      	add	r7, sp, #8
 800b6ce:	61f8      	str	r0, [r7, #28]
 800b6d0:	61b9      	str	r1, [r7, #24]
 800b6d2:	617a      	str	r2, [r7, #20]
  assert( mrbc_type(v[0]) == MRBC_TT_CLASS );
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	f993 3000 	ldrsb.w	r3, [r3]
 800b6da:	2b07      	cmp	r3, #7
 800b6dc:	d006      	beq.n	800b6ec <c_exception_new+0x24>
 800b6de:	4b25      	ldr	r3, [pc, #148]	; (800b774 <c_exception_new+0xac>)
 800b6e0:	4a25      	ldr	r2, [pc, #148]	; (800b778 <c_exception_new+0xb0>)
 800b6e2:	f240 1105 	movw	r1, #261	; 0x105
 800b6e6:	4825      	ldr	r0, [pc, #148]	; (800b77c <c_exception_new+0xb4>)
 800b6e8:	f009 ffac 	bl	8015644 <__assert_func>

  mrbc_value value;
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING ) {
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d11c      	bne.n	800b72c <c_exception_new+0x64>
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	3310      	adds	r3, #16
 800b6f6:	f993 3000 	ldrsb.w	r3, [r3]
 800b6fa:	2b0b      	cmp	r3, #11
 800b6fc:	d116      	bne.n	800b72c <c_exception_new+0x64>
    value = mrbc_exception_new(vm, v[0].cls, mrbc_string_cstr(&v[1]), mrbc_string_size(&v[1]));
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	689c      	ldr	r4, [r3, #8]
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	3310      	adds	r3, #16
 800b706:	4618      	mov	r0, r3
 800b708:	f7ff fd87 	bl	800b21a <mrbc_string_cstr>
 800b70c:	4605      	mov	r5, r0
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	3310      	adds	r3, #16
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff fd74 	bl	800b200 <mrbc_string_size>
 800b718:	4603      	mov	r3, r0
 800b71a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	462b      	mov	r3, r5
 800b722:	4622      	mov	r2, r4
 800b724:	69f9      	ldr	r1, [r7, #28]
 800b726:	f7ff fdc9 	bl	800b2bc <mrbc_exception_new>
 800b72a:	e00e      	b.n	800b74a <c_exception_new+0x82>
  } else {
    value = mrbc_exception_new(vm, v[0].cls, NULL, 0);
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	4638      	mov	r0, r7
 800b732:	2300      	movs	r3, #0
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	2300      	movs	r3, #0
 800b738:	69f9      	ldr	r1, [r7, #28]
 800b73a:	f7ff fdbf 	bl	800b2bc <mrbc_exception_new>
 800b73e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800b742:	463b      	mov	r3, r7
 800b744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  SET_RETURN(value);
 800b74a:	f107 0420 	add.w	r4, r7, #32
 800b74e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b758:	69b8      	ldr	r0, [r7, #24]
 800b75a:	f7ff fcf3 	bl	800b144 <mrbc_decref>
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	461c      	mov	r4, r3
 800b762:	f107 0320 	add.w	r3, r7, #32
 800b766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800b76c:	bf00      	nop
 800b76e:	3740      	adds	r7, #64	; 0x40
 800b770:	46bd      	mov	sp, r7
 800b772:	bdb0      	pop	{r4, r5, r7, pc}
 800b774:	080194a8 	.word	0x080194a8
 800b778:	0801aebc 	.word	0x0801aebc
 800b77c:	080194cc 	.word	0x080194cc

0800b780 <c_exception_message>:

//================================================================
/*! (method) message
 */
static void c_exception_message(struct VM *vm, mrbc_value v[], int argc)
{
 800b780:	b590      	push	{r4, r7, lr}
 800b782:	b08d      	sub	sp, #52	; 0x34
 800b784:	af00      	add	r7, sp, #0
 800b786:	61f8      	str	r0, [r7, #28]
 800b788:	61b9      	str	r1, [r7, #24]
 800b78a:	617a      	str	r2, [r7, #20]
  mrbc_value value;

  if( v[0].exception->message ) {
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00b      	beq.n	800b7ae <c_exception_message+0x2e>
    value = mrbc_string_new( vm, v[0].exception->message, v[0].exception->message_size );
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	895b      	ldrh	r3, [r3, #10]
 800b7a2:	f107 0020 	add.w	r0, r7, #32
 800b7a6:	69f9      	ldr	r1, [r7, #28]
 800b7a8:	f7fb fd00 	bl	80071ac <mrbc_string_new>
 800b7ac:	e013      	b.n	800b7d6 <c_exception_message+0x56>
  } else {
    value = mrbc_string_new_cstr(vm, mrbc_symid_to_str(v->exception->cls->sym_id));
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f002 fa41 	bl	800dc40 <mrbc_symid_to_str>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	69f9      	ldr	r1, [r7, #28]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7ff fd03 	bl	800b1d0 <mrbc_string_new_cstr>
 800b7ca:	f107 0420 	add.w	r4, r7, #32
 800b7ce:	463b      	mov	r3, r7
 800b7d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  mrbc_decref( &v[0] );
 800b7d6:	69b8      	ldr	r0, [r7, #24]
 800b7d8:	f7ff fcb4 	bl	800b144 <mrbc_decref>
  v[0] = value;
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	461c      	mov	r4, r3
 800b7e0:	f107 0320 	add.w	r3, r7, #32
 800b7e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800b7ea:	bf00      	nop
 800b7ec:	3734      	adds	r7, #52	; 0x34
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd90      	pop	{r4, r7, pc}
	...

0800b7f4 <mrbc_init_global>:

//================================================================
/*! initialize const and global table with default value.
*/
void mrbc_init_global(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  mrbc_kv_init_handle( 0, &handle_const, 30 );
 800b7f8:	221e      	movs	r2, #30
 800b7fa:	4905      	ldr	r1, [pc, #20]	; (800b810 <mrbc_init_global+0x1c>)
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	f000 f9f1 	bl	800bbe4 <mrbc_kv_init_handle>
  mrbc_kv_init_handle( 0, &handle_global, 0 );
 800b802:	2200      	movs	r2, #0
 800b804:	4903      	ldr	r1, [pc, #12]	; (800b814 <mrbc_init_global+0x20>)
 800b806:	2000      	movs	r0, #0
 800b808:	f000 f9ec 	bl	800bbe4 <mrbc_kv_init_handle>
}
 800b80c:	bf00      	nop
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	20008030 	.word	0x20008030
 800b814:	20008038 	.word	0x20008038

0800b818 <mrbc_set_const>:
  @param  sym_id	symbol ID.
  @param  v		pointer to mrbc_value.
  @return		mrbc_error_code.
*/
int mrbc_set_const( mrbc_sym sym_id, mrbc_value *v )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	6039      	str	r1, [r7, #0]
 800b822:	80fb      	strh	r3, [r7, #6]
  if( mrbc_kv_get( &handle_const, sym_id ) != NULL ) {
 800b824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b828:	4619      	mov	r1, r3
 800b82a:	480a      	ldr	r0, [pc, #40]	; (800b854 <mrbc_set_const+0x3c>)
 800b82c:	f000 fb14 	bl	800be58 <mrbc_kv_get>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d002      	beq.n	800b83c <mrbc_set_const+0x24>
    mrbc_printf("warning: already initialized constant.\n");
 800b836:	4808      	ldr	r0, [pc, #32]	; (800b858 <mrbc_set_const+0x40>)
 800b838:	f7fe fc86 	bl	800a148 <mrbc_printf>
  }

  return mrbc_kv_set( &handle_const, sym_id, v );
 800b83c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	4619      	mov	r1, r3
 800b844:	4803      	ldr	r0, [pc, #12]	; (800b854 <mrbc_set_const+0x3c>)
 800b846:	f000 fa3b 	bl	800bcc0 <mrbc_kv_set>
 800b84a:	4603      	mov	r3, r0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20008030 	.word	0x20008030
 800b858:	0801958c 	.word	0x0801958c

0800b85c <mrbc_set_class_const>:
  @param  sym_id	symbol ID.
  @param  v		pointer to mrbc_value.
  @return		mrbc_error_code.
*/
int mrbc_set_class_const( const struct RClass *cls, mrbc_sym sym_id, mrbc_value *v )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08e      	sub	sp, #56	; 0x38
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	460b      	mov	r3, r1
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	817b      	strh	r3, [r7, #10]
  char buf[sizeof(mrbc_sym)*4+1];

  make_nested_symbol_s( buf, cls->sym_id, sym_id );
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b870:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b874:	f107 0314 	add.w	r3, r7, #20
 800b878:	4618      	mov	r0, r3
 800b87a:	f002 fa41 	bl	800dd00 <make_nested_symbol_s>
  mrbc_sym id = mrbc_symbol( mrbc_symbol_new( 0, buf ));
 800b87e:	f107 0320 	add.w	r3, r7, #32
 800b882:	f107 0214 	add.w	r2, r7, #20
 800b886:	2100      	movs	r1, #0
 800b888:	4618      	mov	r0, r3
 800b88a:	f002 fb07 	bl	800de9c <mrbc_symbol_new>
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	86fb      	strh	r3, [r7, #54]	; 0x36

  return mrbc_set_const( id, v );
 800b892:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800b896:	6879      	ldr	r1, [r7, #4]
 800b898:	4618      	mov	r0, r3
 800b89a:	f7ff ffbd 	bl	800b818 <mrbc_set_const>
 800b89e:	4603      	mov	r3, r0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3738      	adds	r7, #56	; 0x38
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <mrbc_get_const>:

  @param  sym_id	symbol ID.
  @return		pointer to mrbc_value or NULL.
*/
mrbc_value * mrbc_get_const( mrbc_sym sym_id )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	80fb      	strh	r3, [r7, #6]
  return mrbc_kv_get( &handle_const, sym_id );
 800b8b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	4803      	ldr	r0, [pc, #12]	; (800b8c8 <mrbc_get_const+0x20>)
 800b8ba:	f000 facd 	bl	800be58 <mrbc_kv_get>
 800b8be:	4603      	mov	r3, r0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20008030 	.word	0x20008030

0800b8cc <mrbc_get_class_const>:
  @param  cls		class
  @param  sym_id	symbol ID.
  @return		pointer to mrbc_value or NULL.
*/
mrbc_value * mrbc_get_class_const( const struct RClass *cls, mrbc_sym sym_id )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	807b      	strh	r3, [r7, #2]
  if( cls->sym_id == MRBC_SYM(Object) ) {
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8de:	2b27      	cmp	r3, #39	; 0x27
 800b8e0:	d107      	bne.n	800b8f2 <mrbc_get_class_const+0x26>
    return mrbc_kv_get( &handle_const, sym_id );  // ::CONST case.
 800b8e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4813      	ldr	r0, [pc, #76]	; (800b938 <mrbc_get_class_const+0x6c>)
 800b8ea:	f000 fab5 	bl	800be58 <mrbc_kv_get>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	e01d      	b.n	800b92e <mrbc_get_class_const+0x62>
  }

  char buf[sizeof(mrbc_sym)*4+1];

  make_nested_symbol_s( buf, cls->sym_id, sym_id );
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b8f8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b8fc:	f107 030c 	add.w	r3, r7, #12
 800b900:	4618      	mov	r0, r3
 800b902:	f002 f9fd 	bl	800dd00 <make_nested_symbol_s>
  mrbc_sym id = mrbc_search_symid(buf);
 800b906:	f107 030c 	add.w	r3, r7, #12
 800b90a:	4618      	mov	r0, r3
 800b90c:	f002 f9cc 	bl	800dca8 <mrbc_search_symid>
 800b910:	4603      	mov	r3, r0
 800b912:	82fb      	strh	r3, [r7, #22]
  if( id <= 0 ) return 0;
 800b914:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	dc01      	bgt.n	800b920 <mrbc_get_class_const+0x54>
 800b91c:	2300      	movs	r3, #0
 800b91e:	e006      	b.n	800b92e <mrbc_get_class_const+0x62>

  return mrbc_kv_get( &handle_const, id );
 800b920:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b924:	4619      	mov	r1, r3
 800b926:	4804      	ldr	r0, [pc, #16]	; (800b938 <mrbc_get_class_const+0x6c>)
 800b928:	f000 fa96 	bl	800be58 <mrbc_kv_get>
 800b92c:	4603      	mov	r3, r0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3718      	adds	r7, #24
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	20008030 	.word	0x20008030

0800b93c <mrbc_set_global>:
  @param  sym_id	symbol ID.
  @param  v		pointer to mrbc_value.
  @return		mrbc_error_code.
*/
int mrbc_set_global( mrbc_sym sym_id, mrbc_value *v )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	6039      	str	r1, [r7, #0]
 800b946:	80fb      	strh	r3, [r7, #6]
  return mrbc_kv_set( &handle_global, sym_id, v );
 800b948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	4619      	mov	r1, r3
 800b950:	4803      	ldr	r0, [pc, #12]	; (800b960 <mrbc_set_global+0x24>)
 800b952:	f000 f9b5 	bl	800bcc0 <mrbc_kv_set>
 800b956:	4603      	mov	r3, r0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	20008038 	.word	0x20008038

0800b964 <mrbc_get_global>:

  @param  sym_id	symbol ID.
  @return		pointer to mrbc_value or NULL.
*/
mrbc_value * mrbc_get_global( mrbc_sym sym_id )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	4603      	mov	r3, r0
 800b96c:	80fb      	strh	r3, [r7, #6]
  return mrbc_kv_get( &handle_global, sym_id );
 800b96e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b972:	4619      	mov	r1, r3
 800b974:	4803      	ldr	r0, [pc, #12]	; (800b984 <mrbc_get_global+0x20>)
 800b976:	f000 fa6f 	bl	800be58 <mrbc_kv_get>
 800b97a:	4603      	mov	r3, r0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	20008038 	.word	0x20008038

0800b988 <hal_init>:
#include <stdio.h>
#include "rrt0.h"
#include "hal.h"
#include "main.h"

void hal_init(void){
 800b988:	b480      	push	{r7}
 800b98a:	af00      	add	r7, sp, #0
}
 800b98c:	bf00      	nop
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <hal_enable_irq>:

void hal_enable_irq(void){
 800b996:	b480      	push	{r7}
 800b998:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800b99a:	b662      	cpsie	i
}
 800b99c:	bf00      	nop
	__enable_irq();
}
 800b99e:	bf00      	nop
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <hal_disable_irq>:

void hal_disable_irq(void){
 800b9a8:	b480      	push	{r7}
 800b9aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b9ac:	b672      	cpsid	i
}
 800b9ae:	bf00      	nop
	__disable_irq();
}
 800b9b0:	bf00      	nop
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <hal_idle_cpu>:

void hal_idle_cpu(void){
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	af00      	add	r7, sp, #0
	/*HAL_Delay(MRBC_TICK_UNIT);
	mrbc_tick();
	HAL_SuspendTick();
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);*/
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800b9be:	2101      	movs	r1, #1
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	f008 f941 	bl	8013c48 <HAL_PWR_EnterSLEEPMode>
}
 800b9c6:	bf00      	nop
 800b9c8:	bd80      	pop	{r7, pc}
	...

0800b9cc <hal_write>:

extern UART_HandleTypeDef huart2;

int hal_write(int fd, const void *buf, int nbytes){
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, buf, nbytes, -1);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e0:	68b9      	ldr	r1, [r7, #8]
 800b9e2:	4804      	ldr	r0, [pc, #16]	; (800b9f4 <hal_write+0x28>)
 800b9e4:	f009 fa72 	bl	8014ecc <HAL_UART_Transmit>
	return nbytes;
 800b9e8:	687b      	ldr	r3, [r7, #4]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200007e0 	.word	0x200007e0

0800b9f8 <mrbc_incref>:
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f993 3000 	ldrsb.w	r3, [r3]
 800ba06:	2b07      	cmp	r3, #7
 800ba08:	dd1e      	ble.n	800ba48 <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	885b      	ldrh	r3, [r3, #2]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d106      	bne.n	800ba22 <mrbc_incref+0x2a>
 800ba14:	4b0e      	ldr	r3, [pc, #56]	; (800ba50 <mrbc_incref+0x58>)
 800ba16:	4a0f      	ldr	r2, [pc, #60]	; (800ba54 <mrbc_incref+0x5c>)
 800ba18:	f240 11c3 	movw	r1, #451	; 0x1c3
 800ba1c:	480e      	ldr	r0, [pc, #56]	; (800ba58 <mrbc_incref+0x60>)
 800ba1e:	f009 fe11 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	885b      	ldrh	r3, [r3, #2]
 800ba28:	2bff      	cmp	r3, #255	; 0xff
 800ba2a:	d106      	bne.n	800ba3a <mrbc_incref+0x42>
 800ba2c:	4b0b      	ldr	r3, [pc, #44]	; (800ba5c <mrbc_incref+0x64>)
 800ba2e:	4a09      	ldr	r2, [pc, #36]	; (800ba54 <mrbc_incref+0x5c>)
 800ba30:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800ba34:	4808      	ldr	r0, [pc, #32]	; (800ba58 <mrbc_incref+0x60>)
 800ba36:	f009 fe05 	bl	8015644 <__assert_func>
  v->obj->ref_count++;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	885a      	ldrh	r2, [r3, #2]
 800ba40:	3201      	adds	r2, #1
 800ba42:	b292      	uxth	r2, r2
 800ba44:	805a      	strh	r2, [r3, #2]
 800ba46:	e000      	b.n	800ba4a <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800ba48:	bf00      	nop
}
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	08019698 	.word	0x08019698
 800ba54:	0801aed8 	.word	0x0801aed8
 800ba58:	080196b0 	.word	0x080196b0
 800ba5c:	080196cc 	.word	0x080196cc

0800ba60 <mrbc_decref>:
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f993 3000 	ldrsb.w	r3, [r3]
 800ba6e:	2b07      	cmp	r3, #7
 800ba70:	dd2c      	ble.n	800bacc <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	885b      	ldrh	r3, [r3, #2]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d106      	bne.n	800ba8a <mrbc_decref+0x2a>
 800ba7c:	4b16      	ldr	r3, [pc, #88]	; (800bad8 <mrbc_decref+0x78>)
 800ba7e:	4a17      	ldr	r2, [pc, #92]	; (800badc <mrbc_decref+0x7c>)
 800ba80:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800ba84:	4816      	ldr	r0, [pc, #88]	; (800bae0 <mrbc_decref+0x80>)
 800ba86:	f009 fddd 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	885b      	ldrh	r3, [r3, #2]
 800ba90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d106      	bne.n	800baa6 <mrbc_decref+0x46>
 800ba98:	4b12      	ldr	r3, [pc, #72]	; (800bae4 <mrbc_decref+0x84>)
 800ba9a:	4a10      	ldr	r2, [pc, #64]	; (800badc <mrbc_decref+0x7c>)
 800ba9c:	f240 11d3 	movw	r1, #467	; 0x1d3
 800baa0:	480f      	ldr	r0, [pc, #60]	; (800bae0 <mrbc_decref+0x80>)
 800baa2:	f009 fdcf 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	885a      	ldrh	r2, [r3, #2]
 800baac:	3a01      	subs	r2, #1
 800baae:	b292      	uxth	r2, r2
 800bab0:	805a      	strh	r2, [r3, #2]
 800bab2:	885b      	ldrh	r3, [r3, #2]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10b      	bne.n	800bad0 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f993 3000 	ldrsb.w	r3, [r3]
 800babe:	461a      	mov	r2, r3
 800bac0:	4b09      	ldr	r3, [pc, #36]	; (800bae8 <mrbc_decref+0x88>)
 800bac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	4798      	blx	r3
 800baca:	e002      	b.n	800bad2 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800bacc:	bf00      	nop
 800bace:	e000      	b.n	800bad2 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800bad0:	bf00      	nop
}
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	08019698 	.word	0x08019698
 800badc:	0801aecc 	.word	0x0801aecc
 800bae0:	080196b0 	.word	0x080196b0
 800bae4:	080196e8 	.word	0x080196e8
 800bae8:	0801be98 	.word	0x0801be98

0800baec <mrbc_kv_iterator_new>:

//================================================================
/*! iterator constructor
*/
static inline mrbc_kv_iterator mrbc_kv_iterator_new( const mrbc_kv_handle *h )
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  mrbc_kv_iterator ite;

  ite.target = h;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	60bb      	str	r3, [r7, #8]
  ite.i = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	81bb      	strh	r3, [r7, #12]

  return ite;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	461a      	mov	r2, r3
 800bb02:	f107 0308 	add.w	r3, r7, #8
 800bb06:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <mrbc_kv_i_has_next>:

//================================================================
/*! iterator has_next?
*/
static inline int mrbc_kv_i_has_next( const mrbc_kv_iterator *ite )
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b083      	sub	sp, #12
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  return ite->i < ite->target->n_stored;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	889a      	ldrh	r2, [r3, #4]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	885b      	ldrh	r3, [r3, #2]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	bf34      	ite	cc
 800bb30:	2301      	movcc	r3, #1
 800bb32:	2300      	movcs	r3, #0
 800bb34:	b2db      	uxtb	r3, r3
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <mrbc_kv_i_next>:

//================================================================
/*! iterator getter
*/
static inline mrbc_kv *mrbc_kv_i_next( mrbc_kv_iterator *ite )
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  return &ite->target->data[ ite->i++ ];
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	889b      	ldrh	r3, [r3, #4]
 800bb54:	1c59      	adds	r1, r3, #1
 800bb56:	b288      	uxth	r0, r1
 800bb58:	6879      	ldr	r1, [r7, #4]
 800bb5a:	8088      	strh	r0, [r1, #4]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	460b      	mov	r3, r1
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	440b      	add	r3, r1
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	4413      	add	r3, r2
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <binary_search>:
  @param  kvh		pointer to key-value handle.
  @param  sym_id	symbol ID.
  @return		result. It's not necessarily found.
*/
static int binary_search(mrbc_kv_handle *kvh, mrbc_sym sym_id)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b087      	sub	sp, #28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	807b      	strh	r3, [r7, #2]
  int left = 0;
 800bb80:	2300      	movs	r3, #0
 800bb82:	617b      	str	r3, [r7, #20]
  int right = kvh->n_stored - 1;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	885b      	ldrh	r3, [r3, #2]
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	613b      	str	r3, [r7, #16]
  if( right < 0 ) return -1;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	da1d      	bge.n	800bbce <binary_search+0x5a>
 800bb92:	f04f 33ff 	mov.w	r3, #4294967295
 800bb96:	e01f      	b.n	800bbd8 <binary_search+0x64>

  while( left < right ) {
    int mid = (left + right) / 2;
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	0fda      	lsrs	r2, r3, #31
 800bba0:	4413      	add	r3, r2
 800bba2:	105b      	asrs	r3, r3, #1
 800bba4:	60fb      	str	r3, [r7, #12]
    if( kvh->data[mid].sym_id < sym_id ) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6859      	ldr	r1, [r3, #4]
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4613      	mov	r3, r2
 800bbae:	005b      	lsls	r3, r3, #1
 800bbb0:	4413      	add	r3, r2
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	440b      	add	r3, r1
 800bbb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	dd03      	ble.n	800bbca <binary_search+0x56>
      left = mid + 1;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	e001      	b.n	800bbce <binary_search+0x5a>
    } else {
      right = mid;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	613b      	str	r3, [r7, #16]
  while( left < right ) {
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	dbe0      	blt.n	800bb98 <binary_search+0x24>
    }
  }

  return left;
 800bbd6:	697b      	ldr	r3, [r7, #20]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	371c      	adds	r7, #28
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <mrbc_kv_init_handle>:
  @param  kvh	Pointer to Key-Value handle.
  @param  size	Initial size of data.
  @return 	0 if no error.
*/
int mrbc_kv_init_handle(struct VM *vm, mrbc_kv_handle *kvh, int size)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
  kvh->data_size = size;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	801a      	strh	r2, [r3, #0]
  kvh->n_stored = 0;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	805a      	strh	r2, [r3, #2]

  if( size == 0 ) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d103      	bne.n	800bc0c <mrbc_kv_init_handle+0x28>
    // save VM address temporary.
    kvh->vm = vm;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	605a      	str	r2, [r3, #4]
 800bc0a:	e018      	b.n	800bc3e <mrbc_kv_init_handle+0x5a>

  } else {
    // Allocate data buffer.
    kvh->data = mrbc_alloc(vm, sizeof(mrbc_kv) * size);
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	005b      	lsls	r3, r3, #1
 800bc12:	4413      	add	r3, r2
 800bc14:	00db      	lsls	r3, r3, #3
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7f5 ff56 	bl	8001ac8 <mrbc_raw_alloc>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	605a      	str	r2, [r3, #4]
    if( !kvh->data ) return -1;		// ENOMEM
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d102      	bne.n	800bc30 <mrbc_kv_init_handle+0x4c>
 800bc2a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc2e:	e007      	b.n	800bc40 <mrbc_kv_init_handle+0x5c>

#if defined(MRBC_DEBUG)
    memcpy( kvh->data->type, "KV", 2 );
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	2202      	movs	r2, #2
 800bc36:	4904      	ldr	r1, [pc, #16]	; (800bc48 <mrbc_kv_init_handle+0x64>)
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f00a fddc 	bl	80167f6 <memcpy>
#endif
  }

  return 0;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	08019704 	.word	0x08019704

0800bc4c <mrbc_kv_delete_data>:
/*! delete all datas and free data memory.

  @param  kvh	pointer to key-value handle.
*/
void mrbc_kv_delete_data(mrbc_kv_handle *kvh)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  if( kvh->data_size == 0 ) return;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00b      	beq.n	800bc74 <mrbc_kv_delete_data+0x28>

  mrbc_kv_clear(kvh);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 f92a 	bl	800beb6 <mrbc_kv_clear>
  kvh->data_size = 0;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	801a      	strh	r2, [r3, #0]
  mrbc_raw_free(kvh->data);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7f6 f907 	bl	8001e80 <mrbc_raw_free>
 800bc72:	e000      	b.n	800bc76 <mrbc_kv_delete_data+0x2a>
  if( kvh->data_size == 0 ) return;
 800bc74:	bf00      	nop
}
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <mrbc_kv_resize>:
  @param  kvh	pointer to key-value handle.
  @param  size	size.
  @return	mrbc_error_code.
*/
int mrbc_kv_resize(mrbc_kv_handle *kvh, int size)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  mrbc_kv *data2 = mrbc_raw_realloc(kvh->data, sizeof(mrbc_kv) * size);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6858      	ldr	r0, [r3, #4]
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	4413      	add	r3, r2
 800bc92:	00db      	lsls	r3, r3, #3
 800bc94:	4619      	mov	r1, r3
 800bc96:	f7f6 f98f 	bl	8001fb8 <mrbc_raw_realloc>
 800bc9a:	60f8      	str	r0, [r7, #12]
  if( !data2 ) return E_NOMEMORY_ERROR;		// ENOMEM
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d101      	bne.n	800bca6 <mrbc_kv_resize+0x2a>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e007      	b.n	800bcb6 <mrbc_kv_resize+0x3a>

  kvh->data = data2;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	605a      	str	r2, [r3, #4]
  kvh->data_size = size;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	801a      	strh	r2, [r3, #0]

  return 0;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <mrbc_kv_set>:
  @param  sym_id	symbol ID.
  @param  set_val	set value.
  @return		mrbc_error_code.
*/
int mrbc_kv_set(mrbc_kv_handle *kvh, mrbc_sym sym_id, mrbc_value *set_val)
{
 800bcc0:	b590      	push	{r4, r7, lr}
 800bcc2:	b087      	sub	sp, #28
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	607a      	str	r2, [r7, #4]
 800bccc:	817b      	strh	r3, [r7, #10]
  int idx = binary_search(kvh, sym_id);
 800bcce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f7ff ff4d 	bl	800bb74 <binary_search>
 800bcda:	6178      	str	r0, [r7, #20]
  if( idx < 0 ) {
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	da02      	bge.n	800bce8 <mrbc_kv_set+0x28>
    idx = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	617b      	str	r3, [r7, #20]
    goto INSERT_VALUE;
 800bce6:	e03d      	b.n	800bd64 <mrbc_kv_set+0xa4>
  }

  // replace value ?
  if( kvh->data[idx].sym_id == sym_id ) {
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6859      	ldr	r1, [r3, #4]
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	4413      	add	r3, r2
 800bcf4:	00db      	lsls	r3, r3, #3
 800bcf6:	440b      	add	r3, r1
 800bcf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcfc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d11c      	bne.n	800bd3e <mrbc_kv_set+0x7e>
    mrbc_decref( &kvh->data[idx].value );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6859      	ldr	r1, [r3, #4]
 800bd08:	697a      	ldr	r2, [r7, #20]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	4413      	add	r3, r2
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	440b      	add	r3, r1
 800bd14:	3308      	adds	r3, #8
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fea2 	bl	800ba60 <mrbc_decref>
    kvh->data[idx].value = *set_val;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6859      	ldr	r1, [r3, #4]
 800bd20:	697a      	ldr	r2, [r7, #20]
 800bd22:	4613      	mov	r3, r2
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	4413      	add	r3, r2
 800bd28:	00db      	lsls	r3, r3, #3
 800bd2a:	440b      	add	r3, r1
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	f103 0408 	add.w	r4, r3, #8
 800bd32:	4613      	mov	r3, r2
 800bd34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e085      	b.n	800be4a <mrbc_kv_set+0x18a>
  }

  if( kvh->data[idx].sym_id < sym_id ) {
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6859      	ldr	r1, [r3, #4]
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	4613      	mov	r3, r2
 800bd46:	005b      	lsls	r3, r3, #1
 800bd48:	4413      	add	r3, r2
 800bd4a:	00db      	lsls	r3, r3, #3
 800bd4c:	440b      	add	r3, r1
 800bd4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	dd03      	ble.n	800bd62 <mrbc_kv_set+0xa2>
    idx++;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	e000      	b.n	800bd64 <mrbc_kv_set+0xa4>
  }

 INSERT_VALUE:
 800bd62:	bf00      	nop
  // need alloc?
  if( kvh->data_size == 0 ) {
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	881b      	ldrh	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d116      	bne.n	800bd9a <mrbc_kv_set+0xda>
    kvh->data = mrbc_alloc(kvh->vm, sizeof(mrbc_kv) * MRBC_KV_SIZE_INIT);
 800bd6c:	2030      	movs	r0, #48	; 0x30
 800bd6e:	f7f5 feab 	bl	8001ac8 <mrbc_raw_alloc>
 800bd72:	4602      	mov	r2, r0
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	605a      	str	r2, [r3, #4]
    if( kvh->data == NULL ) return E_NOMEMORY_ERROR;	// ENOMEM
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <mrbc_kv_set+0xc4>
 800bd80:	2301      	movs	r3, #1
 800bd82:	e062      	b.n	800be4a <mrbc_kv_set+0x18a>
    kvh->data_size = MRBC_KV_SIZE_INIT;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2202      	movs	r2, #2
 800bd88:	801a      	strh	r2, [r3, #0]

#if defined(MRBC_DEBUG)
    memcpy( kvh->data->type, "KV", 2 );
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	2202      	movs	r2, #2
 800bd90:	4930      	ldr	r1, [pc, #192]	; (800be54 <mrbc_kv_set+0x194>)
 800bd92:	4618      	mov	r0, r3
 800bd94:	f00a fd2f 	bl	80167f6 <memcpy>
 800bd98:	e011      	b.n	800bdbe <mrbc_kv_set+0xfe>
#endif

  // need resize?
  } else if( kvh->n_stored >= kvh->data_size ) {
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	885a      	ldrh	r2, [r3, #2]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d30b      	bcc.n	800bdbe <mrbc_kv_set+0xfe>
    if( mrbc_kv_resize(kvh, kvh->data_size + MRBC_KV_SIZE_INCREMENT) != 0 ) {
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	3305      	adds	r3, #5
 800bdac:	4619      	mov	r1, r3
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff ff64 	bl	800bc7c <mrbc_kv_resize>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d001      	beq.n	800bdbe <mrbc_kv_set+0xfe>
      return E_NOMEMORY_ERROR;		// ENOMEM
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e045      	b.n	800be4a <mrbc_kv_set+0x18a>
    }
  }

  // need move data?
  if( idx < kvh->n_stored ) {
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	885b      	ldrh	r3, [r3, #2]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	da1f      	bge.n	800be0a <mrbc_kv_set+0x14a>
    int size = sizeof(mrbc_kv) * (kvh->n_stored - idx);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	885b      	ldrh	r3, [r3, #2]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4413      	add	r3, r2
 800bddc:	00db      	lsls	r3, r3, #3
 800bdde:	613b      	str	r3, [r7, #16]
    memmove( &kvh->data[idx+1], &kvh->data[idx], size );
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6859      	ldr	r1, [r3, #4]
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	4613      	mov	r3, r2
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	4413      	add	r3, r2
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	18c8      	adds	r0, r1, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6859      	ldr	r1, [r3, #4]
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	005b      	lsls	r3, r3, #1
 800bdfc:	4413      	add	r3, r2
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	440b      	add	r3, r1
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	4619      	mov	r1, r3
 800be06:	f00a fc42 	bl	801668e <memmove>
  }

  kvh->data[idx].sym_id = sym_id;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6859      	ldr	r1, [r3, #4]
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	4613      	mov	r3, r2
 800be12:	005b      	lsls	r3, r3, #1
 800be14:	4413      	add	r3, r2
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	440b      	add	r3, r1
 800be1a:	897a      	ldrh	r2, [r7, #10]
 800be1c:	805a      	strh	r2, [r3, #2]
  kvh->data[idx].value = *set_val;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6859      	ldr	r1, [r3, #4]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	4613      	mov	r3, r2
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	4413      	add	r3, r2
 800be2a:	00db      	lsls	r3, r3, #3
 800be2c:	440b      	add	r3, r1
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	f103 0408 	add.w	r4, r3, #8
 800be34:	4613      	mov	r3, r2
 800be36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  kvh->n_stored++;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	885b      	ldrh	r3, [r3, #2]
 800be40:	3301      	adds	r3, #1
 800be42:	b29a      	uxth	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	805a      	strh	r2, [r3, #2]

  return 0;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd90      	pop	{r4, r7, pc}
 800be52:	bf00      	nop
 800be54:	08019704 	.word	0x08019704

0800be58 <mrbc_kv_get>:
  @param  kvh		pointer to key-value handle.
  @param  sym_id	symbol ID.
  @return		pointer to mrbc_value or NULL.
*/
mrbc_value * mrbc_kv_get(mrbc_kv_handle *kvh, mrbc_sym sym_id)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	460b      	mov	r3, r1
 800be62:	807b      	strh	r3, [r7, #2]
  int idx = binary_search(kvh, sym_id);
 800be64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be68:	4619      	mov	r1, r3
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7ff fe82 	bl	800bb74 <binary_search>
 800be70:	60f8      	str	r0, [r7, #12]
  if( idx < 0 ) return NULL;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	da01      	bge.n	800be7c <mrbc_kv_get+0x24>
 800be78:	2300      	movs	r3, #0
 800be7a:	e018      	b.n	800beae <mrbc_kv_get+0x56>
  if( kvh->data[idx].sym_id != sym_id ) return NULL;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6859      	ldr	r1, [r3, #4]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4613      	mov	r3, r2
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	4413      	add	r3, r2
 800be88:	00db      	lsls	r3, r3, #3
 800be8a:	440b      	add	r3, r1
 800be8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be90:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800be94:	429a      	cmp	r2, r3
 800be96:	d001      	beq.n	800be9c <mrbc_kv_get+0x44>
 800be98:	2300      	movs	r3, #0
 800be9a:	e008      	b.n	800beae <mrbc_kv_get+0x56>

  return &kvh->data[idx].value;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6859      	ldr	r1, [r3, #4]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	4613      	mov	r3, r2
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	4413      	add	r3, r2
 800bea8:	00db      	lsls	r3, r3, #3
 800beaa:	440b      	add	r3, r1
 800beac:	3308      	adds	r3, #8
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <mrbc_kv_clear>:
/*! clear all

  @param  kvh		pointer to key-value handle.
*/
void mrbc_kv_clear(mrbc_kv_handle *kvh)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
  mrbc_kv *p1 = kvh->data;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	60fb      	str	r3, [r7, #12]
  const mrbc_kv *p2 = p1 + kvh->n_stored;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	885b      	ldrh	r3, [r3, #2]
 800bec8:	461a      	mov	r2, r3
 800beca:	4613      	mov	r3, r2
 800becc:	005b      	lsls	r3, r3, #1
 800bece:	4413      	add	r3, r2
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	461a      	mov	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	60bb      	str	r3, [r7, #8]
  while( p1 < p2 ) {
 800beda:	e007      	b.n	800beec <mrbc_kv_clear+0x36>
    mrbc_decref(&p1->value);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	3308      	adds	r3, #8
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff fdbd 	bl	800ba60 <mrbc_decref>
    p1++;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	3318      	adds	r3, #24
 800beea:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d3f3      	bcc.n	800bedc <mrbc_kv_clear+0x26>
  }

  kvh->n_stored = 0;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	805a      	strh	r2, [r3, #2]
}
 800befa:	bf00      	nop
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <mrbc_kv_dup>:

  @param  src		pointer to key-value handle source.
  @param  dst		pointer to key-value handle destination.
*/
void mrbc_kv_dup(const mrbc_kv_handle *src, mrbc_kv_handle *dst)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b086      	sub	sp, #24
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	6039      	str	r1, [r7, #0]
  mrbc_kv_iterator ite = mrbc_kv_iterator_new( src );
 800bf0c:	f107 030c 	add.w	r3, r7, #12
 800bf10:	6879      	ldr	r1, [r7, #4]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff fdea 	bl	800baec <mrbc_kv_iterator_new>

  while( mrbc_kv_i_has_next( &ite ) ) {
 800bf18:	e013      	b.n	800bf42 <mrbc_kv_dup+0x40>
    mrbc_kv *kv = mrbc_kv_i_next( &ite );
 800bf1a:	f107 030c 	add.w	r3, r7, #12
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7ff fe0f 	bl	800bb42 <mrbc_kv_i_next>
 800bf24:	6178      	str	r0, [r7, #20]
    mrbc_incref( &kv->value );
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	3308      	adds	r3, #8
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7ff fd64 	bl	800b9f8 <mrbc_incref>
    mrbc_kv_set( dst, kv->sym_id, &kv->value );
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	3308      	adds	r3, #8
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	6838      	ldr	r0, [r7, #0]
 800bf3e:	f7ff febf 	bl	800bcc0 <mrbc_kv_set>
  while( mrbc_kv_i_has_next( &ite ) ) {
 800bf42:	f107 030c 	add.w	r3, r7, #12
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff fde7 	bl	800bb1a <mrbc_kv_i_has_next>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e3      	bne.n	800bf1a <mrbc_kv_dup+0x18>
  }
}
 800bf52:	bf00      	nop
 800bf54:	bf00      	nop
 800bf56:	3718      	adds	r7, #24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <bin_to_uint16>:

  @param  s	Pointer to memory.
  @return	16bit unsigned int value.
*/
static inline uint16_t bin_to_uint16( const void *s )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
#if defined(MRBC_LITTLE_ENDIAN) && !defined(MRBC_REQUIRE_32BIT_ALIGNMENT)
  // Little endian, no alignment.
  uint16_t x = *((uint16_t *)s);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	81fb      	strh	r3, [r7, #14]
  x = (x << 8) | (x >> 8);
 800bf6a:	89fb      	ldrh	r3, [r7, #14]
 800bf6c:	021b      	lsls	r3, r3, #8
 800bf6e:	b21a      	sxth	r2, r3
 800bf70:	89fb      	ldrh	r3, [r7, #14]
 800bf72:	0a1b      	lsrs	r3, r3, #8
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	b21b      	sxth	r3, r3
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	b21b      	sxth	r3, r3
 800bf7c:	81fb      	strh	r3, [r7, #14]

#else
  #error "Specify MRBC_BIG_ENDIAN or MRBC_LITTLE_ENDIAN"
#endif

  return x;
 800bf7e:	89fb      	ldrh	r3, [r7, #14]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <bin_to_uint32>:

  @param  s	Pointer to memory.
  @return	32bit unsigned int value.
*/
static inline uint32_t bin_to_uint32( const void *s )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
#if defined(MRBC_LITTLE_ENDIAN) && !defined(MRBC_REQUIRE_32BIT_ALIGNMENT)
  // Little endian, no alignment.
  uint32_t x = *((uint32_t *)s);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	60fb      	str	r3, [r7, #12]
  x = (x << 24) | ((x & 0xff00) << 8) | ((x >> 8) & 0xff00) | (x >> 24);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	061a      	lsls	r2, r3, #24
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	021b      	lsls	r3, r3, #8
 800bfa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	0a1b      	lsrs	r3, r3, #8
 800bfac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bfb0:	431a      	orrs	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	0e1b      	lsrs	r3, r3, #24
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	60fb      	str	r3, [r7, #12]
  x <<= 8;
  x |= *p;

#endif

  return x;
 800bfba:	68fb      	ldr	r3, [r7, #12]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3714      	adds	r7, #20
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <bin_to_double64>:

  @param  s	Pointer to memory.
  @return	double value.
*/
static inline double bin_to_double64( const void *s )
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b089      	sub	sp, #36	; 0x24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  return x;

#elif defined(MRBC_LITTLE_ENDIAN) && defined(MRBC_REQUIRE_64BIT_ALIGNMENT)
  // Little endian, 64bit alignment required.
  double x;
  uint8_t *p1 = (uint8_t*)s;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	61fb      	str	r3, [r7, #28]
  uint8_t *p2 = (uint8_t*)&x;
 800bfd4:	f107 0308 	add.w	r3, r7, #8
 800bfd8:	61bb      	str	r3, [r7, #24]
  int i;
  for( i = 7; i >= 0; i-- ) {
 800bfda:	2307      	movs	r3, #7
 800bfdc:	617b      	str	r3, [r7, #20]
 800bfde:	e00a      	b.n	800bff6 <bin_to_double64+0x2e>
    *p2++ = *p1++;
 800bfe0:	69fa      	ldr	r2, [r7, #28]
 800bfe2:	1c53      	adds	r3, r2, #1
 800bfe4:	61fb      	str	r3, [r7, #28]
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	1c59      	adds	r1, r3, #1
 800bfea:	61b9      	str	r1, [r7, #24]
 800bfec:	7812      	ldrb	r2, [r2, #0]
 800bfee:	701a      	strb	r2, [r3, #0]
  for( i = 7; i >= 0; i-- ) {
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	3b01      	subs	r3, #1
 800bff4:	617b      	str	r3, [r7, #20]
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	daf1      	bge.n	800bfe0 <bin_to_double64+0x18>
  }
  return x;
 800bffc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    *p2-- = *p1++;
  }
  return x;

#endif
}
 800c000:	4610      	mov	r0, r2
 800c002:	4619      	mov	r1, r3
 800c004:	3724      	adds	r7, #36	; 0x24
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
	...

0800c010 <load_header>:
   "MATZ"     compiler name
   "0000"     compiler version
  </pre>
*/
static int load_header(struct VM *vm, const uint8_t *bin)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  if( memcmp(bin, RITE, sizeof(RITE)) != 0 ) {
 800c01a:	2204      	movs	r2, #4
 800c01c:	4913      	ldr	r1, [pc, #76]	; (800c06c <load_header+0x5c>)
 800c01e:	6838      	ldr	r0, [r7, #0]
 800c020:	f00a fb25 	bl	801666e <memcmp>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d007      	beq.n	800c03a <load_header+0x2a>
    mrbc_raise( vm, MRBC_CLASS(Exception), "Illegal bytecode.");
 800c02a:	4a11      	ldr	r2, [pc, #68]	; (800c070 <load_header+0x60>)
 800c02c:	4911      	ldr	r1, [pc, #68]	; (800c074 <load_header+0x64>)
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff f9fa 	bl	800b428 <mrbc_raise>
    return -1;
 800c034:	f04f 33ff 	mov.w	r3, #4294967295
 800c038:	e013      	b.n	800c062 <load_header+0x52>
  }
  bin += sizeof(RITE);
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	3304      	adds	r3, #4
 800c03e:	603b      	str	r3, [r7, #0]

  if( memcmp(bin, RITE_VERSION, sizeof(RITE_VERSION)) != 0 ) {
 800c040:	2204      	movs	r2, #4
 800c042:	490d      	ldr	r1, [pc, #52]	; (800c078 <load_header+0x68>)
 800c044:	6838      	ldr	r0, [r7, #0]
 800c046:	f00a fb12 	bl	801666e <memcmp>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d007      	beq.n	800c060 <load_header+0x50>
    mrbc_raise( vm, MRBC_CLASS(Exception), "Bytecode version mismatch.");
 800c050:	4a0a      	ldr	r2, [pc, #40]	; (800c07c <load_header+0x6c>)
 800c052:	4908      	ldr	r1, [pc, #32]	; (800c074 <load_header+0x64>)
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff f9e7 	bl	800b428 <mrbc_raise>
    return -1;
 800c05a:	f04f 33ff 	mov.w	r3, #4294967295
 800c05e:	e000      	b.n	800c062 <load_header+0x52>
  }

  /* Ignore others. */

  return 0;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	0801aee4 	.word	0x0801aee4
 800c070:	08019708 	.word	0x08019708
 800c074:	2000010c 	.word	0x2000010c
 800c078:	0801aee8 	.word	0x0801aee8
 800c07c:	0801971c 	.word	0x0801971c

0800c080 <load_irep_1>:
     0000	length
     ...	symbol data
  </pre>
*/
static mrbc_irep * load_irep_1(struct VM *vm, const uint8_t *bin, int *len, int flag_top)
{
 800c080:	b5b0      	push	{r4, r5, r7, lr}
 800c082:	b098      	sub	sp, #96	; 0x60
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	603b      	str	r3, [r7, #0]
  mrbc_irep irep;
  const uint8_t *p = bin + 4;	// 4 = skip record size.
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	3304      	adds	r3, #4
 800c092:	65fb      	str	r3, [r7, #92]	; 0x5c
  int i;

#if defined(MRBC_DEBUG)
  irep.type[0] = 'R';	// set "RP"
 800c094:	2352      	movs	r3, #82	; 0x52
 800c096:	753b      	strb	r3, [r7, #20]
  irep.type[1] = 'P';
 800c098:	2350      	movs	r3, #80	; 0x50
 800c09a:	757b      	strb	r3, [r7, #21]
#endif

  irep.nlocals = bin_to_uint16(p);	p += 2;
 800c09c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c09e:	f7ff ff5d 	bl	800bf5c <bin_to_uint16>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	82fb      	strh	r3, [r7, #22]
 800c0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0a8:	3302      	adds	r3, #2
 800c0aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.nregs = bin_to_uint16(p);	p += 2;
 800c0ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c0ae:	f7ff ff55 	bl	800bf5c <bin_to_uint16>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	833b      	strh	r3, [r7, #24]
 800c0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b8:	3302      	adds	r3, #2
 800c0ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.rlen = bin_to_uint16(p);		p += 2;
 800c0bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c0be:	f7ff ff4d 	bl	800bf5c <bin_to_uint16>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	837b      	strh	r3, [r7, #26]
 800c0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0c8:	3302      	adds	r3, #2
 800c0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.clen = bin_to_uint16(p);		p += 2;
 800c0cc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c0ce:	f7ff ff45 	bl	800bf5c <bin_to_uint16>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	83bb      	strh	r3, [r7, #28]
 800c0d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0d8:	3302      	adds	r3, #2
 800c0da:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.ilen = bin_to_uint32(p);		p += 4;
 800c0dc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c0de:	f7ff ff55 	bl	800bf8c <bin_to_uint32>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	623b      	str	r3, [r7, #32]
 800c0e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.inst = p;
 800c0ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  // POOL block
  p += irep.ilen + SIZE_RITE_CATCH_HANDLER * irep.clen;
 800c0f0:	6a3b      	ldr	r3, [r7, #32]
 800c0f2:	8bba      	ldrh	r2, [r7, #28]
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	220d      	movs	r2, #13
 800c0f8:	fb01 f202 	mul.w	r2, r1, r2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c100:	4413      	add	r3, r2
 800c102:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.pool = p;
 800c104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c106:	633b      	str	r3, [r7, #48]	; 0x30
  irep.plen = bin_to_uint16(p);		p += 2;
 800c108:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c10a:	f7ff ff27 	bl	800bf5c <bin_to_uint16>
 800c10e:	4603      	mov	r3, r0
 800c110:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c114:	3302      	adds	r3, #2
 800c116:	65fb      	str	r3, [r7, #92]	; 0x5c

  // skip pool
  for( i = 0; i < irep.plen; i++ ) {
 800c118:	2300      	movs	r3, #0
 800c11a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c11c:	e036      	b.n	800c18c <load_irep_1+0x10c>
    int siz = 0;
 800c11e:	2300      	movs	r3, #0
 800c120:	657b      	str	r3, [r7, #84]	; 0x54
    switch( *p++ ) {
 800c122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c124:	1c5a      	adds	r2, r3, #1
 800c126:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	d820      	bhi.n	800c170 <load_irep_1+0xf0>
 800c12e:	a201      	add	r2, pc, #4	; (adr r2, 800c134 <load_irep_1+0xb4>)
 800c130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c134:	0800c14d 	.word	0x0800c14d
 800c138:	0800c15b 	.word	0x0800c15b
 800c13c:	0800c14d 	.word	0x0800c14d
 800c140:	0800c161 	.word	0x0800c161
 800c144:	0800c171 	.word	0x0800c171
 800c148:	0800c16b 	.word	0x0800c16b
    case IREP_TT_STR:
    case IREP_TT_SSTR:	siz = bin_to_uint16(p) + 3;	break;
 800c14c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c14e:	f7ff ff05 	bl	800bf5c <bin_to_uint16>
 800c152:	4603      	mov	r3, r0
 800c154:	3303      	adds	r3, #3
 800c156:	657b      	str	r3, [r7, #84]	; 0x54
 800c158:	e011      	b.n	800c17e <load_irep_1+0xfe>
    case IREP_TT_INT32:	siz = 4;	break;
 800c15a:	2304      	movs	r3, #4
 800c15c:	657b      	str	r3, [r7, #84]	; 0x54
 800c15e:	e00e      	b.n	800c17e <load_irep_1+0xfe>
    case IREP_TT_INT64:
#if !defined(MRBC_INT64)
      mrbc_raise(vm, MRBC_CLASS(NotImplementedError), "Unsupported int64 (set MRBC_INT64 in vm_config)");
 800c160:	4a82      	ldr	r2, [pc, #520]	; (800c36c <load_irep_1+0x2ec>)
 800c162:	4983      	ldr	r1, [pc, #524]	; (800c370 <load_irep_1+0x2f0>)
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f7ff f95f 	bl	800b428 <mrbc_raise>
#endif
    case IREP_TT_FLOAT:	siz = 8;	break;
 800c16a:	2308      	movs	r3, #8
 800c16c:	657b      	str	r3, [r7, #84]	; 0x54
 800c16e:	e006      	b.n	800c17e <load_irep_1+0xfe>
    default:
      mrbc_raise(vm, MRBC_CLASS(Exception), "Loader unknown TT found.");
 800c170:	4a80      	ldr	r2, [pc, #512]	; (800c374 <load_irep_1+0x2f4>)
 800c172:	4981      	ldr	r1, [pc, #516]	; (800c378 <load_irep_1+0x2f8>)
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f7ff f957 	bl	800b428 <mrbc_raise>
      return NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	e0f1      	b.n	800c362 <load_irep_1+0x2e2>
    }
    p += siz;
 800c17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c182:	4413      	add	r3, r2
 800c184:	65fb      	str	r3, [r7, #92]	; 0x5c
  for( i = 0; i < irep.plen; i++ ) {
 800c186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c188:	3301      	adds	r3, #1
 800c18a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c18c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c18e:	461a      	mov	r2, r3
 800c190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c192:	4293      	cmp	r3, r2
 800c194:	dbc3      	blt.n	800c11e <load_irep_1+0x9e>
  }

  // num of symbols, offset of tbl_ireps.
  irep.slen = bin_to_uint16(p);		p += 2;
 800c196:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c198:	f7ff fee0 	bl	800bf5c <bin_to_uint16>
 800c19c:	4603      	mov	r3, r0
 800c19e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c1a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1a2:	3302      	adds	r3, #2
 800c1a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  int siz = sizeof(mrbc_sym) * irep.slen + sizeof(uint16_t) * irep.plen;
 800c1a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1ac:	4413      	add	r3, r2
 800c1ae:	005b      	lsls	r3, r3, #1
 800c1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  siz += (-siz & 0x03);	// padding. 32bit align.
 800c1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b4:	425b      	negs	r3, r3
 800c1b6:	f003 0303 	and.w	r3, r3, #3
 800c1ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1bc:	4413      	add	r3, r2
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
  irep.ofs_ireps = siz >> 2;
 800c1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c2:	109b      	asrs	r3, r3, #2
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	853b      	strh	r3, [r7, #40]	; 0x28

  // allocate new irep
  mrbc_irep *p_irep;
  siz = sizeof(mrbc_irep) + siz + sizeof(mrbc_irep*) * irep.rlen;
 800c1c8:	8b7b      	ldrh	r3, [r7, #26]
 800c1ca:	009a      	lsls	r2, r3, #2
 800c1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3320      	adds	r3, #32
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if( vm->vm_id == 0 && !flag_top ) {
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	789b      	ldrb	r3, [r3, #2]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d108      	bne.n	800c1ee <load_irep_1+0x16e>
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d105      	bne.n	800c1ee <load_irep_1+0x16e>
    p_irep = mrbc_raw_alloc_no_free( siz );
 800c1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7f5 fdcf 	bl	8001d88 <mrbc_raw_alloc_no_free>
 800c1ea:	6538      	str	r0, [r7, #80]	; 0x50
 800c1ec:	e004      	b.n	800c1f8 <load_irep_1+0x178>
  } else {
    p_irep = mrbc_raw_alloc( siz );
 800c1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7f5 fc69 	bl	8001ac8 <mrbc_raw_alloc>
 800c1f6:	6538      	str	r0, [r7, #80]	; 0x50
  }
  if( !p_irep ) {	// ENOMEM
 800c1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <load_irep_1+0x18c>
    mrbc_raise(vm, MRBC_CLASS(NoMemoryError),0);
 800c1fe:	2200      	movs	r2, #0
 800c200:	495e      	ldr	r1, [pc, #376]	; (800c37c <load_irep_1+0x2fc>)
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f7ff f910 	bl	800b428 <mrbc_raise>
    return NULL;
 800c208:	2300      	movs	r3, #0
 800c20a:	e0aa      	b.n	800c362 <load_irep_1+0x2e2>
  }
  *p_irep = irep;
 800c20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20e:	461d      	mov	r5, r3
 800c210:	f107 0414 	add.w	r4, r7, #20
 800c214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c218:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c21c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  // make a sym_id table.
  mrbc_sym *tbl_syms = mrbc_irep_tbl_syms(p_irep);
 800c220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c222:	3320      	adds	r3, #32
 800c224:	64fb      	str	r3, [r7, #76]	; 0x4c
  for( i = 0; i < irep.slen; i++ ) {
 800c226:	2300      	movs	r3, #0
 800c228:	65bb      	str	r3, [r7, #88]	; 0x58
 800c22a:	e039      	b.n	800c2a0 <load_irep_1+0x220>
    int siz = bin_to_uint16(p) + 1;	p += 2;
 800c22c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c22e:	f7ff fe95 	bl	800bf5c <bin_to_uint16>
 800c232:	4603      	mov	r3, r0
 800c234:	3301      	adds	r3, #1
 800c236:	63bb      	str	r3, [r7, #56]	; 0x38
 800c238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c23a:	3302      	adds	r3, #2
 800c23c:	65fb      	str	r3, [r7, #92]	; 0x5c
    char *sym_str;
    if (vm->flag_permanence == 1) {
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	791b      	ldrb	r3, [r3, #4]
 800c242:	f003 0304 	and.w	r3, r3, #4
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00b      	beq.n	800c264 <load_irep_1+0x1e4>
      sym_str = mrbc_raw_alloc_no_free(siz);
 800c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f5 fd9a 	bl	8001d88 <mrbc_raw_alloc_no_free>
 800c254:	64b8      	str	r0, [r7, #72]	; 0x48
      memcpy(sym_str, p, siz);
 800c256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c258:	461a      	mov	r2, r3
 800c25a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c25c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c25e:	f00a faca 	bl	80167f6 <memcpy>
 800c262:	e001      	b.n	800c268 <load_irep_1+0x1e8>
    } else {
      sym_str = (char *)p;
 800c264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c266:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    mrbc_sym sym = mrbc_str_to_symid( (const char *)sym_str );
 800c268:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c26a:	f001 fcb1 	bl	800dbd0 <mrbc_str_to_symid>
 800c26e:	4603      	mov	r3, r0
 800c270:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( sym < 0 ) {
 800c272:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c276:	2b00      	cmp	r3, #0
 800c278:	da06      	bge.n	800c288 <load_irep_1+0x208>
      mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 800c27a:	4a41      	ldr	r2, [pc, #260]	; (800c380 <load_irep_1+0x300>)
 800c27c:	493e      	ldr	r1, [pc, #248]	; (800c378 <load_irep_1+0x2f8>)
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff f8d2 	bl	800b428 <mrbc_raise>
      return NULL;
 800c284:	2300      	movs	r3, #0
 800c286:	e06c      	b.n	800c362 <load_irep_1+0x2e2>
    }
    *tbl_syms++ = sym;
 800c288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c28a:	1c9a      	adds	r2, r3, #2
 800c28c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c28e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c290:	801a      	strh	r2, [r3, #0]
    p += (siz);
 800c292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c294:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c296:	4413      	add	r3, r2
 800c298:	65fb      	str	r3, [r7, #92]	; 0x5c
  for( i = 0; i < irep.slen; i++ ) {
 800c29a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c29c:	3301      	adds	r3, #1
 800c29e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	dbc0      	blt.n	800c22c <load_irep_1+0x1ac>
  }

  // make a pool data's offset table.
  uint16_t *ofs_pools = mrbc_irep_tbl_pools(p_irep);
 800c2aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ac:	f103 0220 	add.w	r2, r3, #32
 800c2b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b2:	8a5b      	ldrh	r3, [r3, #18]
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	4413      	add	r3, r2
 800c2b8:	647b      	str	r3, [r7, #68]	; 0x44
  p = p_irep->pool + 2;
 800c2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2bc:	69db      	ldr	r3, [r3, #28]
 800c2be:	3302      	adds	r3, #2
 800c2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  for( i = 0; i < irep.plen; i++ ) {
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2c6:	e03f      	b.n	800c348 <load_irep_1+0x2c8>
    int siz = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	643b      	str	r3, [r7, #64]	; 0x40
    if( (p - irep.pool) > UINT16_MAX ) {
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2d6:	db06      	blt.n	800c2e6 <load_irep_1+0x266>
      mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow IREP data offset table.");
 800c2d8:	4a2a      	ldr	r2, [pc, #168]	; (800c384 <load_irep_1+0x304>)
 800c2da:	4927      	ldr	r1, [pc, #156]	; (800c378 <load_irep_1+0x2f8>)
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f7ff f8a3 	bl	800b428 <mrbc_raise>
      return NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	e03d      	b.n	800c362 <load_irep_1+0x2e2>
    }
    *ofs_pools++ = (uint16_t)(p - irep.pool);
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2ea:	1ad1      	subs	r1, r2, r3
 800c2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ee:	1c9a      	adds	r2, r3, #2
 800c2f0:	647a      	str	r2, [r7, #68]	; 0x44
 800c2f2:	b28a      	uxth	r2, r1
 800c2f4:	801a      	strh	r2, [r3, #0]
    switch( *p++ ) {
 800c2f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2f8:	1c5a      	adds	r2, r3, #1
 800c2fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	2b05      	cmp	r3, #5
 800c300:	d81b      	bhi.n	800c33a <load_irep_1+0x2ba>
 800c302:	a201      	add	r2, pc, #4	; (adr r2, 800c308 <load_irep_1+0x288>)
 800c304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c308:	0800c321 	.word	0x0800c321
 800c30c:	0800c32f 	.word	0x0800c32f
 800c310:	0800c321 	.word	0x0800c321
 800c314:	0800c335 	.word	0x0800c335
 800c318:	0800c33b 	.word	0x0800c33b
 800c31c:	0800c335 	.word	0x0800c335
    case IREP_TT_STR:
    case IREP_TT_SSTR:	siz = bin_to_uint16(p) + 3;	break;
 800c320:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c322:	f7ff fe1b 	bl	800bf5c <bin_to_uint16>
 800c326:	4603      	mov	r3, r0
 800c328:	3303      	adds	r3, #3
 800c32a:	643b      	str	r3, [r7, #64]	; 0x40
 800c32c:	e005      	b.n	800c33a <load_irep_1+0x2ba>
    case IREP_TT_INT32:	siz = 4;	break;
 800c32e:	2304      	movs	r3, #4
 800c330:	643b      	str	r3, [r7, #64]	; 0x40
 800c332:	e002      	b.n	800c33a <load_irep_1+0x2ba>
    case IREP_TT_INT64:
    case IREP_TT_FLOAT:	siz = 8;	break;
 800c334:	2308      	movs	r3, #8
 800c336:	643b      	str	r3, [r7, #64]	; 0x40
 800c338:	bf00      	nop
    }
    p += siz;
 800c33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c33e:	4413      	add	r3, r2
 800c340:	65fb      	str	r3, [r7, #92]	; 0x5c
  for( i = 0; i < irep.plen; i++ ) {
 800c342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c344:	3301      	adds	r3, #1
 800c346:	65bb      	str	r3, [r7, #88]	; 0x58
 800c348:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c34a:	461a      	mov	r2, r3
 800c34c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c34e:	4293      	cmp	r3, r2
 800c350:	dbba      	blt.n	800c2c8 <load_irep_1+0x248>
  }

  // return length
  *len = bin_to_uint32(bin);
 800c352:	68b8      	ldr	r0, [r7, #8]
 800c354:	f7ff fe1a 	bl	800bf8c <bin_to_uint32>
 800c358:	4603      	mov	r3, r0
 800c35a:	461a      	mov	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	601a      	str	r2, [r3, #0]
  return p_irep;
 800c360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800c362:	4618      	mov	r0, r3
 800c364:	3760      	adds	r7, #96	; 0x60
 800c366:	46bd      	mov	sp, r7
 800c368:	bdb0      	pop	{r4, r5, r7, pc}
 800c36a:	bf00      	nop
 800c36c:	08019738 	.word	0x08019738
 800c370:	20000134 	.word	0x20000134
 800c374:	08019768 	.word	0x08019768
 800c378:	2000010c 	.word	0x2000010c
 800c37c:	20000124 	.word	0x20000124
 800c380:	08019784 	.word	0x08019784
 800c384:	080197a0 	.word	0x080197a0

0800c388 <load_irep>:
  @param  bin	A pointer to RITE ISEQ.
  @param  len	Returns the parsed length.
  @return	Pointer to allocated mrbc_irep or NULL
*/
static mrbc_irep *load_irep(struct VM *vm, const uint8_t *bin, int *len)
{
 800c388:	b590      	push	{r4, r7, lr}
 800c38a:	b08b      	sub	sp, #44	; 0x2c
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
  int len1;
  mrbc_irep *irep = load_irep_1(vm, bin, &len1, len == 0);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	bf0c      	ite	eq
 800c39a:	2301      	moveq	r3, #1
 800c39c:	2300      	movne	r3, #0
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	f107 0214 	add.w	r2, r7, #20
 800c3a4:	68b9      	ldr	r1, [r7, #8]
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f7ff fe6a 	bl	800c080 <load_irep_1>
 800c3ac:	61f8      	str	r0, [r7, #28]
  if( !irep ) return NULL;
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d101      	bne.n	800c3b8 <load_irep+0x30>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e037      	b.n	800c428 <load_irep+0xa0>
  int total_len = len1;
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_irep **tbl_ireps = mrbc_irep_tbl_ireps(irep);
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	3320      	adds	r3, #32
 800c3c0:	69fa      	ldr	r2, [r7, #28]
 800c3c2:	8a92      	ldrh	r2, [r2, #20]
 800c3c4:	0092      	lsls	r2, r2, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	61bb      	str	r3, [r7, #24]
  int i;
  for( i = 0; i < irep->rlen; i++ ) {
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	623b      	str	r3, [r7, #32]
 800c3ce:	e01e      	b.n	800c40e <load_irep+0x86>
    tbl_ireps[i] = load_irep(vm, bin + total_len, &len1);
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	18d1      	adds	r1, r2, r3
 800c3d6:	6a3b      	ldr	r3, [r7, #32]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	69ba      	ldr	r2, [r7, #24]
 800c3dc:	18d4      	adds	r4, r2, r3
 800c3de:	f107 0314 	add.w	r3, r7, #20
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7ff ffcf 	bl	800c388 <load_irep>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	6023      	str	r3, [r4, #0]
    if( ! tbl_ireps[i] ) return NULL;
 800c3ee:	6a3b      	ldr	r3, [r7, #32]
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	69ba      	ldr	r2, [r7, #24]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d101      	bne.n	800c400 <load_irep+0x78>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	e013      	b.n	800c428 <load_irep+0xa0>
    total_len += len1;
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c404:	4413      	add	r3, r2
 800c406:	627b      	str	r3, [r7, #36]	; 0x24
  for( i = 0; i < irep->rlen; i++ ) {
 800c408:	6a3b      	ldr	r3, [r7, #32]
 800c40a:	3301      	adds	r3, #1
 800c40c:	623b      	str	r3, [r7, #32]
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	88db      	ldrh	r3, [r3, #6]
 800c412:	461a      	mov	r2, r3
 800c414:	6a3b      	ldr	r3, [r7, #32]
 800c416:	4293      	cmp	r3, r2
 800c418:	dbda      	blt.n	800c3d0 <load_irep+0x48>
  }

  if( len ) *len = total_len;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <load_irep+0x9e>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c424:	601a      	str	r2, [r3, #0]
  return irep;
 800c426:	69fb      	ldr	r3, [r7, #28]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	372c      	adds	r7, #44	; 0x2c
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd90      	pop	{r4, r7, pc}

0800c430 <mrbc_load_mrb>:
  @param  vm		Pointer to VM.
  @param  bytecode	Pointer to bytecode.
  @return int		zero if no error.
*/
int mrbc_load_mrb(struct VM *vm, const void *bytecode)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  const uint8_t *bin = bytecode;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	61fb      	str	r3, [r7, #28]

  vm->exception = mrbc_nil_value();
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	3328      	adds	r3, #40	; 0x28
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	605a      	str	r2, [r3, #4]
 800c448:	609a      	str	r2, [r3, #8]
 800c44a:	60da      	str	r2, [r3, #12]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  if( load_header(vm, bin) != 0 ) return -1;
 800c454:	69f9      	ldr	r1, [r7, #28]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7ff fdda 	bl	800c010 <load_header>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d002      	beq.n	800c468 <mrbc_load_mrb+0x38>
 800c462:	f04f 33ff 	mov.w	r3, #4294967295
 800c466:	e02f      	b.n	800c4c8 <mrbc_load_mrb+0x98>

  bin += SIZE_RITE_BINARY_HEADER;
 800c468:	2314      	movs	r3, #20
 800c46a:	461a      	mov	r2, r3
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	4413      	add	r3, r2
 800c470:	61fb      	str	r3, [r7, #28]

  while( 1 ) {
    if( memcmp(bin, IREP, sizeof(IREP)) == 0 ) {
 800c472:	2204      	movs	r2, #4
 800c474:	4916      	ldr	r1, [pc, #88]	; (800c4d0 <mrbc_load_mrb+0xa0>)
 800c476:	69f8      	ldr	r0, [r7, #28]
 800c478:	f00a f8f9 	bl	801666e <memcmp>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d107      	bne.n	800c492 <mrbc_load_mrb+0x62>
      if( mrbc_load_irep( vm, bin ) != 0 ) break;
 800c482:	69f9      	ldr	r1, [r7, #28]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f827 	bl	800c4d8 <mrbc_load_irep>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d008      	beq.n	800c4a2 <mrbc_load_mrb+0x72>
 800c490:	e012      	b.n	800c4b8 <mrbc_load_mrb+0x88>

    } else if( memcmp(bin, END, sizeof(END)) == 0 ) {
 800c492:	2204      	movs	r2, #4
 800c494:	490f      	ldr	r1, [pc, #60]	; (800c4d4 <mrbc_load_mrb+0xa4>)
 800c496:	69f8      	ldr	r0, [r7, #28]
 800c498:	f00a f8e9 	bl	801666e <memcmp>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d009      	beq.n	800c4b6 <mrbc_load_mrb+0x86>
      break;
    }
    // ignore other section.

    bin += bin_to_uint32(bin+4);	// add section size, to next section.
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff fd70 	bl	800bf8c <bin_to_uint32>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	61fb      	str	r3, [r7, #28]
    if( memcmp(bin, IREP, sizeof(IREP)) == 0 ) {
 800c4b4:	e7dd      	b.n	800c472 <mrbc_load_mrb+0x42>
      break;
 800c4b6:	bf00      	nop
  }

  return mrbc_israised(vm);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800c4be:	2b0e      	cmp	r3, #14
 800c4c0:	bf0c      	ite	eq
 800c4c2:	2301      	moveq	r3, #1
 800c4c4:	2300      	movne	r3, #0
 800c4c6:	b2db      	uxtb	r3, r3
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3720      	adds	r7, #32
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	0801aeec 	.word	0x0801aeec
 800c4d4:	0801aef0 	.word	0x0801aef0

0800c4d8 <mrbc_load_irep>:
  @param  vm		Pointer to VM.
  @param  bytecode	Pointer to IREP section.
  @return int		zero if no error.
*/
int mrbc_load_irep(struct VM *vm, const void *bytecode)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  const uint8_t *bin = bytecode;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	60fb      	str	r3, [r7, #12]

  vm->top_irep = load_irep( vm, bin + SIZE_RITE_SECTION_HEADER, 0 );
 800c4e6:	230c      	movs	r3, #12
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff ff48 	bl	800c388 <load_irep>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	609a      	str	r2, [r3, #8]
  if( vm->top_irep == NULL ) return -1;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d102      	bne.n	800c50c <mrbc_load_irep+0x34>
 800c506:	f04f 33ff 	mov.w	r3, #4294967295
 800c50a:	e007      	b.n	800c51c <mrbc_load_irep+0x44>

  return mrbc_israised(vm);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800c512:	2b0e      	cmp	r3, #14
 800c514:	bf0c      	ite	eq
 800c516:	2301      	moveq	r3, #1
 800c518:	2300      	movne	r3, #0
 800c51a:	b2db      	uxtb	r3, r3
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <mrbc_irep_free>:
/*! release mrbc_irep holds memory

  @param  irep	Pointer to allocated mrbc_irep.
*/
void mrbc_irep_free(struct IREP *irep)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  // release child ireps.
  mrbc_irep **tbl_ireps = mrbc_irep_tbl_ireps(irep);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3320      	adds	r3, #32
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	8a92      	ldrh	r2, [r2, #20]
 800c534:	0092      	lsls	r2, r2, #2
 800c536:	4413      	add	r3, r2
 800c538:	60fb      	str	r3, [r7, #12]
  int i;
  for( i = 0; i < irep->rlen; i++ ) {
 800c53a:	2300      	movs	r3, #0
 800c53c:	60bb      	str	r3, [r7, #8]
 800c53e:	e009      	b.n	800c554 <mrbc_irep_free+0x30>
    mrbc_irep_free( *tbl_ireps++ );
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	1d1a      	adds	r2, r3, #4
 800c544:	60fa      	str	r2, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4618      	mov	r0, r3
 800c54a:	f7ff ffeb 	bl	800c524 <mrbc_irep_free>
  for( i = 0; i < irep->rlen; i++ ) {
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	3301      	adds	r3, #1
 800c552:	60bb      	str	r3, [r7, #8]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	88db      	ldrh	r3, [r3, #6]
 800c558:	461a      	mov	r2, r3
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	4293      	cmp	r3, r2
 800c55e:	dbef      	blt.n	800c540 <mrbc_irep_free+0x1c>
  }

  mrbc_raw_free( irep );
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7f5 fc8d 	bl	8001e80 <mrbc_raw_free>
}
 800c566:	bf00      	nop
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
	...

0800c570 <mrbc_irep_pool_value>:
  @param  vm		Pointer to VM.
  @param  n		n'th
  @return mrbc_value	value
*/
mrbc_value mrbc_irep_pool_value(struct VM *vm, int n)
{
 800c570:	b590      	push	{r4, r7, lr}
 800c572:	b091      	sub	sp, #68	; 0x44
 800c574:	af00      	add	r7, sp, #0
 800c576:	61f8      	str	r0, [r7, #28]
 800c578:	61b9      	str	r1, [r7, #24]
 800c57a:	617a      	str	r2, [r7, #20]
  assert( vm->cur_irep->plen > n );
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	8a1b      	ldrh	r3, [r3, #16]
 800c582:	461a      	mov	r2, r3
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	4293      	cmp	r3, r2
 800c588:	db06      	blt.n	800c598 <mrbc_irep_pool_value+0x28>
 800c58a:	4b36      	ldr	r3, [pc, #216]	; (800c664 <mrbc_irep_pool_value+0xf4>)
 800c58c:	4a36      	ldr	r2, [pc, #216]	; (800c668 <mrbc_irep_pool_value+0xf8>)
 800c58e:	f240 1161 	movw	r1, #353	; 0x161
 800c592:	4836      	ldr	r0, [pc, #216]	; (800c66c <mrbc_irep_pool_value+0xfc>)
 800c594:	f009 f856 	bl	8015644 <__assert_func>
  const uint8_t *p = mrbc_irep_pool_ptr(vm->cur_irep, n);
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	69ba      	ldr	r2, [r7, #24]
 800c5a0:	68d2      	ldr	r2, [r2, #12]
 800c5a2:	f102 0120 	add.w	r1, r2, #32
 800c5a6:	69ba      	ldr	r2, [r7, #24]
 800c5a8:	68d2      	ldr	r2, [r2, #12]
 800c5aa:	8a52      	ldrh	r2, [r2, #18]
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	697a      	ldr	r2, [r7, #20]
 800c5b0:	4402      	add	r2, r0
 800c5b2:	0052      	lsls	r2, r2, #1
 800c5b4:	440a      	add	r2, r1
 800c5b6:	8812      	ldrh	r2, [r2, #0]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  mrbc_value obj;

  int tt = *p++;
 800c5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	63bb      	str	r3, [r7, #56]	; 0x38
  switch( tt ) {
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c8:	2b05      	cmp	r3, #5
 800c5ca:	d836      	bhi.n	800c63a <mrbc_irep_pool_value+0xca>
 800c5cc:	a201      	add	r2, pc, #4	; (adr r2, 800c5d4 <mrbc_irep_pool_value+0x64>)
 800c5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d2:	bf00      	nop
 800c5d4:	0800c5ed 	.word	0x0800c5ed
 800c5d8:	0800c613 	.word	0x0800c613
 800c5dc:	0800c5ed 	.word	0x0800c5ed
 800c5e0:	0800c63b 	.word	0x0800c63b
 800c5e4:	0800c63b 	.word	0x0800c63b
 800c5e8:	0800c625 	.word	0x0800c625
#if MRBC_USE_STRING
  case IREP_TT_STR:
  case IREP_TT_SSTR: {
    int len = bin_to_uint16(p);
 800c5ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5ee:	f7ff fcb5 	bl	800bf5c <bin_to_uint16>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	637b      	str	r3, [r7, #52]	; 0x34
    obj = mrbc_string_new( vm, p+2, len );
 800c5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f8:	1c9a      	adds	r2, r3, #2
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fe:	69b9      	ldr	r1, [r7, #24]
 800c600:	f7fa fdd4 	bl	80071ac <mrbc_string_new>
 800c604:	f107 0420 	add.w	r4, r7, #32
 800c608:	463b      	mov	r3, r7
 800c60a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c60c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    break;
 800c610:	e01c      	b.n	800c64c <mrbc_irep_pool_value+0xdc>
  }
#endif

  case IREP_TT_INT32:
    mrbc_set_integer(&obj, bin_to_uint32(p));
 800c612:	2304      	movs	r3, #4
 800c614:	f887 3020 	strb.w	r3, [r7, #32]
 800c618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c61a:	f7ff fcb7 	bl	800bf8c <bin_to_uint32>
 800c61e:	4603      	mov	r3, r0
 800c620:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 800c622:	e013      	b.n	800c64c <mrbc_irep_pool_value+0xdc>

#if MRBC_USE_FLOAT
  case IREP_TT_FLOAT:
    mrbc_set_float(&obj, bin_to_double64(p));
 800c624:	2305      	movs	r3, #5
 800c626:	f887 3020 	strb.w	r3, [r7, #32]
 800c62a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c62c:	f7ff fccc 	bl	800bfc8 <bin_to_double64>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    break;
 800c638:	e008      	b.n	800c64c <mrbc_irep_pool_value+0xdc>
    mrbc_set_integer(&obj, bin_to_int64(p));
    break;
#endif

  default:
    mrbc_raisef(vm, MRBC_CLASS(Exception), "Not support such type (IREP_TT=%d)", tt);
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	4a0c      	ldr	r2, [pc, #48]	; (800c670 <mrbc_irep_pool_value+0x100>)
 800c63e:	490d      	ldr	r1, [pc, #52]	; (800c674 <mrbc_irep_pool_value+0x104>)
 800c640:	69b8      	ldr	r0, [r7, #24]
 800c642:	f7fe ff45 	bl	800b4d0 <mrbc_raisef>
    mrbc_set_nil(&obj);
 800c646:	2301      	movs	r3, #1
 800c648:	f887 3020 	strb.w	r3, [r7, #32]
  }

  return obj;
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	461c      	mov	r4, r3
 800c650:	f107 0320 	add.w	r3, r7, #32
 800c654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c656:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c65a:	69f8      	ldr	r0, [r7, #28]
 800c65c:	3744      	adds	r7, #68	; 0x44
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd90      	pop	{r4, r7, pc}
 800c662:	bf00      	nop
 800c664:	080197c4 	.word	0x080197c4
 800c668:	0801aef4 	.word	0x0801aef4
 800c66c:	080197dc 	.word	0x080197dc
 800c670:	080197f8 	.word	0x080197f8
 800c674:	2000010c 	.word	0x2000010c

0800c678 <mrbc_decref>:
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f993 3000 	ldrsb.w	r3, [r3]
 800c686:	2b07      	cmp	r3, #7
 800c688:	dd2c      	ble.n	800c6e4 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	885b      	ldrh	r3, [r3, #2]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d106      	bne.n	800c6a2 <mrbc_decref+0x2a>
 800c694:	4b16      	ldr	r3, [pc, #88]	; (800c6f0 <mrbc_decref+0x78>)
 800c696:	4a17      	ldr	r2, [pc, #92]	; (800c6f4 <mrbc_decref+0x7c>)
 800c698:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800c69c:	4816      	ldr	r0, [pc, #88]	; (800c6f8 <mrbc_decref+0x80>)
 800c69e:	f008 ffd1 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	885b      	ldrh	r3, [r3, #2]
 800c6a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d106      	bne.n	800c6be <mrbc_decref+0x46>
 800c6b0:	4b12      	ldr	r3, [pc, #72]	; (800c6fc <mrbc_decref+0x84>)
 800c6b2:	4a10      	ldr	r2, [pc, #64]	; (800c6f4 <mrbc_decref+0x7c>)
 800c6b4:	f240 11d3 	movw	r1, #467	; 0x1d3
 800c6b8:	480f      	ldr	r0, [pc, #60]	; (800c6f8 <mrbc_decref+0x80>)
 800c6ba:	f008 ffc3 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	885a      	ldrh	r2, [r3, #2]
 800c6c4:	3a01      	subs	r2, #1
 800c6c6:	b292      	uxth	r2, r2
 800c6c8:	805a      	strh	r2, [r3, #2]
 800c6ca:	885b      	ldrh	r3, [r3, #2]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10b      	bne.n	800c6e8 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f993 3000 	ldrsb.w	r3, [r3]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	4b09      	ldr	r3, [pc, #36]	; (800c700 <mrbc_decref+0x88>)
 800c6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	4798      	blx	r3
 800c6e2:	e002      	b.n	800c6ea <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800c6e4:	bf00      	nop
 800c6e6:	e000      	b.n	800c6ea <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800c6e8:	bf00      	nop
}
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	0801981c 	.word	0x0801981c
 800c6f4:	0801be1c 	.word	0x0801be1c
 800c6f8:	08019834 	.word	0x08019834
 800c6fc:	08019850 	.word	0x08019850
 800c700:	0801be98 	.word	0x0801be98

0800c704 <mrbc_string_new_cstr>:
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d004      	beq.n	800c720 <mrbc_string_new_cstr+0x1c>
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7f3 fd6c 	bl	80001f4 <strlen>
 800c71c:	4603      	mov	r3, r0
 800c71e:	e000      	b.n	800c722 <mrbc_string_new_cstr+0x1e>
 800c720:	2300      	movs	r3, #0
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	68b9      	ldr	r1, [r7, #8]
 800c728:	f7fa fd40 	bl	80071ac <mrbc_string_new>
}
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <mrbc_string_cstr>:
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	689b      	ldr	r3, [r3, #8]
}
 800c742:	4618      	mov	r0, r3
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <mrbc_string_append_cstr>:
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b082      	sub	sp, #8
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 800c758:	6838      	ldr	r0, [r7, #0]
 800c75a:	f7f3 fd4b 	bl	80001f4 <strlen>
 800c75e:	4603      	mov	r3, r0
 800c760:	461a      	mov	r2, r3
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7fa feb9 	bl	80074dc <mrbc_string_append_cbuf>
 800c76a:	4603      	mov	r3, r0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <q_insert_task>:
  The queue is sorted in priority_preemption order.
  If the same priority_preemption value is in the TCB and queue,
  it will be inserted at the end of the same value in queue.
*/
static void q_insert_task(mrbc_tcb *p_tcb)
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  // select target queue pointer.
  //                    state value = 0  1  2  3  4  5  6  7  8
  //                             /2   0, 0, 1, 1, 2, 2, 3, 3, 4
  static const uint8_t conv_tbl[] = { 0,    1,    2,    0,    3 };
  mrbc_tcb **pp_q = &task_queue_[ conv_tbl[ p_tcb->state / 2 ]];
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7adb      	ldrb	r3, [r3, #11]
 800c780:	085b      	lsrs	r3, r3, #1
 800c782:	b2db      	uxtb	r3, r3
 800c784:	461a      	mov	r2, r3
 800c786:	4b1c      	ldr	r3, [pc, #112]	; (800c7f8 <q_insert_task+0x84>)
 800c788:	5c9b      	ldrb	r3, [r3, r2]
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4a1b      	ldr	r2, [pc, #108]	; (800c7fc <q_insert_task+0x88>)
 800c78e:	4413      	add	r3, r2
 800c790:	60bb      	str	r3, [r7, #8]

  // in case of insert on top.
  if((*pp_q == NULL) ||
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d006      	beq.n	800c7a8 <q_insert_task+0x34>
     (p_tcb->priority_preemption < (*pp_q)->priority_preemption)) {
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	7a5a      	ldrb	r2, [r3, #9]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	7a5b      	ldrb	r3, [r3, #9]
  if((*pp_q == NULL) ||
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d207      	bcs.n	800c7b8 <q_insert_task+0x44>
    p_tcb->next = *pp_q;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	605a      	str	r2, [r3, #4]
    *pp_q       = p_tcb;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	601a      	str	r2, [r3, #0]
    return;
 800c7b6:	e01a      	b.n	800c7ee <q_insert_task+0x7a>
  }

  // find insert point in sorted linked list.
  mrbc_tcb *p = *pp_q;
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	60fb      	str	r3, [r7, #12]
  while( p->next != NULL ) {
 800c7be:	e009      	b.n	800c7d4 <q_insert_task+0x60>
    if( p_tcb->priority_preemption < p->next->priority_preemption ) break;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	7a5a      	ldrb	r2, [r3, #9]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	7a5b      	ldrb	r3, [r3, #9]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d307      	bcc.n	800c7de <q_insert_task+0x6a>
    p = p->next;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	60fb      	str	r3, [r7, #12]
  while( p->next != NULL ) {
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1f1      	bne.n	800c7c0 <q_insert_task+0x4c>
 800c7dc:	e000      	b.n	800c7e0 <q_insert_task+0x6c>
    if( p_tcb->priority_preemption < p->next->priority_preemption ) break;
 800c7de:	bf00      	nop
  }

  // insert tcb to queue.
  p_tcb->next = p->next;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	685a      	ldr	r2, [r3, #4]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	605a      	str	r2, [r3, #4]
  p->next     = p_tcb;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	605a      	str	r2, [r3, #4]
}
 800c7ee:	3714      	adds	r7, #20
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	0801bdfc 	.word	0x0801bdfc
 800c7fc:	20008040 	.word	0x20008040

0800c800 <q_delete_task>:
/*! Delete task(TCB) from task queue

  @param  p_tcb	Pointer to target TCB
*/
static void q_delete_task(mrbc_tcb *p_tcb)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  // select target queue pointer. (same as q_insert_task)
  static const uint8_t conv_tbl[] = { 0,    1,    2,    0,    3 };
  mrbc_tcb **pp_q = &task_queue_[ conv_tbl[ p_tcb->state / 2 ]];
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	7adb      	ldrb	r3, [r3, #11]
 800c80c:	085b      	lsrs	r3, r3, #1
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	461a      	mov	r2, r3
 800c812:	4b19      	ldr	r3, [pc, #100]	; (800c878 <q_delete_task+0x78>)
 800c814:	5c9b      	ldrb	r3, [r3, r2]
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4a18      	ldr	r2, [pc, #96]	; (800c87c <q_delete_task+0x7c>)
 800c81a:	4413      	add	r3, r2
 800c81c:	60bb      	str	r3, [r7, #8]

  if( *pp_q == p_tcb ) {
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	429a      	cmp	r2, r3
 800c826:	d107      	bne.n	800c838 <q_delete_task+0x38>
    *pp_q       = p_tcb->next;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	601a      	str	r2, [r3, #0]
    p_tcb->next = NULL;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	605a      	str	r2, [r3, #4]
    return;
 800c836:	e01c      	b.n	800c872 <q_delete_task+0x72>
  }

  mrbc_tcb *p = *pp_q;
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	60fb      	str	r3, [r7, #12]
  while( p ) {
 800c83e:	e00f      	b.n	800c860 <q_delete_task+0x60>
    if( p->next == p_tcb ) {
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	429a      	cmp	r2, r3
 800c848:	d107      	bne.n	800c85a <q_delete_task+0x5a>
      p->next     = p_tcb->next;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	605a      	str	r2, [r3, #4]
      p_tcb->next = NULL;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	605a      	str	r2, [r3, #4]
      return;
 800c858:	e00b      	b.n	800c872 <q_delete_task+0x72>
    }

    p = p->next;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	60fb      	str	r3, [r7, #12]
  while( p ) {
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d1ec      	bne.n	800c840 <q_delete_task+0x40>
  }

  assert(!"Not found target task in queue.");
 800c866:	4b06      	ldr	r3, [pc, #24]	; (800c880 <q_delete_task+0x80>)
 800c868:	4a06      	ldr	r2, [pc, #24]	; (800c884 <q_delete_task+0x84>)
 800c86a:	2183      	movs	r1, #131	; 0x83
 800c86c:	4806      	ldr	r0, [pc, #24]	; (800c888 <q_delete_task+0x88>)
 800c86e:	f008 fee9 	bl	8015644 <__assert_func>
}
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	0801be04 	.word	0x0801be04
 800c87c:	20008040 	.word	0x20008040
 800c880:	0801986c 	.word	0x0801986c
 800c884:	0801be0c 	.word	0x0801be0c
 800c888:	08019890 	.word	0x08019890

0800c88c <preempt_running_task>:

//================================================================
/*! preempt running task
*/
inline static void preempt_running_task(void)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
  for( mrbc_tcb *t = q_ready_; t != NULL; t = t->next ) {
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <preempt_running_task+0x38>)
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	607b      	str	r3, [r7, #4]
 800c898:	e00a      	b.n	800c8b0 <preempt_running_task+0x24>
    if( t->state == TASKSTATE_RUNNING ) t->vm.flag_preemption = 1;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	7adb      	ldrb	r3, [r3, #11]
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d103      	bne.n	800c8aa <preempt_running_task+0x1e>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  for( mrbc_tcb *t = q_ready_; t != NULL; t = t->next ) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	607b      	str	r3, [r7, #4]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1f1      	bne.n	800c89a <preempt_running_task+0xe>
  }
}
 800c8b6:	bf00      	nop
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	20008040 	.word	0x20008040

0800c8c8 <mrbc_tick>:
//================================================================
/*! Tick timer interrupt handler.

*/
void mrbc_tick(void)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
  tick_++;
 800c8ce:	4b35      	ldr	r3, [pc, #212]	; (800c9a4 <mrbc_tick+0xdc>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	4a33      	ldr	r2, [pc, #204]	; (800c9a4 <mrbc_tick+0xdc>)
 800c8d6:	6013      	str	r3, [r2, #0]

  // Decrease the time slice value for running tasks.
  mrbc_tcb *tcb = q_ready_;
 800c8d8:	4b33      	ldr	r3, [pc, #204]	; (800c9a8 <mrbc_tick+0xe0>)
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	60fb      	str	r3, [r7, #12]
  if( (tcb != NULL) && (tcb->timeslice != 0) ) {
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d014      	beq.n	800c90e <mrbc_tick+0x46>
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	7a9b      	ldrb	r3, [r3, #10]
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00f      	beq.n	800c90e <mrbc_tick+0x46>
    tcb->timeslice--;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	7a9b      	ldrb	r3, [r3, #10]
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	729a      	strb	r2, [r3, #10]
    if( tcb->timeslice == 0 ) tcb->vm.flag_preemption = 1;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	7a9b      	ldrb	r3, [r3, #10]
 800c900:	b2db      	uxtb	r3, r3
 800c902:	2b00      	cmp	r3, #0
 800c904:	d103      	bne.n	800c90e <mrbc_tick+0x46>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }

  // Check the wakeup tick.
  if( (int32_t)(wakeup_tick_ - tick_) < 0 ) {
 800c90e:	4b27      	ldr	r3, [pc, #156]	; (800c9ac <mrbc_tick+0xe4>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	4b24      	ldr	r3, [pc, #144]	; (800c9a4 <mrbc_tick+0xdc>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	2b00      	cmp	r3, #0
 800c91a:	da3e      	bge.n	800c99a <mrbc_tick+0xd2>
    int flag_preemption = 0;
 800c91c:	2300      	movs	r3, #0
 800c91e:	60bb      	str	r3, [r7, #8]
    wakeup_tick_ = tick_ + (1 << 16);
 800c920:	4b20      	ldr	r3, [pc, #128]	; (800c9a4 <mrbc_tick+0xdc>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c928:	4a20      	ldr	r2, [pc, #128]	; (800c9ac <mrbc_tick+0xe4>)
 800c92a:	6013      	str	r3, [r2, #0]

    // Find a wake up task in waiting task queue.
    tcb = q_waiting_;
 800c92c:	4b1e      	ldr	r3, [pc, #120]	; (800c9a8 <mrbc_tick+0xe0>)
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	60fb      	str	r3, [r7, #12]
    while( tcb != NULL ) {
 800c932:	e02a      	b.n	800c98a <mrbc_tick+0xc2>
      mrbc_tcb *t = tcb;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	607b      	str	r3, [r7, #4]
      tcb = tcb->next;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	60fb      	str	r3, [r7, #12]
      if( t->reason != TASKREASON_SLEEP ) continue;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	7b1b      	ldrb	r3, [r3, #12]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d000      	beq.n	800c948 <mrbc_tick+0x80>
 800c946:	e020      	b.n	800c98a <mrbc_tick+0xc2>

      if( (int32_t)(t->wakeup_tick - tick_) < 0 ) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6a1a      	ldr	r2, [r3, #32]
 800c94c:	4b15      	ldr	r3, [pc, #84]	; (800c9a4 <mrbc_tick+0xdc>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	da0e      	bge.n	800c974 <mrbc_tick+0xac>
        q_delete_task(t);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff ff52 	bl	800c800 <q_delete_task>
        t->state  = TASKSTATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2202      	movs	r2, #2
 800c960:	72da      	strb	r2, [r3, #11]
        t->reason = 0;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	731a      	strb	r2, [r3, #12]
        q_insert_task(t);
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff ff03 	bl	800c774 <q_insert_task>
        flag_preemption = 1;
 800c96e:	2301      	movs	r3, #1
 800c970:	60bb      	str	r3, [r7, #8]
 800c972:	e00a      	b.n	800c98a <mrbc_tick+0xc2>
      } else if( (int32_t)(t->wakeup_tick - wakeup_tick_) < 0 ) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6a1a      	ldr	r2, [r3, #32]
 800c978:	4b0c      	ldr	r3, [pc, #48]	; (800c9ac <mrbc_tick+0xe4>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	da03      	bge.n	800c98a <mrbc_tick+0xc2>
        wakeup_tick_ = t->wakeup_tick;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	4a09      	ldr	r2, [pc, #36]	; (800c9ac <mrbc_tick+0xe4>)
 800c988:	6013      	str	r3, [r2, #0]
    while( tcb != NULL ) {
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1d1      	bne.n	800c934 <mrbc_tick+0x6c>
      }
    }

    if( flag_preemption ) preempt_running_task();
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <mrbc_tick+0xd2>
 800c996:	f7ff ff79 	bl	800c88c <preempt_running_task>
  }

}
 800c99a:	bf00      	nop
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20008050 	.word	0x20008050
 800c9a8:	20008040 	.word	0x20008040
 800c9ac:	200001d4 	.word	0x200001d4

0800c9b0 <mrbc_tcb_new>:
  tcb = mrbc_tcb_new( MAX_REGS_SIZE, MRBC_TASK_DEFAULT_STATE, MRBC_TASK_DEFAULT_PRIORITY );
  mrbc_create_task( byte_code, tcb );
@endcode
*/
mrbc_tcb * mrbc_tcb_new( int regs_size, enum MrbcTaskState task_state, int priority )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	72fb      	strb	r3, [r7, #11]
  mrbc_tcb *tcb;

  tcb = mrbc_raw_alloc( sizeof(mrbc_tcb) + sizeof(mrbc_value) * regs_size );
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3306      	adds	r3, #6
 800c9c2:	011b      	lsls	r3, r3, #4
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7f5 f87f 	bl	8001ac8 <mrbc_raw_alloc>
 800c9ca:	6178      	str	r0, [r7, #20]
  if( !tcb ) return NULL;	// ENOMEM
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <mrbc_tcb_new+0x26>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	e016      	b.n	800ca04 <mrbc_tcb_new+0x54>

  memset(tcb, 0, sizeof(mrbc_tcb));
 800c9d6:	2260      	movs	r2, #96	; 0x60
 800c9d8:	2100      	movs	r1, #0
 800c9da:	6978      	ldr	r0, [r7, #20]
 800c9dc:	f009 fe71 	bl	80166c2 <memset>
#if defined(MRBC_DEBUG)
  memcpy( tcb->type, "TCB", 4 );
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2204      	movs	r2, #4
 800c9e4:	4909      	ldr	r1, [pc, #36]	; (800ca0c <mrbc_tcb_new+0x5c>)
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f009 ff05 	bl	80167f6 <memcpy>
#endif
  tcb->priority = priority;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	721a      	strb	r2, [r3, #8]
  tcb->state = task_state;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	7afa      	ldrb	r2, [r7, #11]
 800c9f8:	72da      	strb	r2, [r3, #11]
  tcb->vm.regs_size = regs_size;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	85da      	strh	r2, [r3, #46]	; 0x2e

  return tcb;
 800ca02:	697b      	ldr	r3, [r7, #20]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	080198ac 	.word	0x080198ac

0800ca10 <mrbc_create_task>:
  @param  byte_code	pointer to VM byte code.
  @param  tcb		Task control block with parameter, or NULL.
  @return Pointer to mrbc_tcb or NULL.
*/
mrbc_tcb * mrbc_create_task(const void *byte_code, mrbc_tcb *tcb)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  if( !tcb ) tcb = mrbc_tcb_new( MAX_REGS_SIZE, MRBC_TASK_DEFAULT_STATE, MRBC_TASK_DEFAULT_PRIORITY );
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d107      	bne.n	800ca30 <mrbc_create_task+0x20>
 800ca20:	2302      	movs	r3, #2
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2280      	movs	r2, #128	; 0x80
 800ca26:	4619      	mov	r1, r3
 800ca28:	206e      	movs	r0, #110	; 0x6e
 800ca2a:	f7ff ffc1 	bl	800c9b0 <mrbc_tcb_new>
 800ca2e:	6038      	str	r0, [r7, #0]
  if( !tcb ) return NULL;	// ENOMEM
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d101      	bne.n	800ca3a <mrbc_create_task+0x2a>
 800ca36:	2300      	movs	r3, #0
 800ca38:	e03a      	b.n	800cab0 <mrbc_create_task+0xa0>

  tcb->priority_preemption = tcb->priority;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	7a1a      	ldrb	r2, [r3, #8]
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	725a      	strb	r2, [r3, #9]

  // assign VM ID
  if( mrbc_vm_open( &tcb->vm ) == NULL ) {
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	3328      	adds	r3, #40	; 0x28
 800ca46:	4618      	mov	r0, r3
 800ca48:	f002 f968 	bl	800ed1c <mrbc_vm_open>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d104      	bne.n	800ca5c <mrbc_create_task+0x4c>
    mrbc_printf("Error: Can't assign VM-ID.\n");
 800ca52:	4819      	ldr	r0, [pc, #100]	; (800cab8 <mrbc_create_task+0xa8>)
 800ca54:	f7fd fb78 	bl	800a148 <mrbc_printf>
    return NULL;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	e029      	b.n	800cab0 <mrbc_create_task+0xa0>
  }

  if( mrbc_load_mrb(&tcb->vm, byte_code) != 0 ) {
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	3328      	adds	r3, #40	; 0x28
 800ca60:	6879      	ldr	r1, [r7, #4]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7ff fce4 	bl	800c430 <mrbc_load_mrb>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00b      	beq.n	800ca86 <mrbc_create_task+0x76>
    mrbc_print_vm_exception( &tcb->vm );
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	3328      	adds	r3, #40	; 0x28
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fe fdc0 	bl	800b5f8 <mrbc_print_vm_exception>
    mrbc_vm_close( &tcb->vm );
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	3328      	adds	r3, #40	; 0x28
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f002 f9a5 	bl	800edcc <mrbc_vm_close>
    return NULL;
 800ca82:	2300      	movs	r3, #0
 800ca84:	e014      	b.n	800cab0 <mrbc_create_task+0xa0>
  }
  mrbc_vm_begin( &tcb->vm );
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	3328      	adds	r3, #40	; 0x28
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f002 f9da 	bl	800ee44 <mrbc_vm_begin>

  hal_disable_irq();
 800ca90:	f7fe ff8a 	bl	800b9a8 <hal_disable_irq>
  q_insert_task(tcb);
 800ca94:	6838      	ldr	r0, [r7, #0]
 800ca96:	f7ff fe6d 	bl	800c774 <q_insert_task>
  if( tcb->state & TASKSTATE_READY ) preempt_running_task();
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	7adb      	ldrb	r3, [r3, #11]
 800ca9e:	f003 0302 	and.w	r3, r3, #2
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <mrbc_create_task+0x9a>
 800caa6:	f7ff fef1 	bl	800c88c <preempt_running_task>
  hal_enable_irq();
 800caaa:	f7fe ff74 	bl	800b996 <hal_enable_irq>

  return tcb;
 800caae:	683b      	ldr	r3, [r7, #0]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	080198b0 	.word	0x080198b0

0800cabc <mrbc_set_task_name>:

  @param  tcb	target task.
  @param  name	task name
*/
void mrbc_set_task_name(mrbc_tcb *tcb, const char *name)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  /* (note)
   this is `strncpy( tcb->name, name, MRBC_TASK_NAME_LEN );`
   for to avoid link error when compiling for PIC32 with XC32 v4.21
  */
  for( int i = 0; i < MRBC_TASK_NAME_LEN; i++ ) {
 800cac6:	2300      	movs	r3, #0
 800cac8:	60fb      	str	r3, [r7, #12]
 800caca:	e013      	b.n	800caf4 <mrbc_set_task_name+0x38>
    if( (tcb->name[i] = *name++) == 0 ) break;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	1c5a      	adds	r2, r3, #1
 800cad0:	603a      	str	r2, [r7, #0]
 800cad2:	7819      	ldrb	r1, [r3, #0]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	4413      	add	r3, r2
 800cada:	330d      	adds	r3, #13
 800cadc:	460a      	mov	r2, r1
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	4413      	add	r3, r2
 800cae6:	330d      	adds	r3, #13
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d006      	beq.n	800cafc <mrbc_set_task_name+0x40>
  for( int i = 0; i < MRBC_TASK_NAME_LEN; i++ ) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3301      	adds	r3, #1
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b0e      	cmp	r3, #14
 800caf8:	dde8      	ble.n	800cacc <mrbc_set_task_name+0x10>
  }
}
 800cafa:	e000      	b.n	800cafe <mrbc_set_task_name+0x42>
    if( (tcb->name[i] = *name++) == 0 ) break;
 800cafc:	bf00      	nop
}
 800cafe:	bf00      	nop
 800cb00:	3714      	adds	r7, #20
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
	...

0800cb0c <mrbc_find_task>:

  @param  name		task name
  @return pointer to mrbc_tcb or NULL
*/
mrbc_tcb * mrbc_find_task(const char *name)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  mrbc_tcb *tcb = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	60fb      	str	r3, [r7, #12]
  hal_disable_irq();
 800cb18:	f7fe ff46 	bl	800b9a8 <hal_disable_irq>

  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	60bb      	str	r3, [r7, #8]
 800cb20:	e017      	b.n	800cb52 <mrbc_find_task+0x46>
    for( tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800cb22:	4a12      	ldr	r2, [pc, #72]	; (800cb6c <mrbc_find_task+0x60>)
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb2a:	60fb      	str	r3, [r7, #12]
 800cb2c:	e00b      	b.n	800cb46 <mrbc_find_task+0x3a>
      if( strcmp( tcb->name, name ) == 0 ) goto RETURN_TCB;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	330d      	adds	r3, #13
 800cb32:	6879      	ldr	r1, [r7, #4]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7f3 fb53 	bl	80001e0 <strcmp>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00c      	beq.n	800cb5a <mrbc_find_task+0x4e>
    for( tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	60fb      	str	r3, [r7, #12]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1f0      	bne.n	800cb2e <mrbc_find_task+0x22>
  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	60bb      	str	r3, [r7, #8]
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	2b03      	cmp	r3, #3
 800cb56:	dde4      	ble.n	800cb22 <mrbc_find_task+0x16>
    }
  }

 RETURN_TCB:
 800cb58:	e000      	b.n	800cb5c <mrbc_find_task+0x50>
      if( strcmp( tcb->name, name ) == 0 ) goto RETURN_TCB;
 800cb5a:	bf00      	nop
  hal_enable_irq();
 800cb5c:	f7fe ff1b 	bl	800b996 <hal_enable_irq>
  return tcb;
 800cb60:	68fb      	ldr	r3, [r7, #12]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	20008040 	.word	0x20008040

0800cb70 <mrbc_run>:
//================================================================
/*! execute

*/
int mrbc_run(void)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
  int ret = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	60bb      	str	r3, [r7, #8]
#if MRBC_SCHEDULER_EXIT
  if( !q_ready_ && !q_waiting_ && !q_suspended_ ) return ret;
#endif

  while( 1 ) {
    mrbc_tcb *tcb = q_ready_;
 800cb7a:	4b39      	ldr	r3, [pc, #228]	; (800cc60 <mrbc_run+0xf0>)
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	607b      	str	r3, [r7, #4]
    if( tcb == NULL ) {		// no task to run.
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d102      	bne.n	800cb8c <mrbc_run+0x1c>
      hal_idle_cpu();
 800cb86:	f7fe ff18 	bl	800b9ba <hal_idle_cpu>
      continue;
 800cb8a:	e067      	b.n	800cc5c <mrbc_run+0xec>
    }

    /*
      run the task.
    */
    tcb->state = TASKSTATE_RUNNING;   // to execute.
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2203      	movs	r2, #3
 800cb90:	72da      	strb	r2, [r3, #11]
    tcb->timeslice = MRBC_TIMESLICE_TICK_COUNT;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	220a      	movs	r2, #10
 800cb96:	729a      	strb	r2, [r3, #10]

#if !defined(MRBC_NO_TIMER)
    // Using hardware timer.
    tcb->vm.flag_preemption = 0;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    int ret_vm_run = mrbc_vm_run(&tcb->vm);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3328      	adds	r3, #40	; 0x28
 800cba4:	4618      	mov	r0, r3
 800cba6:	f006 f9ad 	bl	8012f04 <mrbc_vm_run>
 800cbaa:	6038      	str	r0, [r7, #0]
#endif

    /*
      did the task done?
    */
    if( ret_vm_run != 0 ) {
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d042      	beq.n	800cc38 <mrbc_run+0xc8>
      hal_disable_irq();
 800cbb2:	f7fe fef9 	bl	800b9a8 <hal_disable_irq>
      q_delete_task(tcb);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7ff fe22 	bl	800c800 <q_delete_task>
      tcb->state = TASKSTATE_DORMANT;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	72da      	strb	r2, [r3, #11]
      q_insert_task(tcb);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff fdd6 	bl	800c774 <q_insert_task>
      hal_enable_irq();
 800cbc8:	f7fe fee5 	bl	800b996 <hal_enable_irq>

      if( ! tcb->vm.flag_permanence ) mrbc_vm_end(&tcb->vm);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cbd2:	f003 0304 	and.w	r3, r3, #4
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d104      	bne.n	800cbe6 <mrbc_run+0x76>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	3328      	adds	r3, #40	; 0x28
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f002 f993 	bl	800ef0c <mrbc_vm_end>
      if( ret_vm_run != 1 ) ret = ret_vm_run;   // for debug info.
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d001      	beq.n	800cbf0 <mrbc_run+0x80>
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	60bb      	str	r3, [r7, #8]

      // find task that called join.
      for( mrbc_tcb *tcb1 = q_waiting_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800cbf0:	4b1b      	ldr	r3, [pc, #108]	; (800cc60 <mrbc_run+0xf0>)
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	60fb      	str	r3, [r7, #12]
 800cbf6:	e01b      	b.n	800cc30 <mrbc_run+0xc0>
        if( tcb1->reason == TASKREASON_JOIN && tcb1->tcb_join == tcb ) {
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	7b1b      	ldrb	r3, [r3, #12]
 800cbfc:	2b04      	cmp	r3, #4
 800cbfe:	d114      	bne.n	800cc2a <mrbc_run+0xba>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d10f      	bne.n	800cc2a <mrbc_run+0xba>
          hal_disable_irq();
 800cc0a:	f7fe fecd 	bl	800b9a8 <hal_disable_irq>
          q_delete_task(tcb1);
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f7ff fdf6 	bl	800c800 <q_delete_task>
          tcb1->state = TASKSTATE_READY;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2202      	movs	r2, #2
 800cc18:	72da      	strb	r2, [r3, #11]
          tcb1->reason = 0;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	731a      	strb	r2, [r3, #12]
          q_insert_task(tcb1);
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f7ff fda7 	bl	800c774 <q_insert_task>
          hal_enable_irq();
 800cc26:	f7fe feb6 	bl	800b996 <hal_enable_irq>
      for( mrbc_tcb *tcb1 = q_waiting_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1e0      	bne.n	800cbf8 <mrbc_run+0x88>
        }
      }
#if MRBC_SCHEDULER_EXIT
      if( !q_ready_ && !q_waiting_ && !q_suspended_ ) return ret;
#endif
      continue;
 800cc36:	e011      	b.n	800cc5c <mrbc_run+0xec>
    }

    /*
      Switch task.
    */
    if( tcb->state == TASKSTATE_RUNNING ) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	7adb      	ldrb	r3, [r3, #11]
 800cc3c:	2b03      	cmp	r3, #3
 800cc3e:	d10c      	bne.n	800cc5a <mrbc_run+0xea>
      tcb->state = TASKSTATE_READY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2202      	movs	r2, #2
 800cc44:	72da      	strb	r2, [r3, #11]

      hal_disable_irq();
 800cc46:	f7fe feaf 	bl	800b9a8 <hal_disable_irq>
      q_delete_task(tcb);       // insert task on queue last.
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7ff fdd8 	bl	800c800 <q_delete_task>
      q_insert_task(tcb);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff fd8f 	bl	800c774 <q_insert_task>
      hal_enable_irq();
 800cc56:	f7fe fe9e 	bl	800b996 <hal_enable_irq>
    }
    continue;
 800cc5a:	bf00      	nop
  while( 1 ) {
 800cc5c:	e78d      	b.n	800cb7a <mrbc_run+0xa>
 800cc5e:	bf00      	nop
 800cc60:	20008040 	.word	0x20008040

0800cc64 <mrbc_sleep_ms>:

  @param  tcb	target task.
  @param  ms	sleep milliseconds.
*/
void mrbc_sleep_ms(mrbc_tcb *tcb, uint32_t ms)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  hal_disable_irq();
 800cc6e:	f7fe fe9b 	bl	800b9a8 <hal_disable_irq>
  q_delete_task(tcb);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7ff fdc4 	bl	800c800 <q_delete_task>
  tcb->state       = TASKSTATE_WAITING;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2204      	movs	r2, #4
 800cc7c:	72da      	strb	r2, [r3, #11]
  tcb->reason      = TASKREASON_SLEEP;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2201      	movs	r2, #1
 800cc82:	731a      	strb	r2, [r3, #12]
  tcb->wakeup_tick = tick_ + (ms / MRBC_TICK_UNIT) + !!(ms % MRBC_TICK_UNIT);
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	4a18      	ldr	r2, [pc, #96]	; (800cce8 <mrbc_sleep_ms+0x84>)
 800cc88:	fba2 2303 	umull	r2, r3, r2, r3
 800cc8c:	08da      	lsrs	r2, r3, #3
 800cc8e:	4b17      	ldr	r3, [pc, #92]	; (800ccec <mrbc_sleep_ms+0x88>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	18d0      	adds	r0, r2, r3
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	4b14      	ldr	r3, [pc, #80]	; (800cce8 <mrbc_sleep_ms+0x84>)
 800cc98:	fba3 2301 	umull	r2, r3, r3, r1
 800cc9c:	08da      	lsrs	r2, r3, #3
 800cc9e:	4613      	mov	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	4413      	add	r3, r2
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	1aca      	subs	r2, r1, r3
 800cca8:	2a00      	cmp	r2, #0
 800ccaa:	bf14      	ite	ne
 800ccac:	2301      	movne	r3, #1
 800ccae:	2300      	moveq	r3, #0
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	18c2      	adds	r2, r0, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	621a      	str	r2, [r3, #32]

  if( (int32_t)(tcb->wakeup_tick - wakeup_tick_) < 0 ) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a1a      	ldr	r2, [r3, #32]
 800ccbc:	4b0c      	ldr	r3, [pc, #48]	; (800ccf0 <mrbc_sleep_ms+0x8c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	da03      	bge.n	800ccce <mrbc_sleep_ms+0x6a>
    wakeup_tick_ = tcb->wakeup_tick;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	4a09      	ldr	r2, [pc, #36]	; (800ccf0 <mrbc_sleep_ms+0x8c>)
 800cccc:	6013      	str	r3, [r2, #0]
  }

  q_insert_task(tcb);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7ff fd50 	bl	800c774 <q_insert_task>
  hal_enable_irq();
 800ccd4:	f7fe fe5f 	bl	800b996 <hal_enable_irq>

  tcb->vm.flag_preemption = 1;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	cccccccd 	.word	0xcccccccd
 800ccec:	20008050 	.word	0x20008050
 800ccf0:	200001d4 	.word	0x200001d4

0800ccf4 <mrbc_relinquish>:
/*! Relinquish control to other tasks.

  @param  tcb	target task.
*/
void mrbc_relinquish(mrbc_tcb *tcb)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  tcb->timeslice          = 0;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	729a      	strb	r2, [r3, #10]
  tcb->vm.flag_preemption = 1;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 800cd0a:	bf00      	nop
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <mrbc_change_priority>:

  @param  tcb		target task.
  @param  priority	priority value. between 1 and 255.
*/
void mrbc_change_priority(mrbc_tcb *tcb, int priority)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b082      	sub	sp, #8
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
  tcb->priority            = priority;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	721a      	strb	r2, [r3, #8]
  tcb->priority_preemption = priority;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	725a      	strb	r2, [r3, #9]

  hal_disable_irq();
 800cd30:	f7fe fe3a 	bl	800b9a8 <hal_disable_irq>
  q_delete_task(tcb);       // reorder task queue according to priority.
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f7ff fd63 	bl	800c800 <q_delete_task>
  q_insert_task(tcb);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7ff fd1a 	bl	800c774 <q_insert_task>

  if( tcb->state & TASKSTATE_READY ) preempt_running_task();
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	7adb      	ldrb	r3, [r3, #11]
 800cd44:	f003 0302 	and.w	r3, r3, #2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <mrbc_change_priority+0x3a>
 800cd4c:	f7ff fd9e 	bl	800c88c <preempt_running_task>

  hal_enable_irq();
 800cd50:	f7fe fe21 	bl	800b996 <hal_enable_irq>
}
 800cd54:	bf00      	nop
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <mrbc_suspend_task>:
/*! Suspend the task.

  @param  tcb		target task.
*/
void mrbc_suspend_task(mrbc_tcb *tcb)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  if( tcb->state == TASKSTATE_SUSPENDED ) return;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	7adb      	ldrb	r3, [r3, #11]
 800cd68:	2b08      	cmp	r3, #8
 800cd6a:	d011      	beq.n	800cd90 <mrbc_suspend_task+0x34>

  hal_disable_irq();
 800cd6c:	f7fe fe1c 	bl	800b9a8 <hal_disable_irq>
  q_delete_task(tcb);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff fd45 	bl	800c800 <q_delete_task>
  tcb->state = TASKSTATE_SUSPENDED;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2208      	movs	r2, #8
 800cd7a:	72da      	strb	r2, [r3, #11]
  q_insert_task(tcb);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff fcf9 	bl	800c774 <q_insert_task>
  hal_enable_irq();
 800cd82:	f7fe fe08 	bl	800b996 <hal_enable_irq>

  tcb->vm.flag_preemption = 1;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800cd8e:	e000      	b.n	800cd92 <mrbc_suspend_task+0x36>
  if( tcb->state == TASKSTATE_SUSPENDED ) return;
 800cd90:	bf00      	nop
}
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <mrbc_resume_task>:
/*! resume the task

  @param  tcb		target task.
*/
void mrbc_resume_task(mrbc_tcb *tcb)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  if( tcb->state != TASKSTATE_SUSPENDED ) return;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	7adb      	ldrb	r3, [r3, #11]
 800cda4:	2b08      	cmp	r3, #8
 800cda6:	d11f      	bne.n	800cde8 <mrbc_resume_task+0x50>

  int flag_to_ready_state = (tcb->reason == 0);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	7b1b      	ldrb	r3, [r3, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	bf0c      	ite	eq
 800cdb0:	2301      	moveq	r3, #1
 800cdb2:	2300      	movne	r3, #0
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	60fb      	str	r3, [r7, #12]

  hal_disable_irq();
 800cdb8:	f7fe fdf6 	bl	800b9a8 <hal_disable_irq>

  if( flag_to_ready_state ) preempt_running_task();
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <mrbc_resume_task+0x2e>
 800cdc2:	f7ff fd63 	bl	800c88c <preempt_running_task>

  q_delete_task(tcb);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7ff fd1a 	bl	800c800 <q_delete_task>
  tcb->state = flag_to_ready_state ? TASKSTATE_READY : TASKSTATE_WAITING;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <mrbc_resume_task+0x3e>
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	e000      	b.n	800cdd8 <mrbc_resume_task+0x40>
 800cdd6:	2204      	movs	r2, #4
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	72da      	strb	r2, [r3, #11]
  q_insert_task(tcb);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff fcc9 	bl	800c774 <q_insert_task>

  hal_enable_irq();
 800cde2:	f7fe fdd8 	bl	800b996 <hal_enable_irq>
 800cde6:	e000      	b.n	800cdea <mrbc_resume_task+0x52>
  if( tcb->state != TASKSTATE_SUSPENDED ) return;
 800cde8:	bf00      	nop
}
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <mrbc_terminate_task>:
  @note
    This API simply ends the task.
    note that this does not affect the lock status of mutex.
*/
void mrbc_terminate_task(mrbc_tcb *tcb)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  if( tcb->state == TASKSTATE_DORMANT ) return;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	7adb      	ldrb	r3, [r3, #11]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d011      	beq.n	800ce24 <mrbc_terminate_task+0x34>

  hal_disable_irq();
 800ce00:	f7fe fdd2 	bl	800b9a8 <hal_disable_irq>
  q_delete_task(tcb);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7ff fcfb 	bl	800c800 <q_delete_task>
  tcb->state = TASKSTATE_DORMANT;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	72da      	strb	r2, [r3, #11]
  q_insert_task(tcb);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7ff fcaf 	bl	800c774 <q_insert_task>
  hal_enable_irq();
 800ce16:	f7fe fdbe 	bl	800b996 <hal_enable_irq>

  tcb->vm.flag_preemption = 1;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800ce22:	e000      	b.n	800ce26 <mrbc_terminate_task+0x36>
  if( tcb->state == TASKSTATE_DORMANT ) return;
 800ce24:	bf00      	nop
}
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <mrbc_join_task>:

  @param  tcb		target task.
  @param  tcb_join	join task.
*/
void mrbc_join_task(mrbc_tcb *tcb, const mrbc_tcb *tcb_join)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  if( tcb->state == TASKSTATE_DORMANT ) return;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	7adb      	ldrb	r3, [r3, #11]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d01b      	beq.n	800ce76 <mrbc_join_task+0x4a>
  if( tcb_join->state == TASKSTATE_DORMANT ) return;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	7adb      	ldrb	r3, [r3, #11]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d019      	beq.n	800ce7a <mrbc_join_task+0x4e>

  hal_disable_irq();
 800ce46:	f7fe fdaf 	bl	800b9a8 <hal_disable_irq>
  q_delete_task(tcb);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7ff fcd8 	bl	800c800 <q_delete_task>

  tcb->state    = TASKSTATE_WAITING;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2204      	movs	r2, #4
 800ce54:	72da      	strb	r2, [r3, #11]
  tcb->reason   = TASKREASON_JOIN;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2204      	movs	r2, #4
 800ce5a:	731a      	strb	r2, [r3, #12]
  tcb->tcb_join = tcb_join;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	625a      	str	r2, [r3, #36]	; 0x24

  q_insert_task(tcb);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff fc86 	bl	800c774 <q_insert_task>
  hal_enable_irq();
 800ce68:	f7fe fd95 	bl	800b996 <hal_enable_irq>

  tcb->vm.flag_preemption = 1;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800ce74:	e002      	b.n	800ce7c <mrbc_join_task+0x50>
  if( tcb->state == TASKSTATE_DORMANT ) return;
 800ce76:	bf00      	nop
 800ce78:	e000      	b.n	800ce7c <mrbc_join_task+0x50>
  if( tcb_join->state == TASKSTATE_DORMANT ) return;
 800ce7a:	bf00      	nop
}
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <mrbc_mutex_init>:
/*! mutex initialize

  @param  mutex		pointer to mrbc_mutex or NULL.
*/
mrbc_mutex * mrbc_mutex_init( mrbc_mutex *mutex )
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b082      	sub	sp, #8
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  if( mutex == NULL ) {
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d108      	bne.n	800cea2 <mrbc_mutex_init+0x20>
    mutex = mrbc_raw_alloc( sizeof(mrbc_mutex) );
 800ce90:	2008      	movs	r0, #8
 800ce92:	f7f4 fe19 	bl	8001ac8 <mrbc_raw_alloc>
 800ce96:	6078      	str	r0, [r7, #4]
    if( mutex == NULL ) return NULL;	// ENOMEM
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d101      	bne.n	800cea2 <mrbc_mutex_init+0x20>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e005      	b.n	800ceae <mrbc_mutex_init+0x2c>
  }

  static const mrbc_mutex init_val = MRBC_MUTEX_INITIALIZER;
  *mutex = init_val;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	461a      	mov	r2, r3
 800cea6:	2300      	movs	r3, #0
 800cea8:	6013      	str	r3, [r2, #0]
 800ceaa:	6053      	str	r3, [r2, #4]

  return mutex;
 800ceac:	687b      	ldr	r3, [r7, #4]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <mrbc_mutex_lock>:

  @param  mutex		pointer to mutex.
  @param  tcb		pointer to TCB.
*/
int mrbc_mutex_lock( mrbc_mutex *mutex, mrbc_tcb *tcb )
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b084      	sub	sp, #16
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	6039      	str	r1, [r7, #0]
  MRBC_MUTEX_TRACE("mutex lock / MUTEX: %p TCB: %p",  mutex, tcb );

  int ret = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	60fb      	str	r3, [r7, #12]
  hal_disable_irq();
 800cec4:	f7fe fd70 	bl	800b9a8 <hal_disable_irq>

  // Try lock mutex;
  if( mutex->lock == 0 ) {      // a future does use TAS?
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d106      	bne.n	800cede <mrbc_mutex_lock+0x28>
    mutex->lock = 1;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2201      	movs	r2, #1
 800ced4:	601a      	str	r2, [r3, #0]
    mutex->tcb = tcb;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	605a      	str	r2, [r3, #4]
    MRBC_MUTEX_TRACE("  lock OK\n" );
    goto DONE;
 800cedc:	e01a      	b.n	800cf14 <mrbc_mutex_lock+0x5e>
  }
  MRBC_MUTEX_TRACE("  lock FAIL\n" );

  // Can't lock mutex
  // check recursive lock.
  if( mutex->tcb == tcb ) {
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d102      	bne.n	800ceee <mrbc_mutex_lock+0x38>
    ret = 1;
 800cee8:	2301      	movs	r3, #1
 800ceea:	60fb      	str	r3, [r7, #12]
    goto DONE;
 800ceec:	e012      	b.n	800cf14 <mrbc_mutex_lock+0x5e>
  }

  // To WAITING state.
  q_delete_task(tcb);
 800ceee:	6838      	ldr	r0, [r7, #0]
 800cef0:	f7ff fc86 	bl	800c800 <q_delete_task>
  tcb->state  = TASKSTATE_WAITING;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	2204      	movs	r2, #4
 800cef8:	72da      	strb	r2, [r3, #11]
  tcb->reason = TASKREASON_MUTEX;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2202      	movs	r2, #2
 800cefe:	731a      	strb	r2, [r3, #12]
  tcb->mutex = mutex;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	621a      	str	r2, [r3, #32]
  q_insert_task(tcb);
 800cf06:	6838      	ldr	r0, [r7, #0]
 800cf08:	f7ff fc34 	bl	800c774 <q_insert_task>
  tcb->vm.flag_preemption = 1;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

 DONE:
  hal_enable_irq();
 800cf14:	f7fe fd3f 	bl	800b996 <hal_enable_irq>

  return ret;
 800cf18:	68fb      	ldr	r3, [r7, #12]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
	...

0800cf24 <mrbc_mutex_unlock>:

  @param  mutex		pointer to mutex.
  @param  tcb		pointer to TCB.
*/
int mrbc_mutex_unlock( mrbc_mutex *mutex, mrbc_tcb *tcb )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  MRBC_MUTEX_TRACE("mutex unlock / MUTEX: %p TCB: %p\n",  mutex, tcb );

  // check some parameters.
  if( !mutex->lock ) return 1;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d101      	bne.n	800cf3a <mrbc_mutex_unlock+0x16>
 800cf36:	2301      	movs	r3, #1
 800cf38:	e05a      	b.n	800cff0 <mrbc_mutex_unlock+0xcc>
  if( mutex->tcb != tcb ) return 2;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d001      	beq.n	800cf48 <mrbc_mutex_unlock+0x24>
 800cf44:	2302      	movs	r3, #2
 800cf46:	e053      	b.n	800cff0 <mrbc_mutex_unlock+0xcc>

  hal_disable_irq();
 800cf48:	f7fe fd2e 	bl	800b9a8 <hal_disable_irq>

  // wakeup ONE waiting task if exist.
  mrbc_tcb *tcb1;
  for( tcb1 = q_waiting_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800cf4c:	4b2a      	ldr	r3, [pc, #168]	; (800cff8 <mrbc_mutex_unlock+0xd4>)
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	60fb      	str	r3, [r7, #12]
 800cf52:	e00b      	b.n	800cf6c <mrbc_mutex_unlock+0x48>
    if( tcb1->reason == TASKREASON_MUTEX && tcb1->mutex == mutex ) break;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	7b1b      	ldrb	r3, [r3, #12]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d104      	bne.n	800cf66 <mrbc_mutex_unlock+0x42>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d006      	beq.n	800cf74 <mrbc_mutex_unlock+0x50>
  for( tcb1 = q_waiting_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	60fb      	str	r3, [r7, #12]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1f0      	bne.n	800cf54 <mrbc_mutex_unlock+0x30>
 800cf72:	e000      	b.n	800cf76 <mrbc_mutex_unlock+0x52>
    if( tcb1->reason == TASKREASON_MUTEX && tcb1->mutex == mutex ) break;
 800cf74:	bf00      	nop
  }
  if( tcb1 ) {
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d011      	beq.n	800cfa0 <mrbc_mutex_unlock+0x7c>
    MRBC_MUTEX_TRACE("SW1: TCB: %p\n", tcb1 );
    mutex->tcb = tcb1;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	605a      	str	r2, [r3, #4]

    q_delete_task(tcb1);
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f7ff fc3c 	bl	800c800 <q_delete_task>
    tcb1->state = TASKSTATE_READY;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	72da      	strb	r2, [r3, #11]
    tcb1->reason = 0;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2200      	movs	r2, #0
 800cf92:	731a      	strb	r2, [r3, #12]
    q_insert_task(tcb1);
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f7ff fbed 	bl	800c774 <q_insert_task>

    preempt_running_task();
 800cf9a:	f7ff fc77 	bl	800c88c <preempt_running_task>
    goto DONE;
 800cf9e:	e024      	b.n	800cfea <mrbc_mutex_unlock+0xc6>
  }

  // find ONE mutex locked task in suspended queue.
  for( tcb1 = q_suspended_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800cfa0:	4b15      	ldr	r3, [pc, #84]	; (800cff8 <mrbc_mutex_unlock+0xd4>)
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	e00b      	b.n	800cfc0 <mrbc_mutex_unlock+0x9c>
    if( tcb1->reason == TASKREASON_MUTEX && tcb1->mutex == mutex ) break;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	7b1b      	ldrb	r3, [r3, #12]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d104      	bne.n	800cfba <mrbc_mutex_unlock+0x96>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d006      	beq.n	800cfc8 <mrbc_mutex_unlock+0xa4>
  for( tcb1 = q_suspended_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	60fb      	str	r3, [r7, #12]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1f0      	bne.n	800cfa8 <mrbc_mutex_unlock+0x84>
 800cfc6:	e000      	b.n	800cfca <mrbc_mutex_unlock+0xa6>
    if( tcb1->reason == TASKREASON_MUTEX && tcb1->mutex == mutex ) break;
 800cfc8:	bf00      	nop
  }
  if( tcb1 ) {
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d006      	beq.n	800cfde <mrbc_mutex_unlock+0xba>
    MRBC_MUTEX_TRACE("SW2: TCB: %p\n", tcb1 );
    mutex->tcb = tcb1;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	605a      	str	r2, [r3, #4]
    tcb1->reason = 0;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	731a      	strb	r2, [r3, #12]
    goto DONE;
 800cfdc:	e005      	b.n	800cfea <mrbc_mutex_unlock+0xc6>
  }

  // other case, unlock mutex
  MRBC_MUTEX_TRACE("mutex unlock all.\n" );
  mutex->lock = 0;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	601a      	str	r2, [r3, #0]
  mutex->tcb = 0;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	605a      	str	r2, [r3, #4]

 DONE:
  hal_enable_irq();
 800cfea:	f7fe fcd4 	bl	800b996 <hal_enable_irq>

  return 0;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	20008040 	.word	0x20008040

0800cffc <mrbc_mutex_trylock>:

  @param  mutex		pointer to mutex.
  @param  tcb		pointer to TCB.
*/
int mrbc_mutex_trylock( mrbc_mutex *mutex, mrbc_tcb *tcb )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  MRBC_MUTEX_TRACE("mutex try lock / MUTEX: %p TCB: %p",  mutex, tcb );

  int ret;
  hal_disable_irq();
 800d006:	f7fe fccf 	bl	800b9a8 <hal_disable_irq>

  if( mutex->lock == 0 ) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d108      	bne.n	800d024 <mrbc_mutex_trylock+0x28>
    mutex->lock = 1;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2201      	movs	r2, #1
 800d016:	601a      	str	r2, [r3, #0]
    mutex->tcb = tcb;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	605a      	str	r2, [r3, #4]
    ret = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	60fb      	str	r3, [r7, #12]
 800d022:	e001      	b.n	800d028 <mrbc_mutex_trylock+0x2c>
    MRBC_MUTEX_TRACE("  trylock OK\n" );
  }
  else {
    MRBC_MUTEX_TRACE("  trylock FAIL\n" );
    ret = 1;
 800d024:	2301      	movs	r3, #1
 800d026:	60fb      	str	r3, [r7, #12]
  }

  hal_enable_irq();
 800d028:	f7fe fcb5 	bl	800b996 <hal_enable_irq>
  return ret;
 800d02c:	68fb      	ldr	r3, [r7, #12]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
	...

0800d038 <c_sleep>:
//================================================================
/*! (method) sleep for a specified number of seconds (CRuby compatible)

*/
static void c_sleep(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08c      	sub	sp, #48	; 0x30
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb = VM2TCB(vm);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3b28      	subs	r3, #40	; 0x28
 800d048:	62fb      	str	r3, [r7, #44]	; 0x2c

  if( argc == 0 ) {
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d103      	bne.n	800d058 <c_sleep+0x20>
    mrbc_suspend_task(tcb);
 800d050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d052:	f7ff fe83 	bl	800cd5c <mrbc_suspend_task>
    return;
 800d056:	e049      	b.n	800d0ec <c_sleep+0xb4>
  }

  switch( mrbc_type(v[1]) ) {
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	3310      	adds	r3, #16
 800d05c:	f993 3000 	ldrsb.w	r3, [r3]
 800d060:	2b04      	cmp	r3, #4
 800d062:	d002      	beq.n	800d06a <c_sleep+0x32>
 800d064:	2b05      	cmp	r3, #5
 800d066:	d019      	beq.n	800d09c <c_sleep+0x64>
    break;
  }
#endif

  default:
    break;
 800d068:	e040      	b.n	800d0ec <c_sleep+0xb4>
    sec = mrbc_integer(v[1]);
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	3310      	adds	r3, #16
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	61bb      	str	r3, [r7, #24]
    SET_INT_RETURN(sec);
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	617b      	str	r3, [r7, #20]
 800d076:	68b8      	ldr	r0, [r7, #8]
 800d078:	f7ff fafe 	bl	800c678 <mrbc_decref>
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	2204      	movs	r2, #4
 800d080:	701a      	strb	r2, [r3, #0]
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	697a      	ldr	r2, [r7, #20]
 800d086:	609a      	str	r2, [r3, #8]
    mrbc_sleep_ms(tcb, sec * 1000);
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d08e:	fb02 f303 	mul.w	r3, r2, r3
 800d092:	4619      	mov	r1, r3
 800d094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d096:	f7ff fde5 	bl	800cc64 <mrbc_sleep_ms>
    break;
 800d09a:	e027      	b.n	800d0ec <c_sleep+0xb4>
    sec = mrbc_float(v[1]);
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	3310      	adds	r3, #16
 800d0a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d0a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    SET_INT_RETURN(sec);
 800d0a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d0ac:	f7f3 fd56 	bl	8000b5c <__aeabi_d2iz>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	61fb      	str	r3, [r7, #28]
 800d0b4:	68b8      	ldr	r0, [r7, #8]
 800d0b6:	f7ff fadf 	bl	800c678 <mrbc_decref>
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2204      	movs	r2, #4
 800d0be:	701a      	strb	r2, [r3, #0]
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	69fa      	ldr	r2, [r7, #28]
 800d0c4:	609a      	str	r2, [r3, #8]
    mrbc_sleep_ms(tcb, (mrbc_int_t)(sec * 1000));
 800d0c6:	f04f 0200 	mov.w	r2, #0
 800d0ca:	4b0a      	ldr	r3, [pc, #40]	; (800d0f4 <c_sleep+0xbc>)
 800d0cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d0d0:	f7f3 faaa 	bl	8000628 <__aeabi_dmul>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	4610      	mov	r0, r2
 800d0da:	4619      	mov	r1, r3
 800d0dc:	f7f3 fd3e 	bl	8000b5c <__aeabi_d2iz>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0e6:	f7ff fdbd 	bl	800cc64 <mrbc_sleep_ms>
    break;
 800d0ea:	bf00      	nop
  }
}
 800d0ec:	3730      	adds	r7, #48	; 0x30
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	408f4000 	.word	0x408f4000

0800d0f8 <c_sleep_ms>:
//================================================================
/*! (method) sleep for a specified number of milliseconds.

*/
static void c_sleep_ms(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b088      	sub	sp, #32
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb = VM2TCB(vm);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	3b28      	subs	r3, #40	; 0x28
 800d108:	61fb      	str	r3, [r7, #28]

  mrbc_int_t sec = mrbc_integer(v[1]);
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	3310      	adds	r3, #16
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	61bb      	str	r3, [r7, #24]
  SET_INT_RETURN(sec);
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	617b      	str	r3, [r7, #20]
 800d116:	68b8      	ldr	r0, [r7, #8]
 800d118:	f7ff faae 	bl	800c678 <mrbc_decref>
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	2204      	movs	r2, #4
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	609a      	str	r2, [r3, #8]
  mrbc_sleep_ms(tcb, sec);
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	4619      	mov	r1, r3
 800d12c:	69f8      	ldr	r0, [r7, #28]
 800d12e:	f7ff fd99 	bl	800cc64 <mrbc_sleep_ms>
}
 800d132:	bf00      	nop
 800d134:	3720      	adds	r7, #32
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <c_task_get>:

  Task.get()           -> Task
  Task.get("TaskName") -> Task|nil
*/
static void c_task_get(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d13a:	b590      	push	{r4, r7, lr}
 800d13c:	b08f      	sub	sp, #60	; 0x3c
 800d13e:	af00      	add	r7, sp, #0
 800d140:	60f8      	str	r0, [r7, #12]
 800d142:	60b9      	str	r1, [r7, #8]
 800d144:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb = NULL;
 800d146:	2300      	movs	r3, #0
 800d148:	637b      	str	r3, [r7, #52]	; 0x34

  if( v[0].tt != MRBC_TT_CLASS ) goto RETURN_NIL;
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	f993 3000 	ldrsb.w	r3, [r3]
 800d150:	2b07      	cmp	r3, #7
 800d152:	d137      	bne.n	800d1c4 <c_task_get+0x8a>

  // in case of Task.get()
  if( argc == 0 ) {
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d103      	bne.n	800d162 <c_task_get+0x28>
    tcb = VM2TCB(vm);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3b28      	subs	r3, #40	; 0x28
 800d15e:	637b      	str	r3, [r7, #52]	; 0x34
 800d160:	e00f      	b.n	800d182 <c_task_get+0x48>
  }

  // in case of Task.get("TasName")
  else if( v[1].tt == MRBC_TT_STRING ) {
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	3310      	adds	r3, #16
 800d166:	f993 3000 	ldrsb.w	r3, [r3]
 800d16a:	2b0b      	cmp	r3, #11
 800d16c:	d109      	bne.n	800d182 <c_task_get+0x48>
    tcb = mrbc_find_task( mrbc_string_cstr( &v[1] ) );
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	3310      	adds	r3, #16
 800d172:	4618      	mov	r0, r3
 800d174:	f7ff fade 	bl	800c734 <mrbc_string_cstr>
 800d178:	4603      	mov	r3, r0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7ff fcc6 	bl	800cb0c <mrbc_find_task>
 800d180:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if( tcb ) {
 800d182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d184:	2b00      	cmp	r3, #0
 800d186:	d01f      	beq.n	800d1c8 <c_task_get+0x8e>
    mrbc_value ret = mrbc_instance_new(vm, v->cls, sizeof(mrbc_tcb *));
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	689a      	ldr	r2, [r3, #8]
 800d18c:	f107 0020 	add.w	r0, r7, #32
 800d190:	2304      	movs	r3, #4
 800d192:	68f9      	ldr	r1, [r7, #12]
 800d194:	f7fc f97a 	bl	800948c <mrbc_instance_new>
    *(mrbc_tcb **)ret.instance->data = tcb;
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	3310      	adds	r3, #16
 800d19c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d19e:	601a      	str	r2, [r3, #0]
    SET_RETURN(ret);
 800d1a0:	f107 0410 	add.w	r4, r7, #16
 800d1a4:	f107 0320 	add.w	r3, r7, #32
 800d1a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d1ae:	68b8      	ldr	r0, [r7, #8]
 800d1b0:	f7ff fa62 	bl	800c678 <mrbc_decref>
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	461c      	mov	r4, r3
 800d1b8:	f107 0310 	add.w	r3, r7, #16
 800d1bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d1c2:	e008      	b.n	800d1d6 <c_task_get+0x9c>
  if( v[0].tt != MRBC_TT_CLASS ) goto RETURN_NIL;
 800d1c4:	bf00      	nop
 800d1c6:	e000      	b.n	800d1ca <c_task_get+0x90>
    return;             // normal return.
  }

 RETURN_NIL:
 800d1c8:	bf00      	nop
  SET_NIL_RETURN();
 800d1ca:	68b8      	ldr	r0, [r7, #8]
 800d1cc:	f7ff fa54 	bl	800c678 <mrbc_decref>
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	701a      	strb	r2, [r3, #0]
}
 800d1d6:	373c      	adds	r7, #60	; 0x3c
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd90      	pop	{r4, r7, pc}

0800d1dc <c_task_list>:
/*! (method) task list

  Task.list() -> Array[Task]
*/
static void c_task_list(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d1dc:	b590      	push	{r4, r7, lr}
 800d1de:	b093      	sub	sp, #76	; 0x4c
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new(vm, 1);
 800d1e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	68f9      	ldr	r1, [r7, #12]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7f5 f8b0 	bl	8002356 <mrbc_array_new>

  hal_disable_irq();
 800d1f6:	f7fe fbd7 	bl	800b9a8 <hal_disable_irq>

  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	647b      	str	r3, [r7, #68]	; 0x44
 800d1fe:	e023      	b.n	800d248 <c_task_list+0x6c>
    for( mrbc_tcb *tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800d200:	4a1e      	ldr	r2, [pc, #120]	; (800d27c <c_task_list+0xa0>)
 800d202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d208:	643b      	str	r3, [r7, #64]	; 0x40
 800d20a:	e017      	b.n	800d23c <c_task_list+0x60>
      mrbc_value task = mrbc_instance_new(vm, v->cls, sizeof(mrbc_tcb *));
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	689a      	ldr	r2, [r3, #8]
 800d210:	f107 0020 	add.w	r0, r7, #32
 800d214:	2304      	movs	r3, #4
 800d216:	68f9      	ldr	r1, [r7, #12]
 800d218:	f7fc f938 	bl	800948c <mrbc_instance_new>
      *(mrbc_tcb **)task.instance->data = VM2TCB(vm);
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	3310      	adds	r3, #16
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	3a28      	subs	r2, #40	; 0x28
 800d224:	601a      	str	r2, [r3, #0]
      mrbc_array_push( &ret, &task );
 800d226:	f107 0220 	add.w	r2, r7, #32
 800d22a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d22e:	4611      	mov	r1, r2
 800d230:	4618      	mov	r0, r3
 800d232:	f7f5 f9c0 	bl	80025b6 <mrbc_array_push>
    for( mrbc_tcb *tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800d236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	643b      	str	r3, [r7, #64]	; 0x40
 800d23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1e4      	bne.n	800d20c <c_task_list+0x30>
  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800d242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d244:	3301      	adds	r3, #1
 800d246:	647b      	str	r3, [r7, #68]	; 0x44
 800d248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d24a:	2b03      	cmp	r3, #3
 800d24c:	ddd8      	ble.n	800d200 <c_task_list+0x24>
    }
  }

  hal_enable_irq();
 800d24e:	f7fe fba2 	bl	800b996 <hal_enable_irq>

  SET_RETURN(ret);
 800d252:	f107 0410 	add.w	r4, r7, #16
 800d256:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d25a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d25c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d260:	68b8      	ldr	r0, [r7, #8]
 800d262:	f7ff fa09 	bl	800c678 <mrbc_decref>
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	461c      	mov	r4, r3
 800d26a:	f107 0310 	add.w	r3, r7, #16
 800d26e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d274:	bf00      	nop
 800d276:	374c      	adds	r7, #76	; 0x4c
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd90      	pop	{r4, r7, pc}
 800d27c:	20008040 	.word	0x20008040

0800d280 <c_task_name_list>:
/*! (method) task name list

  Task.name_list() -> Array[String]
*/
static void c_task_name_list(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d280:	b590      	push	{r4, r7, lr}
 800d282:	b093      	sub	sp, #76	; 0x4c
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new(vm, 1);
 800d28c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d290:	2201      	movs	r2, #1
 800d292:	68f9      	ldr	r1, [r7, #12]
 800d294:	4618      	mov	r0, r3
 800d296:	f7f5 f85e 	bl	8002356 <mrbc_array_new>

  hal_disable_irq();
 800d29a:	f7fe fb85 	bl	800b9a8 <hal_disable_irq>

  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800d29e:	2300      	movs	r3, #0
 800d2a0:	647b      	str	r3, [r7, #68]	; 0x44
 800d2a2:	e01f      	b.n	800d2e4 <c_task_name_list+0x64>
    for( mrbc_tcb *tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800d2a4:	4a1c      	ldr	r2, [pc, #112]	; (800d318 <c_task_name_list+0x98>)
 800d2a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d2ae:	e013      	b.n	800d2d8 <c_task_name_list+0x58>
      mrbc_value s = mrbc_string_new_cstr(vm, tcb->name);
 800d2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2b2:	f103 020d 	add.w	r2, r3, #13
 800d2b6:	f107 0320 	add.w	r3, r7, #32
 800d2ba:	68f9      	ldr	r1, [r7, #12]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff fa21 	bl	800c704 <mrbc_string_new_cstr>
      mrbc_array_push( &ret, &s );
 800d2c2:	f107 0220 	add.w	r2, r7, #32
 800d2c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2ca:	4611      	mov	r1, r2
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7f5 f972 	bl	80025b6 <mrbc_array_push>
    for( mrbc_tcb *tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800d2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	643b      	str	r3, [r7, #64]	; 0x40
 800d2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1e8      	bne.n	800d2b0 <c_task_name_list+0x30>
  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800d2de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	dddc      	ble.n	800d2a4 <c_task_name_list+0x24>
    }
  }

  hal_enable_irq();
 800d2ea:	f7fe fb54 	bl	800b996 <hal_enable_irq>

  SET_RETURN(ret);
 800d2ee:	f107 0410 	add.w	r4, r7, #16
 800d2f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d2fc:	68b8      	ldr	r0, [r7, #8]
 800d2fe:	f7ff f9bb 	bl	800c678 <mrbc_decref>
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	461c      	mov	r4, r3
 800d306:	f107 0310 	add.w	r3, r7, #16
 800d30a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d30c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d310:	bf00      	nop
 800d312:	374c      	adds	r7, #76	; 0x4c
 800d314:	46bd      	mov	sp, r7
 800d316:	bd90      	pop	{r4, r7, pc}
 800d318:	20008040 	.word	0x20008040

0800d31c <c_task_set_name>:
/*! (method) name setter.

  Task.name = "MyName"
*/
static void c_task_set_name(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  if( v[1].tt != MRBC_TT_STRING ) {
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	3310      	adds	r3, #16
 800d32c:	f993 3000 	ldrsb.w	r3, [r3]
 800d330:	2b0b      	cmp	r3, #11
 800d332:	d005      	beq.n	800d340 <c_task_set_name+0x24>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 800d334:	2200      	movs	r2, #0
 800d336:	4910      	ldr	r1, [pc, #64]	; (800d378 <c_task_set_name+0x5c>)
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f7fe f875 	bl	800b428 <mrbc_raise>
    return;
 800d33e:	e017      	b.n	800d370 <c_task_set_name+0x54>
  }

  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	f993 3000 	ldrsb.w	r3, [r3]
 800d346:	2b07      	cmp	r3, #7
 800d348:	d103      	bne.n	800d352 <c_task_set_name+0x36>
    tcb = VM2TCB(vm);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	3b28      	subs	r3, #40	; 0x28
 800d34e:	617b      	str	r3, [r7, #20]
 800d350:	e004      	b.n	800d35c <c_task_set_name+0x40>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	3310      	adds	r3, #16
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	617b      	str	r3, [r7, #20]
  }
  mrbc_set_task_name( tcb, mrbc_string_cstr(&v[1]) );
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	3310      	adds	r3, #16
 800d360:	4618      	mov	r0, r3
 800d362:	f7ff f9e7 	bl	800c734 <mrbc_string_cstr>
 800d366:	4603      	mov	r3, r0
 800d368:	4619      	mov	r1, r3
 800d36a:	6978      	ldr	r0, [r7, #20]
 800d36c:	f7ff fba6 	bl	800cabc <mrbc_set_task_name>
}
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	20000154 	.word	0x20000154

0800d37c <c_task_name>:

  Task.name() -> String    # get current task name
  task.name() -> String
*/
static void c_task_name(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d37c:	b590      	push	{r4, r7, lr}
 800d37e:	b093      	sub	sp, #76	; 0x4c
 800d380:	af00      	add	r7, sp, #0
 800d382:	61f8      	str	r0, [r7, #28]
 800d384:	61b9      	str	r1, [r7, #24]
 800d386:	617a      	str	r2, [r7, #20]
  mrbc_value ret;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	f993 3000 	ldrsb.w	r3, [r3]
 800d38e:	2b07      	cmp	r3, #7
 800d390:	d10a      	bne.n	800d3a8 <c_task_name+0x2c>
    ret = mrbc_string_new_cstr( vm, VM2TCB(vm)->name );
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	3b28      	subs	r3, #40	; 0x28
 800d396:	f103 020d 	add.w	r2, r3, #13
 800d39a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d39e:	69f9      	ldr	r1, [r7, #28]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7ff f9af 	bl	800c704 <mrbc_string_new_cstr>
 800d3a6:	e012      	b.n	800d3ce <c_task_name+0x52>
  } else {
    mrbc_tcb *tcb = *(mrbc_tcb **)v[0].instance->data;
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	3310      	adds	r3, #16
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	647b      	str	r3, [r7, #68]	; 0x44
    ret = mrbc_string_new_cstr(vm, tcb->name );
 800d3b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b4:	f103 020d 	add.w	r2, r3, #13
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	69f9      	ldr	r1, [r7, #28]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff f9a1 	bl	800c704 <mrbc_string_new_cstr>
 800d3c2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d3c6:	463b      	mov	r3, r7
 800d3c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d3ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  SET_RETURN(ret);
 800d3ce:	f107 0420 	add.w	r4, r7, #32
 800d3d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d3d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d3d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3dc:	69b8      	ldr	r0, [r7, #24]
 800d3de:	f7ff f94b 	bl	800c678 <mrbc_decref>
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	461c      	mov	r4, r3
 800d3e6:	f107 0320 	add.w	r3, r7, #32
 800d3ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d3ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d3f0:	bf00      	nop
 800d3f2:	374c      	adds	r7, #76	; 0x4c
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd90      	pop	{r4, r7, pc}

0800d3f8 <c_task_suspend>:

  Task.suspend()        # suspend current task.
  task.suspend()        # suspend other task.
*/
static void c_task_suspend(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	f993 3000 	ldrsb.w	r3, [r3]
 800d40a:	2b07      	cmp	r3, #7
 800d40c:	d103      	bne.n	800d416 <c_task_suspend+0x1e>
    tcb = VM2TCB(vm);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	3b28      	subs	r3, #40	; 0x28
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	e004      	b.n	800d420 <c_task_suspend+0x28>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	3310      	adds	r3, #16
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	617b      	str	r3, [r7, #20]
  }

  mrbc_suspend_task(tcb);
 800d420:	6978      	ldr	r0, [r7, #20]
 800d422:	f7ff fc9b 	bl	800cd5c <mrbc_suspend_task>
}
 800d426:	bf00      	nop
 800d428:	3718      	adds	r7, #24
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <c_task_resume>:
/*! (method) resume task

  task.resume()
*/
static void c_task_resume(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d42e:	b580      	push	{r7, lr}
 800d430:	b086      	sub	sp, #24
 800d432:	af00      	add	r7, sp, #0
 800d434:	60f8      	str	r0, [r7, #12]
 800d436:	60b9      	str	r1, [r7, #8]
 800d438:	607a      	str	r2, [r7, #4]
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	f993 3000 	ldrsb.w	r3, [r3]
 800d440:	2b07      	cmp	r3, #7
 800d442:	d008      	beq.n	800d456 <c_task_resume+0x28>

  mrbc_tcb *tcb = *(mrbc_tcb **)v[0].instance->data;
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	3310      	adds	r3, #16
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	617b      	str	r3, [r7, #20]

  mrbc_resume_task(tcb);
 800d44e:	6978      	ldr	r0, [r7, #20]
 800d450:	f7ff fca2 	bl	800cd98 <mrbc_resume_task>
 800d454:	e000      	b.n	800d458 <c_task_resume+0x2a>
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d456:	bf00      	nop
}
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <c_task_terminate>:
/*! (method) terminate task

  task.terminate()
*/
static void c_task_terminate(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d45e:	b580      	push	{r7, lr}
 800d460:	b086      	sub	sp, #24
 800d462:	af00      	add	r7, sp, #0
 800d464:	60f8      	str	r0, [r7, #12]
 800d466:	60b9      	str	r1, [r7, #8]
 800d468:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	f993 3000 	ldrsb.w	r3, [r3]
 800d470:	2b07      	cmp	r3, #7
 800d472:	d103      	bne.n	800d47c <c_task_terminate+0x1e>
    tcb = VM2TCB(vm);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	3b28      	subs	r3, #40	; 0x28
 800d478:	617b      	str	r3, [r7, #20]
 800d47a:	e004      	b.n	800d486 <c_task_terminate+0x28>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	3310      	adds	r3, #16
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	617b      	str	r3, [r7, #20]
  }

  mrbc_terminate_task(tcb);
 800d486:	6978      	ldr	r0, [r7, #20]
 800d488:	f7ff fcb2 	bl	800cdf0 <mrbc_terminate_task>
}
 800d48c:	bf00      	nop
 800d48e:	3718      	adds	r7, #24
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <c_task_join>:
/*! (method) join task

  task.join()
*/
static void c_task_join(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	f993 3000 	ldrsb.w	r3, [r3]
 800d4a6:	2b07      	cmp	r3, #7
 800d4a8:	d00c      	beq.n	800d4c4 <c_task_join+0x30>

  mrbc_tcb *tcb_me = VM2TCB(vm);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3b28      	subs	r3, #40	; 0x28
 800d4ae:	617b      	str	r3, [r7, #20]
  mrbc_tcb *tcb_join = *(mrbc_tcb **)v[0].instance->data;
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	3310      	adds	r3, #16
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	613b      	str	r3, [r7, #16]

  mrbc_join_task(tcb_me, tcb_join);
 800d4ba:	6939      	ldr	r1, [r7, #16]
 800d4bc:	6978      	ldr	r0, [r7, #20]
 800d4be:	f7ff fcb5 	bl	800ce2c <mrbc_join_task>
 800d4c2:	e000      	b.n	800d4c6 <c_task_join+0x32>
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d4c4:	bf00      	nop
}
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <c_task_pass>:
/*! (method) task pass

  Task.pass()
*/
static void c_task_pass(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
  if( v[0].tt != MRBC_TT_CLASS ) return;
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	f993 3000 	ldrsb.w	r3, [r3]
 800d4de:	2b07      	cmp	r3, #7
 800d4e0:	d106      	bne.n	800d4f0 <c_task_pass+0x24>

  mrbc_tcb *tcb = VM2TCB(vm);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	3b28      	subs	r3, #40	; 0x28
 800d4e6:	617b      	str	r3, [r7, #20]
  mrbc_relinquish(tcb);
 800d4e8:	6978      	ldr	r0, [r7, #20]
 800d4ea:	f7ff fc03 	bl	800ccf4 <mrbc_relinquish>
 800d4ee:	e000      	b.n	800d4f2 <c_task_pass+0x26>
  if( v[0].tt != MRBC_TT_CLASS ) return;
 800d4f0:	bf00      	nop
}
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <c_task_set_priority>:

  Task.priority = n  # n = 0(high) .. 255(low)
  task.priority = n
*/
static void c_task_set_priority(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	f993 3000 	ldrsb.w	r3, [r3]
 800d50a:	2b07      	cmp	r3, #7
 800d50c:	d103      	bne.n	800d516 <c_task_set_priority+0x1e>
    tcb = VM2TCB(vm);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3b28      	subs	r3, #40	; 0x28
 800d512:	617b      	str	r3, [r7, #20]
 800d514:	e004      	b.n	800d520 <c_task_set_priority+0x28>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	3310      	adds	r3, #16
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	617b      	str	r3, [r7, #20]
  }

  if( v[1].tt != MRBC_TT_INTEGER ) {
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	3310      	adds	r3, #16
 800d524:	f993 3000 	ldrsb.w	r3, [r3]
 800d528:	2b04      	cmp	r3, #4
 800d52a:	d005      	beq.n	800d538 <c_task_set_priority+0x40>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 800d52c:	2200      	movs	r2, #0
 800d52e:	490e      	ldr	r1, [pc, #56]	; (800d568 <c_task_set_priority+0x70>)
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f7fd ff79 	bl	800b428 <mrbc_raise>
    return;
 800d536:	e013      	b.n	800d560 <c_task_set_priority+0x68>
  }
  int n = mrbc_integer( v[1] );
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	3310      	adds	r3, #16
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	613b      	str	r3, [r7, #16]
  if( n < 0 || n > 255 ) {
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	db02      	blt.n	800d54c <c_task_set_priority+0x54>
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	2bff      	cmp	r3, #255	; 0xff
 800d54a:	dd05      	ble.n	800d558 <c_task_set_priority+0x60>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 800d54c:	2200      	movs	r2, #0
 800d54e:	4906      	ldr	r1, [pc, #24]	; (800d568 <c_task_set_priority+0x70>)
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f7fd ff69 	bl	800b428 <mrbc_raise>
    return;
 800d556:	e003      	b.n	800d560 <c_task_set_priority+0x68>
  }

  mrbc_change_priority( tcb, n );
 800d558:	6939      	ldr	r1, [r7, #16]
 800d55a:	6978      	ldr	r0, [r7, #20]
 800d55c:	f7ff fbdb 	bl	800cd16 <mrbc_change_priority>
}
 800d560:	3718      	adds	r7, #24
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	20000154 	.word	0x20000154

0800d56c <c_task_priority>:
/*! (method) task priority getter

  task.priority() -> Integer
*/
static void c_task_priority(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	f993 3000 	ldrsb.w	r3, [r3]
 800d57e:	2b07      	cmp	r3, #7
 800d580:	d103      	bne.n	800d58a <c_task_priority+0x1e>
    tcb = VM2TCB(vm);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	3b28      	subs	r3, #40	; 0x28
 800d586:	617b      	str	r3, [r7, #20]
 800d588:	e004      	b.n	800d594 <c_task_priority+0x28>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	3310      	adds	r3, #16
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	617b      	str	r3, [r7, #20]
  }

  SET_INT_RETURN( tcb->priority );
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	7a1b      	ldrb	r3, [r3, #8]
 800d598:	613b      	str	r3, [r7, #16]
 800d59a:	68b8      	ldr	r0, [r7, #8]
 800d59c:	f7ff f86c 	bl	800c678 <mrbc_decref>
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	2204      	movs	r2, #4
 800d5a4:	701a      	strb	r2, [r3, #0]
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	693a      	ldr	r2, [r7, #16]
 800d5aa:	609a      	str	r2, [r3, #8]
}
 800d5ac:	bf00      	nop
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <c_task_status>:
/*! (method) status

  task.status() -> String
*/
static void c_task_status(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d5b4:	b590      	push	{r4, r7, lr}
 800d5b6:	b08f      	sub	sp, #60	; 0x3c
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]
  static const char *status_name[] =
    { "DORMANT", "READY", "WAITING ", "", "SUSPENDED" };
  static const char *reason_name[] =
    { "", "SLEEP", "MUTEX", "", "JOIN" };

  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	f993 3000 	ldrsb.w	r3, [r3]
 800d5c6:	2b07      	cmp	r3, #7
 800d5c8:	d034      	beq.n	800d634 <c_task_status+0x80>

  const mrbc_tcb *tcb = *(mrbc_tcb **)v[0].instance->data;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	3310      	adds	r3, #16
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	637b      	str	r3, [r7, #52]	; 0x34
  mrbc_value ret = mrbc_string_new_cstr( vm, status_name[tcb->state / 2] );
 800d5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d6:	7adb      	ldrb	r3, [r3, #11]
 800d5d8:	085b      	lsrs	r3, r3, #1
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	461a      	mov	r2, r3
 800d5de:	4b17      	ldr	r3, [pc, #92]	; (800d63c <c_task_status+0x88>)
 800d5e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d5e4:	f107 0320 	add.w	r3, r7, #32
 800d5e8:	68f9      	ldr	r1, [r7, #12]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7ff f88a 	bl	800c704 <mrbc_string_new_cstr>

  if( tcb->state == TASKSTATE_WAITING ) {
 800d5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f2:	7adb      	ldrb	r3, [r3, #11]
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d10b      	bne.n	800d610 <c_task_status+0x5c>
    mrbc_string_append_cstr( &ret, reason_name[tcb->reason] );
 800d5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fa:	7b1b      	ldrb	r3, [r3, #12]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	4b10      	ldr	r3, [pc, #64]	; (800d640 <c_task_status+0x8c>)
 800d600:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d604:	f107 0320 	add.w	r3, r7, #32
 800d608:	4611      	mov	r1, r2
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7ff f89f 	bl	800c74e <mrbc_string_append_cstr>
  }

  SET_RETURN(ret);
 800d610:	f107 0410 	add.w	r4, r7, #16
 800d614:	f107 0320 	add.w	r3, r7, #32
 800d618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d61a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d61e:	68b8      	ldr	r0, [r7, #8]
 800d620:	f7ff f82a 	bl	800c678 <mrbc_decref>
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	461c      	mov	r4, r3
 800d628:	f107 0310 	add.w	r3, r7, #16
 800d62c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d62e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d632:	e000      	b.n	800d636 <c_task_status+0x82>
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d634:	bf00      	nop
}
 800d636:	373c      	adds	r7, #60	; 0x3c
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd90      	pop	{r4, r7, pc}
 800d63c:	20000220 	.word	0x20000220
 800d640:	20000234 	.word	0x20000234

0800d644 <c_mutex_new>:
//================================================================
/*! (method) mutex constructor

*/
static void c_mutex_new(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d644:	b590      	push	{r4, r7, lr}
 800d646:	b089      	sub	sp, #36	; 0x24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	61f8      	str	r0, [r7, #28]
 800d64c:	61b9      	str	r1, [r7, #24]
 800d64e:	617a      	str	r2, [r7, #20]
  *v = mrbc_instance_new(vm, v->cls, sizeof(mrbc_mutex));
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	689a      	ldr	r2, [r3, #8]
 800d654:	69bc      	ldr	r4, [r7, #24]
 800d656:	4638      	mov	r0, r7
 800d658:	2308      	movs	r3, #8
 800d65a:	69f9      	ldr	r1, [r7, #28]
 800d65c:	f7fb ff16 	bl	800948c <mrbc_instance_new>
 800d660:	463b      	mov	r3, r7
 800d662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if( !v->instance ) return;
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d006      	beq.n	800d67e <c_mutex_new+0x3a>

  mrbc_mutex_init( (mrbc_mutex *)(v->instance->data) );
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	3310      	adds	r3, #16
 800d676:	4618      	mov	r0, r3
 800d678:	f7ff fc03 	bl	800ce82 <mrbc_mutex_init>
 800d67c:	e000      	b.n	800d680 <c_mutex_new+0x3c>
  if( !v->instance ) return;
 800d67e:	bf00      	nop
}
 800d680:	3724      	adds	r7, #36	; 0x24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd90      	pop	{r4, r7, pc}
	...

0800d688 <c_mutex_lock>:
//================================================================
/*! (method) mutex lock

*/
static void c_mutex_lock(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
  int r = mrbc_mutex_lock( (mrbc_mutex *)v->instance->data, VM2TCB(vm) );
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	f103 0210 	add.w	r2, r3, #16
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3b28      	subs	r3, #40	; 0x28
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	f7ff fc07 	bl	800ceb6 <mrbc_mutex_lock>
 800d6a8:	6178      	str	r0, [r7, #20]
  if( r == 0 ) return;  // return self
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d006      	beq.n	800d6be <c_mutex_lock+0x36>

  // raise ThreadError
  assert(!"Mutex recursive lock.");
 800d6b0:	4b05      	ldr	r3, [pc, #20]	; (800d6c8 <c_mutex_lock+0x40>)
 800d6b2:	4a06      	ldr	r2, [pc, #24]	; (800d6cc <c_mutex_lock+0x44>)
 800d6b4:	f240 4163 	movw	r1, #1123	; 0x463
 800d6b8:	4805      	ldr	r0, [pc, #20]	; (800d6d0 <c_mutex_lock+0x48>)
 800d6ba:	f007 ffc3 	bl	8015644 <__assert_func>
  if( r == 0 ) return;  // return self
 800d6be:	bf00      	nop
}
 800d6c0:	3718      	adds	r7, #24
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	080198cc 	.word	0x080198cc
 800d6cc:	0801be28 	.word	0x0801be28
 800d6d0:	08019890 	.word	0x08019890

0800d6d4 <c_mutex_unlock>:
//================================================================
/*! (method) mutex unlock

*/
static void c_mutex_unlock(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
  int r = mrbc_mutex_unlock( (mrbc_mutex *)v->instance->data, VM2TCB(vm) );
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	f103 0210 	add.w	r2, r3, #16
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	3b28      	subs	r3, #40	; 0x28
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	4610      	mov	r0, r2
 800d6f0:	f7ff fc18 	bl	800cf24 <mrbc_mutex_unlock>
 800d6f4:	6178      	str	r0, [r7, #20]
  if( r == 0 ) return;  // return self
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d006      	beq.n	800d70a <c_mutex_unlock+0x36>

  // raise ThreadError
  assert(!"Mutex unlock error. not owner or not locked.");
 800d6fc:	4b05      	ldr	r3, [pc, #20]	; (800d714 <c_mutex_unlock+0x40>)
 800d6fe:	4a06      	ldr	r2, [pc, #24]	; (800d718 <c_mutex_unlock+0x44>)
 800d700:	f240 4171 	movw	r1, #1137	; 0x471
 800d704:	4805      	ldr	r0, [pc, #20]	; (800d71c <c_mutex_unlock+0x48>)
 800d706:	f007 ff9d 	bl	8015644 <__assert_func>
  if( r == 0 ) return;  // return self
 800d70a:	bf00      	nop
}
 800d70c:	3718      	adds	r7, #24
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	080198e8 	.word	0x080198e8
 800d718:	0801be38 	.word	0x0801be38
 800d71c:	08019890 	.word	0x08019890

0800d720 <c_mutex_trylock>:
//================================================================
/*! (method) mutex trylock

*/
static void c_mutex_trylock(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
  int r = mrbc_mutex_trylock( (mrbc_mutex *)v->instance->data, VM2TCB(vm) );
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	f103 0210 	add.w	r2, r3, #16
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	3b28      	subs	r3, #40	; 0x28
 800d738:	4619      	mov	r1, r3
 800d73a:	4610      	mov	r0, r2
 800d73c:	f7ff fc5e 	bl	800cffc <mrbc_mutex_trylock>
 800d740:	6178      	str	r0, [r7, #20]
  SET_BOOL_RETURN( r == 0 );
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d101      	bne.n	800d74c <c_mutex_trylock+0x2c>
 800d748:	2303      	movs	r3, #3
 800d74a:	e000      	b.n	800d74e <c_mutex_trylock+0x2e>
 800d74c:	2302      	movs	r3, #2
 800d74e:	613b      	str	r3, [r7, #16]
 800d750:	68b8      	ldr	r0, [r7, #8]
 800d752:	f7fe ff91 	bl	800c678 <mrbc_decref>
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	b25a      	sxtb	r2, r3
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	701a      	strb	r2, [r3, #0]
}
 800d75e:	bf00      	nop
 800d760:	3718      	adds	r7, #24
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <c_mutex_locked>:
//================================================================
/*! (method) mutex locked?

*/
static void c_mutex_locked(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b086      	sub	sp, #24
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	60b9      	str	r1, [r7, #8]
 800d770:	607a      	str	r2, [r7, #4]
  mrbc_mutex *mutex = (mrbc_mutex *)v->instance->data;
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	3310      	adds	r3, #16
 800d778:	617b      	str	r3, [r7, #20]
  SET_BOOL_RETURN( mutex->lock != 0 );
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <c_mutex_locked+0x20>
 800d782:	2303      	movs	r3, #3
 800d784:	e000      	b.n	800d788 <c_mutex_locked+0x22>
 800d786:	2302      	movs	r3, #2
 800d788:	613b      	str	r3, [r7, #16]
 800d78a:	68b8      	ldr	r0, [r7, #8]
 800d78c:	f7fe ff74 	bl	800c678 <mrbc_decref>
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	b25a      	sxtb	r2, r3
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	701a      	strb	r2, [r3, #0]
}
 800d798:	bf00      	nop
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <c_mutex_owned>:
//================================================================
/*! (method) mutex owned?

*/
static void c_mutex_owned(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
  mrbc_mutex *mutex = (mrbc_mutex *)v->instance->data;
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	3310      	adds	r3, #16
 800d7b2:	617b      	str	r3, [r7, #20]
  SET_BOOL_RETURN( mutex->lock != 0 && mutex->tcb == VM2TCB(vm) );
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d007      	beq.n	800d7cc <c_mutex_owned+0x2c>
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	685a      	ldr	r2, [r3, #4]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	3b28      	subs	r3, #40	; 0x28
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d101      	bne.n	800d7cc <c_mutex_owned+0x2c>
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	e000      	b.n	800d7ce <c_mutex_owned+0x2e>
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	613b      	str	r3, [r7, #16]
 800d7d0:	68b8      	ldr	r0, [r7, #8]
 800d7d2:	f7fe ff51 	bl	800c678 <mrbc_decref>
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	b25a      	sxtb	r2, r3
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	701a      	strb	r2, [r3, #0]
}
 800d7de:	bf00      	nop
 800d7e0:	3718      	adds	r7, #24
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
	...

0800d7e8 <c_vm_tick>:

//================================================================
/*! (method) get tick counter
*/
static void c_vm_tick(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b086      	sub	sp, #24
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
  SET_INT_RETURN(tick_);
 800d7f4:	4b07      	ldr	r3, [pc, #28]	; (800d814 <c_vm_tick+0x2c>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	617b      	str	r3, [r7, #20]
 800d7fa:	68b8      	ldr	r0, [r7, #8]
 800d7fc:	f7fe ff3c 	bl	800c678 <mrbc_decref>
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	2204      	movs	r2, #4
 800d804:	701a      	strb	r2, [r3, #0]
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	609a      	str	r2, [r3, #8]
}
 800d80c:	bf00      	nop
 800d80e:	3718      	adds	r7, #24
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	20008050 	.word	0x20008050

0800d818 <mrbc_init>:

  @param  heap_ptr	heap memory buffer.
  @param  size		its size.
*/
void mrbc_init(void *heap_ptr, unsigned int size)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  hal_init();
 800d822:	f7fe f8b1 	bl	800b988 <hal_init>
  mrbc_init_alloc(heap_ptr, size);
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7f4 f8f1 	bl	8001a10 <mrbc_init_alloc>
  mrbc_init_global();
 800d82e:	f7fd ffe1 	bl	800b7f4 <mrbc_init_global>
  mrbc_init_class();
 800d832:	f7fc f8cd 	bl	80099d0 <mrbc_init_class>

  mrbc_value cls = {.tt = MRBC_TT_CLASS, .cls = MRBC_CLASS(Task)};
 800d836:	f107 0308 	add.w	r3, r7, #8
 800d83a:	2200      	movs	r2, #0
 800d83c:	601a      	str	r2, [r3, #0]
 800d83e:	605a      	str	r2, [r3, #4]
 800d840:	609a      	str	r2, [r3, #8]
 800d842:	60da      	str	r2, [r3, #12]
 800d844:	2307      	movs	r3, #7
 800d846:	723b      	strb	r3, [r7, #8]
 800d848:	4b13      	ldr	r3, [pc, #76]	; (800d898 <mrbc_init+0x80>)
 800d84a:	613b      	str	r3, [r7, #16]
  mrbc_set_const( MRBC_SYM(Task), &cls );
 800d84c:	f107 0308 	add.w	r3, r7, #8
 800d850:	4619      	mov	r1, r3
 800d852:	2032      	movs	r0, #50	; 0x32
 800d854:	f7fd ffe0 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Mutex);
 800d858:	4b10      	ldr	r3, [pc, #64]	; (800d89c <mrbc_init+0x84>)
 800d85a:	613b      	str	r3, [r7, #16]
  mrbc_set_const( MRBC_SYM(Mutex), &cls );
 800d85c:	f107 0308 	add.w	r3, r7, #8
 800d860:	4619      	mov	r1, r3
 800d862:	2021      	movs	r0, #33	; 0x21
 800d864:	f7fd ffd8 	bl	800b818 <mrbc_set_const>

  cls.cls = MRBC_CLASS(VM);
 800d868:	4b0d      	ldr	r3, [pc, #52]	; (800d8a0 <mrbc_init+0x88>)
 800d86a:	613b      	str	r3, [r7, #16]
  mrbc_set_const( MRBC_SYM(VM), &cls );
 800d86c:	f107 0308 	add.w	r3, r7, #8
 800d870:	4619      	mov	r1, r3
 800d872:	2035      	movs	r0, #53	; 0x35
 800d874:	f7fd ffd0 	bl	800b818 <mrbc_set_const>

  mrbc_define_method(0, mrbc_class_object, "sleep", c_sleep);
 800d878:	4b0a      	ldr	r3, [pc, #40]	; (800d8a4 <mrbc_init+0x8c>)
 800d87a:	4a0b      	ldr	r2, [pc, #44]	; (800d8a8 <mrbc_init+0x90>)
 800d87c:	490b      	ldr	r1, [pc, #44]	; (800d8ac <mrbc_init+0x94>)
 800d87e:	2000      	movs	r0, #0
 800d880:	f7fb fdc4 	bl	800940c <mrbc_define_method>
  mrbc_define_method(0, mrbc_class_object, "sleep_ms", c_sleep_ms);
 800d884:	4b0a      	ldr	r3, [pc, #40]	; (800d8b0 <mrbc_init+0x98>)
 800d886:	4a0b      	ldr	r2, [pc, #44]	; (800d8b4 <mrbc_init+0x9c>)
 800d888:	4908      	ldr	r1, [pc, #32]	; (800d8ac <mrbc_init+0x94>)
 800d88a:	2000      	movs	r0, #0
 800d88c:	f7fb fdbe 	bl	800940c <mrbc_define_method>
}
 800d890:	bf00      	nop
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	200001d8 	.word	0x200001d8
 800d89c:	200001f0 	.word	0x200001f0
 800d8a0:	20000208 	.word	0x20000208
 800d8a4:	0800d039 	.word	0x0800d039
 800d8a8:	0801992c 	.word	0x0801992c
 800d8ac:	20000064 	.word	0x20000064
 800d8b0:	0800d0f9 	.word	0x0800d0f9
 800d8b4:	08019934 	.word	0x08019934

0800d8b8 <mrbc_decref>:
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f993 3000 	ldrsb.w	r3, [r3]
 800d8c6:	2b07      	cmp	r3, #7
 800d8c8:	dd2c      	ble.n	800d924 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	885b      	ldrh	r3, [r3, #2]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d106      	bne.n	800d8e2 <mrbc_decref+0x2a>
 800d8d4:	4b16      	ldr	r3, [pc, #88]	; (800d930 <mrbc_decref+0x78>)
 800d8d6:	4a17      	ldr	r2, [pc, #92]	; (800d934 <mrbc_decref+0x7c>)
 800d8d8:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800d8dc:	4816      	ldr	r0, [pc, #88]	; (800d938 <mrbc_decref+0x80>)
 800d8de:	f007 feb1 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	885b      	ldrh	r3, [r3, #2]
 800d8e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d106      	bne.n	800d8fe <mrbc_decref+0x46>
 800d8f0:	4b12      	ldr	r3, [pc, #72]	; (800d93c <mrbc_decref+0x84>)
 800d8f2:	4a10      	ldr	r2, [pc, #64]	; (800d934 <mrbc_decref+0x7c>)
 800d8f4:	f240 11d3 	movw	r1, #467	; 0x1d3
 800d8f8:	480f      	ldr	r0, [pc, #60]	; (800d938 <mrbc_decref+0x80>)
 800d8fa:	f007 fea3 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	885a      	ldrh	r2, [r3, #2]
 800d904:	3a01      	subs	r2, #1
 800d906:	b292      	uxth	r2, r2
 800d908:	805a      	strh	r2, [r3, #2]
 800d90a:	885b      	ldrh	r3, [r3, #2]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10b      	bne.n	800d928 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f993 3000 	ldrsb.w	r3, [r3]
 800d916:	461a      	mov	r2, r3
 800d918:	4b09      	ldr	r3, [pc, #36]	; (800d940 <mrbc_decref+0x88>)
 800d91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	4798      	blx	r3
 800d922:	e002      	b.n	800d92a <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800d924:	bf00      	nop
 800d926:	e000      	b.n	800d92a <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800d928:	bf00      	nop
}
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	0801a144 	.word	0x0801a144
 800d934:	0801be8c 	.word	0x0801be8c
 800d938:	0801a15c 	.word	0x0801a15c
 800d93c:	0801a178 	.word	0x0801a178
 800d940:	0801be98 	.word	0x0801be98

0800d944 <mrbc_is_nested_symid>:
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	4603      	mov	r3, r0
 800d94c:	80fb      	strh	r3, [r7, #6]
  const char *s = mrbc_symid_to_str(sym_id);
 800d94e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d952:	4618      	mov	r0, r3
 800d954:	f000 f974 	bl	800dc40 <mrbc_symid_to_str>
 800d958:	60f8      	str	r0, [r7, #12]
  return ('0' <= s[0] && s[0] <= ('9'+6));
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2b2f      	cmp	r3, #47	; 0x2f
 800d960:	d905      	bls.n	800d96e <mrbc_is_nested_symid+0x2a>
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	2b3f      	cmp	r3, #63	; 0x3f
 800d968:	d801      	bhi.n	800d96e <mrbc_is_nested_symid+0x2a>
 800d96a:	2301      	movs	r3, #1
 800d96c:	e000      	b.n	800d970 <mrbc_is_nested_symid+0x2c>
 800d96e:	2300      	movs	r3, #0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <mrbc_string_new_cstr>:
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d004      	beq.n	800d994 <mrbc_string_new_cstr+0x1c>
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7f2 fc32 	bl	80001f4 <strlen>
 800d990:	4603      	mov	r3, r0
 800d992:	e000      	b.n	800d996 <mrbc_string_new_cstr+0x1e>
 800d994:	2300      	movs	r3, #0
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	68b9      	ldr	r1, [r7, #8]
 800d99c:	f7f9 fc06 	bl	80071ac <mrbc_string_new>
}
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <mrbc_string_append_cstr>:
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 800d9b2:	6838      	ldr	r0, [r7, #0]
 800d9b4:	f7f2 fc1e 	bl	80001f4 <strlen>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	6839      	ldr	r1, [r7, #0]
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7f9 fd8c 	bl	80074dc <mrbc_string_append_cbuf>
 800d9c4:	4603      	mov	r3, r0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <calc_hash>:

  @param  str		Target string.
  @return uint16_t	Hash value.
*/
static inline uint16_t calc_hash(const char *str)
{
 800d9ce:	b480      	push	{r7}
 800d9d0:	b085      	sub	sp, #20
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
  uint16_t h = 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	81fb      	strh	r3, [r7, #14]

  while( *str != '\0' ) {
 800d9da:	e00b      	b.n	800d9f4 <calc_hash+0x26>
    h = h * 17 + *str++;
 800d9dc:	89fb      	ldrh	r3, [r7, #14]
 800d9de:	461a      	mov	r2, r3
 800d9e0:	0112      	lsls	r2, r2, #4
 800d9e2:	4413      	add	r3, r2
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	1c59      	adds	r1, r3, #1
 800d9ea:	6079      	str	r1, [r7, #4]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	4413      	add	r3, r2
 800d9f2:	81fb      	strh	r3, [r7, #14]
  while( *str != '\0' ) {
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1ef      	bne.n	800d9dc <calc_hash+0xe>
  }
  return h;
 800d9fc:	89fb      	ldrh	r3, [r7, #14]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3714      	adds	r7, #20
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
	...

0800da0c <search_builtin_symbol>:

  @param  str	string ptr.
  @return	symbol id. or -1 if not found.
*/
static int search_builtin_symbol( const char *str )
{
 800da0c:	b480      	push	{r7}
 800da0e:	b089      	sub	sp, #36	; 0x24
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  int left = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	61fb      	str	r3, [r7, #28]
  int right = sizeof(builtin_symbols) / sizeof(builtin_symbols[0]);
 800da18:	23d3      	movs	r3, #211	; 0xd3
 800da1a:	61bb      	str	r3, [r7, #24]

  while( left < right ) {
 800da1c:	e02d      	b.n	800da7a <search_builtin_symbol+0x6e>
    int mid = (left + right) / 2;
 800da1e:	69fa      	ldr	r2, [r7, #28]
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	4413      	add	r3, r2
 800da24:	0fda      	lsrs	r2, r3, #31
 800da26:	4413      	add	r3, r2
 800da28:	105b      	asrs	r3, r3, #1
 800da2a:	60fb      	str	r3, [r7, #12]
    const unsigned char *p1 = (const unsigned char *)builtin_symbols[mid];
 800da2c:	4a19      	ldr	r2, [pc, #100]	; (800da94 <search_builtin_symbol+0x88>)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da34:	617b      	str	r3, [r7, #20]
    const unsigned char *p2 = (const unsigned char *)str;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	613b      	str	r3, [r7, #16]

    while( 1 ) {	// string compare, same order as cruby.
      if( *p1 < *p2 ) {
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	781a      	ldrb	r2, [r3, #0]
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	429a      	cmp	r2, r3
 800da44:	d203      	bcs.n	800da4e <search_builtin_symbol+0x42>
	left = mid + 1;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	3301      	adds	r3, #1
 800da4a:	61fb      	str	r3, [r7, #28]
	break;
 800da4c:	e015      	b.n	800da7a <search_builtin_symbol+0x6e>
      }
      if( *p1 > *p2 ) {
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	781a      	ldrb	r2, [r3, #0]
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	429a      	cmp	r2, r3
 800da58:	d902      	bls.n	800da60 <search_builtin_symbol+0x54>
	right = mid;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	61bb      	str	r3, [r7, #24]
	break;
 800da5e:	e00c      	b.n	800da7a <search_builtin_symbol+0x6e>
      }
      if( *p1 == 0 ) {
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d101      	bne.n	800da6c <search_builtin_symbol+0x60>
	return mid;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	e00c      	b.n	800da86 <search_builtin_symbol+0x7a>
      }

      p1++;
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	3301      	adds	r3, #1
 800da70:	617b      	str	r3, [r7, #20]
      p2++;
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	3301      	adds	r3, #1
 800da76:	613b      	str	r3, [r7, #16]
      if( *p1 < *p2 ) {
 800da78:	e7df      	b.n	800da3a <search_builtin_symbol+0x2e>
  while( left < right ) {
 800da7a:	69fa      	ldr	r2, [r7, #28]
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	429a      	cmp	r2, r3
 800da80:	dbcd      	blt.n	800da1e <search_builtin_symbol+0x12>
    }
  }

  return -1;
 800da82:	f04f 33ff 	mov.w	r3, #4294967295
}
 800da86:	4618      	mov	r0, r3
 800da88:	3724      	adds	r7, #36	; 0x24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	20000248 	.word	0x20000248

0800da98 <search_index>:
  @param  hash	hash value.
  @param  str	string ptr.
  @return	index. or -1 if not found.
*/
static int search_index( uint16_t hash, const char *str )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	4603      	mov	r3, r0
 800daa0:	6039      	str	r1, [r7, #0]
 800daa2:	80fb      	strh	r3, [r7, #6]
  }
  return -1;
#endif

#ifdef MRBC_SYMBOL_SEARCH_BTREE
  int i = 0;
 800daa4:	2300      	movs	r3, #0
 800daa6:	60fb      	str	r3, [r7, #12]
  do {
    if( sym_index[i].hash == hash && strcmp(str, sym_index[i].cstr) == 0 ) {
 800daa8:	4a18      	ldr	r2, [pc, #96]	; (800db0c <search_index+0x74>)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800dab0:	88fa      	ldrh	r2, [r7, #6]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d10d      	bne.n	800dad2 <search_index+0x3a>
 800dab6:	4a15      	ldr	r2, [pc, #84]	; (800db0c <search_index+0x74>)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	00db      	lsls	r3, r3, #3
 800dabc:	4413      	add	r3, r2
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	4619      	mov	r1, r3
 800dac2:	6838      	ldr	r0, [r7, #0]
 800dac4:	f7f2 fb8c 	bl	80001e0 <strcmp>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d101      	bne.n	800dad2 <search_index+0x3a>
      return i;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	e018      	b.n	800db04 <search_index+0x6c>
    }
    if( hash < sym_index[i].hash ) {
 800dad2:	4a0e      	ldr	r2, [pc, #56]	; (800db0c <search_index+0x74>)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800dada:	88fa      	ldrh	r2, [r7, #6]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d206      	bcs.n	800daee <search_index+0x56>
      i = sym_index[i].left;
 800dae0:	4a0a      	ldr	r2, [pc, #40]	; (800db0c <search_index+0x74>)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	4413      	add	r3, r2
 800dae8:	789b      	ldrb	r3, [r3, #2]
 800daea:	60fb      	str	r3, [r7, #12]
 800daec:	e005      	b.n	800dafa <search_index+0x62>
    } else {
      i = sym_index[i].right;
 800daee:	4a07      	ldr	r2, [pc, #28]	; (800db0c <search_index+0x74>)
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	4413      	add	r3, r2
 800daf6:	78db      	ldrb	r3, [r3, #3]
 800daf8:	60fb      	str	r3, [r7, #12]
    }
  } while( i != 0 );
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1d3      	bne.n	800daa8 <search_index+0x10>
  return -1;
 800db00:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800db04:	4618      	mov	r0, r3
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	20008054 	.word	0x20008054

0800db10 <add_index>:
  @param  hash	return value.
  @param  str	string ptr.
  @return	index. or -1 if error.
*/
static int add_index( uint16_t hash, const char *str )
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	4603      	mov	r3, r0
 800db18:	6039      	str	r1, [r7, #0]
 800db1a:	80fb      	strh	r3, [r7, #6]
  if( sym_index_pos >= MAX_SYMBOLS_COUNT ) return -1;	// check overflow.
 800db1c:	4b2a      	ldr	r3, [pc, #168]	; (800dbc8 <add_index+0xb8>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2bfe      	cmp	r3, #254	; 0xfe
 800db22:	dd02      	ble.n	800db2a <add_index+0x1a>
 800db24:	f04f 33ff 	mov.w	r3, #4294967295
 800db28:	e048      	b.n	800dbbc <add_index+0xac>

  int idx = sym_index_pos++;
 800db2a:	4b27      	ldr	r3, [pc, #156]	; (800dbc8 <add_index+0xb8>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	1c5a      	adds	r2, r3, #1
 800db30:	4925      	ldr	r1, [pc, #148]	; (800dbc8 <add_index+0xb8>)
 800db32:	600a      	str	r2, [r1, #0]
 800db34:	60bb      	str	r3, [r7, #8]

  // append table.
  sym_index[idx].hash = hash;
 800db36:	4925      	ldr	r1, [pc, #148]	; (800dbcc <add_index+0xbc>)
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	88fa      	ldrh	r2, [r7, #6]
 800db3c:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
  sym_index[idx].cstr = str;
 800db40:	4a22      	ldr	r2, [pc, #136]	; (800dbcc <add_index+0xbc>)
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	00db      	lsls	r3, r3, #3
 800db46:	4413      	add	r3, r2
 800db48:	683a      	ldr	r2, [r7, #0]
 800db4a:	605a      	str	r2, [r3, #4]

#ifdef MRBC_SYMBOL_SEARCH_BTREE
  int i = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	60fb      	str	r3, [r7, #12]

  while( 1 ) {
    if( hash < sym_index[i].hash ) {
 800db50:	4a1e      	ldr	r2, [pc, #120]	; (800dbcc <add_index+0xbc>)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800db58:	88fa      	ldrh	r2, [r7, #6]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d216      	bcs.n	800db8c <add_index+0x7c>
      // left side
      if( sym_index[i].left == 0 ) {	// left is empty?
 800db5e:	4a1b      	ldr	r2, [pc, #108]	; (800dbcc <add_index+0xbc>)
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	00db      	lsls	r3, r3, #3
 800db64:	4413      	add	r3, r2
 800db66:	789b      	ldrb	r3, [r3, #2]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d108      	bne.n	800db7e <add_index+0x6e>
        sym_index[i].left = idx;
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	b2d9      	uxtb	r1, r3
 800db70:	4a16      	ldr	r2, [pc, #88]	; (800dbcc <add_index+0xbc>)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	4413      	add	r3, r2
 800db78:	460a      	mov	r2, r1
 800db7a:	709a      	strb	r2, [r3, #2]
        break;
 800db7c:	e01d      	b.n	800dbba <add_index+0xaa>
      }
      i = sym_index[i].left;
 800db7e:	4a13      	ldr	r2, [pc, #76]	; (800dbcc <add_index+0xbc>)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	4413      	add	r3, r2
 800db86:	789b      	ldrb	r3, [r3, #2]
 800db88:	60fb      	str	r3, [r7, #12]
 800db8a:	e7e1      	b.n	800db50 <add_index+0x40>
    } else {
      // right side
      if( sym_index[i].right == 0 ) {	// right is empty?
 800db8c:	4a0f      	ldr	r2, [pc, #60]	; (800dbcc <add_index+0xbc>)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	00db      	lsls	r3, r3, #3
 800db92:	4413      	add	r3, r2
 800db94:	78db      	ldrb	r3, [r3, #3]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d108      	bne.n	800dbac <add_index+0x9c>
        sym_index[i].right = idx;
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	b2d9      	uxtb	r1, r3
 800db9e:	4a0b      	ldr	r2, [pc, #44]	; (800dbcc <add_index+0xbc>)
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	00db      	lsls	r3, r3, #3
 800dba4:	4413      	add	r3, r2
 800dba6:	460a      	mov	r2, r1
 800dba8:	70da      	strb	r2, [r3, #3]
        break;
 800dbaa:	e006      	b.n	800dbba <add_index+0xaa>
      }
      i = sym_index[i].right;
 800dbac:	4a07      	ldr	r2, [pc, #28]	; (800dbcc <add_index+0xbc>)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	00db      	lsls	r3, r3, #3
 800dbb2:	4413      	add	r3, r2
 800dbb4:	78db      	ldrb	r3, [r3, #3]
 800dbb6:	60fb      	str	r3, [r7, #12]
    if( hash < sym_index[i].hash ) {
 800dbb8:	e7ca      	b.n	800db50 <add_index+0x40>
    }
  }
#endif

  return idx;
 800dbba:	68bb      	ldr	r3, [r7, #8]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3714      	adds	r7, #20
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	2000884c 	.word	0x2000884c
 800dbcc:	20008054 	.word	0x20008054

0800dbd0 <mrbc_str_to_symid>:

  @param  str		Target string.
  @return mrbc_sym	Symbol value. -1 if error.
*/
mrbc_sym mrbc_str_to_symid(const char *str)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  mrbc_sym sym_id = search_builtin_symbol(str);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7ff ff17 	bl	800da0c <search_builtin_symbol>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	81fb      	strh	r3, [r7, #14]
  if( sym_id >= 0 ) return sym_id;
 800dbe2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	db02      	blt.n	800dbf0 <mrbc_str_to_symid+0x20>
 800dbea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbee:	e022      	b.n	800dc36 <mrbc_str_to_symid+0x66>

  uint16_t h = calc_hash(str);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff feec 	bl	800d9ce <calc_hash>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	81bb      	strh	r3, [r7, #12]
  sym_id = search_index(h, str);
 800dbfa:	89bb      	ldrh	r3, [r7, #12]
 800dbfc:	6879      	ldr	r1, [r7, #4]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff ff4a 	bl	800da98 <search_index>
 800dc04:	4603      	mov	r3, r0
 800dc06:	81fb      	strh	r3, [r7, #14]
  if( sym_id < 0 ) sym_id = add_index( h, str );
 800dc08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	da06      	bge.n	800dc1e <mrbc_str_to_symid+0x4e>
 800dc10:	89bb      	ldrh	r3, [r7, #12]
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7ff ff7b 	bl	800db10 <add_index>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	81fb      	strh	r3, [r7, #14]
  if( sym_id < 0 ) return sym_id;
 800dc1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	da02      	bge.n	800dc2c <mrbc_str_to_symid+0x5c>
 800dc26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc2a:	e004      	b.n	800dc36 <mrbc_str_to_symid+0x66>

  return sym_id + OFFSET_BUILTIN_SYMBOL;
 800dc2c:	89fb      	ldrh	r3, [r7, #14]
 800dc2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	b21b      	sxth	r3, r3
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
	...

0800dc40 <mrbc_symid_to_str>:
  @param  sym_id	Symbol value.
  @return const char*	String.
  @retval NULL		Invalid sym_id was given.
*/
const char * mrbc_symid_to_str(mrbc_sym sym_id)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	4603      	mov	r3, r0
 800dc48:	80fb      	strh	r3, [r7, #6]
  if( sym_id < OFFSET_BUILTIN_SYMBOL ) {
 800dc4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc4e:	2bff      	cmp	r3, #255	; 0xff
 800dc50:	dc05      	bgt.n	800dc5e <mrbc_symid_to_str+0x1e>
    return builtin_symbols[sym_id];
 800dc52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc56:	4a11      	ldr	r2, [pc, #68]	; (800dc9c <mrbc_symid_to_str+0x5c>)
 800dc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc5c:	e018      	b.n	800dc90 <mrbc_symid_to_str+0x50>
  }

  sym_id -= OFFSET_BUILTIN_SYMBOL;
 800dc5e:	88fb      	ldrh	r3, [r7, #6]
 800dc60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	80fb      	strh	r3, [r7, #6]
  if( sym_id < 0 ) return NULL;
 800dc68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	da01      	bge.n	800dc74 <mrbc_symid_to_str+0x34>
 800dc70:	2300      	movs	r3, #0
 800dc72:	e00d      	b.n	800dc90 <mrbc_symid_to_str+0x50>
  if( sym_id >= sym_index_pos ) return NULL;
 800dc74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dc78:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <mrbc_symid_to_str+0x60>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	db01      	blt.n	800dc84 <mrbc_symid_to_str+0x44>
 800dc80:	2300      	movs	r3, #0
 800dc82:	e005      	b.n	800dc90 <mrbc_symid_to_str+0x50>

  return sym_index[sym_id].cstr;
 800dc84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc88:	4a06      	ldr	r2, [pc, #24]	; (800dca4 <mrbc_symid_to_str+0x64>)
 800dc8a:	00db      	lsls	r3, r3, #3
 800dc8c:	4413      	add	r3, r2
 800dc8e:	685b      	ldr	r3, [r3, #4]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	20000248 	.word	0x20000248
 800dca0:	2000884c 	.word	0x2000884c
 800dca4:	20008054 	.word	0x20008054

0800dca8 <mrbc_search_symid>:

  @param  str	C string.
  @return	symbol id. or -1 if not registered.
*/
mrbc_sym mrbc_search_symid( const char *str )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  mrbc_sym sym_id = search_builtin_symbol(str);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f7ff feab 	bl	800da0c <search_builtin_symbol>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	81fb      	strh	r3, [r7, #14]
  if( sym_id >= 0 ) return sym_id;
 800dcba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	db02      	blt.n	800dcc8 <mrbc_search_symid+0x20>
 800dcc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcc6:	e017      	b.n	800dcf8 <mrbc_search_symid+0x50>

  uint16_t h = calc_hash(str);
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f7ff fe80 	bl	800d9ce <calc_hash>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	81bb      	strh	r3, [r7, #12]
  sym_id = search_index(h, str);
 800dcd2:	89bb      	ldrh	r3, [r7, #12]
 800dcd4:	6879      	ldr	r1, [r7, #4]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff fede 	bl	800da98 <search_index>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	81fb      	strh	r3, [r7, #14]
  if( sym_id < 0 ) return sym_id;
 800dce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	da02      	bge.n	800dcee <mrbc_search_symid+0x46>
 800dce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcec:	e004      	b.n	800dcf8 <mrbc_search_symid+0x50>

  return sym_id + OFFSET_BUILTIN_SYMBOL;
 800dcee:	89fb      	ldrh	r3, [r7, #14]
 800dcf0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	b21b      	sxth	r3, r3
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <make_nested_symbol_s>:
  @param  buf		output buffer.
  @param  id1		parent class symbol id
  @param  id2		target symbol id
*/
void make_nested_symbol_s( char *buf, mrbc_sym id1, mrbc_sym id2 )
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	807b      	strh	r3, [r7, #2]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	803b      	strh	r3, [r7, #0]
  static const int w = sizeof(mrbc_sym) * 2;
  char *p = buf + w * 2;
 800dd10:	4b22      	ldr	r3, [pc, #136]	; (800dd9c <make_nested_symbol_s+0x9c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	005b      	lsls	r3, r3, #1
 800dd16:	461a      	mov	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	60fb      	str	r3, [r7, #12]
  *p = 0;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2200      	movs	r2, #0
 800dd22:	701a      	strb	r2, [r3, #0]

  int i;
  for( i = w; i > 0; i-- ) {
 800dd24:	4b1d      	ldr	r3, [pc, #116]	; (800dd9c <make_nested_symbol_s+0x9c>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	60bb      	str	r3, [r7, #8]
 800dd2a:	e012      	b.n	800dd52 <make_nested_symbol_s+0x52>
    *--p = '0' + (id2 & 0x0f);
 800dd2c:	883b      	ldrh	r3, [r7, #0]
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	f003 030f 	and.w	r3, r3, #15
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	3a01      	subs	r2, #1
 800dd3a:	60fa      	str	r2, [r7, #12]
 800dd3c:	3330      	adds	r3, #48	; 0x30
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	701a      	strb	r2, [r3, #0]
    id2 >>= 4;
 800dd44:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dd48:	111b      	asrs	r3, r3, #4
 800dd4a:	803b      	strh	r3, [r7, #0]
  for( i = w; i > 0; i-- ) {
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	3b01      	subs	r3, #1
 800dd50:	60bb      	str	r3, [r7, #8]
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	dce9      	bgt.n	800dd2c <make_nested_symbol_s+0x2c>
  }

  for( i = w; i > 0; i-- ) {
 800dd58:	4b10      	ldr	r3, [pc, #64]	; (800dd9c <make_nested_symbol_s+0x9c>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	60bb      	str	r3, [r7, #8]
 800dd5e:	e012      	b.n	800dd86 <make_nested_symbol_s+0x86>
    *--p = '0' + (id1 & 0x0f);
 800dd60:	887b      	ldrh	r3, [r7, #2]
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	f003 030f 	and.w	r3, r3, #15
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	3a01      	subs	r2, #1
 800dd6e:	60fa      	str	r2, [r7, #12]
 800dd70:	3330      	adds	r3, #48	; 0x30
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	701a      	strb	r2, [r3, #0]
    id1 >>= 4;
 800dd78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd7c:	111b      	asrs	r3, r3, #4
 800dd7e:	807b      	strh	r3, [r7, #2]
  for( i = w; i > 0; i-- ) {
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	60bb      	str	r3, [r7, #8]
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	dce9      	bgt.n	800dd60 <make_nested_symbol_s+0x60>
  }
}
 800dd8c:	bf00      	nop
 800dd8e:	bf00      	nop
 800dd90:	3714      	adds	r7, #20
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	0801be68 	.word	0x0801be68

0800dda0 <mrbc_separate_nested_symid>:
  @param [out]	id1	result 1
  @param [out]	id2	result 2
  @see	make_nested_symbol_s
*/
void mrbc_separate_nested_symid(mrbc_sym sym_id, mrbc_sym *id1, mrbc_sym *id2)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	4603      	mov	r3, r0
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
 800ddac:	81fb      	strh	r3, [r7, #14]
  static const int w = sizeof(mrbc_sym) * 2;
  const char *s = mrbc_symid_to_str(sym_id);
 800ddae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7ff ff44 	bl	800dc40 <mrbc_symid_to_str>
 800ddb8:	6138      	str	r0, [r7, #16]

  assert( mrbc_is_nested_symid( sym_id ));
 800ddba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7ff fdc0 	bl	800d944 <mrbc_is_nested_symid>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d106      	bne.n	800ddd8 <mrbc_separate_nested_symid+0x38>
 800ddca:	4b2f      	ldr	r3, [pc, #188]	; (800de88 <mrbc_separate_nested_symid+0xe8>)
 800ddcc:	4a2f      	ldr	r2, [pc, #188]	; (800de8c <mrbc_separate_nested_symid+0xec>)
 800ddce:	f240 113d 	movw	r1, #317	; 0x13d
 800ddd2:	482f      	ldr	r0, [pc, #188]	; (800de90 <mrbc_separate_nested_symid+0xf0>)
 800ddd4:	f007 fc36 	bl	8015644 <__assert_func>
  assert( strlen(s) == w*2 );
 800ddd8:	6938      	ldr	r0, [r7, #16]
 800ddda:	f7f2 fa0b 	bl	80001f4 <strlen>
 800ddde:	4602      	mov	r2, r0
 800dde0:	4b2c      	ldr	r3, [pc, #176]	; (800de94 <mrbc_separate_nested_symid+0xf4>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	005b      	lsls	r3, r3, #1
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d006      	beq.n	800ddf8 <mrbc_separate_nested_symid+0x58>
 800ddea:	4b2b      	ldr	r3, [pc, #172]	; (800de98 <mrbc_separate_nested_symid+0xf8>)
 800ddec:	4a27      	ldr	r2, [pc, #156]	; (800de8c <mrbc_separate_nested_symid+0xec>)
 800ddee:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800ddf2:	4827      	ldr	r0, [pc, #156]	; (800de90 <mrbc_separate_nested_symid+0xf0>)
 800ddf4:	f007 fc26 	bl	8015644 <__assert_func>

  *id1 = 0;
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	801a      	strh	r2, [r3, #0]
  int i = 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	617b      	str	r3, [r7, #20]
  while( i < w ) {
 800de02:	e014      	b.n	800de2e <mrbc_separate_nested_symid+0x8e>
    *id1 = (*id1 << 4) + (s[i++] - '0');
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	011b      	lsls	r3, r3, #4
 800de0e:	b29a      	uxth	r2, r3
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	1c59      	adds	r1, r3, #1
 800de14:	6179      	str	r1, [r7, #20]
 800de16:	4619      	mov	r1, r3
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	440b      	add	r3, r1
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	b29b      	uxth	r3, r3
 800de20:	4413      	add	r3, r2
 800de22:	b29b      	uxth	r3, r3
 800de24:	3b30      	subs	r3, #48	; 0x30
 800de26:	b29b      	uxth	r3, r3
 800de28:	b21a      	sxth	r2, r3
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	801a      	strh	r2, [r3, #0]
  while( i < w ) {
 800de2e:	4b19      	ldr	r3, [pc, #100]	; (800de94 <mrbc_separate_nested_symid+0xf4>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	429a      	cmp	r2, r3
 800de36:	dbe5      	blt.n	800de04 <mrbc_separate_nested_symid+0x64>
  }

  if( id2 == NULL ) return;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d01f      	beq.n	800de7e <mrbc_separate_nested_symid+0xde>
  *id2 = 0;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	801a      	strh	r2, [r3, #0]
  while( i < w*2 ) {
 800de44:	e014      	b.n	800de70 <mrbc_separate_nested_symid+0xd0>
    *id2 = (*id2 << 4) + (s[i++] - '0');
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	011b      	lsls	r3, r3, #4
 800de50:	b29a      	uxth	r2, r3
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	1c59      	adds	r1, r3, #1
 800de56:	6179      	str	r1, [r7, #20]
 800de58:	4619      	mov	r1, r3
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	440b      	add	r3, r1
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	b29b      	uxth	r3, r3
 800de62:	4413      	add	r3, r2
 800de64:	b29b      	uxth	r3, r3
 800de66:	3b30      	subs	r3, #48	; 0x30
 800de68:	b29b      	uxth	r3, r3
 800de6a:	b21a      	sxth	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	801a      	strh	r2, [r3, #0]
  while( i < w*2 ) {
 800de70:	4b08      	ldr	r3, [pc, #32]	; (800de94 <mrbc_separate_nested_symid+0xf4>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	697a      	ldr	r2, [r7, #20]
 800de78:	429a      	cmp	r2, r3
 800de7a:	dbe4      	blt.n	800de46 <mrbc_separate_nested_symid+0xa6>
 800de7c:	e000      	b.n	800de80 <mrbc_separate_nested_symid+0xe0>
  if( id2 == NULL ) return;
 800de7e:	bf00      	nop
  }
}
 800de80:	3718      	adds	r7, #24
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	0801a194 	.word	0x0801a194
 800de8c:	0801be6c 	.word	0x0801be6c
 800de90:	0801a1b4 	.word	0x0801a1b4
 800de94:	0801be88 	.word	0x0801be88
 800de98:	0801a1d0 	.word	0x0801a1d0

0800de9c <mrbc_symbol_new>:
  @param  vm	pointer to VM.
  @param  str	String
  @return 	symbol object
*/
mrbc_value mrbc_symbol_new(struct VM *vm, const char *str)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b094      	sub	sp, #80	; 0x50
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
  mrbc_sym sym_id = mrbc_search_symid( str );
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f7ff fefd 	bl	800dca8 <mrbc_search_symid>
 800deae:	4603      	mov	r3, r0
 800deb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  if( sym_id >= 0 ) goto DONE;
 800deb4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800deb8:	2b00      	cmp	r3, #0
 800deba:	da46      	bge.n	800df4a <mrbc_symbol_new+0xae>

  // create symbol object dynamically.
  int size = strlen(str) + 1;
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7f2 f999 	bl	80001f4 <strlen>
 800dec2:	4603      	mov	r3, r0
 800dec4:	3301      	adds	r3, #1
 800dec6:	64bb      	str	r3, [r7, #72]	; 0x48
  char *buf = mrbc_raw_alloc_no_free(size);
 800dec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deca:	4618      	mov	r0, r3
 800decc:	f7f3 ff5c 	bl	8001d88 <mrbc_raw_alloc_no_free>
 800ded0:	6478      	str	r0, [r7, #68]	; 0x44
  if( buf == NULL ) return mrbc_nil_value();	// ENOMEM raise?
 800ded2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d10a      	bne.n	800deee <mrbc_symbol_new+0x52>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	461a      	mov	r2, r3
 800dedc:	2300      	movs	r3, #0
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	6053      	str	r3, [r2, #4]
 800dee2:	6093      	str	r3, [r2, #8]
 800dee4:	60d3      	str	r3, [r2, #12]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2201      	movs	r2, #1
 800deea:	701a      	strb	r2, [r3, #0]

  sym_id += OFFSET_BUILTIN_SYMBOL;

 DONE:
  return mrbc_symbol_value( sym_id );
}
 800deec:	e03c      	b.n	800df68 <mrbc_symbol_new+0xcc>
  memcpy(buf, str, size);
 800deee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800def0:	461a      	mov	r2, r3
 800def2:	6879      	ldr	r1, [r7, #4]
 800def4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800def6:	f008 fc7e 	bl	80167f6 <memcpy>
  sym_id = add_index( calc_hash(buf), buf );
 800defa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800defc:	f7ff fd67 	bl	800d9ce <calc_hash>
 800df00:	4603      	mov	r3, r0
 800df02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff fe03 	bl	800db10 <add_index>
 800df0a:	4603      	mov	r3, r0
 800df0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  if( sym_id < 0 ) {
 800df10:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800df14:	2b00      	cmp	r3, #0
 800df16:	da10      	bge.n	800df3a <mrbc_symbol_new+0x9e>
    mrbc_raisef(vm, MRBC_CLASS(Exception),
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	4a15      	ldr	r2, [pc, #84]	; (800df70 <mrbc_symbol_new+0xd4>)
 800df1c:	4915      	ldr	r1, [pc, #84]	; (800df74 <mrbc_symbol_new+0xd8>)
 800df1e:	68b8      	ldr	r0, [r7, #8]
 800df20:	f7fd fad6 	bl	800b4d0 <mrbc_raisef>
    return mrbc_nil_value();
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	461a      	mov	r2, r3
 800df28:	2300      	movs	r3, #0
 800df2a:	6013      	str	r3, [r2, #0]
 800df2c:	6053      	str	r3, [r2, #4]
 800df2e:	6093      	str	r3, [r2, #8]
 800df30:	60d3      	str	r3, [r2, #12]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2201      	movs	r2, #1
 800df36:	701a      	strb	r2, [r3, #0]
}
 800df38:	e016      	b.n	800df68 <mrbc_symbol_new+0xcc>
  sym_id += OFFSET_BUILTIN_SYMBOL;
 800df3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800df3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800df42:	b29b      	uxth	r3, r3
 800df44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800df48:	e000      	b.n	800df4c <mrbc_symbol_new+0xb0>
  if( sym_id >= 0 ) goto DONE;
 800df4a:	bf00      	nop
  return mrbc_symbol_value( sym_id );
 800df4c:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	461a      	mov	r2, r3
 800df54:	2300      	movs	r3, #0
 800df56:	6013      	str	r3, [r2, #0]
 800df58:	6053      	str	r3, [r2, #4]
 800df5a:	6093      	str	r3, [r2, #8]
 800df5c:	60d3      	str	r3, [r2, #12]
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2206      	movs	r2, #6
 800df62:	701a      	strb	r2, [r3, #0]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6099      	str	r1, [r3, #8]
}
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	3750      	adds	r7, #80	; 0x50
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	0801a1e4 	.word	0x0801a1e4
 800df74:	2000010c 	.word	0x2000010c

0800df78 <c_symbol_all_symbols>:

//================================================================
/*! (method) all_symbols
*/
static void c_symbol_all_symbols(struct VM *vm, mrbc_value v[], int argc)
{
 800df78:	b590      	push	{r4, r7, lr}
 800df7a:	b097      	sub	sp, #92	; 0x5c
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new(vm, sym_index_pos);
 800df84:	4b2d      	ldr	r3, [pc, #180]	; (800e03c <c_symbol_all_symbols+0xc4>)
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df8c:	68f9      	ldr	r1, [r7, #12]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f4 f9e1 	bl	8002356 <mrbc_array_new>

  int i;
  for( i = 0; i < sizeof(builtin_symbols) / sizeof(builtin_symbols[0]); i++ ) {
 800df94:	2300      	movs	r3, #0
 800df96:	657b      	str	r3, [r7, #84]	; 0x54
 800df98:	e016      	b.n	800dfc8 <c_symbol_all_symbols+0x50>
    mrbc_array_push(&ret, &mrbc_symbol_value(i));
 800df9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df9e:	2200      	movs	r2, #0
 800dfa0:	601a      	str	r2, [r3, #0]
 800dfa2:	605a      	str	r2, [r3, #4]
 800dfa4:	609a      	str	r2, [r3, #8]
 800dfa6:	60da      	str	r2, [r3, #12]
 800dfa8:	2306      	movs	r3, #6
 800dfaa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800dfae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800dfb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dfb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dfba:	4611      	mov	r1, r2
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7f4 fafa 	bl	80025b6 <mrbc_array_push>
  for( i = 0; i < sizeof(builtin_symbols) / sizeof(builtin_symbols[0]); i++ ) {
 800dfc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	657b      	str	r3, [r7, #84]	; 0x54
 800dfc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfca:	2bd2      	cmp	r3, #210	; 0xd2
 800dfcc:	d9e5      	bls.n	800df9a <c_symbol_all_symbols+0x22>
  }

  for( i = 0; i < sym_index_pos; i++ ) {
 800dfce:	2300      	movs	r3, #0
 800dfd0:	657b      	str	r3, [r7, #84]	; 0x54
 800dfd2:	e018      	b.n	800e006 <c_symbol_all_symbols+0x8e>
    mrbc_array_push(&ret, &mrbc_symbol_value(i + OFFSET_BUILTIN_SYMBOL));
 800dfd4:	f107 0320 	add.w	r3, r7, #32
 800dfd8:	2200      	movs	r2, #0
 800dfda:	601a      	str	r2, [r3, #0]
 800dfdc:	605a      	str	r2, [r3, #4]
 800dfde:	609a      	str	r2, [r3, #8]
 800dfe0:	60da      	str	r2, [r3, #12]
 800dfe2:	2306      	movs	r3, #6
 800dfe4:	f887 3020 	strb.w	r3, [r7, #32]
 800dfe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dfee:	62bb      	str	r3, [r7, #40]	; 0x28
 800dff0:	f107 0220 	add.w	r2, r7, #32
 800dff4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dff8:	4611      	mov	r1, r2
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7f4 fadb 	bl	80025b6 <mrbc_array_push>
  for( i = 0; i < sym_index_pos; i++ ) {
 800e000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e002:	3301      	adds	r3, #1
 800e004:	657b      	str	r3, [r7, #84]	; 0x54
 800e006:	4b0d      	ldr	r3, [pc, #52]	; (800e03c <c_symbol_all_symbols+0xc4>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e00c:	429a      	cmp	r2, r3
 800e00e:	dbe1      	blt.n	800dfd4 <c_symbol_all_symbols+0x5c>
  }
  SET_RETURN(ret);
 800e010:	f107 0410 	add.w	r4, r7, #16
 800e014:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e01a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e01e:	68b8      	ldr	r0, [r7, #8]
 800e020:	f7ff fc4a 	bl	800d8b8 <mrbc_decref>
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	461c      	mov	r4, r3
 800e028:	f107 0310 	add.w	r3, r7, #16
 800e02c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e02e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800e032:	bf00      	nop
 800e034:	375c      	adds	r7, #92	; 0x5c
 800e036:	46bd      	mov	sp, r7
 800e038:	bd90      	pop	{r4, r7, pc}
 800e03a:	bf00      	nop
 800e03c:	2000884c 	.word	0x2000884c

0800e040 <c_symbol_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect
*/
static void c_symbol_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 800e040:	b590      	push	{r4, r7, lr}
 800e042:	b08b      	sub	sp, #44	; 0x2c
 800e044:	af00      	add	r7, sp, #0
 800e046:	61f8      	str	r0, [r7, #28]
 800e048:	61b9      	str	r1, [r7, #24]
 800e04a:	617a      	str	r2, [r7, #20]
  const char *s = mrbc_symid_to_str( mrbc_symbol(v[0]) );
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	b21b      	sxth	r3, r3
 800e052:	4618      	mov	r0, r3
 800e054:	f7ff fdf4 	bl	800dc40 <mrbc_symid_to_str>
 800e058:	6278      	str	r0, [r7, #36]	; 0x24
  v[0] = mrbc_string_new_cstr(vm, ":");
 800e05a:	69bc      	ldr	r4, [r7, #24]
 800e05c:	463b      	mov	r3, r7
 800e05e:	4a08      	ldr	r2, [pc, #32]	; (800e080 <c_symbol_inspect+0x40>)
 800e060:	69f9      	ldr	r1, [r7, #28]
 800e062:	4618      	mov	r0, r3
 800e064:	f7ff fc88 	bl	800d978 <mrbc_string_new_cstr>
 800e068:	463b      	mov	r3, r7
 800e06a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e06c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_string_append_cstr(&v[0], s);
 800e070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e072:	69b8      	ldr	r0, [r7, #24]
 800e074:	f7ff fc98 	bl	800d9a8 <mrbc_string_append_cstr>
}
 800e078:	bf00      	nop
 800e07a:	372c      	adds	r7, #44	; 0x2c
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd90      	pop	{r4, r7, pc}
 800e080:	0801a208 	.word	0x0801a208

0800e084 <c_symbol_to_s>:

//================================================================
/*! (method) to_s
*/
static void c_symbol_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 800e084:	b590      	push	{r4, r7, lr}
 800e086:	b089      	sub	sp, #36	; 0x24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	61f8      	str	r0, [r7, #28]
 800e08c:	61b9      	str	r1, [r7, #24]
 800e08e:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	f993 3000 	ldrsb.w	r3, [r3]
 800e096:	2b07      	cmp	r3, #7
 800e098:	d112      	bne.n	800e0c0 <c_symbol_to_s+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7ff fdcc 	bl	800dc40 <mrbc_symid_to_str>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	69bc      	ldr	r4, [r7, #24]
 800e0ac:	463b      	mov	r3, r7
 800e0ae:	69f9      	ldr	r1, [r7, #28]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff fc61 	bl	800d978 <mrbc_string_new_cstr>
 800e0b6:	463b      	mov	r3, r7
 800e0b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 800e0be:	e010      	b.n	800e0e2 <c_symbol_to_s+0x5e>
  }

  v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( mrbc_symbol(v[0]) ));
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	b21b      	sxth	r3, r3
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff fdba 	bl	800dc40 <mrbc_symid_to_str>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	69bc      	ldr	r4, [r7, #24]
 800e0d0:	463b      	mov	r3, r7
 800e0d2:	69f9      	ldr	r1, [r7, #28]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7ff fc4f 	bl	800d978 <mrbc_string_new_cstr>
 800e0da:	463b      	mov	r3, r7
 800e0dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800e0e2:	3724      	adds	r7, #36	; 0x24
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd90      	pop	{r4, r7, pc}

0800e0e8 <mrbc_string_compare>:
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
  int len = (v1->string->size < v2->string->size) ?
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	689b      	ldr	r3, [r3, #8]
 800e0f6:	889a      	ldrh	r2, [r3, #4]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	889b      	ldrh	r3, [r3, #4]
    v1->string->size : v2->string->size;
 800e0fe:	4293      	cmp	r3, r2
 800e100:	bf28      	it	cs
 800e102:	4613      	movcs	r3, r2
 800e104:	b29b      	uxth	r3, r3
  int len = (v1->string->size < v2->string->size) ?
 800e106:	60fb      	str	r3, [r7, #12]
  int res = memcmp(v1->string->data, v2->string->data, len);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	6898      	ldr	r0, [r3, #8]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	4619      	mov	r1, r3
 800e118:	f008 faa9 	bl	801666e <memcmp>
 800e11c:	60b8      	str	r0, [r7, #8]
  if( res != 0 ) return res;
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <mrbc_string_compare+0x40>
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	e007      	b.n	800e138 <mrbc_string_compare+0x50>
  return v1->string->size - v2->string->size;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	889b      	ldrh	r3, [r3, #4]
 800e12e:	461a      	mov	r2, r3
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	889b      	ldrh	r3, [r3, #4]
 800e136:	1ad3      	subs	r3, r2, r3
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3710      	adds	r7, #16
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <mrbc_compare>:
  @retval 0	v1 == v2
  @retval plus	v1 >  v2
  @retval minus	v1 <  v2
*/
int mrbc_compare(const mrbc_value *v1, const mrbc_value *v2)
{
 800e140:	b590      	push	{r4, r7, lr}
 800e142:	b08d      	sub	sp, #52	; 0x34
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
#if MRBC_USE_FLOAT
  mrbc_float_t d1, d2;
#endif

  // if TT_XXX is different
  if( mrbc_type(*v1) != mrbc_type(*v2) ) {
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f993 2000 	ldrsb.w	r2, [r3]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	f993 3000 	ldrsb.w	r3, [r3]
 800e156:	429a      	cmp	r2, r3
 800e158:	d050      	beq.n	800e1fc <mrbc_compare+0xbc>
#if MRBC_USE_FLOAT
    // but Numeric?
    if( mrbc_type(*v1) == MRBC_TT_INTEGER && mrbc_type(*v2) == MRBC_TT_FLOAT ) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f993 3000 	ldrsb.w	r3, [r3]
 800e160:	2b04      	cmp	r3, #4
 800e162:	d113      	bne.n	800e18c <mrbc_compare+0x4c>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	f993 3000 	ldrsb.w	r3, [r3]
 800e16a:	2b05      	cmp	r3, #5
 800e16c:	d10e      	bne.n	800e18c <mrbc_compare+0x4c>
      d1 = v1->i;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	4618      	mov	r0, r3
 800e174:	f7f2 f9ee 	bl	8000554 <__aeabi_i2d>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      d2 = v2->d;
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e186:	e9c7 2308 	strd	r2, r3, [r7, #32]
      goto CMP_FLOAT;
 800e18a:	e0cf      	b.n	800e32c <mrbc_compare+0x1ec>
    }
    if( mrbc_type(*v1) == MRBC_TT_FLOAT && mrbc_type(*v2) == MRBC_TT_INTEGER ) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f993 3000 	ldrsb.w	r3, [r3]
 800e192:	2b05      	cmp	r3, #5
 800e194:	d113      	bne.n	800e1be <mrbc_compare+0x7e>
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	f993 3000 	ldrsb.w	r3, [r3]
 800e19c:	2b04      	cmp	r3, #4
 800e19e:	d10e      	bne.n	800e1be <mrbc_compare+0x7e>
      d1 = v1->d;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e1a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      d2 = v2->i;
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	689b      	ldr	r3, [r3, #8]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7f2 f9d0 	bl	8000554 <__aeabi_i2d>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
      goto CMP_FLOAT;
 800e1bc:	e0b6      	b.n	800e32c <mrbc_compare+0x1ec>
    }
#endif

    // leak Empty?
    if((mrbc_type(*v1) == MRBC_TT_EMPTY && mrbc_type(*v2) == MRBC_TT_NIL) ||
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f993 3000 	ldrsb.w	r3, [r3]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d104      	bne.n	800e1d2 <mrbc_compare+0x92>
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	f993 3000 	ldrsb.w	r3, [r3]
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d009      	beq.n	800e1e6 <mrbc_compare+0xa6>
       (mrbc_type(*v1) == MRBC_TT_NIL   && mrbc_type(*v2) == MRBC_TT_EMPTY)) return 0;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f993 3000 	ldrsb.w	r3, [r3]
    if((mrbc_type(*v1) == MRBC_TT_EMPTY && mrbc_type(*v2) == MRBC_TT_NIL) ||
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d106      	bne.n	800e1ea <mrbc_compare+0xaa>
       (mrbc_type(*v1) == MRBC_TT_NIL   && mrbc_type(*v2) == MRBC_TT_EMPTY)) return 0;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	f993 3000 	ldrsb.w	r3, [r3]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d101      	bne.n	800e1ea <mrbc_compare+0xaa>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	e0ba      	b.n	800e360 <mrbc_compare+0x220>

    // other case
    return mrbc_type(*v1) - mrbc_type(*v2);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f993 3000 	ldrsb.w	r3, [r3]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	f993 3000 	ldrsb.w	r3, [r3]
 800e1f8:	1ad3      	subs	r3, r2, r3
 800e1fa:	e0b1      	b.n	800e360 <mrbc_compare+0x220>
  }

  // check value
  switch( mrbc_type(*v1) ) {
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f993 3000 	ldrsb.w	r3, [r3]
 800e202:	3b01      	subs	r3, #1
 800e204:	2b0c      	cmp	r3, #12
 800e206:	f200 808f 	bhi.w	800e328 <mrbc_compare+0x1e8>
 800e20a:	a201      	add	r2, pc, #4	; (adr r2, 800e210 <mrbc_compare+0xd0>)
 800e20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e210:	0800e245 	.word	0x0800e245
 800e214:	0800e245 	.word	0x0800e245
 800e218:	0800e245 	.word	0x0800e245
 800e21c:	0800e249 	.word	0x0800e249
 800e220:	0800e2bb 	.word	0x0800e2bb
 800e224:	0800e255 	.word	0x0800e255
 800e228:	0800e2d1 	.word	0x0800e2d1
 800e22c:	0800e2d1 	.word	0x0800e2d1
 800e230:	0800e2d1 	.word	0x0800e2d1
 800e234:	0800e2f9 	.word	0x0800e2f9
 800e238:	0800e305 	.word	0x0800e305
 800e23c:	0800e311 	.word	0x0800e311
 800e240:	0800e31d 	.word	0x0800e31d
  case MRBC_TT_NIL:
  case MRBC_TT_FALSE:
  case MRBC_TT_TRUE:
    return 0;
 800e244:	2300      	movs	r3, #0
 800e246:	e08b      	b.n	800e360 <mrbc_compare+0x220>

  case MRBC_TT_INTEGER:
    return mrbc_integer(*v1) - mrbc_integer(*v2);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	e085      	b.n	800e360 <mrbc_compare+0x220>

  case MRBC_TT_SYMBOL: {
    const char *str1 = mrbc_symid_to_str(mrbc_symbol(*v1));
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	b21b      	sxth	r3, r3
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7ff fcf0 	bl	800dc40 <mrbc_symid_to_str>
 800e260:	61f8      	str	r0, [r7, #28]
    const char *str2 = mrbc_symid_to_str(mrbc_symbol(*v2));
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	b21b      	sxth	r3, r3
 800e268:	4618      	mov	r0, r3
 800e26a:	f7ff fce9 	bl	800dc40 <mrbc_symid_to_str>
 800e26e:	61b8      	str	r0, [r7, #24]
    int diff = strlen(str1) - strlen(str2);
 800e270:	69f8      	ldr	r0, [r7, #28]
 800e272:	f7f1 ffbf 	bl	80001f4 <strlen>
 800e276:	4604      	mov	r4, r0
 800e278:	69b8      	ldr	r0, [r7, #24]
 800e27a:	f7f1 ffbb 	bl	80001f4 <strlen>
 800e27e:	4603      	mov	r3, r0
 800e280:	1ae3      	subs	r3, r4, r3
 800e282:	617b      	str	r3, [r7, #20]
    int len = diff < 0 ? strlen(str1) : strlen(str2);
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	2b00      	cmp	r3, #0
 800e288:	da04      	bge.n	800e294 <mrbc_compare+0x154>
 800e28a:	69f8      	ldr	r0, [r7, #28]
 800e28c:	f7f1 ffb2 	bl	80001f4 <strlen>
 800e290:	4603      	mov	r3, r0
 800e292:	e003      	b.n	800e29c <mrbc_compare+0x15c>
 800e294:	69b8      	ldr	r0, [r7, #24]
 800e296:	f7f1 ffad 	bl	80001f4 <strlen>
 800e29a:	4603      	mov	r3, r0
 800e29c:	613b      	str	r3, [r7, #16]
    int res = memcmp(str1, str2, len);
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	69b9      	ldr	r1, [r7, #24]
 800e2a4:	69f8      	ldr	r0, [r7, #28]
 800e2a6:	f008 f9e2 	bl	801666e <memcmp>
 800e2aa:	60f8      	str	r0, [r7, #12]
    return (res != 0) ? res : diff;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <mrbc_compare+0x176>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	e054      	b.n	800e360 <mrbc_compare+0x220>
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	e052      	b.n	800e360 <mrbc_compare+0x220>
  }

#if MRBC_USE_FLOAT
  case MRBC_TT_FLOAT:
    d1 = mrbc_float(*v1);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e2c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    d2 = mrbc_float(*v2);
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e2ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    goto CMP_FLOAT;
 800e2ce:	e02d      	b.n	800e32c <mrbc_compare+0x1ec>
#endif

  case MRBC_TT_CLASS:
  case MRBC_TT_OBJECT:
  case MRBC_TT_PROC:
    return (v1->cls > v2->cls) * 2 - (v1->cls != v2->cls);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	689a      	ldr	r2, [r3, #8]
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d901      	bls.n	800e2e0 <mrbc_compare+0x1a0>
 800e2dc:	2302      	movs	r3, #2
 800e2de:	e000      	b.n	800e2e2 <mrbc_compare+0x1a2>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	6891      	ldr	r1, [r2, #8]
 800e2e6:	683a      	ldr	r2, [r7, #0]
 800e2e8:	6892      	ldr	r2, [r2, #8]
 800e2ea:	4291      	cmp	r1, r2
 800e2ec:	bf14      	ite	ne
 800e2ee:	2201      	movne	r2, #1
 800e2f0:	2200      	moveq	r2, #0
 800e2f2:	b2d2      	uxtb	r2, r2
 800e2f4:	1a9b      	subs	r3, r3, r2
 800e2f6:	e033      	b.n	800e360 <mrbc_compare+0x220>

  case MRBC_TT_ARRAY:
    return mrbc_array_compare( v1, v2 );
 800e2f8:	6839      	ldr	r1, [r7, #0]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7f4 fb49 	bl	8002992 <mrbc_array_compare>
 800e300:	4603      	mov	r3, r0
 800e302:	e02d      	b.n	800e360 <mrbc_compare+0x220>

#if MRBC_USE_STRING
  case MRBC_TT_STRING:
    return mrbc_string_compare( v1, v2 );
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7ff feee 	bl	800e0e8 <mrbc_string_compare>
 800e30c:	4603      	mov	r3, r0
 800e30e:	e027      	b.n	800e360 <mrbc_compare+0x220>
#endif

  case MRBC_TT_RANGE:
    return mrbc_range_compare( v1, v2 );
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7f8 fcd4 	bl	8006cc0 <mrbc_range_compare>
 800e318:	4603      	mov	r3, r0
 800e31a:	e021      	b.n	800e360 <mrbc_compare+0x220>

  case MRBC_TT_HASH:
    return mrbc_hash_compare( v1, v2 );
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7f5 ff33 	bl	800418a <mrbc_hash_compare>
 800e324:	4603      	mov	r3, r0
 800e326:	e01b      	b.n	800e360 <mrbc_compare+0x220>

  default:
    return 1;
 800e328:	2301      	movs	r3, #1
 800e32a:	e019      	b.n	800e360 <mrbc_compare+0x220>
  }

#if MRBC_USE_FLOAT
 CMP_FLOAT:
  return -1 + (d1 == d2) + (d1 > d2)*2;	// caution: NaN == NaN is false
 800e32c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e330:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e334:	f7f2 fbe0 	bl	8000af8 <__aeabi_dcmpeq>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d001      	beq.n	800e342 <mrbc_compare+0x202>
 800e33e:	2400      	movs	r4, #0
 800e340:	e001      	b.n	800e346 <mrbc_compare+0x206>
 800e342:	f04f 34ff 	mov.w	r4, #4294967295
 800e346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e34a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e34e:	f7f2 fbfb 	bl	8000b48 <__aeabi_dcmpgt>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <mrbc_compare+0x21c>
 800e358:	2302      	movs	r3, #2
 800e35a:	e000      	b.n	800e35e <mrbc_compare+0x21e>
 800e35c:	2300      	movs	r3, #0
 800e35e:	4423      	add	r3, r4
#endif
}
 800e360:	4618      	mov	r0, r3
 800e362:	3734      	adds	r7, #52	; 0x34
 800e364:	46bd      	mov	sp, r7
 800e366:	bd90      	pop	{r4, r7, pc}

0800e368 <mrbc_atoi>:
  @param  s	source string.
  @param  base	n base.
  @return	result.
*/
mrbc_int_t mrbc_atoi( const char *s, int base )
{
 800e368:	b480      	push	{r7}
 800e36a:	b087      	sub	sp, #28
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  int ret = 0;
 800e372:	2300      	movs	r3, #0
 800e374:	617b      	str	r3, [r7, #20]
  int sign = 0;
 800e376:	2300      	movs	r3, #0
 800e378:	613b      	str	r3, [r7, #16]

 REDO:
  switch( *s ) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	2b2d      	cmp	r3, #45	; 0x2d
 800e380:	d006      	beq.n	800e390 <mrbc_atoi+0x28>
 800e382:	2b2d      	cmp	r3, #45	; 0x2d
 800e384:	dc31      	bgt.n	800e3ea <mrbc_atoi+0x82>
 800e386:	2b20      	cmp	r3, #32
 800e388:	d008      	beq.n	800e39c <mrbc_atoi+0x34>
 800e38a:	2b2b      	cmp	r3, #43	; 0x2b
 800e38c:	d002      	beq.n	800e394 <mrbc_atoi+0x2c>
 800e38e:	e009      	b.n	800e3a4 <mrbc_atoi+0x3c>
  case '-':
    sign = 1;
 800e390:	2301      	movs	r3, #1
 800e392:	613b      	str	r3, [r7, #16]
    // fall through.
  case '+':
    s++;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3301      	adds	r3, #1
 800e398:	607b      	str	r3, [r7, #4]
    break;
 800e39a:	e003      	b.n	800e3a4 <mrbc_atoi+0x3c>

  case ' ':
    s++;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	607b      	str	r3, [r7, #4]
    goto REDO;
 800e3a2:	e7ea      	b.n	800e37a <mrbc_atoi+0x12>
  }

  int ch;
  while( (ch = *s++) != '\0' ) {
 800e3a4:	e021      	b.n	800e3ea <mrbc_atoi+0x82>
    int n;

    if( 'a' <= ch ) {
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2b60      	cmp	r3, #96	; 0x60
 800e3aa:	dd03      	ble.n	800e3b4 <mrbc_atoi+0x4c>
      n = ch - 'a' + 10;
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	3b57      	subs	r3, #87	; 0x57
 800e3b0:	60fb      	str	r3, [r7, #12]
 800e3b2:	e00f      	b.n	800e3d4 <mrbc_atoi+0x6c>
    } else
    if( 'A' <= ch ) {
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2b40      	cmp	r3, #64	; 0x40
 800e3b8:	dd03      	ble.n	800e3c2 <mrbc_atoi+0x5a>
      n = ch - 'A' + 10;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	3b37      	subs	r3, #55	; 0x37
 800e3be:	60fb      	str	r3, [r7, #12]
 800e3c0:	e008      	b.n	800e3d4 <mrbc_atoi+0x6c>
    } else
    if( '0' <= ch && ch <= '9' ) {
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b2f      	cmp	r3, #47	; 0x2f
 800e3c6:	dd1a      	ble.n	800e3fe <mrbc_atoi+0x96>
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2b39      	cmp	r3, #57	; 0x39
 800e3cc:	dc17      	bgt.n	800e3fe <mrbc_atoi+0x96>
      n = ch - '0';
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	3b30      	subs	r3, #48	; 0x30
 800e3d2:	60fb      	str	r3, [r7, #12]
    } else {
      break;
    }
    if( n >= base ) break;
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	da0f      	bge.n	800e3fc <mrbc_atoi+0x94>

    ret = ret * base + n;
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	fb02 f303 	mul.w	r3, r2, r3
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	617b      	str	r3, [r7, #20]
  while( (ch = *s++) != '\0' ) {
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	607a      	str	r2, [r7, #4]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	60bb      	str	r3, [r7, #8]
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1d5      	bne.n	800e3a6 <mrbc_atoi+0x3e>
 800e3fa:	e000      	b.n	800e3fe <mrbc_atoi+0x96>
    if( n >= base ) break;
 800e3fc:	bf00      	nop
  }

  if( sign ) ret = -ret;
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d002      	beq.n	800e40a <mrbc_atoi+0xa2>
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	425b      	negs	r3, r3
 800e408:	617b      	str	r3, [r7, #20]

  return ret;
 800e40a:	697b      	ldr	r3, [r7, #20]
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	371c      	adds	r7, #28
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <mrbc_strcpy>:
  @param  destsize	buffer size.
  @param  src		source.
  @return int		number of bytes copied.
*/
int mrbc_strcpy( char *dest, int destsize, const char *src )
{
 800e418:	b480      	push	{r7}
 800e41a:	b087      	sub	sp, #28
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]
  int n = destsize;
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	617b      	str	r3, [r7, #20]
  if( n <= 0 ) return 0;
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	dc0c      	bgt.n	800e448 <mrbc_strcpy+0x30>
 800e42e:	2300      	movs	r3, #0
 800e430:	e019      	b.n	800e466 <mrbc_strcpy+0x4e>

  while( --n != 0 ) {
    if( (*dest++ = *src++) == 0 ) goto RETURN;
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	1c53      	adds	r3, r2, #1
 800e436:	607b      	str	r3, [r7, #4]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	1c59      	adds	r1, r3, #1
 800e43c:	60f9      	str	r1, [r7, #12]
 800e43e:	7812      	ldrb	r2, [r2, #0]
 800e440:	701a      	strb	r2, [r3, #0]
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d009      	beq.n	800e45c <mrbc_strcpy+0x44>
  while( --n != 0 ) {
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	3b01      	subs	r3, #1
 800e44c:	617b      	str	r3, [r7, #20]
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d1ee      	bne.n	800e432 <mrbc_strcpy+0x1a>
  }
  *dest = 0;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2200      	movs	r2, #0
 800e458:	701a      	strb	r2, [r3, #0]
 800e45a:	e000      	b.n	800e45e <mrbc_strcpy+0x46>
    if( (*dest++ = *src++) == 0 ) goto RETURN;
 800e45c:	bf00      	nop

 RETURN:
  return destsize - n - 1;
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	3b01      	subs	r3, #1
}
 800e466:	4618      	mov	r0, r3
 800e468:	371c      	adds	r7, #28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
	...

0800e474 <mrbc_incref>:
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f993 3000 	ldrsb.w	r3, [r3]
 800e482:	2b07      	cmp	r3, #7
 800e484:	dd1e      	ble.n	800e4c4 <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	885b      	ldrh	r3, [r3, #2]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d106      	bne.n	800e49e <mrbc_incref+0x2a>
 800e490:	4b0e      	ldr	r3, [pc, #56]	; (800e4cc <mrbc_incref+0x58>)
 800e492:	4a0f      	ldr	r2, [pc, #60]	; (800e4d0 <mrbc_incref+0x5c>)
 800e494:	f240 11c3 	movw	r1, #451	; 0x1c3
 800e498:	480e      	ldr	r0, [pc, #56]	; (800e4d4 <mrbc_incref+0x60>)
 800e49a:	f007 f8d3 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	885b      	ldrh	r3, [r3, #2]
 800e4a4:	2bff      	cmp	r3, #255	; 0xff
 800e4a6:	d106      	bne.n	800e4b6 <mrbc_incref+0x42>
 800e4a8:	4b0b      	ldr	r3, [pc, #44]	; (800e4d8 <mrbc_incref+0x64>)
 800e4aa:	4a09      	ldr	r2, [pc, #36]	; (800e4d0 <mrbc_incref+0x5c>)
 800e4ac:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800e4b0:	4808      	ldr	r0, [pc, #32]	; (800e4d4 <mrbc_incref+0x60>)
 800e4b2:	f007 f8c7 	bl	8015644 <__assert_func>
  v->obj->ref_count++;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	885a      	ldrh	r2, [r3, #2]
 800e4bc:	3201      	adds	r2, #1
 800e4be:	b292      	uxth	r2, r2
 800e4c0:	805a      	strh	r2, [r3, #2]
 800e4c2:	e000      	b.n	800e4c6 <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800e4c4:	bf00      	nop
}
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	0801a240 	.word	0x0801a240
 800e4d0:	0801bed4 	.word	0x0801bed4
 800e4d4:	0801a258 	.word	0x0801a258
 800e4d8:	0801a274 	.word	0x0801a274

0800e4dc <mrbc_decref>:
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f993 3000 	ldrsb.w	r3, [r3]
 800e4ea:	2b07      	cmp	r3, #7
 800e4ec:	dd2c      	ble.n	800e548 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	885b      	ldrh	r3, [r3, #2]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d106      	bne.n	800e506 <mrbc_decref+0x2a>
 800e4f8:	4b16      	ldr	r3, [pc, #88]	; (800e554 <mrbc_decref+0x78>)
 800e4fa:	4a17      	ldr	r2, [pc, #92]	; (800e558 <mrbc_decref+0x7c>)
 800e4fc:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800e500:	4816      	ldr	r0, [pc, #88]	; (800e55c <mrbc_decref+0x80>)
 800e502:	f007 f89f 	bl	8015644 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	885b      	ldrh	r3, [r3, #2]
 800e50c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e510:	4293      	cmp	r3, r2
 800e512:	d106      	bne.n	800e522 <mrbc_decref+0x46>
 800e514:	4b12      	ldr	r3, [pc, #72]	; (800e560 <mrbc_decref+0x84>)
 800e516:	4a10      	ldr	r2, [pc, #64]	; (800e558 <mrbc_decref+0x7c>)
 800e518:	f240 11d3 	movw	r1, #467	; 0x1d3
 800e51c:	480f      	ldr	r0, [pc, #60]	; (800e55c <mrbc_decref+0x80>)
 800e51e:	f007 f891 	bl	8015644 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	885a      	ldrh	r2, [r3, #2]
 800e528:	3a01      	subs	r2, #1
 800e52a:	b292      	uxth	r2, r2
 800e52c:	805a      	strh	r2, [r3, #2]
 800e52e:	885b      	ldrh	r3, [r3, #2]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d10b      	bne.n	800e54c <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f993 3000 	ldrsb.w	r3, [r3]
 800e53a:	461a      	mov	r2, r3
 800e53c:	4b09      	ldr	r3, [pc, #36]	; (800e564 <mrbc_decref+0x88>)
 800e53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	4798      	blx	r3
 800e546:	e002      	b.n	800e54e <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800e548:	bf00      	nop
 800e54a:	e000      	b.n	800e54e <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800e54c:	bf00      	nop
}
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	0801a240 	.word	0x0801a240
 800e558:	0801bee0 	.word	0x0801bee0
 800e55c:	0801a258 	.word	0x0801a258
 800e560:	0801a290 	.word	0x0801a290
 800e564:	0801be98 	.word	0x0801be98

0800e568 <mrbc_decref_empty>:
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  mrbc_decref(v);
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7ff ffb3 	bl	800e4dc <mrbc_decref>
  v->tt = MRBC_TT_EMPTY;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	701a      	strb	r2, [r3, #0]
}
 800e57c:	bf00      	nop
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <mrbc_is_nested_symid>:
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	4603      	mov	r3, r0
 800e58c:	80fb      	strh	r3, [r7, #6]
  const char *s = mrbc_symid_to_str(sym_id);
 800e58e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e592:	4618      	mov	r0, r3
 800e594:	f7ff fb54 	bl	800dc40 <mrbc_symid_to_str>
 800e598:	60f8      	str	r0, [r7, #12]
  return ('0' <= s[0] && s[0] <= ('9'+6));
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	2b2f      	cmp	r3, #47	; 0x2f
 800e5a0:	d905      	bls.n	800e5ae <mrbc_is_nested_symid+0x2a>
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	2b3f      	cmp	r3, #63	; 0x3f
 800e5a8:	d801      	bhi.n	800e5ae <mrbc_is_nested_symid+0x2a>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e000      	b.n	800e5b0 <mrbc_is_nested_symid+0x2c>
 800e5ae:	2300      	movs	r3, #0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <find_class_by_object>:
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  assert( mrbc_type(*obj) >= 0 );
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f993 3000 	ldrsb.w	r3, [r3]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	da05      	bge.n	800e5d6 <find_class_by_object+0x1e>
 800e5ca:	4b20      	ldr	r3, [pc, #128]	; (800e64c <find_class_by_object+0x94>)
 800e5cc:	4a20      	ldr	r2, [pc, #128]	; (800e650 <find_class_by_object+0x98>)
 800e5ce:	21bf      	movs	r1, #191	; 0xbf
 800e5d0:	4820      	ldr	r0, [pc, #128]	; (800e654 <find_class_by_object+0x9c>)
 800e5d2:	f007 f837 	bl	8015644 <__assert_func>
  assert( mrbc_type(*obj) <= MRBC_TT_MAXVAL );
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f993 3000 	ldrsb.w	r3, [r3]
 800e5dc:	2b0e      	cmp	r3, #14
 800e5de:	dd05      	ble.n	800e5ec <find_class_by_object+0x34>
 800e5e0:	4b1d      	ldr	r3, [pc, #116]	; (800e658 <find_class_by_object+0xa0>)
 800e5e2:	4a1b      	ldr	r2, [pc, #108]	; (800e650 <find_class_by_object+0x98>)
 800e5e4:	21c0      	movs	r1, #192	; 0xc0
 800e5e6:	481b      	ldr	r0, [pc, #108]	; (800e654 <find_class_by_object+0x9c>)
 800e5e8:	f007 f82c 	bl	8015644 <__assert_func>
  mrbc_class *cls = mrbc_class_tbl[ mrbc_type(*obj) ];
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f993 3000 	ldrsb.w	r3, [r3]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	4b19      	ldr	r3, [pc, #100]	; (800e65c <find_class_by_object+0xa4>)
 800e5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5fa:	60fb      	str	r3, [r7, #12]
  if( !cls ) {
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d11f      	bne.n	800e642 <find_class_by_object+0x8a>
    switch( mrbc_type(*obj) ) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f993 3000 	ldrsb.w	r3, [r3]
 800e608:	2b0e      	cmp	r3, #14
 800e60a:	d00f      	beq.n	800e62c <find_class_by_object+0x74>
 800e60c:	2b0e      	cmp	r3, #14
 800e60e:	dc12      	bgt.n	800e636 <find_class_by_object+0x7e>
 800e610:	2b07      	cmp	r3, #7
 800e612:	d002      	beq.n	800e61a <find_class_by_object+0x62>
 800e614:	2b08      	cmp	r3, #8
 800e616:	d004      	beq.n	800e622 <find_class_by_object+0x6a>
 800e618:	e00d      	b.n	800e636 <find_class_by_object+0x7e>
    case MRBC_TT_CLASS:		cls = obj->cls;			break;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	60fb      	str	r3, [r7, #12]
 800e620:	e00f      	b.n	800e642 <find_class_by_object+0x8a>
    case MRBC_TT_OBJECT:	cls = obj->instance->cls;	break;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	60fb      	str	r3, [r7, #12]
 800e62a:	e00a      	b.n	800e642 <find_class_by_object+0x8a>
    case MRBC_TT_EXCEPTION:	cls = obj->exception->cls;	break;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	60fb      	str	r3, [r7, #12]
 800e634:	e005      	b.n	800e642 <find_class_by_object+0x8a>
      assert(!"Invalid value type.");
 800e636:	4b0a      	ldr	r3, [pc, #40]	; (800e660 <find_class_by_object+0xa8>)
 800e638:	4a05      	ldr	r2, [pc, #20]	; (800e650 <find_class_by_object+0x98>)
 800e63a:	21c9      	movs	r1, #201	; 0xc9
 800e63c:	4805      	ldr	r0, [pc, #20]	; (800e654 <find_class_by_object+0x9c>)
 800e63e:	f007 f801 	bl	8015644 <__assert_func>
  return cls;
 800e642:	68fb      	ldr	r3, [r7, #12]
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	0801a2ac 	.word	0x0801a2ac
 800e650:	0801beec 	.word	0x0801beec
 800e654:	0801a2c4 	.word	0x0801a2c4
 800e658:	0801a2e0 	.word	0x0801a2e0
 800e65c:	0801adf4 	.word	0x0801adf4
 800e660:	0801a304 	.word	0x0801a304

0800e664 <mrbc_array_size>:
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  return ary->array->n_stored;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	88db      	ldrh	r3, [r3, #6]
}
 800e672:	4618      	mov	r0, r3
 800e674:	370c      	adds	r7, #12
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr

0800e67e <mrbc_array_delete_handle>:
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b084      	sub	sp, #16
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  mrbc_array *h = ary->array;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	60fb      	str	r3, [r7, #12]
  mrbc_raw_free(h->data);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	4618      	mov	r0, r3
 800e692:	f7f3 fbf5 	bl	8001e80 <mrbc_raw_free>
  mrbc_raw_free(h);
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f7f3 fbf2 	bl	8001e80 <mrbc_raw_free>
}
 800e69c:	bf00      	nop
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <mrbc_hash_size>:
static inline int mrbc_hash_size(const mrbc_value *hash) {
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  return hash->hash->n_stored / 2;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	88db      	ldrh	r3, [r3, #6]
 800e6b2:	085b      	lsrs	r3, r3, #1
 800e6b4:	b29b      	uxth	r3, r3
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	370c      	adds	r7, #12
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr

0800e6c2 <mrbc_hash_iterator_new>:
{
 800e6c2:	b490      	push	{r4, r7}
 800e6c4:	b086      	sub	sp, #24
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	6039      	str	r1, [r7, #0]
  ite.target = v->hash;
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	60fb      	str	r3, [r7, #12]
  ite.point = v->hash->data;
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	613b      	str	r3, [r7, #16]
  ite.p_end = ite.point + v->hash->n_stored;
 800e6da:	693a      	ldr	r2, [r7, #16]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	689b      	ldr	r3, [r3, #8]
 800e6e0:	88db      	ldrh	r3, [r3, #6]
 800e6e2:	011b      	lsls	r3, r3, #4
 800e6e4:	4413      	add	r3, r2
 800e6e6:	617b      	str	r3, [r7, #20]
  return ite;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	461c      	mov	r4, r3
 800e6ec:	f107 030c 	add.w	r3, r7, #12
 800e6f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e6f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bc90      	pop	{r4, r7}
 800e700:	4770      	bx	lr

0800e702 <mrbc_hash_i_has_next>:
{
 800e702:	b480      	push	{r7}
 800e704:	b083      	sub	sp, #12
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
  return ite->point < ite->p_end;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	685a      	ldr	r2, [r3, #4]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	429a      	cmp	r2, r3
 800e714:	bf34      	ite	cc
 800e716:	2301      	movcc	r3, #1
 800e718:	2300      	movcs	r3, #0
 800e71a:	b2db      	uxtb	r3, r3
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <mrbc_hash_i_next>:
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  mrbc_value *ret = ite->point;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	60fb      	str	r3, [r7, #12]
  ite->point += 2;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	f103 0220 	add.w	r2, r3, #32
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	605a      	str	r2, [r3, #4]
  return ret;
 800e742:	68fb      	ldr	r3, [r7, #12]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <bin_to_uint32>:
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  uint32_t x = *((uint32_t *)s);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	60fb      	str	r3, [r7, #12]
  x = (x << 24) | ((x & 0xff00) << 8) | ((x >> 8) & 0xff00) | (x >> 24);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	061a      	lsls	r2, r3, #24
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	021b      	lsls	r3, r3, #8
 800e766:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e76a:	431a      	orrs	r2, r3
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	0a1b      	lsrs	r3, r3, #8
 800e770:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e774:	431a      	orrs	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	0e1b      	lsrs	r3, r3, #24
 800e77a:	4313      	orrs	r3, r2
 800e77c:	60fb      	str	r3, [r7, #12]
  return x;
 800e77e:	68fb      	ldr	r3, [r7, #12]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <send_by_name>:
  @param  a		operand a
  @param  c		bit: 0-3=narg, 4-7=karg, 8=have block param flag.
  @retval 0  No error.
*/
static void send_by_name( struct VM *vm, mrbc_sym sym_id, int a, int c )
{
 800e78c:	b590      	push	{r4, r7, lr}
 800e78e:	b09f      	sub	sp, #124	; 0x7c
 800e790:	af02      	add	r7, sp, #8
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	607a      	str	r2, [r7, #4]
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	460b      	mov	r3, r1
 800e79a:	817b      	strh	r3, [r7, #10]
  int narg = c & 0x0f;
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	f003 030f 	and.w	r3, r3, #15
 800e7a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  int karg = (c >> 4) & 0x0f;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	111b      	asrs	r3, r3, #4
 800e7a8:	f003 030f 	and.w	r3, r3, #15
 800e7ac:	663b      	str	r3, [r7, #96]	; 0x60
  mrbc_value *regs = vm->cur_regs;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  mrbc_value *recv = regs + a;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	011b      	lsls	r3, r3, #4
 800e7b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7ba:	4413      	add	r3, r2
 800e7bc:	65bb      	str	r3, [r7, #88]	; 0x58

  // If it's packed in an array, expand it.
  if( narg == CALL_MAXARGS ) {
 800e7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7c0:	2b0f      	cmp	r3, #15
 800e7c2:	d13c      	bne.n	800e83e <send_by_name+0xb2>
    mrbc_value argv = recv[1];
 800e7c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7c6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e7ca:	3310      	adds	r3, #16
 800e7cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    narg = mrbc_array_size(&argv);
 800e7d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7ff ff44 	bl	800e664 <mrbc_array_size>
 800e7dc:	66f8      	str	r0, [r7, #108]	; 0x6c
    for( int i = 0; i < narg; i++ ) {
 800e7de:	2300      	movs	r3, #0
 800e7e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7e2:	e00a      	b.n	800e7fa <send_by_name+0x6e>
      mrbc_incref( &argv.array->data[i] );
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e6:	689a      	ldr	r2, [r3, #8]
 800e7e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7ea:	011b      	lsls	r3, r3, #4
 800e7ec:	4413      	add	r3, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff fe40 	bl	800e474 <mrbc_incref>
    for( int i = 0; i < narg; i++ ) {
 800e7f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7fe:	429a      	cmp	r2, r3
 800e800:	dbf0      	blt.n	800e7e4 <send_by_name+0x58>
    }

    memmove( recv + narg + 1, recv + 2, sizeof(mrbc_value) * (karg * 2 + 1) );
 800e802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e804:	3301      	adds	r3, #1
 800e806:	011b      	lsls	r3, r3, #4
 800e808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e80a:	18d0      	adds	r0, r2, r3
 800e80c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e80e:	f103 0120 	add.w	r1, r3, #32
 800e812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	3301      	adds	r3, #1
 800e818:	011b      	lsls	r3, r3, #4
 800e81a:	461a      	mov	r2, r3
 800e81c:	f007 ff37 	bl	801668e <memmove>
    memcpy( recv + 1, argv.array->data, sizeof(mrbc_value) * narg );
 800e820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e822:	f103 0010 	add.w	r0, r3, #16
 800e826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e828:	6899      	ldr	r1, [r3, #8]
 800e82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e82c:	011b      	lsls	r3, r3, #4
 800e82e:	461a      	mov	r2, r3
 800e830:	f007 ffe1 	bl	80167f6 <memcpy>

    mrbc_decref(&argv);
 800e834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e838:	4618      	mov	r0, r3
 800e83a:	f7ff fe4f 	bl	800e4dc <mrbc_decref>
  }

  // Convert keyword argument to hash.
  if( karg ) {
 800e83e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e840:	2b00      	cmp	r3, #0
 800e842:	d048      	beq.n	800e8d6 <send_by_name+0x14a>
    narg++;
 800e844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e846:	3301      	adds	r3, #1
 800e848:	66fb      	str	r3, [r7, #108]	; 0x6c
    if( karg != CALL_MAXARGS ) {
 800e84a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e84c:	2b0f      	cmp	r3, #15
 800e84e:	d042      	beq.n	800e8d6 <send_by_name+0x14a>
      mrbc_value h = mrbc_hash_new( vm, karg );
 800e850:	f107 0320 	add.w	r3, r7, #32
 800e854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e856:	68f9      	ldr	r1, [r7, #12]
 800e858:	4618      	mov	r0, r3
 800e85a:	f7f5 faf0 	bl	8003e3e <mrbc_hash_new>
      if( !h.hash ) return;	// ENOMEM
 800e85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e860:	2b00      	cmp	r3, #0
 800e862:	f000 80c4 	beq.w	800e9ee <send_by_name+0x262>

      mrbc_value *r1 = recv + narg;
 800e866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e868:	011b      	lsls	r3, r3, #4
 800e86a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e86c:	4413      	add	r3, r2
 800e86e:	657b      	str	r3, [r7, #84]	; 0x54
      memcpy( h.hash->data, r1, sizeof(mrbc_value) * karg * 2 );
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	6898      	ldr	r0, [r3, #8]
 800e874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e876:	015b      	lsls	r3, r3, #5
 800e878:	461a      	mov	r2, r3
 800e87a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e87c:	f007 ffbb 	bl	80167f6 <memcpy>
      h.hash->n_stored = karg * 2;
 800e880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e882:	b29a      	uxth	r2, r3
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	0052      	lsls	r2, r2, #1
 800e888:	b292      	uxth	r2, r2
 800e88a:	80da      	strh	r2, [r3, #6]

      mrbc_value block = r1[karg * 2];
 800e88c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e88e:	015b      	lsls	r3, r3, #5
 800e890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e892:	4413      	add	r3, r2
 800e894:	f107 0410 	add.w	r4, r7, #16
 800e898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e89a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      memset( r1 + 2, 0, sizeof(mrbc_value) * (karg * 2 - 1) );
 800e89e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8a0:	f103 0020 	add.w	r0, r3, #32
 800e8a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8a6:	005b      	lsls	r3, r3, #1
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	011b      	lsls	r3, r3, #4
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	f007 ff07 	bl	80166c2 <memset>
      *r1++ = h;
 800e8b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8b6:	f103 0210 	add.w	r2, r3, #16
 800e8ba:	657a      	str	r2, [r7, #84]	; 0x54
 800e8bc:	461c      	mov	r4, r3
 800e8be:	f107 0320 	add.w	r3, r7, #32
 800e8c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      *r1 = block;
 800e8c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8ca:	461c      	mov	r4, r3
 800e8cc:	f107 0310 	add.w	r3, r7, #16
 800e8d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
  }

  // is not have block
  if( (c >> 8) == 0 ) {
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	121b      	asrs	r3, r3, #8
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10e      	bne.n	800e8fc <send_by_name+0x170>
    mrbc_decref( recv + narg + 1 );
 800e8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	011b      	lsls	r3, r3, #4
 800e8e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8e6:	4413      	add	r3, r2
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7ff fdf7 	bl	800e4dc <mrbc_decref>
    mrbc_set_nil( recv + narg + 1 );
 800e8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	011b      	lsls	r3, r3, #4
 800e8f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8f6:	4413      	add	r3, r2
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	701a      	strb	r2, [r3, #0]
  }

  mrbc_class *cls = find_class_by_object(recv);
 800e8fc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e8fe:	f7ff fe5b 	bl	800e5b8 <find_class_by_object>
 800e902:	6538      	str	r0, [r7, #80]	; 0x50
  mrbc_method method;
  if( mrbc_find_method( &method, cls, sym_id ) == 0 ) {
 800e904:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e908:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e90c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fa fed6 	bl	80096c0 <mrbc_find_method>
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d11f      	bne.n	800e95a <send_by_name+0x1ce>
    mrbc_raisef(vm, MRBC_CLASS(NoMethodError),
 800e91a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e91e:	4618      	mov	r0, r3
 800e920:	f7ff f98e 	bl	800dc40 <mrbc_symid_to_str>
 800e924:	4604      	mov	r4, r0
 800e926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7ff f987 	bl	800dc40 <mrbc_symid_to_str>
 800e932:	4603      	mov	r3, r0
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	4623      	mov	r3, r4
 800e938:	4a32      	ldr	r2, [pc, #200]	; (800ea04 <send_by_name+0x278>)
 800e93a:	4933      	ldr	r1, [pc, #204]	; (800ea08 <send_by_name+0x27c>)
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f7fc fdc7 	bl	800b4d0 <mrbc_raisef>
		"undefined local variable or method '%s' for %s",
		mrbc_symid_to_str(sym_id), mrbc_symid_to_str( cls->sym_id ));
    if( vm->callinfo_tail != 0 ) {
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	69db      	ldr	r3, [r3, #28]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d053      	beq.n	800e9f2 <send_by_name+0x266>
      vm->exception.exception->method_id = vm->callinfo_tail->method_id;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	69da      	ldr	r2, [r3, #28]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e952:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 800e956:	811a      	strh	r2, [r3, #8]
    }
    return;
 800e958:	e04b      	b.n	800e9f2 <send_by_name+0x266>
  }

  // call C function and return.
  if( method.c_func ) {
 800e95a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d02e      	beq.n	800e9c0 <send_by_name+0x234>
    method.func(vm, recv, narg);
 800e962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	4798      	blx	r3

    if( mrbc_israised(vm) && vm->exception.exception->method_id == 0 ) {
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800e972:	2b0e      	cmp	r3, #14
 800e974:	d109      	bne.n	800e98a <send_by_name+0x1fe>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d103      	bne.n	800e98a <send_by_name+0x1fe>
      vm->exception.exception->method_id = sym_id;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e986:	897a      	ldrh	r2, [r7, #10]
 800e988:	811a      	strh	r2, [r3, #8]
    }
    if( sym_id == MRBC_SYM(call) ) return;
 800e98a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e98e:	2b4c      	cmp	r3, #76	; 0x4c
 800e990:	d031      	beq.n	800e9f6 <send_by_name+0x26a>
    if( sym_id == MRBC_SYM(new) ) return;
 800e992:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e996:	2b99      	cmp	r3, #153	; 0x99
 800e998:	d02f      	beq.n	800e9fa <send_by_name+0x26e>

    for( int i = 1; i <= narg+1; i++ ) {
 800e99a:	2301      	movs	r3, #1
 800e99c:	667b      	str	r3, [r7, #100]	; 0x64
 800e99e:	e009      	b.n	800e9b4 <send_by_name+0x228>
      mrbc_decref_empty( recv + i );
 800e9a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9a2:	011b      	lsls	r3, r3, #4
 800e9a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9a6:	4413      	add	r3, r2
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7ff fddd 	bl	800e568 <mrbc_decref_empty>
    for( int i = 1; i <= narg+1; i++ ) {
 800e9ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	667b      	str	r3, [r7, #100]	; 0x64
 800e9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	ddf0      	ble.n	800e9a0 <send_by_name+0x214>
    }
    return;
 800e9be:	e01d      	b.n	800e9fc <send_by_name+0x270>
  }

  // call Ruby method.
  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm, sym_id, a, narg);
 800e9c0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e9c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f000 f8d1 	bl	800eb70 <mrbc_push_callinfo>
 800e9ce:	64f8      	str	r0, [r7, #76]	; 0x4c
  callinfo->own_class = method.cls;
 800e9d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9d4:	615a      	str	r2, [r3, #20]

  vm->cur_irep = method.irep;
 800e9d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	699a      	ldr	r2, [r3, #24]
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	611a      	str	r2, [r3, #16]
  vm->cur_regs = recv;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9ea:	615a      	str	r2, [r3, #20]
 800e9ec:	e006      	b.n	800e9fc <send_by_name+0x270>
      if( !h.hash ) return;	// ENOMEM
 800e9ee:	bf00      	nop
 800e9f0:	e004      	b.n	800e9fc <send_by_name+0x270>
    return;
 800e9f2:	bf00      	nop
 800e9f4:	e002      	b.n	800e9fc <send_by_name+0x270>
    if( sym_id == MRBC_SYM(call) ) return;
 800e9f6:	bf00      	nop
 800e9f8:	e000      	b.n	800e9fc <send_by_name+0x270>
    if( sym_id == MRBC_SYM(new) ) return;
 800e9fa:	bf00      	nop
}
 800e9fc:	3774      	adds	r7, #116	; 0x74
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd90      	pop	{r4, r7, pc}
 800ea02:	bf00      	nop
 800ea04:	0801a31c 	.word	0x0801a31c
 800ea08:	20000184 	.word	0x20000184

0800ea0c <find_catch_handler_ensure>:

//================================================================
/*! Find ensure catch handler
*/
static const mrbc_irep_catch_handler *find_catch_handler_ensure( const struct VM *vm )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b088      	sub	sp, #32
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  const mrbc_irep *irep = vm->cur_irep;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	61bb      	str	r3, [r7, #24]
  int cnt = irep->clen;
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	891b      	ldrh	r3, [r3, #8]
 800ea1e:	61fb      	str	r3, [r7, #28]
  if( cnt == 0 ) return NULL;
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d101      	bne.n	800ea2a <find_catch_handler_ensure+0x1e>
 800ea26:	2300      	movs	r3, #0
 800ea28:	e037      	b.n	800ea9a <find_catch_handler_ensure+0x8e>

  const mrbc_irep_catch_handler *catch_table =
    (const mrbc_irep_catch_handler *)(irep->inst + irep->ilen);
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	699a      	ldr	r2, [r3, #24]
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	68db      	ldr	r3, [r3, #12]
  const mrbc_irep_catch_handler *catch_table =
 800ea32:	4413      	add	r3, r2
 800ea34:	617b      	str	r3, [r7, #20]
  uint32_t inst = vm->inst - irep->inst;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	691a      	ldr	r2, [r3, #16]
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	613b      	str	r3, [r7, #16]

  for( cnt--; cnt >= 0 ; cnt-- ) {
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	61fb      	str	r3, [r7, #28]
 800ea48:	e023      	b.n	800ea92 <find_catch_handler_ensure+0x86>
    const mrbc_irep_catch_handler *handler = catch_table + cnt;
 800ea4a:	69fa      	ldr	r2, [r7, #28]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	005b      	lsls	r3, r3, #1
 800ea50:	4413      	add	r3, r2
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	697a      	ldr	r2, [r7, #20]
 800ea58:	4413      	add	r3, r2
 800ea5a:	60fb      	str	r3, [r7, #12]
    // Catch type and range check
    if( (handler->type == 1) &&		// 1=CATCH_FILTER_ENSURE
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d113      	bne.n	800ea8c <find_catch_handler_ensure+0x80>
	(bin_to_uint32(handler->begin) < inst) &&
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	3301      	adds	r3, #1
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7ff fe71 	bl	800e750 <bin_to_uint32>
 800ea6e:	4602      	mov	r2, r0
    if( (handler->type == 1) &&		// 1=CATCH_FILTER_ENSURE
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d90a      	bls.n	800ea8c <find_catch_handler_ensure+0x80>
	(inst <= bin_to_uint32(handler->end)) ) {
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	3305      	adds	r3, #5
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff fe68 	bl	800e750 <bin_to_uint32>
 800ea80:	4602      	mov	r2, r0
	(bin_to_uint32(handler->begin) < inst) &&
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d801      	bhi.n	800ea8c <find_catch_handler_ensure+0x80>
      return handler;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	e006      	b.n	800ea9a <find_catch_handler_ensure+0x8e>
  for( cnt--; cnt >= 0 ; cnt-- ) {
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	61fb      	str	r3, [r7, #28]
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	dad8      	bge.n	800ea4a <find_catch_handler_ensure+0x3e>
    }
  }

  return NULL;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3720      	adds	r7, #32
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
	...

0800eaa4 <mrbc_get_self>:

//================================================================
/*! get the self object
*/
static mrbc_value * mrbc_get_self( struct VM *vm, mrbc_value *regs )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  mrbc_value *self = &regs[0];
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	60fb      	str	r3, [r7, #12]
  if( mrbc_type(*self) == MRBC_TT_PROC ) {
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f993 3000 	ldrsb.w	r3, [r3]
 800eab8:	2b09      	cmp	r3, #9
 800eaba:	d11c      	bne.n	800eaf6 <mrbc_get_self+0x52>
    mrbc_callinfo *callinfo = regs[0].proc->callinfo_self;
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	60bb      	str	r3, [r7, #8]
    if( callinfo ) {
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d007      	beq.n	800eada <mrbc_get_self+0x36>
      self = callinfo->cur_regs + callinfo->reg_offset;
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	68da      	ldr	r2, [r3, #12]
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	7f9b      	ldrb	r3, [r3, #30]
 800ead2:	011b      	lsls	r3, r3, #4
 800ead4:	4413      	add	r3, r2
 800ead6:	60fb      	str	r3, [r7, #12]
 800ead8:	e002      	b.n	800eae0 <mrbc_get_self+0x3c>
    } else {
      self = &vm->regs[0];
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	3338      	adds	r3, #56	; 0x38
 800eade:	60fb      	str	r3, [r7, #12]
    }
    assert( self->tt != MRBC_TT_PROC );
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f993 3000 	ldrsb.w	r3, [r3]
 800eae6:	2b09      	cmp	r3, #9
 800eae8:	d105      	bne.n	800eaf6 <mrbc_get_self+0x52>
 800eaea:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <mrbc_get_self+0x5c>)
 800eaec:	4a05      	ldr	r2, [pc, #20]	; (800eb04 <mrbc_get_self+0x60>)
 800eaee:	21bd      	movs	r1, #189	; 0xbd
 800eaf0:	4805      	ldr	r0, [pc, #20]	; (800eb08 <mrbc_get_self+0x64>)
 800eaf2:	f006 fda7 	bl	8015644 <__assert_func>
  }

  return self;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3710      	adds	r7, #16
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	0801a34c 	.word	0x0801a34c
 800eb04:	0801bf04 	.word	0x0801bf04
 800eb08:	0801a368 	.word	0x0801a368

0800eb0c <mrbc_get_callee_symid>:

  @param  vm	Pointer to VM
  @return	string
*/
mrbc_sym mrbc_get_callee_symid( struct VM *vm )
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  uint8_t rb = vm->inst[-2];
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	691b      	ldr	r3, [r3, #16]
 800eb18:	3b02      	subs	r3, #2
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	73fb      	strb	r3, [r7, #15]
  /* NOTE
     -2 is not always better value.
     This value is OP_SEND operator's B register.
  */
  return mrbc_irep_symbol_id(vm->cur_irep, rb);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	f103 0220 	add.w	r2, r3, #32
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
 800eb28:	005b      	lsls	r3, r3, #1
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <mrbc_get_callee_name>:

  @param  vm	Pointer to VM
  @return	string
*/
const char *mrbc_get_callee_name( struct VM *vm )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  uint8_t rb = vm->inst[-2];
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	3b02      	subs	r3, #2
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	73fb      	strb	r3, [r7, #15]
  return mrbc_irep_symbol_cstr(vm->cur_irep, rb);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	f103 0220 	add.w	r2, r3, #32
 800eb56:	7bfb      	ldrb	r3, [r7, #15]
 800eb58:	005b      	lsls	r3, r3, #1
 800eb5a:	4413      	add	r3, r2
 800eb5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7ff f86d 	bl	800dc40 <mrbc_symid_to_str>
 800eb66:	4603      	mov	r3, r0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <mrbc_push_callinfo>:

//================================================================
/*! Push current status to callinfo stack
*/
mrbc_callinfo * mrbc_push_callinfo( struct VM *vm, mrbc_sym method_id, int reg_offset, int n_args )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	607a      	str	r2, [r7, #4]
 800eb7a:	603b      	str	r3, [r7, #0]
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	817b      	strh	r3, [r7, #10]
  mrbc_callinfo *callinfo = mrbc_alloc(vm, sizeof(mrbc_callinfo));
 800eb80:	2024      	movs	r0, #36	; 0x24
 800eb82:	f7f2 ffa1 	bl	8001ac8 <mrbc_raw_alloc>
 800eb86:	6178      	str	r0, [r7, #20]
  if( !callinfo ) return callinfo;
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d101      	bne.n	800eb92 <mrbc_push_callinfo+0x22>
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	e02c      	b.n	800ebec <mrbc_push_callinfo+0x7c>

  callinfo->cur_irep = vm->cur_irep;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	68da      	ldr	r2, [r3, #12]
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	605a      	str	r2, [r3, #4]
  callinfo->inst = vm->inst;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	691a      	ldr	r2, [r3, #16]
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	609a      	str	r2, [r3, #8]
  callinfo->cur_regs = vm->cur_regs;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	695a      	ldr	r2, [r3, #20]
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	60da      	str	r2, [r3, #12]
  callinfo->target_class = vm->target_class;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	699a      	ldr	r2, [r3, #24]
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	611a      	str	r2, [r3, #16]

  callinfo->own_class = 0;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	615a      	str	r2, [r3, #20]
  callinfo->karg_keep = 0;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	619a      	str	r2, [r3, #24]
  callinfo->method_id = method_id;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	897a      	ldrh	r2, [r7, #10]
 800ebc2:	839a      	strh	r2, [r3, #28]
  callinfo->reg_offset = reg_offset;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	b2da      	uxtb	r2, r3
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	779a      	strb	r2, [r3, #30]
  callinfo->n_args = n_args;
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	b2da      	uxtb	r2, r3
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	77da      	strb	r2, [r3, #31]
  callinfo->is_called_super = 0;
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f883 2020 	strb.w	r2, [r3, #32]

  callinfo->prev = vm->callinfo_tail;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	69da      	ldr	r2, [r3, #28]
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	601a      	str	r2, [r3, #0]
  vm->callinfo_tail = callinfo;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	697a      	ldr	r2, [r7, #20]
 800ebe8:	61da      	str	r2, [r3, #28]

  return callinfo;
 800ebea:	697b      	ldr	r3, [r7, #20]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3718      	adds	r7, #24
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <mrbc_pop_callinfo>:

//================================================================
/*! Pop current status from callinfo stack
*/
void mrbc_pop_callinfo( struct VM *vm )
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b08a      	sub	sp, #40	; 0x28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  assert( vm->callinfo_tail );
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	69db      	ldr	r3, [r3, #28]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <mrbc_pop_callinfo+0x1e>
 800ec04:	4b2c      	ldr	r3, [pc, #176]	; (800ecb8 <mrbc_pop_callinfo+0xc4>)
 800ec06:	4a2d      	ldr	r2, [pc, #180]	; (800ecbc <mrbc_pop_callinfo+0xc8>)
 800ec08:	f240 110d 	movw	r1, #269	; 0x10d
 800ec0c:	482c      	ldr	r0, [pc, #176]	; (800ecc0 <mrbc_pop_callinfo+0xcc>)
 800ec0e:	f006 fd19 	bl	8015644 <__assert_func>

  // clear used register.
  mrbc_callinfo *callinfo = vm->callinfo_tail;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	69db      	ldr	r3, [r3, #28]
 800ec16:	623b      	str	r3, [r7, #32]
  mrbc_value *reg1 = vm->cur_regs + callinfo->cur_irep->nregs - callinfo->reg_offset;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	695a      	ldr	r2, [r3, #20]
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	889b      	ldrh	r3, [r3, #4]
 800ec22:	4619      	mov	r1, r3
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	7f9b      	ldrb	r3, [r3, #30]
 800ec28:	1acb      	subs	r3, r1, r3
 800ec2a:	011b      	lsls	r3, r3, #4
 800ec2c:	4413      	add	r3, r2
 800ec2e:	627b      	str	r3, [r7, #36]	; 0x24
  mrbc_value *reg2 = vm->cur_regs + vm->cur_irep->nregs;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	695a      	ldr	r2, [r3, #20]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	889b      	ldrh	r3, [r3, #4]
 800ec3a:	011b      	lsls	r3, r3, #4
 800ec3c:	4413      	add	r3, r2
 800ec3e:	61fb      	str	r3, [r7, #28]
  while( reg1 < reg2 ) {
 800ec40:	e006      	b.n	800ec50 <mrbc_pop_callinfo+0x5c>
    mrbc_decref_empty( reg1++ );
 800ec42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec44:	f103 0210 	add.w	r2, r3, #16
 800ec48:	627a      	str	r2, [r7, #36]	; 0x24
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7ff fc8c 	bl	800e568 <mrbc_decref_empty>
  while( reg1 < reg2 ) {
 800ec50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d3f4      	bcc.n	800ec42 <mrbc_pop_callinfo+0x4e>
  }
  if( callinfo->karg_keep ) {
 800ec58:	6a3b      	ldr	r3, [r7, #32]
 800ec5a:	699b      	ldr	r3, [r3, #24]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d010      	beq.n	800ec82 <mrbc_pop_callinfo+0x8e>
    mrbc_hash_delete( &(mrbc_value){.tt = MRBC_TT_HASH, .hash = callinfo->karg_keep} );
 800ec60:	f107 0308 	add.w	r3, r7, #8
 800ec64:	2200      	movs	r2, #0
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	605a      	str	r2, [r3, #4]
 800ec6a:	609a      	str	r2, [r3, #8]
 800ec6c:	60da      	str	r2, [r3, #12]
 800ec6e:	230d      	movs	r3, #13
 800ec70:	723b      	strb	r3, [r7, #8]
 800ec72:	6a3b      	ldr	r3, [r7, #32]
 800ec74:	699b      	ldr	r3, [r3, #24]
 800ec76:	613b      	str	r3, [r7, #16]
 800ec78:	f107 0308 	add.w	r3, r7, #8
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7f5 f932 	bl	8003ee6 <mrbc_hash_delete>
  }

  // copy callinfo to vm
  vm->cur_irep = callinfo->cur_irep;
 800ec82:	6a3b      	ldr	r3, [r7, #32]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	60da      	str	r2, [r3, #12]
  vm->inst = callinfo->inst;
 800ec8a:	6a3b      	ldr	r3, [r7, #32]
 800ec8c:	689a      	ldr	r2, [r3, #8]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	611a      	str	r2, [r3, #16]
  vm->cur_regs = callinfo->cur_regs;
 800ec92:	6a3b      	ldr	r3, [r7, #32]
 800ec94:	68da      	ldr	r2, [r3, #12]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	615a      	str	r2, [r3, #20]
  vm->target_class = callinfo->target_class;
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	691a      	ldr	r2, [r3, #16]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	619a      	str	r2, [r3, #24]
  vm->callinfo_tail = callinfo->prev;
 800eca2:	6a3b      	ldr	r3, [r7, #32]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	61da      	str	r2, [r3, #28]

  mrbc_free(vm, callinfo);
 800ecaa:	6a38      	ldr	r0, [r7, #32]
 800ecac:	f7f3 f8e8 	bl	8001e80 <mrbc_raw_free>
}
 800ecb0:	bf00      	nop
 800ecb2:	3728      	adds	r7, #40	; 0x28
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	0801a380 	.word	0x0801a380
 800ecbc:	0801bf14 	.word	0x0801bf14
 800ecc0:	0801a368 	.word	0x0801a368

0800ecc4 <mrbc_vm_new>:
  mrbc_vm_end( vm );
  mrbc_vm_close( vm );
@endcode
*/
mrbc_vm * mrbc_vm_new( int regs_size )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  mrbc_vm *vm = mrbc_raw_alloc(sizeof(mrbc_vm) + sizeof(mrbc_value) * regs_size);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	011b      	lsls	r3, r3, #4
 800ecd0:	3338      	adds	r3, #56	; 0x38
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7f2 fef8 	bl	8001ac8 <mrbc_raw_alloc>
 800ecd8:	60f8      	str	r0, [r7, #12]
  if( !vm ) return NULL;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d101      	bne.n	800ece4 <mrbc_vm_new+0x20>
 800ece0:	2300      	movs	r3, #0
 800ece2:	e014      	b.n	800ed0e <mrbc_vm_new+0x4a>

  memset(vm, 0, sizeof(mrbc_vm));	// caution: assume NULL is zero.
 800ece4:	2238      	movs	r2, #56	; 0x38
 800ece6:	2100      	movs	r1, #0
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f007 fcea 	bl	80166c2 <memset>
#if defined(MRBC_DEBUG)
  memcpy(vm->type, "VM", 2);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	4909      	ldr	r1, [pc, #36]	; (800ed18 <mrbc_vm_new+0x54>)
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f007 fd7e 	bl	80167f6 <memcpy>
#endif
  vm->flag_need_memfree = 1;
 800ecfa:	68fa      	ldr	r2, [r7, #12]
 800ecfc:	7913      	ldrb	r3, [r2, #4]
 800ecfe:	f043 0301 	orr.w	r3, r3, #1
 800ed02:	7113      	strb	r3, [r2, #4]
  vm->regs_size = regs_size;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	b29a      	uxth	r2, r3
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	80da      	strh	r2, [r3, #6]

  return vm;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3710      	adds	r7, #16
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	0801a394 	.word	0x0801a394

0800ed1c <mrbc_vm_open>:

  @param vm	Pointer to VM or NULL.
  @return	Pointer to VM, or NULL is error.
*/
mrbc_vm * mrbc_vm_open( struct VM *vm )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b086      	sub	sp, #24
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  if( !vm ) vm = mrbc_vm_new( MAX_REGS_SIZE );
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d103      	bne.n	800ed32 <mrbc_vm_open+0x16>
 800ed2a:	206e      	movs	r0, #110	; 0x6e
 800ed2c:	f7ff ffca 	bl	800ecc4 <mrbc_vm_new>
 800ed30:	6078      	str	r0, [r7, #4]
  if( !vm ) return NULL;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d101      	bne.n	800ed3c <mrbc_vm_open+0x20>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e041      	b.n	800edc0 <mrbc_vm_open+0xa4>

  // allocate vm id.
  int vm_id;
  for( vm_id = 0; vm_id < MAX_VM_COUNT; vm_id++ ) {
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	617b      	str	r3, [r7, #20]
 800ed40:	e024      	b.n	800ed8c <mrbc_vm_open+0x70>
    int idx = vm_id >> 4;
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	111b      	asrs	r3, r3, #4
 800ed46:	613b      	str	r3, [r7, #16]
    int bit = 1 << (vm_id & 0x0f);
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	f003 030f 	and.w	r3, r3, #15
 800ed4e:	2201      	movs	r2, #1
 800ed50:	fa02 f303 	lsl.w	r3, r2, r3
 800ed54:	60fb      	str	r3, [r7, #12]
    if( (free_vm_bitmap[idx] & bit) == 0 ) {
 800ed56:	4a1c      	ldr	r2, [pc, #112]	; (800edc8 <mrbc_vm_open+0xac>)
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed5e:	461a      	mov	r2, r3
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	4013      	ands	r3, r2
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10e      	bne.n	800ed86 <mrbc_vm_open+0x6a>
      free_vm_bitmap[idx] |= bit;		// found
 800ed68:	4a17      	ldr	r2, [pc, #92]	; (800edc8 <mrbc_vm_open+0xac>)
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed70:	b21a      	sxth	r2, r3
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	b21b      	sxth	r3, r3
 800ed76:	4313      	orrs	r3, r2
 800ed78:	b21b      	sxth	r3, r3
 800ed7a:	b299      	uxth	r1, r3
 800ed7c:	4a12      	ldr	r2, [pc, #72]	; (800edc8 <mrbc_vm_open+0xac>)
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      break;
 800ed84:	e005      	b.n	800ed92 <mrbc_vm_open+0x76>
  for( vm_id = 0; vm_id < MAX_VM_COUNT; vm_id++ ) {
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	617b      	str	r3, [r7, #20]
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	2b04      	cmp	r3, #4
 800ed90:	ddd7      	ble.n	800ed42 <mrbc_vm_open+0x26>
    }
  }

  if( vm_id == MAX_VM_COUNT ) {
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	2b05      	cmp	r3, #5
 800ed96:	d10b      	bne.n	800edb0 <mrbc_vm_open+0x94>
    if( vm->flag_need_memfree ) mrbc_raw_free(vm);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	791b      	ldrb	r3, [r3, #4]
 800ed9c:	f003 0301 	and.w	r3, r3, #1
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d002      	beq.n	800edac <mrbc_vm_open+0x90>
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7f3 f86a 	bl	8001e80 <mrbc_raw_free>
    return NULL;
 800edac:	2300      	movs	r3, #0
 800edae:	e007      	b.n	800edc0 <mrbc_vm_open+0xa4>
  }

  vm->vm_id = ++vm_id;
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	3301      	adds	r3, #1
 800edb4:	617b      	str	r3, [r7, #20]
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	b2da      	uxtb	r2, r3
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	709a      	strb	r2, [r3, #2]

  return vm;
 800edbe:	687b      	ldr	r3, [r7, #4]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3718      	adds	r7, #24
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	20008850 	.word	0x20008850

0800edcc <mrbc_vm_close>:
/*! Close the VM.

  @param  vm  Pointer to VM
*/
void mrbc_vm_close( struct VM *vm )
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  // free vm id.
  int idx = (vm->vm_id-1) >> 4;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	789b      	ldrb	r3, [r3, #2]
 800edd8:	3b01      	subs	r3, #1
 800edda:	111b      	asrs	r3, r3, #4
 800eddc:	60fb      	str	r3, [r7, #12]
  int bit = 1 << ((vm->vm_id-1) & 0x0f);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	789b      	ldrb	r3, [r3, #2]
 800ede2:	3b01      	subs	r3, #1
 800ede4:	f003 030f 	and.w	r3, r3, #15
 800ede8:	2201      	movs	r2, #1
 800edea:	fa02 f303 	lsl.w	r3, r2, r3
 800edee:	60bb      	str	r3, [r7, #8]
  free_vm_bitmap[idx] &= ~bit;
 800edf0:	4a13      	ldr	r2, [pc, #76]	; (800ee40 <mrbc_vm_close+0x74>)
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edf8:	b21a      	sxth	r2, r3
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	b21b      	sxth	r3, r3
 800edfe:	43db      	mvns	r3, r3
 800ee00:	b21b      	sxth	r3, r3
 800ee02:	4013      	ands	r3, r2
 800ee04:	b21b      	sxth	r3, r3
 800ee06:	b299      	uxth	r1, r3
 800ee08:	4a0d      	ldr	r2, [pc, #52]	; (800ee40 <mrbc_vm_close+0x74>)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  // free irep and vm
  if( vm->top_irep ) mrbc_irep_free( vm->top_irep );
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	689b      	ldr	r3, [r3, #8]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d004      	beq.n	800ee22 <mrbc_vm_close+0x56>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fd fb81 	bl	800c524 <mrbc_irep_free>
  if( vm->flag_need_memfree ) mrbc_raw_free(vm);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	791b      	ldrb	r3, [r3, #4]
 800ee26:	f003 0301 	and.w	r3, r3, #1
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d002      	beq.n	800ee36 <mrbc_vm_close+0x6a>
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7f3 f825 	bl	8001e80 <mrbc_raw_free>
}
 800ee36:	bf00      	nop
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	20008850 	.word	0x20008850

0800ee44 <mrbc_vm_begin>:
/*! VM initializer.

  @param  vm  Pointer to VM
*/
void mrbc_vm_begin( struct VM *vm )
{
 800ee44:	b590      	push	{r4, r7, lr}
 800ee46:	b091      	sub	sp, #68	; 0x44
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6178      	str	r0, [r7, #20]
  vm->cur_irep = vm->top_irep;
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	689a      	ldr	r2, [r3, #8]
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	699a      	ldr	r2, [r3, #24]
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	611a      	str	r2, [r3, #16]
  vm->cur_regs = vm->regs;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	615a      	str	r2, [r3, #20]
  vm->target_class = mrbc_class_object;
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	4a27      	ldr	r2, [pc, #156]	; (800ef08 <mrbc_vm_begin+0xc4>)
 800ee6c:	619a      	str	r2, [r3, #24]
  vm->callinfo_tail = NULL;
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	2200      	movs	r2, #0
 800ee72:	61da      	str	r2, [r3, #28]
  vm->ret_blk = NULL;
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	2200      	movs	r2, #0
 800ee78:	621a      	str	r2, [r3, #32]
  vm->exception = mrbc_nil_value();
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	3328      	adds	r3, #40	; 0x28
 800ee7e:	2200      	movs	r2, #0
 800ee80:	601a      	str	r2, [r3, #0]
 800ee82:	605a      	str	r2, [r3, #4]
 800ee84:	609a      	str	r2, [r3, #8]
 800ee86:	60da      	str	r2, [r3, #12]
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  vm->flag_preemption = 0;
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	2200      	movs	r2, #0
 800ee94:	70da      	strb	r2, [r3, #3]
  vm->flag_stop = 0;
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	7913      	ldrb	r3, [r2, #4]
 800ee9a:	f36f 0341 	bfc	r3, #1, #1
 800ee9e:	7113      	strb	r3, [r2, #4]

  // set self to reg[0], others nil
  vm->regs[0] = mrbc_instance_new(vm, mrbc_class_object, 0);
 800eea0:	697c      	ldr	r4, [r7, #20]
 800eea2:	4638      	mov	r0, r7
 800eea4:	2300      	movs	r3, #0
 800eea6:	4a18      	ldr	r2, [pc, #96]	; (800ef08 <mrbc_vm_begin+0xc4>)
 800eea8:	6979      	ldr	r1, [r7, #20]
 800eeaa:	f7fa faef 	bl	800948c <mrbc_instance_new>
 800eeae:	3438      	adds	r4, #56	; 0x38
 800eeb0:	463b      	mov	r3, r7
 800eeb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eeb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if( vm->regs[0].instance == NULL ) return;	// ENOMEM
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d01e      	beq.n	800eefe <mrbc_vm_begin+0xba>
  for( int i = 1; i < vm->regs_size; i++ ) {
 800eec0:	2301      	movs	r3, #1
 800eec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eec4:	e014      	b.n	800eef0 <mrbc_vm_begin+0xac>
    vm->regs[i] = mrbc_nil_value();
 800eec6:	697a      	ldr	r2, [r7, #20]
 800eec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeca:	011b      	lsls	r3, r3, #4
 800eecc:	4413      	add	r3, r2
 800eece:	3338      	adds	r3, #56	; 0x38
 800eed0:	461a      	mov	r2, r3
 800eed2:	2300      	movs	r3, #0
 800eed4:	6013      	str	r3, [r2, #0]
 800eed6:	6053      	str	r3, [r2, #4]
 800eed8:	6093      	str	r3, [r2, #8]
 800eeda:	60d3      	str	r3, [r2, #12]
 800eedc:	697a      	ldr	r2, [r7, #20]
 800eede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eee0:	011b      	lsls	r3, r3, #4
 800eee2:	4413      	add	r3, r2
 800eee4:	3338      	adds	r3, #56	; 0x38
 800eee6:	2201      	movs	r2, #1
 800eee8:	701a      	strb	r2, [r3, #0]
  for( int i = 1; i < vm->regs_size; i++ ) {
 800eeea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeec:	3301      	adds	r3, #1
 800eeee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	88db      	ldrh	r3, [r3, #6]
 800eef4:	461a      	mov	r2, r3
 800eef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eef8:	4293      	cmp	r3, r2
 800eefa:	dbe4      	blt.n	800eec6 <mrbc_vm_begin+0x82>
 800eefc:	e000      	b.n	800ef00 <mrbc_vm_begin+0xbc>
  if( vm->regs[0].instance == NULL ) return;	// ENOMEM
 800eefe:	bf00      	nop
  }
}
 800ef00:	3744      	adds	r7, #68	; 0x44
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd90      	pop	{r4, r7, pc}
 800ef06:	bf00      	nop
 800ef08:	20000064 	.word	0x20000064

0800ef0c <mrbc_vm_end>:
/*! VM finalizer.

  @param  vm  Pointer to VM
*/
void mrbc_vm_end( struct VM *vm )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  if( mrbc_israised(vm) ) {
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800ef1a:	2b0e      	cmp	r3, #14
 800ef1c:	d107      	bne.n	800ef2e <mrbc_vm_end+0x22>
#if defined(MRBC_ABORT_BY_EXCEPTION)
    MRBC_ABORT_BY_EXCEPTION(vm);
#else
    mrbc_print_vm_exception( vm );
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f7fc fb6a 	bl	800b5f8 <mrbc_print_vm_exception>
    mrbc_decref(&vm->exception);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	3328      	adds	r3, #40	; 0x28
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7ff fad7 	bl	800e4dc <mrbc_decref>
#endif
  }
  assert( vm->ret_blk == 0 );
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a1b      	ldr	r3, [r3, #32]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d006      	beq.n	800ef44 <mrbc_vm_end+0x38>
 800ef36:	4b16      	ldr	r3, [pc, #88]	; (800ef90 <mrbc_vm_end+0x84>)
 800ef38:	4a16      	ldr	r2, [pc, #88]	; (800ef94 <mrbc_vm_end+0x88>)
 800ef3a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800ef3e:	4816      	ldr	r0, [pc, #88]	; (800ef98 <mrbc_vm_end+0x8c>)
 800ef40:	f006 fb80 	bl	8015644 <__assert_func>

  int n_used = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	60bb      	str	r3, [r7, #8]
  for( int i = 0; i < vm->regs_size; i++ ) {
 800ef48:	2300      	movs	r3, #0
 800ef4a:	60fb      	str	r3, [r7, #12]
 800ef4c:	e015      	b.n	800ef7a <mrbc_vm_end+0x6e>
    //mrbc_printf("vm->regs[%d].tt = %d\n", i, mrbc_type(vm->regs[i]));
    if( mrbc_type(vm->regs[i]) != MRBC_TT_NIL ) n_used = i;
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	011b      	lsls	r3, r3, #4
 800ef54:	4413      	add	r3, r2
 800ef56:	3338      	adds	r3, #56	; 0x38
 800ef58:	f993 3000 	ldrsb.w	r3, [r3]
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d001      	beq.n	800ef64 <mrbc_vm_end+0x58>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	60bb      	str	r3, [r7, #8]
    mrbc_decref_empty(&vm->regs[i]);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	011b      	lsls	r3, r3, #4
 800ef68:	3338      	adds	r3, #56	; 0x38
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fafa 	bl	800e568 <mrbc_decref_empty>
  for( int i = 0; i < vm->regs_size; i++ ) {
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	3301      	adds	r3, #1
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	88db      	ldrh	r3, [r3, #6]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	4293      	cmp	r3, r2
 800ef84:	dbe3      	blt.n	800ef4e <mrbc_vm_end+0x42>

#if defined(MRBC_ALLOC_VMID)
  mrbc_global_clear_vm_id();
  mrbc_free_all(vm);
#endif
}
 800ef86:	bf00      	nop
 800ef88:	bf00      	nop
 800ef8a:	3710      	adds	r7, #16
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	0801a398 	.word	0x0801a398
 800ef94:	0801bf28 	.word	0x0801bf28
 800ef98:	0801a368 	.word	0x0801a368

0800ef9c <op_nop>:
/*! OP_NOP

  No operation
*/
static inline void op_nop( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  FETCH_Z();
}
 800efa6:	bf00      	nop
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <op_move>:
/*! OP_MOVE

  R[a] = R[b]
*/
static inline void op_move( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800efb2:	b590      	push	{r4, r7, lr}
 800efb4:	b085      	sub	sp, #20
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
 800efba:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	691b      	ldr	r3, [r3, #16]
 800efc0:	1c59      	adds	r1, r3, #1
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	6111      	str	r1, [r2, #16]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	60fb      	str	r3, [r7, #12]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	691b      	ldr	r3, [r3, #16]
 800efce:	1c59      	adds	r1, r3, #1
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	6111      	str	r1, [r2, #16]
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	60bb      	str	r3, [r7, #8]

  mrbc_incref(&regs[b]);
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	011b      	lsls	r3, r3, #4
 800efdc:	683a      	ldr	r2, [r7, #0]
 800efde:	4413      	add	r3, r2
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7ff fa47 	bl	800e474 <mrbc_incref>
  mrbc_decref(&regs[a]);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	011b      	lsls	r3, r3, #4
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	4413      	add	r3, r2
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff fa74 	bl	800e4dc <mrbc_decref>
  regs[a] = regs[b];
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	011b      	lsls	r3, r3, #4
 800eff8:	683a      	ldr	r2, [r7, #0]
 800effa:	18d1      	adds	r1, r2, r3
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	011b      	lsls	r3, r3, #4
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	4413      	add	r3, r2
 800f004:	461c      	mov	r4, r3
 800f006:	460b      	mov	r3, r1
 800f008:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f00a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f00e:	bf00      	nop
 800f010:	3714      	adds	r7, #20
 800f012:	46bd      	mov	sp, r7
 800f014:	bd90      	pop	{r4, r7, pc}

0800f016 <op_loadl>:
/*! OP_LOADL

  R[a] = Pool[b]
*/
static inline void op_loadl( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f016:	b590      	push	{r4, r7, lr}
 800f018:	b089      	sub	sp, #36	; 0x24
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6178      	str	r0, [r7, #20]
 800f01e:	6139      	str	r1, [r7, #16]
  FETCH_BB();
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	1c59      	adds	r1, r3, #1
 800f026:	697a      	ldr	r2, [r7, #20]
 800f028:	6111      	str	r1, [r2, #16]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	61fb      	str	r3, [r7, #28]
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	1c59      	adds	r1, r3, #1
 800f034:	697a      	ldr	r2, [r7, #20]
 800f036:	6111      	str	r1, [r2, #16]
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	61bb      	str	r3, [r7, #24]

  mrbc_decref(&regs[a]);
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	011b      	lsls	r3, r3, #4
 800f040:	693a      	ldr	r2, [r7, #16]
 800f042:	4413      	add	r3, r2
 800f044:	4618      	mov	r0, r3
 800f046:	f7ff fa49 	bl	800e4dc <mrbc_decref>
  regs[a] = mrbc_irep_pool_value(vm, b);
 800f04a:	69b9      	ldr	r1, [r7, #24]
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	011b      	lsls	r3, r3, #4
 800f050:	693a      	ldr	r2, [r7, #16]
 800f052:	18d4      	adds	r4, r2, r3
 800f054:	463b      	mov	r3, r7
 800f056:	460a      	mov	r2, r1
 800f058:	6979      	ldr	r1, [r7, #20]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fd fa88 	bl	800c570 <mrbc_irep_pool_value>
 800f060:	463b      	mov	r3, r7
 800f062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f068:	bf00      	nop
 800f06a:	3724      	adds	r7, #36	; 0x24
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd90      	pop	{r4, r7, pc}

0800f070 <op_loadi>:
/*! OP_LOADI

  R[a] = mrb_int(b)
*/
static inline void op_loadi( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	1c59      	adds	r1, r3, #1
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	6111      	str	r1, [r2, #16]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	60fb      	str	r3, [r7, #12]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	1c59      	adds	r1, r3, #1
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	6111      	str	r1, [r2, #16]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	60bb      	str	r3, [r7, #8]

  mrbc_decref(&regs[a]);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	011b      	lsls	r3, r3, #4
 800f09a:	683a      	ldr	r2, [r7, #0]
 800f09c:	4413      	add	r3, r2
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fa1c 	bl	800e4dc <mrbc_decref>
  mrbc_set_integer(&regs[a], b);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	011b      	lsls	r3, r3, #4
 800f0a8:	683a      	ldr	r2, [r7, #0]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	2204      	movs	r2, #4
 800f0ae:	701a      	strb	r2, [r3, #0]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	011b      	lsls	r3, r3, #4
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	68ba      	ldr	r2, [r7, #8]
 800f0ba:	609a      	str	r2, [r3, #8]
}
 800f0bc:	bf00      	nop
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <op_loadineg>:
/*! OP_LOADINEG

  R[a] = mrb_int(-b)
*/
static inline void op_loadineg( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	691b      	ldr	r3, [r3, #16]
 800f0d2:	1c59      	adds	r1, r3, #1
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	6111      	str	r1, [r2, #16]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	60fb      	str	r3, [r7, #12]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	1c59      	adds	r1, r3, #1
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	6111      	str	r1, [r2, #16]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	60bb      	str	r3, [r7, #8]

  mrbc_decref(&regs[a]);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	011b      	lsls	r3, r3, #4
 800f0ee:	683a      	ldr	r2, [r7, #0]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7ff f9f2 	bl	800e4dc <mrbc_decref>
  mrbc_set_integer(&regs[a], -(mrbc_int_t)b);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	011b      	lsls	r3, r3, #4
 800f0fc:	683a      	ldr	r2, [r7, #0]
 800f0fe:	4413      	add	r3, r2
 800f100:	2204      	movs	r2, #4
 800f102:	701a      	strb	r2, [r3, #0]
 800f104:	68ba      	ldr	r2, [r7, #8]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	011b      	lsls	r3, r3, #4
 800f10a:	6839      	ldr	r1, [r7, #0]
 800f10c:	440b      	add	r3, r1
 800f10e:	4252      	negs	r2, r2
 800f110:	609a      	str	r2, [r3, #8]
}
 800f112:	bf00      	nop
 800f114:	3710      	adds	r7, #16
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}

0800f11a <op_loadi_n>:
/*! OP_LOADI_n (n=-1,0,1..7)

  R[a] = mrb_int(n)
*/
static inline void op_loadi_n( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b086      	sub	sp, #24
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
 800f122:	6039      	str	r1, [r7, #0]
  // get n
  int opcode = vm->inst[-1];
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	691b      	ldr	r3, [r3, #16]
 800f128:	3b01      	subs	r3, #1
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	617b      	str	r3, [r7, #20]
  int n = opcode - OP_LOADI_0;
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	3b06      	subs	r3, #6
 800f132:	613b      	str	r3, [r7, #16]

  FETCH_B();
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	691b      	ldr	r3, [r3, #16]
 800f138:	1c59      	adds	r1, r3, #1
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	6111      	str	r1, [r2, #16]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	011b      	lsls	r3, r3, #4
 800f146:	683a      	ldr	r2, [r7, #0]
 800f148:	4413      	add	r3, r2
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7ff f9c6 	bl	800e4dc <mrbc_decref>
  mrbc_set_integer(&regs[a], n);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	011b      	lsls	r3, r3, #4
 800f154:	683a      	ldr	r2, [r7, #0]
 800f156:	4413      	add	r3, r2
 800f158:	2204      	movs	r2, #4
 800f15a:	701a      	strb	r2, [r3, #0]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	011b      	lsls	r3, r3, #4
 800f160:	683a      	ldr	r2, [r7, #0]
 800f162:	4413      	add	r3, r2
 800f164:	693a      	ldr	r2, [r7, #16]
 800f166:	609a      	str	r2, [r3, #8]
}
 800f168:	bf00      	nop
 800f16a:	3718      	adds	r7, #24
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <op_loadi16>:
/*! OP_LOADI16

  R[a] = mrb_int(b)
*/
static inline void op_loadi16( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b086      	sub	sp, #24
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	1c59      	adds	r1, r3, #1
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	6111      	str	r1, [r2, #16]
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	617b      	str	r3, [r7, #20]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	1c59      	adds	r1, r3, #1
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	6111      	str	r1, [r2, #16]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	613b      	str	r3, [r7, #16]
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	021a      	lsls	r2, r3, #8
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	691b      	ldr	r3, [r3, #16]
 800f19e:	1c58      	adds	r0, r3, #1
 800f1a0:	6879      	ldr	r1, [r7, #4]
 800f1a2:	6108      	str	r0, [r1, #16]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	613b      	str	r3, [r7, #16]

  mrbc_decref(&regs[a]);
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	011b      	lsls	r3, r3, #4
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7ff f992 	bl	800e4dc <mrbc_decref>
  int16_t signed_b = (int16_t)b;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	81fb      	strh	r3, [r7, #14]
  mrbc_set_integer(&regs[a], signed_b);
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	011b      	lsls	r3, r3, #4
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	2204      	movs	r2, #4
 800f1c6:	701a      	strb	r2, [r3, #0]
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	011b      	lsls	r3, r3, #4
 800f1cc:	683a      	ldr	r2, [r7, #0]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f1d4:	609a      	str	r2, [r3, #8]
}
 800f1d6:	bf00      	nop
 800f1d8:	3718      	adds	r7, #24
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <op_loadi32>:
/*! OP_LOADI32

  R[a] = mrb_int((b<<16)+c)
*/
static inline void op_loadi32( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b086      	sub	sp, #24
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
 800f1e6:	6039      	str	r1, [r7, #0]
  FETCH_BSS();
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	691b      	ldr	r3, [r3, #16]
 800f1ec:	1c59      	adds	r1, r3, #1
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	6111      	str	r1, [r2, #16]
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	617b      	str	r3, [r7, #20]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	691b      	ldr	r3, [r3, #16]
 800f1fa:	1c59      	adds	r1, r3, #1
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	6111      	str	r1, [r2, #16]
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	613b      	str	r3, [r7, #16]
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	021a      	lsls	r2, r3, #8
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	691b      	ldr	r3, [r3, #16]
 800f20c:	1c58      	adds	r0, r3, #1
 800f20e:	6879      	ldr	r1, [r7, #4]
 800f210:	6108      	str	r0, [r1, #16]
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	4313      	orrs	r3, r2
 800f216:	613b      	str	r3, [r7, #16]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	1c59      	adds	r1, r3, #1
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	6111      	str	r1, [r2, #16]
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	60fb      	str	r3, [r7, #12]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	021a      	lsls	r2, r3, #8
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	691b      	ldr	r3, [r3, #16]
 800f22e:	1c58      	adds	r0, r3, #1
 800f230:	6879      	ldr	r1, [r7, #4]
 800f232:	6108      	str	r0, [r1, #16]
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	4313      	orrs	r3, r2
 800f238:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	011b      	lsls	r3, r3, #4
 800f23e:	683a      	ldr	r2, [r7, #0]
 800f240:	4413      	add	r3, r2
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff f94a 	bl	800e4dc <mrbc_decref>
  mrbc_set_integer(&regs[a], (((int32_t)b<<16)+(int32_t)c));
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	011b      	lsls	r3, r3, #4
 800f24c:	683a      	ldr	r2, [r7, #0]
 800f24e:	4413      	add	r3, r2
 800f250:	2204      	movs	r2, #4
 800f252:	701a      	strb	r2, [r3, #0]
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	0419      	lsls	r1, r3, #16
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	011b      	lsls	r3, r3, #4
 800f25e:	6838      	ldr	r0, [r7, #0]
 800f260:	4403      	add	r3, r0
 800f262:	440a      	add	r2, r1
 800f264:	609a      	str	r2, [r3, #8]
}
 800f266:	bf00      	nop
 800f268:	3718      	adds	r7, #24
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <op_loadsym>:
/*! OP_LOADSYM

  R[a] = Syms[b]
*/
static inline void op_loadsym( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f26e:	b580      	push	{r7, lr}
 800f270:	b084      	sub	sp, #16
 800f272:	af00      	add	r7, sp, #0
 800f274:	6078      	str	r0, [r7, #4]
 800f276:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	691b      	ldr	r3, [r3, #16]
 800f27c:	1c59      	adds	r1, r3, #1
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	6111      	str	r1, [r2, #16]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	60fb      	str	r3, [r7, #12]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	691b      	ldr	r3, [r3, #16]
 800f28a:	1c59      	adds	r1, r3, #1
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	6111      	str	r1, [r2, #16]
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	60bb      	str	r3, [r7, #8]

  mrbc_decref(&regs[a]);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	011b      	lsls	r3, r3, #4
 800f298:	683a      	ldr	r2, [r7, #0]
 800f29a:	4413      	add	r3, r2
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7ff f91d 	bl	800e4dc <mrbc_decref>
  mrbc_set_symbol(&regs[a], mrbc_irep_symbol_id(vm->cur_irep, b));
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	011b      	lsls	r3, r3, #4
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	2206      	movs	r2, #6
 800f2ac:	701a      	strb	r2, [r3, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	f103 0220 	add.w	r2, r3, #32
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	005b      	lsls	r3, r3, #1
 800f2ba:	4413      	add	r3, r2
 800f2bc:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	011b      	lsls	r3, r3, #4
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	460a      	mov	r2, r1
 800f2ca:	609a      	str	r2, [r3, #8]
}
 800f2cc:	bf00      	nop
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <op_loadnil>:
/*! OP_LOADNIL

  R[a] = nil
*/
static inline void op_loadnil( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	1c59      	adds	r1, r3, #1
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	6111      	str	r1, [r2, #16]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	011b      	lsls	r3, r3, #4
 800f2f0:	683a      	ldr	r2, [r7, #0]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7ff f8f1 	bl	800e4dc <mrbc_decref>
  mrbc_set_nil(&regs[a]);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	011b      	lsls	r3, r3, #4
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	4413      	add	r3, r2
 800f302:	2201      	movs	r2, #1
 800f304:	701a      	strb	r2, [r3, #0]
}
 800f306:	bf00      	nop
 800f308:	3710      	adds	r7, #16
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}

0800f30e <op_loadself>:
/*! OP_LOADSELF

  R[a] = self
*/
static inline void op_loadself( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f30e:	b590      	push	{r4, r7, lr}
 800f310:	b085      	sub	sp, #20
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
 800f316:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	1c59      	adds	r1, r3, #1
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	6111      	str	r1, [r2, #16]
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	011b      	lsls	r3, r3, #4
 800f32a:	683a      	ldr	r2, [r7, #0]
 800f32c:	4413      	add	r3, r2
 800f32e:	4618      	mov	r0, r3
 800f330:	f7ff f8d4 	bl	800e4dc <mrbc_decref>
  regs[a] = *mrbc_get_self( vm, regs );
 800f334:	6839      	ldr	r1, [r7, #0]
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7ff fbb4 	bl	800eaa4 <mrbc_get_self>
 800f33c:	4601      	mov	r1, r0
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	011b      	lsls	r3, r3, #4
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	4413      	add	r3, r2
 800f346:	461c      	mov	r4, r3
 800f348:	460b      	mov	r3, r1
 800f34a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f34c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref( &regs[a] );
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	011b      	lsls	r3, r3, #4
 800f354:	683a      	ldr	r2, [r7, #0]
 800f356:	4413      	add	r3, r2
 800f358:	4618      	mov	r0, r3
 800f35a:	f7ff f88b 	bl	800e474 <mrbc_incref>
}
 800f35e:	bf00      	nop
 800f360:	3714      	adds	r7, #20
 800f362:	46bd      	mov	sp, r7
 800f364:	bd90      	pop	{r4, r7, pc}

0800f366 <op_loadt>:
/*! OP_LOADT

  R[a] = true
*/
static inline void op_loadt( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b084      	sub	sp, #16
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
 800f36e:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	691b      	ldr	r3, [r3, #16]
 800f374:	1c59      	adds	r1, r3, #1
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	6111      	str	r1, [r2, #16]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	011b      	lsls	r3, r3, #4
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	4413      	add	r3, r2
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff f8a8 	bl	800e4dc <mrbc_decref>
  mrbc_set_true(&regs[a]);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	011b      	lsls	r3, r3, #4
 800f390:	683a      	ldr	r2, [r7, #0]
 800f392:	4413      	add	r3, r2
 800f394:	2203      	movs	r2, #3
 800f396:	701a      	strb	r2, [r3, #0]
}
 800f398:	bf00      	nop
 800f39a:	3710      	adds	r7, #16
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <op_loadf>:
/*! OP_LOADF

  R[a] = false
*/
static inline void op_loadf( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	1c59      	adds	r1, r3, #1
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	6111      	str	r1, [r2, #16]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	011b      	lsls	r3, r3, #4
 800f3bc:	683a      	ldr	r2, [r7, #0]
 800f3be:	4413      	add	r3, r2
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7ff f88b 	bl	800e4dc <mrbc_decref>
  mrbc_set_false(&regs[a]);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	011b      	lsls	r3, r3, #4
 800f3ca:	683a      	ldr	r2, [r7, #0]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	2202      	movs	r2, #2
 800f3d0:	701a      	strb	r2, [r3, #0]
}
 800f3d2:	bf00      	nop
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}

0800f3da <op_getgv>:
/*! OP_GETGV

  R[a] = getglobal(Syms[b])
*/
static inline void op_getgv( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f3da:	b590      	push	{r4, r7, lr}
 800f3dc:	b087      	sub	sp, #28
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
 800f3e2:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	691b      	ldr	r3, [r3, #16]
 800f3e8:	1c59      	adds	r1, r3, #1
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	6111      	str	r1, [r2, #16]
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	617b      	str	r3, [r7, #20]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	691b      	ldr	r3, [r3, #16]
 800f3f6:	1c59      	adds	r1, r3, #1
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	6111      	str	r1, [r2, #16]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	613b      	str	r3, [r7, #16]

  mrbc_decref(&regs[a]);
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	011b      	lsls	r3, r3, #4
 800f404:	683a      	ldr	r2, [r7, #0]
 800f406:	4413      	add	r3, r2
 800f408:	4618      	mov	r0, r3
 800f40a:	f7ff f867 	bl	800e4dc <mrbc_decref>
  mrbc_value *v = mrbc_get_global( mrbc_irep_symbol_id(vm->cur_irep, b) );
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	f103 0220 	add.w	r2, r3, #32
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	4413      	add	r3, r2
 800f41c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f420:	4618      	mov	r0, r3
 800f422:	f7fc fa9f 	bl	800b964 <mrbc_get_global>
 800f426:	60f8      	str	r0, [r7, #12]
  if( v == NULL ) {
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d106      	bne.n	800f43c <op_getgv+0x62>
    mrbc_set_nil(&regs[a]);
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	011b      	lsls	r3, r3, #4
 800f432:	683a      	ldr	r2, [r7, #0]
 800f434:	4413      	add	r3, r2
 800f436:	2201      	movs	r2, #1
 800f438:	701a      	strb	r2, [r3, #0]
  } else {
    mrbc_incref(v);
    regs[a] = *v;
  }
}
 800f43a:	e00b      	b.n	800f454 <op_getgv+0x7a>
    mrbc_incref(v);
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7ff f819 	bl	800e474 <mrbc_incref>
    regs[a] = *v;
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	011b      	lsls	r3, r3, #4
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	441a      	add	r2, r3
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	4614      	mov	r4, r2
 800f44e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f454:	bf00      	nop
 800f456:	371c      	adds	r7, #28
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd90      	pop	{r4, r7, pc}

0800f45c <op_setgv>:
/*! OP_SETGV

  setglobal(Syms[b], R[a])
*/
static inline void op_setgv( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	691b      	ldr	r3, [r3, #16]
 800f46a:	1c59      	adds	r1, r3, #1
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	6111      	str	r1, [r2, #16]
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	60fb      	str	r3, [r7, #12]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	1c59      	adds	r1, r3, #1
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	6111      	str	r1, [r2, #16]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	60bb      	str	r3, [r7, #8]

  mrbc_incref(&regs[a]);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	011b      	lsls	r3, r3, #4
 800f486:	683a      	ldr	r2, [r7, #0]
 800f488:	4413      	add	r3, r2
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7fe fff2 	bl	800e474 <mrbc_incref>
  mrbc_set_global( mrbc_irep_symbol_id(vm->cur_irep, b), &regs[a] );
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	f103 0220 	add.w	r2, r3, #32
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	005b      	lsls	r3, r3, #1
 800f49c:	4413      	add	r3, r2
 800f49e:	f9b3 0000 	ldrsh.w	r0, [r3]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	011b      	lsls	r3, r3, #4
 800f4a6:	683a      	ldr	r2, [r7, #0]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	f7fc fa46 	bl	800b93c <mrbc_set_global>
}
 800f4b0:	bf00      	nop
 800f4b2:	3710      	adds	r7, #16
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <op_getiv>:
/*! OP_GETIV

  R[a] = ivget(Syms[b])
*/
static inline void op_getiv( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f4b8:	b590      	push	{r4, r7, lr}
 800f4ba:	b08d      	sub	sp, #52	; 0x34
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6178      	str	r0, [r7, #20]
 800f4c0:	6139      	str	r1, [r7, #16]
  FETCH_BB();
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	1c59      	adds	r1, r3, #1
 800f4c8:	697a      	ldr	r2, [r7, #20]
 800f4ca:	6111      	str	r1, [r2, #16]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	691b      	ldr	r3, [r3, #16]
 800f4d4:	1c59      	adds	r1, r3, #1
 800f4d6:	697a      	ldr	r2, [r7, #20]
 800f4d8:	6111      	str	r1, [r2, #16]
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	62bb      	str	r3, [r7, #40]	; 0x28

  const char *sym_name = mrbc_irep_symbol_cstr(vm->cur_irep, b);
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	f103 0220 	add.w	r2, r3, #32
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	005b      	lsls	r3, r3, #1
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7fe fba5 	bl	800dc40 <mrbc_symid_to_str>
 800f4f6:	6278      	str	r0, [r7, #36]	; 0x24
  mrbc_sym sym_id = mrbc_str_to_symid(sym_name+1);   // skip '@'
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fe fb67 	bl	800dbd0 <mrbc_str_to_symid>
 800f502:	4603      	mov	r3, r0
 800f504:	847b      	strh	r3, [r7, #34]	; 0x22
  if( sym_id < 0 ) {
 800f506:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	da05      	bge.n	800f51a <op_getiv+0x62>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 800f50e:	4a12      	ldr	r2, [pc, #72]	; (800f558 <op_getiv+0xa0>)
 800f510:	4912      	ldr	r1, [pc, #72]	; (800f55c <op_getiv+0xa4>)
 800f512:	6978      	ldr	r0, [r7, #20]
 800f514:	f7fb ff88 	bl	800b428 <mrbc_raise>
    return;
 800f518:	e01a      	b.n	800f550 <op_getiv+0x98>
  }
  mrbc_value *self = mrbc_get_self( vm, regs );
 800f51a:	6939      	ldr	r1, [r7, #16]
 800f51c:	6978      	ldr	r0, [r7, #20]
 800f51e:	f7ff fac1 	bl	800eaa4 <mrbc_get_self>
 800f522:	61f8      	str	r0, [r7, #28]

  mrbc_decref(&regs[a]);
 800f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f526:	011b      	lsls	r3, r3, #4
 800f528:	693a      	ldr	r2, [r7, #16]
 800f52a:	4413      	add	r3, r2
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7fe ffd5 	bl	800e4dc <mrbc_decref>
  regs[a] = mrbc_instance_getiv(self, sym_id);
 800f532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f534:	011b      	lsls	r3, r3, #4
 800f536:	693a      	ldr	r2, [r7, #16]
 800f538:	18d4      	adds	r4, r2, r3
 800f53a:	463b      	mov	r3, r7
 800f53c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800f540:	69f9      	ldr	r1, [r7, #28]
 800f542:	4618      	mov	r0, r3
 800f544:	f7fa f81d 	bl	8009582 <mrbc_instance_getiv>
 800f548:	463b      	mov	r3, r7
 800f54a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f54c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f550:	3734      	adds	r7, #52	; 0x34
 800f552:	46bd      	mov	sp, r7
 800f554:	bd90      	pop	{r4, r7, pc}
 800f556:	bf00      	nop
 800f558:	0801a3ac 	.word	0x0801a3ac
 800f55c:	2000010c 	.word	0x2000010c

0800f560 <op_setiv>:
/*! OP_SETIV

  ivset(Syms[b],R[a])
*/
static inline void op_setiv( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b088      	sub	sp, #32
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	691b      	ldr	r3, [r3, #16]
 800f56e:	1c59      	adds	r1, r3, #1
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	6111      	str	r1, [r2, #16]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	61fb      	str	r3, [r7, #28]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	691b      	ldr	r3, [r3, #16]
 800f57c:	1c59      	adds	r1, r3, #1
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	6111      	str	r1, [r2, #16]
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	61bb      	str	r3, [r7, #24]

  const char *sym_name = mrbc_irep_symbol_cstr(vm->cur_irep, b);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	f103 0220 	add.w	r2, r3, #32
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	4413      	add	r3, r2
 800f594:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fe fb51 	bl	800dc40 <mrbc_symid_to_str>
 800f59e:	6178      	str	r0, [r7, #20]
  mrbc_sym sym_id = mrbc_str_to_symid(sym_name+1);   // skip '@'
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fe fb13 	bl	800dbd0 <mrbc_str_to_symid>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	827b      	strh	r3, [r7, #18]
  if( sym_id < 0 ) {
 800f5ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	da05      	bge.n	800f5c2 <op_setiv+0x62>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 800f5b6:	4a0c      	ldr	r2, [pc, #48]	; (800f5e8 <op_setiv+0x88>)
 800f5b8:	490c      	ldr	r1, [pc, #48]	; (800f5ec <op_setiv+0x8c>)
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f7fb ff34 	bl	800b428 <mrbc_raise>
    return;
 800f5c0:	e00e      	b.n	800f5e0 <op_setiv+0x80>
  }
  mrbc_value *self = mrbc_get_self( vm, regs );
 800f5c2:	6839      	ldr	r1, [r7, #0]
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7ff fa6d 	bl	800eaa4 <mrbc_get_self>
 800f5ca:	60f8      	str	r0, [r7, #12]

  mrbc_instance_setiv(self, sym_id, &regs[a]);
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	011b      	lsls	r3, r3, #4
 800f5d0:	683a      	ldr	r2, [r7, #0]
 800f5d2:	441a      	add	r2, r3
 800f5d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5d8:	4619      	mov	r1, r3
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f7f9 ffba 	bl	8009554 <mrbc_instance_setiv>
}
 800f5e0:	3720      	adds	r7, #32
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	0801a3ac 	.word	0x0801a3ac
 800f5ec:	2000010c 	.word	0x2000010c

0800f5f0 <op_getconst>:
/*! OP_GETCONST

  R[a] = constget(Syms[b])
*/
static inline void op_getconst( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f5f0:	b590      	push	{r4, r7, lr}
 800f5f2:	b089      	sub	sp, #36	; 0x24
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	1c59      	adds	r1, r3, #1
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	6111      	str	r1, [r2, #16]
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	613b      	str	r3, [r7, #16]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	1c59      	adds	r1, r3, #1
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	6111      	str	r1, [r2, #16]
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	60fb      	str	r3, [r7, #12]

  mrbc_sym sym_id = mrbc_irep_symbol_id(vm->cur_irep, b);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	f103 0220 	add.w	r2, r3, #32
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	005b      	lsls	r3, r3, #1
 800f622:	4413      	add	r3, r2
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	817b      	strh	r3, [r7, #10]
  mrbc_class *cls = NULL;
 800f628:	2300      	movs	r3, #0
 800f62a:	61fb      	str	r3, [r7, #28]
  mrbc_value *v;

  if( vm->target_class->sym_id != MRBC_SYM(Object) ) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	699b      	ldr	r3, [r3, #24]
 800f630:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f634:	2b27      	cmp	r3, #39	; 0x27
 800f636:	d003      	beq.n	800f640 <op_getconst+0x50>
    cls = vm->target_class;		// References in class definitions.
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	699b      	ldr	r3, [r3, #24]
 800f63c:	61fb      	str	r3, [r7, #28]
 800f63e:	e007      	b.n	800f650 <op_getconst+0x60>
  } else if( vm->callinfo_tail ) {
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	69db      	ldr	r3, [r3, #28]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d003      	beq.n	800f650 <op_getconst+0x60>
    cls = vm->callinfo_tail->own_class;	// References in methods.
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	69db      	ldr	r3, [r3, #28]
 800f64c:	695b      	ldr	r3, [r3, #20]
 800f64e:	61fb      	str	r3, [r7, #28]
  }
  if( !cls ) goto TOP_LEVEL;
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d03b      	beq.n	800f6ce <op_getconst+0xde>

  // search in my class, then search nested outer class.
  mrbc_class *cls1 = cls;
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	617b      	str	r3, [r7, #20]
  while( 1 ) {
    v = mrbc_get_class_const(cls1, sym_id);
 800f65a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f65e:	4619      	mov	r1, r3
 800f660:	6978      	ldr	r0, [r7, #20]
 800f662:	f7fc f933 	bl	800b8cc <mrbc_get_class_const>
 800f666:	61b8      	str	r0, [r7, #24]
    if( v != NULL ) goto DONE;
 800f668:	69bb      	ldr	r3, [r7, #24]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d145      	bne.n	800f6fa <op_getconst+0x10a>
    if( !mrbc_is_nested_symid(cls1->sym_id) ) break;
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f674:	4618      	mov	r0, r3
 800f676:	f7fe ff85 	bl	800e584 <mrbc_is_nested_symid>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d103      	bne.n	800f688 <op_getconst+0x98>
    mrbc_separate_nested_symid( cls1->sym_id, &outer_id, 0 );
    cls1 = mrbc_get_const( outer_id )->cls;
  }

  // search in super class.
  cls1 = cls->super;
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	617b      	str	r3, [r7, #20]
  while( cls1 ) {
 800f686:	e01e      	b.n	800f6c6 <op_getconst+0xd6>
    mrbc_separate_nested_symid( cls1->sym_id, &outer_id, 0 );
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f68e:	f107 0108 	add.w	r1, r7, #8
 800f692:	2200      	movs	r2, #0
 800f694:	4618      	mov	r0, r3
 800f696:	f7fe fb83 	bl	800dda0 <mrbc_separate_nested_symid>
    cls1 = mrbc_get_const( outer_id )->cls;
 800f69a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fc f902 	bl	800b8a8 <mrbc_get_const>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	617b      	str	r3, [r7, #20]
  while( 1 ) {
 800f6aa:	e7d6      	b.n	800f65a <op_getconst+0x6a>
    v = mrbc_get_class_const(cls1, sym_id);
 800f6ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	6978      	ldr	r0, [r7, #20]
 800f6b4:	f7fc f90a 	bl	800b8cc <mrbc_get_class_const>
 800f6b8:	61b8      	str	r0, [r7, #24]
    if( v != NULL ) goto DONE;
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d11e      	bne.n	800f6fe <op_getconst+0x10e>
    cls1 = cls1->super;
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	617b      	str	r3, [r7, #20]
  while( cls1 ) {
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d1ef      	bne.n	800f6ac <op_getconst+0xbc>
  }

 TOP_LEVEL:
 800f6cc:	e000      	b.n	800f6d0 <op_getconst+0xe0>
  if( !cls ) goto TOP_LEVEL;
 800f6ce:	bf00      	nop
  // is top level constant definition?
  v = mrbc_get_const(sym_id);
 800f6d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7fc f8e7 	bl	800b8a8 <mrbc_get_const>
 800f6da:	61b8      	str	r0, [r7, #24]
  if( v == NULL ) {
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d10f      	bne.n	800f702 <op_getconst+0x112>
    mrbc_raisef( vm, MRBC_CLASS(NameError),
 800f6e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fe faaa 	bl	800dc40 <mrbc_symid_to_str>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	4a10      	ldr	r2, [pc, #64]	; (800f730 <op_getconst+0x140>)
 800f6f0:	4910      	ldr	r1, [pc, #64]	; (800f734 <op_getconst+0x144>)
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7fb feec 	bl	800b4d0 <mrbc_raisef>
		 "uninitialized constant %s", mrbc_symid_to_str(sym_id));
    return;
 800f6f8:	e017      	b.n	800f72a <op_getconst+0x13a>
    if( v != NULL ) goto DONE;
 800f6fa:	bf00      	nop
 800f6fc:	e002      	b.n	800f704 <op_getconst+0x114>
    if( v != NULL ) goto DONE;
 800f6fe:	bf00      	nop
 800f700:	e000      	b.n	800f704 <op_getconst+0x114>
  }

 DONE:
 800f702:	bf00      	nop
  mrbc_incref(v);
 800f704:	69b8      	ldr	r0, [r7, #24]
 800f706:	f7fe feb5 	bl	800e474 <mrbc_incref>
  mrbc_decref(&regs[a]);
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	011b      	lsls	r3, r3, #4
 800f70e:	683a      	ldr	r2, [r7, #0]
 800f710:	4413      	add	r3, r2
 800f712:	4618      	mov	r0, r3
 800f714:	f7fe fee2 	bl	800e4dc <mrbc_decref>
  regs[a] = *v;
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	011b      	lsls	r3, r3, #4
 800f71c:	683a      	ldr	r2, [r7, #0]
 800f71e:	441a      	add	r2, r3
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	4614      	mov	r4, r2
 800f724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f72a:	3724      	adds	r7, #36	; 0x24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd90      	pop	{r4, r7, pc}
 800f730:	0801a3c8 	.word	0x0801a3c8
 800f734:	20000174 	.word	0x20000174

0800f738 <op_setconst>:
/*! OP_SETCONST

  constset(Syms[b],R[a])
*/
static inline void op_setconst( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	691b      	ldr	r3, [r3, #16]
 800f746:	1c59      	adds	r1, r3, #1
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	6111      	str	r1, [r2, #16]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	617b      	str	r3, [r7, #20]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	691b      	ldr	r3, [r3, #16]
 800f754:	1c59      	adds	r1, r3, #1
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	6111      	str	r1, [r2, #16]
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	613b      	str	r3, [r7, #16]

  mrbc_sym sym_id = mrbc_irep_symbol_id(vm->cur_irep, b);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	f103 0220 	add.w	r2, r3, #32
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	005b      	lsls	r3, r3, #1
 800f76a:	4413      	add	r3, r2
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	81fb      	strh	r3, [r7, #14]

  mrbc_incref(&regs[a]);
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	011b      	lsls	r3, r3, #4
 800f774:	683a      	ldr	r2, [r7, #0]
 800f776:	4413      	add	r3, r2
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fe fe7b 	bl	800e474 <mrbc_incref>
  if( mrbc_type(regs[0]) == MRBC_TT_CLASS ) {
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	f993 3000 	ldrsb.w	r3, [r3]
 800f784:	2b07      	cmp	r3, #7
 800f786:	d10b      	bne.n	800f7a0 <op_setconst+0x68>
    mrbc_set_class_const(regs[0].cls, sym_id, &regs[a]);
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	6898      	ldr	r0, [r3, #8]
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	011b      	lsls	r3, r3, #4
 800f790:	683a      	ldr	r2, [r7, #0]
 800f792:	441a      	add	r2, r3
 800f794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f798:	4619      	mov	r1, r3
 800f79a:	f7fc f85f 	bl	800b85c <mrbc_set_class_const>
  } else {
    mrbc_set_const(sym_id, &regs[a]);
  }
}
 800f79e:	e009      	b.n	800f7b4 <op_setconst+0x7c>
    mrbc_set_const(sym_id, &regs[a]);
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	011b      	lsls	r3, r3, #4
 800f7a4:	683a      	ldr	r2, [r7, #0]
 800f7a6:	441a      	add	r2, r3
 800f7a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fc f832 	bl	800b818 <mrbc_set_const>
}
 800f7b4:	bf00      	nop
 800f7b6:	3718      	adds	r7, #24
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <op_getmcnst>:
/*! OP_GETMCNST

  R[a] = R[a]::Syms[b]
*/
static inline void op_getmcnst( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f7bc:	b590      	push	{r4, r7, lr}
 800f7be:	b08b      	sub	sp, #44	; 0x2c
 800f7c0:	af02      	add	r7, sp, #8
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	691b      	ldr	r3, [r3, #16]
 800f7ca:	1c59      	adds	r1, r3, #1
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	6111      	str	r1, [r2, #16]
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	61bb      	str	r3, [r7, #24]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	1c59      	adds	r1, r3, #1
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	6111      	str	r1, [r2, #16]
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	617b      	str	r3, [r7, #20]

  mrbc_sym sym_id = mrbc_irep_symbol_id(vm->cur_irep, b);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	f103 0220 	add.w	r2, r3, #32
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	005b      	lsls	r3, r3, #1
 800f7ee:	4413      	add	r3, r2
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	827b      	strh	r3, [r7, #18]
  mrbc_class *cls = regs[a].cls;
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	011b      	lsls	r3, r3, #4
 800f7f8:	683a      	ldr	r2, [r7, #0]
 800f7fa:	4413      	add	r3, r2
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	61fb      	str	r3, [r7, #28]
  mrbc_value *v;

  while( !(v = mrbc_get_class_const(cls, sym_id)) ) {
 800f800:	e020      	b.n	800f844 <op_getmcnst+0x88>
    cls = cls->super;
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	61fb      	str	r3, [r7, #28]
    if( cls->sym_id == MRBC_SYM(Object) ) {
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f80e:	2b27      	cmp	r3, #39	; 0x27
 800f810:	d118      	bne.n	800f844 <op_getmcnst+0x88>
      mrbc_raisef( vm, MRBC_CLASS(NameError), "uninitialized constant %s::%s",
	mrbc_symid_to_str( regs[a].cls->sym_id ), mrbc_symid_to_str( sym_id ));
 800f812:	69bb      	ldr	r3, [r7, #24]
 800f814:	011b      	lsls	r3, r3, #4
 800f816:	683a      	ldr	r2, [r7, #0]
 800f818:	4413      	add	r3, r2
 800f81a:	689b      	ldr	r3, [r3, #8]
      mrbc_raisef( vm, MRBC_CLASS(NameError), "uninitialized constant %s::%s",
 800f81c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f820:	4618      	mov	r0, r3
 800f822:	f7fe fa0d 	bl	800dc40 <mrbc_symid_to_str>
 800f826:	4604      	mov	r4, r0
 800f828:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fe fa07 	bl	800dc40 <mrbc_symid_to_str>
 800f832:	4603      	mov	r3, r0
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	4623      	mov	r3, r4
 800f838:	4a12      	ldr	r2, [pc, #72]	; (800f884 <op_getmcnst+0xc8>)
 800f83a:	4913      	ldr	r1, [pc, #76]	; (800f888 <op_getmcnst+0xcc>)
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7fb fe47 	bl	800b4d0 <mrbc_raisef>
      return;
 800f842:	e01c      	b.n	800f87e <op_getmcnst+0xc2>
  while( !(v = mrbc_get_class_const(cls, sym_id)) ) {
 800f844:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f848:	4619      	mov	r1, r3
 800f84a:	69f8      	ldr	r0, [r7, #28]
 800f84c:	f7fc f83e 	bl	800b8cc <mrbc_get_class_const>
 800f850:	60f8      	str	r0, [r7, #12]
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d0d4      	beq.n	800f802 <op_getmcnst+0x46>
    }
  }

  mrbc_incref(v);
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	f7fe fe0b 	bl	800e474 <mrbc_incref>
  mrbc_decref(&regs[a]);
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	011b      	lsls	r3, r3, #4
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	4413      	add	r3, r2
 800f866:	4618      	mov	r0, r3
 800f868:	f7fe fe38 	bl	800e4dc <mrbc_decref>
  regs[a] = *v;
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	011b      	lsls	r3, r3, #4
 800f870:	683a      	ldr	r2, [r7, #0]
 800f872:	441a      	add	r2, r3
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	4614      	mov	r4, r2
 800f878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f87a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f87e:	3724      	adds	r7, #36	; 0x24
 800f880:	46bd      	mov	sp, r7
 800f882:	bd90      	pop	{r4, r7, pc}
 800f884:	0801a3e4 	.word	0x0801a3e4
 800f888:	20000174 	.word	0x20000174

0800f88c <op_getupvar>:

  b: target offset of regs.
  c: nested block level.
*/
static inline void op_getupvar( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f88c:	b590      	push	{r4, r7, lr}
 800f88e:	b08b      	sub	sp, #44	; 0x2c
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	691b      	ldr	r3, [r3, #16]
 800f89a:	1c59      	adds	r1, r3, #1
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	6111      	str	r1, [r2, #16]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	61bb      	str	r3, [r7, #24]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	1c59      	adds	r1, r3, #1
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	6111      	str	r1, [r2, #16]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	617b      	str	r3, [r7, #20]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	1c59      	adds	r1, r3, #1
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	6111      	str	r1, [r2, #16]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	613b      	str	r3, [r7, #16]

  assert( mrbc_type(regs[0]) == MRBC_TT_PROC );
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	f993 3000 	ldrsb.w	r3, [r3]
 800f8c6:	2b09      	cmp	r3, #9
 800f8c8:	d006      	beq.n	800f8d8 <op_getupvar+0x4c>
 800f8ca:	4b2e      	ldr	r3, [pc, #184]	; (800f984 <op_getupvar+0xf8>)
 800f8cc:	4a2e      	ldr	r2, [pc, #184]	; (800f988 <op_getupvar+0xfc>)
 800f8ce:	f240 313a 	movw	r1, #826	; 0x33a
 800f8d2:	482e      	ldr	r0, [pc, #184]	; (800f98c <op_getupvar+0x100>)
 800f8d4:	f005 feb6 	bl	8015644 <__assert_func>
  mrbc_callinfo *callinfo = regs[0].proc->callinfo;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	627b      	str	r3, [r7, #36]	; 0x24

  for( int i = 0; i < c; i++ ) {
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	623b      	str	r3, [r7, #32]
 800f8e4:	e01c      	b.n	800f920 <op_getupvar+0x94>
    assert( callinfo );
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d106      	bne.n	800f8fa <op_getupvar+0x6e>
 800f8ec:	4b28      	ldr	r3, [pc, #160]	; (800f990 <op_getupvar+0x104>)
 800f8ee:	4a26      	ldr	r2, [pc, #152]	; (800f988 <op_getupvar+0xfc>)
 800f8f0:	f240 313e 	movw	r1, #830	; 0x33e
 800f8f4:	4825      	ldr	r0, [pc, #148]	; (800f98c <op_getupvar+0x100>)
 800f8f6:	f005 fea5 	bl	8015644 <__assert_func>
    mrbc_value *reg0 = callinfo->cur_regs + callinfo->reg_offset;
 800f8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fc:	68da      	ldr	r2, [r3, #12]
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f900:	7f9b      	ldrb	r3, [r3, #30]
 800f902:	011b      	lsls	r3, r3, #4
 800f904:	4413      	add	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]

    if( mrbc_type(*reg0) != MRBC_TT_PROC ) break;	// What to do?
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f993 3000 	ldrsb.w	r3, [r3]
 800f90e:	2b09      	cmp	r3, #9
 800f910:	d10b      	bne.n	800f92a <op_getupvar+0x9e>
    callinfo = reg0->proc->callinfo;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	627b      	str	r3, [r7, #36]	; 0x24
  for( int i = 0; i < c; i++ ) {
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	3301      	adds	r3, #1
 800f91e:	623b      	str	r3, [r7, #32]
 800f920:	6a3b      	ldr	r3, [r7, #32]
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	429a      	cmp	r2, r3
 800f926:	d8de      	bhi.n	800f8e6 <op_getupvar+0x5a>
 800f928:	e000      	b.n	800f92c <op_getupvar+0xa0>
    if( mrbc_type(*reg0) != MRBC_TT_PROC ) break;	// What to do?
 800f92a:	bf00      	nop
  }

  mrbc_value *p_val;
  if( callinfo == 0 ) {
 800f92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d107      	bne.n	800f942 <op_getupvar+0xb6>
    p_val = vm->regs + b;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	011b      	lsls	r3, r3, #4
 800f93c:	4413      	add	r3, r2
 800f93e:	61fb      	str	r3, [r7, #28]
 800f940:	e009      	b.n	800f956 <op_getupvar+0xca>
  } else {
    p_val = callinfo->cur_regs + callinfo->reg_offset + b;
 800f942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f944:	68da      	ldr	r2, [r3, #12]
 800f946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f948:	7f9b      	ldrb	r3, [r3, #30]
 800f94a:	4619      	mov	r1, r3
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	440b      	add	r3, r1
 800f950:	011b      	lsls	r3, r3, #4
 800f952:	4413      	add	r3, r2
 800f954:	61fb      	str	r3, [r7, #28]
  }
  mrbc_incref( p_val );
 800f956:	69f8      	ldr	r0, [r7, #28]
 800f958:	f7fe fd8c 	bl	800e474 <mrbc_incref>

  mrbc_decref( &regs[a] );
 800f95c:	69bb      	ldr	r3, [r7, #24]
 800f95e:	011b      	lsls	r3, r3, #4
 800f960:	683a      	ldr	r2, [r7, #0]
 800f962:	4413      	add	r3, r2
 800f964:	4618      	mov	r0, r3
 800f966:	f7fe fdb9 	bl	800e4dc <mrbc_decref>
  regs[a] = *p_val;
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	011b      	lsls	r3, r3, #4
 800f96e:	683a      	ldr	r2, [r7, #0]
 800f970:	441a      	add	r2, r3
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	4614      	mov	r4, r2
 800f976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f97c:	bf00      	nop
 800f97e:	372c      	adds	r7, #44	; 0x2c
 800f980:	46bd      	mov	sp, r7
 800f982:	bd90      	pop	{r4, r7, pc}
 800f984:	0801a404 	.word	0x0801a404
 800f988:	0801bf34 	.word	0x0801bf34
 800f98c:	0801a368 	.word	0x0801a368
 800f990:	0801a428 	.word	0x0801a428

0800f994 <op_setupvar>:
/*! OP_SETUPVAR

  uvset(b,c,R[a])
*/
static inline void op_setupvar( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f994:	b590      	push	{r4, r7, lr}
 800f996:	b08b      	sub	sp, #44	; 0x2c
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	691b      	ldr	r3, [r3, #16]
 800f9a2:	1c59      	adds	r1, r3, #1
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	6111      	str	r1, [r2, #16]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	61bb      	str	r3, [r7, #24]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	691b      	ldr	r3, [r3, #16]
 800f9b0:	1c59      	adds	r1, r3, #1
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	6111      	str	r1, [r2, #16]
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	617b      	str	r3, [r7, #20]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	1c59      	adds	r1, r3, #1
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	6111      	str	r1, [r2, #16]
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	613b      	str	r3, [r7, #16]

  assert( regs[0].tt == MRBC_TT_PROC );
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	f993 3000 	ldrsb.w	r3, [r3]
 800f9ce:	2b09      	cmp	r3, #9
 800f9d0:	d006      	beq.n	800f9e0 <op_setupvar+0x4c>
 800f9d2:	4b31      	ldr	r3, [pc, #196]	; (800fa98 <op_setupvar+0x104>)
 800f9d4:	4a31      	ldr	r2, [pc, #196]	; (800fa9c <op_setupvar+0x108>)
 800f9d6:	f240 315b 	movw	r1, #859	; 0x35b
 800f9da:	4831      	ldr	r0, [pc, #196]	; (800faa0 <op_setupvar+0x10c>)
 800f9dc:	f005 fe32 	bl	8015644 <__assert_func>
  mrbc_callinfo *callinfo = regs[0].proc->callinfo;
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	627b      	str	r3, [r7, #36]	; 0x24

  for( int i = 0; i < c; i++ ) {
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	623b      	str	r3, [r7, #32]
 800f9ec:	e023      	b.n	800fa36 <op_setupvar+0xa2>
    assert( callinfo );
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d106      	bne.n	800fa02 <op_setupvar+0x6e>
 800f9f4:	4b2b      	ldr	r3, [pc, #172]	; (800faa4 <op_setupvar+0x110>)
 800f9f6:	4a29      	ldr	r2, [pc, #164]	; (800fa9c <op_setupvar+0x108>)
 800f9f8:	f240 315f 	movw	r1, #863	; 0x35f
 800f9fc:	4828      	ldr	r0, [pc, #160]	; (800faa0 <op_setupvar+0x10c>)
 800f9fe:	f005 fe21 	bl	8015644 <__assert_func>
    mrbc_value *reg0 = callinfo->cur_regs + callinfo->reg_offset;
 800fa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa04:	68da      	ldr	r2, [r3, #12]
 800fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa08:	7f9b      	ldrb	r3, [r3, #30]
 800fa0a:	011b      	lsls	r3, r3, #4
 800fa0c:	4413      	add	r3, r2
 800fa0e:	60fb      	str	r3, [r7, #12]
    assert( reg0->tt == MRBC_TT_PROC );
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f993 3000 	ldrsb.w	r3, [r3]
 800fa16:	2b09      	cmp	r3, #9
 800fa18:	d006      	beq.n	800fa28 <op_setupvar+0x94>
 800fa1a:	4b23      	ldr	r3, [pc, #140]	; (800faa8 <op_setupvar+0x114>)
 800fa1c:	4a1f      	ldr	r2, [pc, #124]	; (800fa9c <op_setupvar+0x108>)
 800fa1e:	f240 3161 	movw	r1, #865	; 0x361
 800fa22:	481f      	ldr	r0, [pc, #124]	; (800faa0 <op_setupvar+0x10c>)
 800fa24:	f005 fe0e 	bl	8015644 <__assert_func>
    callinfo = reg0->proc->callinfo;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	627b      	str	r3, [r7, #36]	; 0x24
  for( int i = 0; i < c; i++ ) {
 800fa30:	6a3b      	ldr	r3, [r7, #32]
 800fa32:	3301      	adds	r3, #1
 800fa34:	623b      	str	r3, [r7, #32]
 800fa36:	6a3b      	ldr	r3, [r7, #32]
 800fa38:	693a      	ldr	r2, [r7, #16]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d8d7      	bhi.n	800f9ee <op_setupvar+0x5a>
  }

  mrbc_value *p_val;
  if( callinfo == 0 ) {
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d107      	bne.n	800fa54 <op_setupvar+0xc0>
    p_val = vm->regs + b;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	011b      	lsls	r3, r3, #4
 800fa4e:	4413      	add	r3, r2
 800fa50:	61fb      	str	r3, [r7, #28]
 800fa52:	e009      	b.n	800fa68 <op_setupvar+0xd4>
  } else {
    p_val = callinfo->cur_regs + callinfo->reg_offset + b;
 800fa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa56:	68da      	ldr	r2, [r3, #12]
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5a:	7f9b      	ldrb	r3, [r3, #30]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	440b      	add	r3, r1
 800fa62:	011b      	lsls	r3, r3, #4
 800fa64:	4413      	add	r3, r2
 800fa66:	61fb      	str	r3, [r7, #28]
  }
  mrbc_decref( p_val );
 800fa68:	69f8      	ldr	r0, [r7, #28]
 800fa6a:	f7fe fd37 	bl	800e4dc <mrbc_decref>

  mrbc_incref( &regs[a] );
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	011b      	lsls	r3, r3, #4
 800fa72:	683a      	ldr	r2, [r7, #0]
 800fa74:	4413      	add	r3, r2
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fe fcfc 	bl	800e474 <mrbc_incref>
  *p_val = regs[a];
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	011b      	lsls	r3, r3, #4
 800fa80:	683a      	ldr	r2, [r7, #0]
 800fa82:	4413      	add	r3, r2
 800fa84:	69fa      	ldr	r2, [r7, #28]
 800fa86:	4614      	mov	r4, r2
 800fa88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800fa8e:	bf00      	nop
 800fa90:	372c      	adds	r7, #44	; 0x2c
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd90      	pop	{r4, r7, pc}
 800fa96:	bf00      	nop
 800fa98:	0801a434 	.word	0x0801a434
 800fa9c:	0801bf40 	.word	0x0801bf40
 800faa0:	0801a368 	.word	0x0801a368
 800faa4:	0801a428 	.word	0x0801a428
 800faa8:	0801a450 	.word	0x0801a450

0800faac <op_getidx>:
/*! OP_GETIDX

  R[a] = R[a][R[a+1]]
*/
static inline void op_getidx( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	691b      	ldr	r3, [r3, #16]
 800faba:	1c59      	adds	r1, r3, #1
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	6111      	str	r1, [r2, #16]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	60fb      	str	r3, [r7, #12]

  send_by_name( vm, MRBC_SYMID_BL_BR, a, 1 );
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	2301      	movs	r3, #1
 800fac8:	2137      	movs	r1, #55	; 0x37
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7fe fe5e 	bl	800e78c <send_by_name>
}
 800fad0:	bf00      	nop
 800fad2:	3710      	adds	r7, #16
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <op_setidx>:
/*! OP_SETIDX

  R[a][R[a+1]] = R[a+2]
*/
static inline void op_setidx( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	691b      	ldr	r3, [r3, #16]
 800fae6:	1c59      	adds	r1, r3, #1
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	6111      	str	r1, [r2, #16]
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	60fb      	str	r3, [r7, #12]

  send_by_name( vm, MRBC_SYMID_BL_BR_EQ, a, 2 );
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	2302      	movs	r3, #2
 800faf4:	2138      	movs	r1, #56	; 0x38
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7fe fe48 	bl	800e78c <send_by_name>
}
 800fafc:	bf00      	nop
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <op_jmp>:
/*! OP_JMP

  pc+=a
*/
static inline void op_jmp( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  FETCH_S();
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	691b      	ldr	r3, [r3, #16]
 800fb12:	1c59      	adds	r1, r3, #1
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	6111      	str	r1, [r2, #16]
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	60fb      	str	r3, [r7, #12]
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	021a      	lsls	r2, r3, #8
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	691b      	ldr	r3, [r3, #16]
 800fb24:	1c58      	adds	r0, r3, #1
 800fb26:	6879      	ldr	r1, [r7, #4]
 800fb28:	6108      	str	r0, [r1, #16]
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	60fb      	str	r3, [r7, #12]

  vm->inst += (int16_t)a;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	691b      	ldr	r3, [r3, #16]
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	b212      	sxth	r2, r2
 800fb38:	441a      	add	r2, r3
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	611a      	str	r2, [r3, #16]
}
 800fb3e:	bf00      	nop
 800fb40:	3714      	adds	r7, #20
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr

0800fb4a <op_jmpif>:
/*! OP_JMPIF

  if R[a] pc+=b
*/
static inline void op_jmpif( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fb4a:	b480      	push	{r7}
 800fb4c:	b085      	sub	sp, #20
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
 800fb52:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	691b      	ldr	r3, [r3, #16]
 800fb58:	1c59      	adds	r1, r3, #1
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	6111      	str	r1, [r2, #16]
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	60fb      	str	r3, [r7, #12]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	691b      	ldr	r3, [r3, #16]
 800fb66:	1c59      	adds	r1, r3, #1
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	6111      	str	r1, [r2, #16]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	60bb      	str	r3, [r7, #8]
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	021a      	lsls	r2, r3, #8
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	691b      	ldr	r3, [r3, #16]
 800fb78:	1c58      	adds	r0, r3, #1
 800fb7a:	6879      	ldr	r1, [r7, #4]
 800fb7c:	6108      	str	r0, [r1, #16]
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	4313      	orrs	r3, r2
 800fb82:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt > MRBC_TT_FALSE ) {
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	011b      	lsls	r3, r3, #4
 800fb88:	683a      	ldr	r2, [r7, #0]
 800fb8a:	4413      	add	r3, r2
 800fb8c:	f993 3000 	ldrsb.w	r3, [r3]
 800fb90:	2b02      	cmp	r3, #2
 800fb92:	dd06      	ble.n	800fba2 <op_jmpif+0x58>
    vm->inst += (int16_t)b;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	691b      	ldr	r3, [r3, #16]
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	b212      	sxth	r2, r2
 800fb9c:	441a      	add	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	611a      	str	r2, [r3, #16]
  }
}
 800fba2:	bf00      	nop
 800fba4:	3714      	adds	r7, #20
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr

0800fbae <op_jmpnot>:
/*! OP_JMPNOT

  if !R[a] pc+=b
*/
static inline void op_jmpnot( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fbae:	b480      	push	{r7}
 800fbb0:	b085      	sub	sp, #20
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	691b      	ldr	r3, [r3, #16]
 800fbbc:	1c59      	adds	r1, r3, #1
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	6111      	str	r1, [r2, #16]
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	60fb      	str	r3, [r7, #12]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	691b      	ldr	r3, [r3, #16]
 800fbca:	1c59      	adds	r1, r3, #1
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	6111      	str	r1, [r2, #16]
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	60bb      	str	r3, [r7, #8]
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	021a      	lsls	r2, r3, #8
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	1c58      	adds	r0, r3, #1
 800fbde:	6879      	ldr	r1, [r7, #4]
 800fbe0:	6108      	str	r0, [r1, #16]
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt <= MRBC_TT_FALSE ) {
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	011b      	lsls	r3, r3, #4
 800fbec:	683a      	ldr	r2, [r7, #0]
 800fbee:	4413      	add	r3, r2
 800fbf0:	f993 3000 	ldrsb.w	r3, [r3]
 800fbf4:	2b02      	cmp	r3, #2
 800fbf6:	dc06      	bgt.n	800fc06 <op_jmpnot+0x58>
    vm->inst += (int16_t)b;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	691b      	ldr	r3, [r3, #16]
 800fbfc:	68ba      	ldr	r2, [r7, #8]
 800fbfe:	b212      	sxth	r2, r2
 800fc00:	441a      	add	r2, r3
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	611a      	str	r2, [r3, #16]
  }
}
 800fc06:	bf00      	nop
 800fc08:	3714      	adds	r7, #20
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr

0800fc12 <op_jmpnil>:
/*! OP_JMPNIL

  if R[a]==nil pc+=b
*/
static inline void op_jmpnil( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fc12:	b480      	push	{r7}
 800fc14:	b085      	sub	sp, #20
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
 800fc1a:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	1c59      	adds	r1, r3, #1
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	6111      	str	r1, [r2, #16]
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	60fb      	str	r3, [r7, #12]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	1c59      	adds	r1, r3, #1
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	6111      	str	r1, [r2, #16]
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	60bb      	str	r3, [r7, #8]
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	021a      	lsls	r2, r3, #8
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	691b      	ldr	r3, [r3, #16]
 800fc40:	1c58      	adds	r0, r3, #1
 800fc42:	6879      	ldr	r1, [r7, #4]
 800fc44:	6108      	str	r0, [r1, #16]
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt == MRBC_TT_NIL ) {
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	011b      	lsls	r3, r3, #4
 800fc50:	683a      	ldr	r2, [r7, #0]
 800fc52:	4413      	add	r3, r2
 800fc54:	f993 3000 	ldrsb.w	r3, [r3]
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d106      	bne.n	800fc6a <op_jmpnil+0x58>
    vm->inst += (int16_t)b;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	691b      	ldr	r3, [r3, #16]
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	b212      	sxth	r2, r2
 800fc64:	441a      	add	r2, r3
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	611a      	str	r2, [r3, #16]
  }
}
 800fc6a:	bf00      	nop
 800fc6c:	3714      	adds	r7, #20
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
	...

0800fc78 <op_jmpuw>:
/*! OP_JMPUW

  unwind_and_jump_to(a)
*/
static inline void op_jmpuw( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fc78:	b590      	push	{r4, r7, lr}
 800fc7a:	b087      	sub	sp, #28
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
  FETCH_S();
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	691b      	ldr	r3, [r3, #16]
 800fc86:	1c59      	adds	r1, r3, #1
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	6111      	str	r1, [r2, #16]
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	617b      	str	r3, [r7, #20]
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	021a      	lsls	r2, r3, #8
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	691b      	ldr	r3, [r3, #16]
 800fc98:	1c58      	adds	r0, r3, #1
 800fc9a:	6879      	ldr	r1, [r7, #4]
 800fc9c:	6108      	str	r0, [r1, #16]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	4313      	orrs	r3, r2
 800fca2:	617b      	str	r3, [r7, #20]

  const uint8_t *jump_inst = vm->inst + (int16_t)a;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	697a      	ldr	r2, [r7, #20]
 800fcaa:	b212      	sxth	r2, r2
 800fcac:	4413      	add	r3, r2
 800fcae:	613b      	str	r3, [r7, #16]

  // check catch handler (ensure)
  const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7fe feab 	bl	800ea0c <find_catch_handler_ensure>
 800fcb6:	60f8      	str	r0, [r7, #12]
  if( !handler ) {
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d103      	bne.n	800fcc6 <op_jmpuw+0x4e>
    vm->inst = jump_inst;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	693a      	ldr	r2, [r7, #16]
 800fcc2:	611a      	str	r2, [r3, #16]
    return;
 800fcc4:	e03a      	b.n	800fd3c <op_jmpuw+0xc4>
  }

  // check whether the jump point is inside or outside the catch handler.
  uint32_t jump_point = jump_inst - vm->cur_irep->inst;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	699b      	ldr	r3, [r3, #24]
 800fccc:	693a      	ldr	r2, [r7, #16]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	60bb      	str	r3, [r7, #8]
  if( (bin_to_uint32(handler->begin) < jump_point) &&
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fe fd3a 	bl	800e750 <bin_to_uint32>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d90c      	bls.n	800fcfe <op_jmpuw+0x86>
      (jump_point <= bin_to_uint32(handler->end)) ) {
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	3305      	adds	r3, #5
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7fe fd31 	bl	800e750 <bin_to_uint32>
 800fcee:	4602      	mov	r2, r0
  if( (bin_to_uint32(handler->begin) < jump_point) &&
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d803      	bhi.n	800fcfe <op_jmpuw+0x86>
    vm->inst = jump_inst;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	693a      	ldr	r2, [r7, #16]
 800fcfa:	611a      	str	r2, [r3, #16]
    return;
 800fcfc:	e01e      	b.n	800fd3c <op_jmpuw+0xc4>
  }

  // jump point is outside, thus jump to ensure.
  assert( vm->exception.tt == MRBC_TT_NIL );
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d006      	beq.n	800fd16 <op_jmpuw+0x9e>
 800fd08:	4b0e      	ldr	r3, [pc, #56]	; (800fd44 <op_jmpuw+0xcc>)
 800fd0a:	4a0f      	ldr	r2, [pc, #60]	; (800fd48 <op_jmpuw+0xd0>)
 800fd0c:	f240 31e1 	movw	r1, #993	; 0x3e1
 800fd10:	480e      	ldr	r0, [pc, #56]	; (800fd4c <op_jmpuw+0xd4>)
 800fd12:	f005 fc97 	bl	8015644 <__assert_func>
  vm->exception.tt = MRBC_TT_JMPUW;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	22fb      	movs	r2, #251	; 0xfb
 800fd1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  vm->exception.handle = (void*)jump_inst;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	693a      	ldr	r2, [r7, #16]
 800fd22:	631a      	str	r2, [r3, #48]	; 0x30
  vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	699c      	ldr	r4, [r3, #24]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	3309      	adds	r3, #9
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fe fd0e 	bl	800e750 <bin_to_uint32>
 800fd34:	4603      	mov	r3, r0
 800fd36:	18e2      	adds	r2, r4, r3
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	611a      	str	r2, [r3, #16]
}
 800fd3c:	371c      	adds	r7, #28
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd90      	pop	{r4, r7, pc}
 800fd42:	bf00      	nop
 800fd44:	0801a46c 	.word	0x0801a46c
 800fd48:	0801bf4c 	.word	0x0801bf4c
 800fd4c:	0801a368 	.word	0x0801a368

0800fd50 <op_except>:
/*! OP_EXCEPT

  R[a] = exc
*/
static inline void op_except( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fd50:	b590      	push	{r4, r7, lr}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	691b      	ldr	r3, [r3, #16]
 800fd5e:	1c59      	adds	r1, r3, #1
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	6111      	str	r1, [r2, #16]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	60fb      	str	r3, [r7, #12]

  mrbc_decref( &regs[a] );
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	011b      	lsls	r3, r3, #4
 800fd6c:	683a      	ldr	r2, [r7, #0]
 800fd6e:	4413      	add	r3, r2
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fe fbb3 	bl	800e4dc <mrbc_decref>
  regs[a] = vm->exception;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	011b      	lsls	r3, r3, #4
 800fd7a:	683a      	ldr	r2, [r7, #0]
 800fd7c:	441a      	add	r2, r3
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4614      	mov	r4, r2
 800fd82:	3328      	adds	r3, #40	; 0x28
 800fd84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_set_nil( &vm->exception );
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800fd92:	bf00      	nop
 800fd94:	3714      	adds	r7, #20
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd90      	pop	{r4, r7, pc}
	...

0800fd9c <op_rescue>:
/*! OP_RESCUE

  R[b] = R[a].isa?(R[b])
*/
static inline void op_rescue( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b086      	sub	sp, #24
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	691b      	ldr	r3, [r3, #16]
 800fdaa:	1c59      	adds	r1, r3, #1
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	6111      	str	r1, [r2, #16]
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	617b      	str	r3, [r7, #20]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	691b      	ldr	r3, [r3, #16]
 800fdb8:	1c59      	adds	r1, r3, #1
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	6111      	str	r1, [r2, #16]
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	613b      	str	r3, [r7, #16]

  assert( regs[a].tt == MRBC_TT_EXCEPTION );
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	011b      	lsls	r3, r3, #4
 800fdc6:	683a      	ldr	r2, [r7, #0]
 800fdc8:	4413      	add	r3, r2
 800fdca:	f993 3000 	ldrsb.w	r3, [r3]
 800fdce:	2b0e      	cmp	r3, #14
 800fdd0:	d006      	beq.n	800fde0 <op_rescue+0x44>
 800fdd2:	4b19      	ldr	r3, [pc, #100]	; (800fe38 <op_rescue+0x9c>)
 800fdd4:	4a19      	ldr	r2, [pc, #100]	; (800fe3c <op_rescue+0xa0>)
 800fdd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fdda:	4819      	ldr	r0, [pc, #100]	; (800fe40 <op_rescue+0xa4>)
 800fddc:	f005 fc32 	bl	8015644 <__assert_func>
  assert( regs[b].tt == MRBC_TT_CLASS );
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	011b      	lsls	r3, r3, #4
 800fde4:	683a      	ldr	r2, [r7, #0]
 800fde6:	4413      	add	r3, r2
 800fde8:	f993 3000 	ldrsb.w	r3, [r3]
 800fdec:	2b07      	cmp	r3, #7
 800fdee:	d006      	beq.n	800fdfe <op_rescue+0x62>
 800fdf0:	4b14      	ldr	r3, [pc, #80]	; (800fe44 <op_rescue+0xa8>)
 800fdf2:	4a12      	ldr	r2, [pc, #72]	; (800fe3c <op_rescue+0xa0>)
 800fdf4:	f240 4101 	movw	r1, #1025	; 0x401
 800fdf8:	4811      	ldr	r0, [pc, #68]	; (800fe40 <op_rescue+0xa4>)
 800fdfa:	f005 fc23 	bl	8015644 <__assert_func>

  int res = mrbc_obj_is_kind_of( &regs[a], regs[b].cls );
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	011b      	lsls	r3, r3, #4
 800fe02:	683a      	ldr	r2, [r7, #0]
 800fe04:	18d0      	adds	r0, r2, r3
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	011b      	lsls	r3, r3, #4
 800fe0a:	683a      	ldr	r2, [r7, #0]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	4619      	mov	r1, r3
 800fe12:	f7f9 fc3a 	bl	800968a <mrbc_obj_is_kind_of>
 800fe16:	60f8      	str	r0, [r7, #12]
  mrbc_set_bool( &regs[b], res );
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d001      	beq.n	800fe22 <op_rescue+0x86>
 800fe1e:	2103      	movs	r1, #3
 800fe20:	e000      	b.n	800fe24 <op_rescue+0x88>
 800fe22:	2102      	movs	r1, #2
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	011b      	lsls	r3, r3, #4
 800fe28:	683a      	ldr	r2, [r7, #0]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	460a      	mov	r2, r1
 800fe2e:	701a      	strb	r2, [r3, #0]
}
 800fe30:	bf00      	nop
 800fe32:	3718      	adds	r7, #24
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	0801a48c 	.word	0x0801a48c
 800fe3c:	0801bf58 	.word	0x0801bf58
 800fe40:	0801a368 	.word	0x0801a368
 800fe44:	0801a4ac 	.word	0x0801a4ac

0800fe48 <op_raiseif>:
/*! OP_RAISEIF

  raise(R[a]) if R[a]
*/
static inline void op_raiseif( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fe48:	b590      	push	{r4, r7, lr}
 800fe4a:	b09d      	sub	sp, #116	; 0x74
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	1c59      	adds	r1, r3, #1
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	6111      	str	r1, [r2, #16]
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	66bb      	str	r3, [r7, #104]	; 0x68

  // save the parameter.
  mrbc_value ra = regs[a];
 800fe60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe62:	011b      	lsls	r3, r3, #4
 800fe64:	683a      	ldr	r2, [r7, #0]
 800fe66:	4413      	add	r3, r2
 800fe68:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800fe6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a].tt = MRBC_TT_EMPTY;
 800fe72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe74:	011b      	lsls	r3, r3, #4
 800fe76:	683a      	ldr	r2, [r7, #0]
 800fe78:	4413      	add	r3, r2
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	701a      	strb	r2, [r3, #0]

  switch( mrbc_type(ra) ) {
 800fe7e:	f997 3038 	ldrsb.w	r3, [r7, #56]	; 0x38
 800fe82:	3305      	adds	r3, #5
 800fe84:	2b13      	cmp	r3, #19
 800fe86:	d82b      	bhi.n	800fee0 <op_raiseif+0x98>
 800fe88:	a201      	add	r2, pc, #4	; (adr r2, 800fe90 <op_raiseif+0x48>)
 800fe8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe8e:	bf00      	nop
 800fe90:	08010143 	.word	0x08010143
 800fe94:	08010085 	.word	0x08010085
 800fe98:	0800ff81 	.word	0x0800ff81
 800fe9c:	0800ff13 	.word	0x0800ff13
 800fea0:	0800fee1 	.word	0x0800fee1
 800fea4:	0800fee1 	.word	0x0800fee1
 800fea8:	0800fee1 	.word	0x0800fee1
 800feac:	0800fee1 	.word	0x0800fee1
 800feb0:	0800fee1 	.word	0x0800fee1
 800feb4:	0800fee1 	.word	0x0800fee1
 800feb8:	0800fee1 	.word	0x0800fee1
 800febc:	0800fee1 	.word	0x0800fee1
 800fec0:	0800fee1 	.word	0x0800fee1
 800fec4:	0800fee1 	.word	0x0800fee1
 800fec8:	0800fee1 	.word	0x0800fee1
 800fecc:	0800fee1 	.word	0x0800fee1
 800fed0:	0800fee1 	.word	0x0800fee1
 800fed4:	0800fee1 	.word	0x0800fee1
 800fed8:	0800fee1 	.word	0x0800fee1
 800fedc:	080101eb 	.word	0x080101eb
  case MRBC_TT_RETURN:		goto CASE_OP_RETURN;
  case MRBC_TT_RETURN_BLK:	goto CASE_OP_RETURN_BLK;
  case MRBC_TT_BREAK:		goto CASE_OP_BREAK;
  case MRBC_TT_JMPUW:		goto CASE_OP_JMPUW;
  case MRBC_TT_EXCEPTION:	goto CASE_OP_EXCEPTION;
  default: break;
 800fee0:	bf00      	nop
  }

  assert( mrbc_type(ra) == MRBC_TT_NIL );
 800fee2:	f997 3038 	ldrsb.w	r3, [r7, #56]	; 0x38
 800fee6:	2b01      	cmp	r3, #1
 800fee8:	d006      	beq.n	800fef8 <op_raiseif+0xb0>
 800feea:	4b9c      	ldr	r3, [pc, #624]	; (801015c <op_raiseif+0x314>)
 800feec:	4a9c      	ldr	r2, [pc, #624]	; (8010160 <op_raiseif+0x318>)
 800feee:	f240 411e 	movw	r1, #1054	; 0x41e
 800fef2:	489c      	ldr	r0, [pc, #624]	; (8010164 <op_raiseif+0x31c>)
 800fef4:	f005 fba6 	bl	8015644 <__assert_func>
  assert( mrbc_type(vm->exception) == MRBC_TT_NIL );
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	f000 8180 	beq.w	8010204 <op_raiseif+0x3bc>
 800ff04:	4b98      	ldr	r3, [pc, #608]	; (8010168 <op_raiseif+0x320>)
 800ff06:	4a96      	ldr	r2, [pc, #600]	; (8010160 <op_raiseif+0x318>)
 800ff08:	f240 411f 	movw	r1, #1055	; 0x41f
 800ff0c:	4895      	ldr	r0, [pc, #596]	; (8010164 <op_raiseif+0x31c>)
 800ff0e:	f005 fb99 	bl	8015644 <__assert_func>
  case MRBC_TT_RETURN:		goto CASE_OP_RETURN;
 800ff12:	bf00      	nop


CASE_OP_RETURN:
{
  // find ensure that still needs to be executed.
  const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f7fe fd79 	bl	800ea0c <find_catch_handler_ensure>
 800ff1a:	6678      	str	r0, [r7, #100]	; 0x64
  if( handler ) {
 800ff1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d014      	beq.n	800ff4c <op_raiseif+0x104>
    vm->exception = ra;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800ff28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	699c      	ldr	r4, [r3, #24]
 800ff38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff3a:	3309      	adds	r3, #9
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fe fc07 	bl	800e750 <bin_to_uint32>
 800ff42:	4603      	mov	r3, r0
 800ff44:	18e2      	adds	r2, r4, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	611a      	str	r2, [r3, #16]
    return;
 800ff4a:	e15c      	b.n	8010206 <op_raiseif+0x3be>
  }

  // set the return value and return to caller.
  mrbc_decref(&regs[0]);
 800ff4c:	6838      	ldr	r0, [r7, #0]
 800ff4e:	f7fe fac5 	bl	800e4dc <mrbc_decref>
  regs[0] = regs[ vm->cur_irep->nregs ];
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	68db      	ldr	r3, [r3, #12]
 800ff56:	889b      	ldrh	r3, [r3, #4]
 800ff58:	011b      	lsls	r3, r3, #4
 800ff5a:	683a      	ldr	r2, [r7, #0]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	4614      	mov	r4, r2
 800ff62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[ vm->cur_irep->nregs ].tt = MRBC_TT_EMPTY;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	889b      	ldrh	r3, [r3, #4]
 800ff6e:	011b      	lsls	r3, r3, #4
 800ff70:	683a      	ldr	r2, [r7, #0]
 800ff72:	4413      	add	r3, r2
 800ff74:	2200      	movs	r2, #0
 800ff76:	701a      	strb	r2, [r3, #0]

  mrbc_pop_callinfo(vm);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7fe fe3b 	bl	800ebf4 <mrbc_pop_callinfo>
  return;
 800ff7e:	e142      	b.n	8010206 <op_raiseif+0x3be>
  case MRBC_TT_RETURN_BLK:	goto CASE_OP_RETURN_BLK;
 800ff80:	bf00      	nop
}


CASE_OP_RETURN_BLK:
{
  assert( vm->ret_blk );
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6a1b      	ldr	r3, [r3, #32]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d106      	bne.n	800ff98 <op_raiseif+0x150>
 800ff8a:	4b78      	ldr	r3, [pc, #480]	; (801016c <op_raiseif+0x324>)
 800ff8c:	4a74      	ldr	r2, [pc, #464]	; (8010160 <op_raiseif+0x318>)
 800ff8e:	f240 4139 	movw	r1, #1081	; 0x439
 800ff92:	4874      	ldr	r0, [pc, #464]	; (8010164 <op_raiseif+0x31c>)
 800ff94:	f005 fb56 	bl	8015644 <__assert_func>

  // return to the proc generated level.
  while( 1 ) {
    // find ensure that still needs to be executed.
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7fe fd37 	bl	800ea0c <find_catch_handler_ensure>
 800ff9e:	6638      	str	r0, [r7, #96]	; 0x60
    if( handler ) {
 800ffa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d014      	beq.n	800ffd0 <op_raiseif+0x188>
      vm->exception = ra;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800ffac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ffb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	68db      	ldr	r3, [r3, #12]
 800ffba:	699c      	ldr	r4, [r3, #24]
 800ffbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffbe:	3309      	adds	r3, #9
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7fe fbc5 	bl	800e750 <bin_to_uint32>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	18e2      	adds	r2, r4, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	611a      	str	r2, [r3, #16]
      return;
 800ffce:	e11a      	b.n	8010206 <op_raiseif+0x3be>
    }

    // Is it the origin (generator) of proc?
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	69da      	ldr	r2, [r3, #28]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6a1b      	ldr	r3, [r3, #32]
 800ffd8:	689b      	ldr	r3, [r3, #8]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d003      	beq.n	800ffe6 <op_raiseif+0x19e>

    mrbc_pop_callinfo(vm);
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7fe fe08 	bl	800ebf4 <mrbc_pop_callinfo>
  while( 1 ) {
 800ffe4:	e7d8      	b.n	800ff98 <op_raiseif+0x150>
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 800ffe6:	bf00      	nop
  }

  // top level return ?
  if( vm->callinfo_tail == NULL ) {
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	69db      	ldr	r3, [r3, #28]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d11c      	bne.n	801002a <op_raiseif+0x1e2>
    mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 800fff0:	f107 0318 	add.w	r3, r7, #24
 800fff4:	2200      	movs	r2, #0
 800fff6:	601a      	str	r2, [r3, #0]
 800fff8:	605a      	str	r2, [r3, #4]
 800fffa:	609a      	str	r2, [r3, #8]
 800fffc:	60da      	str	r2, [r3, #12]
 800fffe:	2309      	movs	r3, #9
 8010000:	763b      	strb	r3, [r7, #24]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6a1b      	ldr	r3, [r3, #32]
 8010006:	623b      	str	r3, [r7, #32]
 8010008:	f107 0318 	add.w	r3, r7, #24
 801000c:	4618      	mov	r0, r3
 801000e:	f7fe fa65 	bl	800e4dc <mrbc_decref>
    vm->ret_blk = 0;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2200      	movs	r2, #0
 8010016:	621a      	str	r2, [r3, #32]

    vm->flag_preemption = 1;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2201      	movs	r2, #1
 801001c:	70da      	strb	r2, [r3, #3]
    vm->flag_stop = 1;
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	7913      	ldrb	r3, [r2, #4]
 8010022:	f043 0302 	orr.w	r3, r3, #2
 8010026:	7113      	strb	r3, [r2, #4]
 8010028:	e0ed      	b.n	8010206 <op_raiseif+0x3be>
    return;
  }

  // set the return value and return to caller.
  mrbc_value *reg0 = vm->callinfo_tail->cur_regs + vm->callinfo_tail->reg_offset;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	69db      	ldr	r3, [r3, #28]
 801002e:	68da      	ldr	r2, [r3, #12]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	69db      	ldr	r3, [r3, #28]
 8010034:	7f9b      	ldrb	r3, [r3, #30]
 8010036:	011b      	lsls	r3, r3, #4
 8010038:	4413      	add	r3, r2
 801003a:	65fb      	str	r3, [r7, #92]	; 0x5c
  mrbc_decref(reg0);
 801003c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801003e:	f7fe fa4d 	bl	800e4dc <mrbc_decref>
  *reg0 = vm->ret_blk->ret_val;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a1b      	ldr	r3, [r3, #32]
 8010046:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010048:	4614      	mov	r4, r2
 801004a:	3310      	adds	r3, #16
 801004c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801004e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 8010052:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010056:	2200      	movs	r2, #0
 8010058:	601a      	str	r2, [r3, #0]
 801005a:	605a      	str	r2, [r3, #4]
 801005c:	609a      	str	r2, [r3, #8]
 801005e:	60da      	str	r2, [r3, #12]
 8010060:	2309      	movs	r3, #9
 8010062:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6a1b      	ldr	r3, [r3, #32]
 801006a:	633b      	str	r3, [r7, #48]	; 0x30
 801006c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010070:	4618      	mov	r0, r3
 8010072:	f7fe fa33 	bl	800e4dc <mrbc_decref>
  vm->ret_blk = 0;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	621a      	str	r2, [r3, #32]

  mrbc_pop_callinfo(vm);
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7fe fdb9 	bl	800ebf4 <mrbc_pop_callinfo>
  return;
 8010082:	e0c0      	b.n	8010206 <op_raiseif+0x3be>
  case MRBC_TT_BREAK:		goto CASE_OP_BREAK;
 8010084:	bf00      	nop
}


CASE_OP_BREAK: {
  assert( vm->ret_blk );
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d106      	bne.n	801009c <op_raiseif+0x254>
 801008e:	4b37      	ldr	r3, [pc, #220]	; (801016c <op_raiseif+0x324>)
 8010090:	4a33      	ldr	r2, [pc, #204]	; (8010160 <op_raiseif+0x318>)
 8010092:	f240 4163 	movw	r1, #1123	; 0x463
 8010096:	4833      	ldr	r0, [pc, #204]	; (8010164 <op_raiseif+0x31c>)
 8010098:	f005 fad4 	bl	8015644 <__assert_func>

  // return to the proc generated level.
  int reg_offset = 0;
 801009c:	2300      	movs	r3, #0
 801009e:	66fb      	str	r3, [r7, #108]	; 0x6c
  while( vm->callinfo_tail != vm->ret_blk->callinfo_self ) {
 80100a0:	e022      	b.n	80100e8 <op_raiseif+0x2a0>
    // find ensure that still needs to be executed.
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f7fe fcb2 	bl	800ea0c <find_catch_handler_ensure>
 80100a8:	6578      	str	r0, [r7, #84]	; 0x54
    if( handler ) {
 80100aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d014      	beq.n	80100da <op_raiseif+0x292>
      vm->exception = ra;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80100b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80100ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	699c      	ldr	r4, [r3, #24]
 80100c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100c8:	3309      	adds	r3, #9
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fe fb40 	bl	800e750 <bin_to_uint32>
 80100d0:	4603      	mov	r3, r0
 80100d2:	18e2      	adds	r2, r4, r3
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	611a      	str	r2, [r3, #16]
      return;
 80100d8:	e095      	b.n	8010206 <op_raiseif+0x3be>
    }

    reg_offset = vm->callinfo_tail->reg_offset;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	69db      	ldr	r3, [r3, #28]
 80100de:	7f9b      	ldrb	r3, [r3, #30]
 80100e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    mrbc_pop_callinfo(vm);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7fe fd86 	bl	800ebf4 <mrbc_pop_callinfo>
  while( vm->callinfo_tail != vm->ret_blk->callinfo_self ) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	69da      	ldr	r2, [r3, #28]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6a1b      	ldr	r3, [r3, #32]
 80100f0:	689b      	ldr	r3, [r3, #8]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d1d5      	bne.n	80100a2 <op_raiseif+0x25a>
  }

  // set the return value.
  mrbc_value *reg0 = vm->cur_regs + reg_offset;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	695a      	ldr	r2, [r3, #20]
 80100fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100fc:	011b      	lsls	r3, r3, #4
 80100fe:	4413      	add	r3, r2
 8010100:	65bb      	str	r3, [r7, #88]	; 0x58
  mrbc_decref(reg0);
 8010102:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010104:	f7fe f9ea 	bl	800e4dc <mrbc_decref>
  *reg0 = vm->ret_blk->ret_val;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6a1b      	ldr	r3, [r3, #32]
 801010c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801010e:	4614      	mov	r4, r2
 8010110:	3310      	adds	r3, #16
 8010112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 8010118:	f107 0308 	add.w	r3, r7, #8
 801011c:	2200      	movs	r2, #0
 801011e:	601a      	str	r2, [r3, #0]
 8010120:	605a      	str	r2, [r3, #4]
 8010122:	609a      	str	r2, [r3, #8]
 8010124:	60da      	str	r2, [r3, #12]
 8010126:	2309      	movs	r3, #9
 8010128:	723b      	strb	r3, [r7, #8]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a1b      	ldr	r3, [r3, #32]
 801012e:	613b      	str	r3, [r7, #16]
 8010130:	f107 0308 	add.w	r3, r7, #8
 8010134:	4618      	mov	r0, r3
 8010136:	f7fe f9d1 	bl	800e4dc <mrbc_decref>
  vm->ret_blk = 0;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	621a      	str	r2, [r3, #32]
  return;
 8010140:	e061      	b.n	8010206 <op_raiseif+0x3be>
  case MRBC_TT_JMPUW:		goto CASE_OP_JMPUW;
 8010142:	bf00      	nop


CASE_OP_JMPUW:
{
  // find ensure that still needs to be executed.
  const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7fe fc61 	bl	800ea0c <find_catch_handler_ensure>
 801014a:	6538      	str	r0, [r7, #80]	; 0x50
  if( !handler ) {
 801014c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801014e:	2b00      	cmp	r3, #0
 8010150:	d10e      	bne.n	8010170 <op_raiseif+0x328>
    vm->inst = ra.handle;
 8010152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	611a      	str	r2, [r3, #16]
    return;
 8010158:	e055      	b.n	8010206 <op_raiseif+0x3be>
 801015a:	bf00      	nop
 801015c:	0801a4c8 	.word	0x0801a4c8
 8010160:	0801bf64 	.word	0x0801bf64
 8010164:	0801a368 	.word	0x0801a368
 8010168:	0801a4e8 	.word	0x0801a4e8
 801016c:	0801a510 	.word	0x0801a510
  }

  // check whether the jump point is inside or outside the catch handler.
  uint32_t jump_point = (uint8_t *)ra.handle - vm->cur_irep->inst;
 8010170:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	699b      	ldr	r3, [r3, #24]
 8010178:	1ad3      	subs	r3, r2, r3
 801017a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if( (bin_to_uint32(handler->begin) < jump_point) &&
 801017c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801017e:	3301      	adds	r3, #1
 8010180:	4618      	mov	r0, r3
 8010182:	f7fe fae5 	bl	800e750 <bin_to_uint32>
 8010186:	4602      	mov	r2, r0
 8010188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801018a:	4293      	cmp	r3, r2
 801018c:	d90c      	bls.n	80101a8 <op_raiseif+0x360>
      (jump_point <= bin_to_uint32(handler->end)) ) {
 801018e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010190:	3305      	adds	r3, #5
 8010192:	4618      	mov	r0, r3
 8010194:	f7fe fadc 	bl	800e750 <bin_to_uint32>
 8010198:	4602      	mov	r2, r0
  if( (bin_to_uint32(handler->begin) < jump_point) &&
 801019a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801019c:	4293      	cmp	r3, r2
 801019e:	d803      	bhi.n	80101a8 <op_raiseif+0x360>
    vm->inst = ra.handle;
 80101a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	611a      	str	r2, [r3, #16]
    return;
 80101a6:	e02e      	b.n	8010206 <op_raiseif+0x3be>
  }

  // jump point is outside, thus jump to ensure.
  assert( vm->exception.tt == MRBC_TT_NIL );
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d006      	beq.n	80101c0 <op_raiseif+0x378>
 80101b2:	4b16      	ldr	r3, [pc, #88]	; (801020c <op_raiseif+0x3c4>)
 80101b4:	4a16      	ldr	r2, [pc, #88]	; (8010210 <op_raiseif+0x3c8>)
 80101b6:	f240 4191 	movw	r1, #1169	; 0x491
 80101ba:	4816      	ldr	r0, [pc, #88]	; (8010214 <op_raiseif+0x3cc>)
 80101bc:	f005 fa42 	bl	8015644 <__assert_func>
  vm->exception = ra;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80101c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	699c      	ldr	r4, [r3, #24]
 80101d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101d8:	3309      	adds	r3, #9
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe fab8 	bl	800e750 <bin_to_uint32>
 80101e0:	4603      	mov	r3, r0
 80101e2:	18e2      	adds	r2, r4, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	611a      	str	r2, [r3, #16]
  return;
 80101e8:	e00d      	b.n	8010206 <op_raiseif+0x3be>
  case MRBC_TT_EXCEPTION:	goto CASE_OP_EXCEPTION;
 80101ea:	bf00      	nop
}


CASE_OP_EXCEPTION:
{
  vm->exception = ra;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80101f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80101f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vm->flag_preemption = 2;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2202      	movs	r2, #2
 8010200:	70da      	strb	r2, [r3, #3]
  return;
 8010202:	e000      	b.n	8010206 <op_raiseif+0x3be>
  return;
 8010204:	bf00      	nop
}
}
 8010206:	3774      	adds	r7, #116	; 0x74
 8010208:	46bd      	mov	sp, r7
 801020a:	bd90      	pop	{r4, r7, pc}
 801020c:	0801a46c 	.word	0x0801a46c
 8010210:	0801bf64 	.word	0x0801bf64
 8010214:	0801a368 	.word	0x0801a368

08010218 <op_ssend>:
/*! OP_SSEND

  R[a] = self.send(Syms[b],R[a+1]..,R[a+n+1]:R[a+n+2]..) (c=n|k<<4)
*/
static inline void op_ssend( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010218:	b590      	push	{r4, r7, lr}
 801021a:	b087      	sub	sp, #28
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	691b      	ldr	r3, [r3, #16]
 8010226:	1c59      	adds	r1, r3, #1
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	6111      	str	r1, [r2, #16]
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	617b      	str	r3, [r7, #20]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	691b      	ldr	r3, [r3, #16]
 8010234:	1c59      	adds	r1, r3, #1
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	6111      	str	r1, [r2, #16]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	613b      	str	r3, [r7, #16]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	691b      	ldr	r3, [r3, #16]
 8010242:	1c59      	adds	r1, r3, #1
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	6111      	str	r1, [r2, #16]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	60fb      	str	r3, [r7, #12]

  mrbc_decref( &regs[a] );
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	011b      	lsls	r3, r3, #4
 8010250:	683a      	ldr	r2, [r7, #0]
 8010252:	4413      	add	r3, r2
 8010254:	4618      	mov	r0, r3
 8010256:	f7fe f941 	bl	800e4dc <mrbc_decref>
  regs[a] = *mrbc_get_self( vm, regs );
 801025a:	6839      	ldr	r1, [r7, #0]
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f7fe fc21 	bl	800eaa4 <mrbc_get_self>
 8010262:	4601      	mov	r1, r0
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	011b      	lsls	r3, r3, #4
 8010268:	683a      	ldr	r2, [r7, #0]
 801026a:	4413      	add	r3, r2
 801026c:	461c      	mov	r4, r3
 801026e:	460b      	mov	r3, r1
 8010270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref( &regs[a] );
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	011b      	lsls	r3, r3, #4
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	4413      	add	r3, r2
 801027e:	4618      	mov	r0, r3
 8010280:	f7fe f8f8 	bl	800e474 <mrbc_incref>

  send_by_name( vm, mrbc_irep_symbol_id(vm->cur_irep, b), a, c );
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	f103 0220 	add.w	r2, r3, #32
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	005b      	lsls	r3, r3, #1
 8010290:	4413      	add	r3, r2
 8010292:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010296:	697a      	ldr	r2, [r7, #20]
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f7fe fa76 	bl	800e78c <send_by_name>
}
 80102a0:	bf00      	nop
 80102a2:	371c      	adds	r7, #28
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd90      	pop	{r4, r7, pc}

080102a8 <op_ssendb>:
/*! OP_SSENDB

  R[a] = self.send(Syms[b],R[a+1]..,R[a+n+1]:R[a+n+2]..,&R[a+n+2k+1])
*/
static inline void op_ssendb( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80102a8:	b590      	push	{r4, r7, lr}
 80102aa:	b087      	sub	sp, #28
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	691b      	ldr	r3, [r3, #16]
 80102b6:	1c59      	adds	r1, r3, #1
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	6111      	str	r1, [r2, #16]
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	617b      	str	r3, [r7, #20]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	1c59      	adds	r1, r3, #1
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	6111      	str	r1, [r2, #16]
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	613b      	str	r3, [r7, #16]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	691b      	ldr	r3, [r3, #16]
 80102d2:	1c59      	adds	r1, r3, #1
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	6111      	str	r1, [r2, #16]
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	60fb      	str	r3, [r7, #12]

  mrbc_decref( &regs[a] );
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	011b      	lsls	r3, r3, #4
 80102e0:	683a      	ldr	r2, [r7, #0]
 80102e2:	4413      	add	r3, r2
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fe f8f9 	bl	800e4dc <mrbc_decref>
  regs[a] = *mrbc_get_self( vm, regs );
 80102ea:	6839      	ldr	r1, [r7, #0]
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7fe fbd9 	bl	800eaa4 <mrbc_get_self>
 80102f2:	4601      	mov	r1, r0
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	011b      	lsls	r3, r3, #4
 80102f8:	683a      	ldr	r2, [r7, #0]
 80102fa:	4413      	add	r3, r2
 80102fc:	461c      	mov	r4, r3
 80102fe:	460b      	mov	r3, r1
 8010300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref( &regs[a] );
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	011b      	lsls	r3, r3, #4
 801030a:	683a      	ldr	r2, [r7, #0]
 801030c:	4413      	add	r3, r2
 801030e:	4618      	mov	r0, r3
 8010310:	f7fe f8b0 	bl	800e474 <mrbc_incref>

  send_by_name( vm, mrbc_irep_symbol_id(vm->cur_irep, b), a, c | 0x100 );
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	f103 0220 	add.w	r2, r3, #32
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	4413      	add	r3, r2
 8010322:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010326:	697a      	ldr	r2, [r7, #20]
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7fe fa2c 	bl	800e78c <send_by_name>
}
 8010334:	bf00      	nop
 8010336:	371c      	adds	r7, #28
 8010338:	46bd      	mov	sp, r7
 801033a:	bd90      	pop	{r4, r7, pc}

0801033c <op_send>:
/*! OP_SEND

  R[a] = R[a].send(Syms[b],R[a+1]..,R[a+n+1]:R[a+n+2]..) (c=n|k<<4)
*/
static inline void op_send( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	691b      	ldr	r3, [r3, #16]
 801034a:	1c59      	adds	r1, r3, #1
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	6111      	str	r1, [r2, #16]
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	617b      	str	r3, [r7, #20]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	1c59      	adds	r1, r3, #1
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	6111      	str	r1, [r2, #16]
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	613b      	str	r3, [r7, #16]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	691b      	ldr	r3, [r3, #16]
 8010366:	1c59      	adds	r1, r3, #1
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	6111      	str	r1, [r2, #16]
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	60fb      	str	r3, [r7, #12]

  send_by_name( vm, mrbc_irep_symbol_id(vm->cur_irep, b), a, c );
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	f103 0220 	add.w	r2, r3, #32
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	005b      	lsls	r3, r3, #1
 801037c:	4413      	add	r3, r2
 801037e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010382:	697a      	ldr	r2, [r7, #20]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7fe fa00 	bl	800e78c <send_by_name>
}
 801038c:	bf00      	nop
 801038e:	3718      	adds	r7, #24
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <op_sendb>:
/*! OP_SENDB

  R[a] = R[a].send(Syms[b],R[a+1]..,R[a+n+1]:R[a+n+2]..,&R[a+n+2k+1])
*/
static inline void op_sendb( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b086      	sub	sp, #24
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	691b      	ldr	r3, [r3, #16]
 80103a2:	1c59      	adds	r1, r3, #1
 80103a4:	687a      	ldr	r2, [r7, #4]
 80103a6:	6111      	str	r1, [r2, #16]
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	617b      	str	r3, [r7, #20]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	691b      	ldr	r3, [r3, #16]
 80103b0:	1c59      	adds	r1, r3, #1
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	6111      	str	r1, [r2, #16]
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	613b      	str	r3, [r7, #16]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	691b      	ldr	r3, [r3, #16]
 80103be:	1c59      	adds	r1, r3, #1
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	6111      	str	r1, [r2, #16]
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	60fb      	str	r3, [r7, #12]

  send_by_name( vm, mrbc_irep_symbol_id(vm->cur_irep, b), a, c | 0x100 );
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	68db      	ldr	r3, [r3, #12]
 80103cc:	f103 0220 	add.w	r2, r3, #32
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	005b      	lsls	r3, r3, #1
 80103d4:	4413      	add	r3, r2
 80103d6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80103da:	697a      	ldr	r2, [r7, #20]
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7fe f9d2 	bl	800e78c <send_by_name>
}
 80103e8:	bf00      	nop
 80103ea:	3718      	adds	r7, #24
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <op_super>:
/*! OP_SUPER

  R[a] = super(R[a+1],... ,R[a+b+1])
*/
static inline void op_super( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80103f0:	b590      	push	{r4, r7, lr}
 80103f2:	b0a5      	sub	sp, #148	; 0x94
 80103f4:	af02      	add	r7, sp, #8
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	691b      	ldr	r3, [r3, #16]
 80103fe:	1c59      	adds	r1, r3, #1
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	6111      	str	r1, [r2, #16]
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	67bb      	str	r3, [r7, #120]	; 0x78
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	691b      	ldr	r3, [r3, #16]
 801040c:	1c59      	adds	r1, r3, #1
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	6111      	str	r1, [r2, #16]
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	677b      	str	r3, [r7, #116]	; 0x74

  int narg = b & 0x0f;
 8010416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010418:	f003 030f 	and.w	r3, r3, #15
 801041c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  int karg = (b >> 4) & 0x0f;
 8010420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010422:	091b      	lsrs	r3, r3, #4
 8010424:	f003 030f 	and.w	r3, r3, #15
 8010428:	673b      	str	r3, [r7, #112]	; 0x70
  mrbc_value *recv = regs + a;	// new regs[0]
 801042a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801042c:	011b      	lsls	r3, r3, #4
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	4413      	add	r3, r2
 8010432:	66fb      	str	r3, [r7, #108]	; 0x6c

  // set self to new regs[0]
  mrbc_value *self = mrbc_get_self(vm, regs);
 8010434:	6839      	ldr	r1, [r7, #0]
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7fe fb34 	bl	800eaa4 <mrbc_get_self>
 801043c:	66b8      	str	r0, [r7, #104]	; 0x68
  assert( self->tt != MRBC_TT_PROC );
 801043e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010440:	f993 3000 	ldrsb.w	r3, [r3]
 8010444:	2b09      	cmp	r3, #9
 8010446:	d106      	bne.n	8010456 <op_super+0x66>
 8010448:	4ba8      	ldr	r3, [pc, #672]	; (80106ec <op_super+0x2fc>)
 801044a:	4aa9      	ldr	r2, [pc, #676]	; (80106f0 <op_super+0x300>)
 801044c:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8010450:	48a8      	ldr	r0, [pc, #672]	; (80106f4 <op_super+0x304>)
 8010452:	f005 f8f7 	bl	8015644 <__assert_func>

  mrbc_incref( self );
 8010456:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8010458:	f7fe f80c 	bl	800e474 <mrbc_incref>
  mrbc_decref( recv );
 801045c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801045e:	f7fe f83d 	bl	800e4dc <mrbc_decref>
  *recv = *self;
 8010462:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010466:	4614      	mov	r4, r2
 8010468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801046a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // If it's packed in an array, expand it.
  if( narg == CALL_MAXARGS ) {
 801046e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010472:	2b0f      	cmp	r3, #15
 8010474:	d16b      	bne.n	801054e <op_super+0x15e>
       on mrbc ver 3.1
         b = 15  in initialize method.
	 b = 255 in other method.
    */

    assert( recv[1].tt == MRBC_TT_ARRAY );
 8010476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010478:	3310      	adds	r3, #16
 801047a:	f993 3000 	ldrsb.w	r3, [r3]
 801047e:	2b0a      	cmp	r3, #10
 8010480:	d006      	beq.n	8010490 <op_super+0xa0>
 8010482:	4b9d      	ldr	r3, [pc, #628]	; (80106f8 <op_super+0x308>)
 8010484:	4a9a      	ldr	r2, [pc, #616]	; (80106f0 <op_super+0x300>)
 8010486:	f240 41fc 	movw	r1, #1276	; 0x4fc
 801048a:	489a      	ldr	r0, [pc, #616]	; (80106f4 <op_super+0x304>)
 801048c:	f005 f8da 	bl	8015644 <__assert_func>

    mrbc_value argary = recv[1];
 8010490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010492:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8010496:	3310      	adds	r3, #16
 8010498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801049a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_value proc = recv[2];
 801049e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104a0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80104a4:	3320      	adds	r3, #32
 80104a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80104a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    recv[1].tt = MRBC_TT_EMPTY;
 80104ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104ae:	3310      	adds	r3, #16
 80104b0:	2200      	movs	r2, #0
 80104b2:	701a      	strb	r2, [r3, #0]
    recv[2].tt = MRBC_TT_EMPTY;
 80104b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104b6:	3320      	adds	r3, #32
 80104b8:	2200      	movs	r2, #0
 80104ba:	701a      	strb	r2, [r3, #0]

    int argc = mrbc_array_size(&argary);
 80104bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fe f8cf 	bl	800e664 <mrbc_array_size>
 80104c6:	6678      	str	r0, [r7, #100]	; 0x64
    for( int i = 0; i < argc; i++ ) {
 80104c8:	2300      	movs	r3, #0
 80104ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80104ce:	e01e      	b.n	801050e <op_super+0x11e>
      mrbc_decref( &recv[i+1] );
 80104d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104d4:	3301      	adds	r3, #1
 80104d6:	011b      	lsls	r3, r3, #4
 80104d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80104da:	4413      	add	r3, r2
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fd fffd 	bl	800e4dc <mrbc_decref>
      recv[i+1] = argary.array->data[i];
 80104e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104e4:	689a      	ldr	r2, [r3, #8]
 80104e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104ea:	011b      	lsls	r3, r3, #4
 80104ec:	18d1      	adds	r1, r2, r3
 80104ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104f2:	3301      	adds	r3, #1
 80104f4:	011b      	lsls	r3, r3, #4
 80104f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80104f8:	4413      	add	r3, r2
 80104fa:	461c      	mov	r4, r3
 80104fc:	460b      	mov	r3, r1
 80104fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for( int i = 0; i < argc; i++ ) {
 8010504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010508:	3301      	adds	r3, #1
 801050a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801050e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010514:	429a      	cmp	r2, r3
 8010516:	dbdb      	blt.n	80104d0 <op_super+0xe0>
    }
    mrbc_array_delete_handle(&argary);
 8010518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801051c:	4618      	mov	r0, r3
 801051e:	f7fe f8ae 	bl	800e67e <mrbc_array_delete_handle>

    mrbc_decref( &recv[argc+1] );
 8010522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010524:	3301      	adds	r3, #1
 8010526:	011b      	lsls	r3, r3, #4
 8010528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801052a:	4413      	add	r3, r2
 801052c:	4618      	mov	r0, r3
 801052e:	f7fd ffd5 	bl	800e4dc <mrbc_decref>
    recv[argc+1] = proc;
 8010532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010534:	3301      	adds	r3, #1
 8010536:	011b      	lsls	r3, r3, #4
 8010538:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801053a:	4413      	add	r3, r2
 801053c:	461c      	mov	r4, r3
 801053e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    narg = argc;
 8010548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801054a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  }

  // Convert keyword argument to hash.
  if( karg && karg != CALL_MAXARGS ) {
 801054e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010550:	2b00      	cmp	r3, #0
 8010552:	d04b      	beq.n	80105ec <op_super+0x1fc>
 8010554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010556:	2b0f      	cmp	r3, #15
 8010558:	d048      	beq.n	80105ec <op_super+0x1fc>
    narg++;
 801055a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801055e:	3301      	adds	r3, #1
 8010560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    mrbc_value h = mrbc_hash_new( vm, karg );
 8010564:	f107 0318 	add.w	r3, r7, #24
 8010568:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801056a:	6879      	ldr	r1, [r7, #4]
 801056c:	4618      	mov	r0, r3
 801056e:	f7f3 fc66 	bl	8003e3e <mrbc_hash_new>
    if( !h.hash ) return;	// ENOMEM
 8010572:	6a3b      	ldr	r3, [r7, #32]
 8010574:	2b00      	cmp	r3, #0
 8010576:	f000 80b4 	beq.w	80106e2 <op_super+0x2f2>

    mrbc_value *r1 = recv + narg;
 801057a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801057e:	011b      	lsls	r3, r3, #4
 8010580:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010582:	4413      	add	r3, r2
 8010584:	663b      	str	r3, [r7, #96]	; 0x60
    memcpy( h.hash->data, r1, sizeof(mrbc_value) * karg * 2 );
 8010586:	6a3b      	ldr	r3, [r7, #32]
 8010588:	6898      	ldr	r0, [r3, #8]
 801058a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801058c:	015b      	lsls	r3, r3, #5
 801058e:	461a      	mov	r2, r3
 8010590:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010592:	f006 f930 	bl	80167f6 <memcpy>
    h.hash->n_stored = karg * 2;
 8010596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010598:	b29a      	uxth	r2, r3
 801059a:	6a3b      	ldr	r3, [r7, #32]
 801059c:	0052      	lsls	r2, r2, #1
 801059e:	b292      	uxth	r2, r2
 80105a0:	80da      	strh	r2, [r3, #6]

    mrbc_value block = r1[karg * 2];
 80105a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105a4:	015b      	lsls	r3, r3, #5
 80105a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105a8:	4413      	add	r3, r2
 80105aa:	f107 0408 	add.w	r4, r7, #8
 80105ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memset( r1 + 2, 0, sizeof(mrbc_value) * (karg * 2 - 1) );
 80105b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105b6:	f103 0020 	add.w	r0, r3, #32
 80105ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105bc:	005b      	lsls	r3, r3, #1
 80105be:	3b01      	subs	r3, #1
 80105c0:	011b      	lsls	r3, r3, #4
 80105c2:	461a      	mov	r2, r3
 80105c4:	2100      	movs	r1, #0
 80105c6:	f006 f87c 	bl	80166c2 <memset>
    *r1++ = h;
 80105ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105cc:	f103 0210 	add.w	r2, r3, #16
 80105d0:	663a      	str	r2, [r7, #96]	; 0x60
 80105d2:	461c      	mov	r4, r3
 80105d4:	f107 0318 	add.w	r3, r7, #24
 80105d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    *r1 = block;
 80105de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105e0:	461c      	mov	r4, r3
 80105e2:	f107 0308 	add.w	r3, r7, #8
 80105e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  // find super class
  mrbc_callinfo *callinfo = vm->callinfo_tail;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	69db      	ldr	r3, [r3, #28]
 80105f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  mrbc_class *cls = callinfo->own_class;
 80105f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105f4:	695b      	ldr	r3, [r3, #20]
 80105f6:	65bb      	str	r3, [r7, #88]	; 0x58
  mrbc_method method;

  assert( cls );
 80105f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d106      	bne.n	801060c <op_super+0x21c>
 80105fe:	4b3f      	ldr	r3, [pc, #252]	; (80106fc <op_super+0x30c>)
 8010600:	4a3b      	ldr	r2, [pc, #236]	; (80106f0 <op_super+0x300>)
 8010602:	f240 5124 	movw	r1, #1316	; 0x524
 8010606:	483b      	ldr	r0, [pc, #236]	; (80106f4 <op_super+0x304>)
 8010608:	f005 f81c 	bl	8015644 <__assert_func>
  cls = cls->super;
 801060c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	65bb      	str	r3, [r7, #88]	; 0x58
  assert( cls );
 8010612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010614:	2b00      	cmp	r3, #0
 8010616:	d106      	bne.n	8010626 <op_super+0x236>
 8010618:	4b38      	ldr	r3, [pc, #224]	; (80106fc <op_super+0x30c>)
 801061a:	4a35      	ldr	r2, [pc, #212]	; (80106f0 <op_super+0x300>)
 801061c:	f240 5126 	movw	r1, #1318	; 0x526
 8010620:	4834      	ldr	r0, [pc, #208]	; (80106f4 <op_super+0x304>)
 8010622:	f005 f80f 	bl	8015644 <__assert_func>
  if( mrbc_find_method( &method, cls, callinfo->method_id ) == 0 ) {
 8010626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010628:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801062c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010630:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010632:	4618      	mov	r0, r3
 8010634:	f7f9 f844 	bl	80096c0 <mrbc_find_method>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d116      	bne.n	801066c <op_super+0x27c>
    mrbc_raisef( vm, MRBC_CLASS(NoMethodError),
 801063e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010640:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010644:	4618      	mov	r0, r3
 8010646:	f7fd fafb 	bl	800dc40 <mrbc_symid_to_str>
 801064a:	4604      	mov	r4, r0
	"no superclass method '%s' for %s",
	mrbc_symid_to_str(callinfo->method_id),
	mrbc_symid_to_str(callinfo->own_class->sym_id));
 801064c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801064e:	695b      	ldr	r3, [r3, #20]
    mrbc_raisef( vm, MRBC_CLASS(NoMethodError),
 8010650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010654:	4618      	mov	r0, r3
 8010656:	f7fd faf3 	bl	800dc40 <mrbc_symid_to_str>
 801065a:	4603      	mov	r3, r0
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	4623      	mov	r3, r4
 8010660:	4a27      	ldr	r2, [pc, #156]	; (8010700 <op_super+0x310>)
 8010662:	4928      	ldr	r1, [pc, #160]	; (8010704 <op_super+0x314>)
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f7fa ff33 	bl	800b4d0 <mrbc_raisef>
    return;
 801066a:	e03b      	b.n	80106e4 <op_super+0x2f4>
  }

  // call C function and return.
  if( method.c_func ) {
 801066c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8010670:	2b00      	cmp	r3, #0
 8010672:	d019      	beq.n	80106a8 <op_super+0x2b8>
    method.func(vm, recv, narg);
 8010674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010676:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801067a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	4798      	blx	r3
    for( int i = 1; i <= narg+1; i++ ) {
 8010680:	2301      	movs	r3, #1
 8010682:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010684:	e009      	b.n	801069a <op_super+0x2aa>
      mrbc_decref_empty( recv + i );
 8010686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010688:	011b      	lsls	r3, r3, #4
 801068a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801068c:	4413      	add	r3, r2
 801068e:	4618      	mov	r0, r3
 8010690:	f7fd ff6a 	bl	800e568 <mrbc_decref_empty>
    for( int i = 1; i <= narg+1; i++ ) {
 8010694:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010696:	3301      	adds	r3, #1
 8010698:	67fb      	str	r3, [r7, #124]	; 0x7c
 801069a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801069e:	3301      	adds	r3, #1
 80106a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80106a2:	429a      	cmp	r2, r3
 80106a4:	ddef      	ble.n	8010686 <op_super+0x296>
    }
    return;
 80106a6:	e01d      	b.n	80106e4 <op_super+0x2f4>
  }

  // call Ruby method.
  callinfo = mrbc_push_callinfo(vm, callinfo->method_id, a, narg);
 80106a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106aa:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 80106ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80106b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f7fe fa5b 	bl	800eb70 <mrbc_push_callinfo>
 80106ba:	65f8      	str	r0, [r7, #92]	; 0x5c
  callinfo->own_class = method.cls;
 80106bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106c0:	615a      	str	r2, [r3, #20]
  callinfo->is_called_super = 1;
 80106c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106c4:	2201      	movs	r2, #1
 80106c6:	f883 2020 	strb.w	r2, [r3, #32]

  vm->cur_irep = method.irep;
 80106ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	699a      	ldr	r2, [r3, #24]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	611a      	str	r2, [r3, #16]
  vm->cur_regs = recv;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80106de:	615a      	str	r2, [r3, #20]
 80106e0:	e000      	b.n	80106e4 <op_super+0x2f4>
    if( !h.hash ) return;	// ENOMEM
 80106e2:	bf00      	nop
}
 80106e4:	378c      	adds	r7, #140	; 0x8c
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd90      	pop	{r4, r7, pc}
 80106ea:	bf00      	nop
 80106ec:	0801a34c 	.word	0x0801a34c
 80106f0:	0801bf70 	.word	0x0801bf70
 80106f4:	0801a368 	.word	0x0801a368
 80106f8:	0801a51c 	.word	0x0801a51c
 80106fc:	0801a538 	.word	0x0801a538
 8010700:	0801a53c 	.word	0x0801a53c
 8010704:	20000184 	.word	0x20000184

08010708 <op_argary>:
  R[a] = argument array (16=m5:r1:m5:d1:lv4)

  flags: mmmm_mrmm_mmmd_llll
*/
static inline void op_argary( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010708:	b590      	push	{r4, r7, lr}
 801070a:	b099      	sub	sp, #100	; 0x64
 801070c:	af00      	add	r7, sp, #0
 801070e:	6178      	str	r0, [r7, #20]
 8010710:	6139      	str	r1, [r7, #16]
  FETCH_BS();
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	1c59      	adds	r1, r3, #1
 8010718:	697a      	ldr	r2, [r7, #20]
 801071a:	6111      	str	r1, [r2, #16]
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	691b      	ldr	r3, [r3, #16]
 8010724:	1c59      	adds	r1, r3, #1
 8010726:	697a      	ldr	r2, [r7, #20]
 8010728:	6111      	str	r1, [r2, #16]
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	64bb      	str	r3, [r7, #72]	; 0x48
 801072e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010730:	021a      	lsls	r2, r3, #8
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	691b      	ldr	r3, [r3, #16]
 8010736:	1c58      	adds	r0, r3, #1
 8010738:	6979      	ldr	r1, [r7, #20]
 801073a:	6108      	str	r0, [r1, #16]
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	4313      	orrs	r3, r2
 8010740:	64bb      	str	r3, [r7, #72]	; 0x48

  int m1 = (b >> 11) & 0x3f;
 8010742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010744:	0adb      	lsrs	r3, r3, #11
 8010746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801074a:	647b      	str	r3, [r7, #68]	; 0x44
  int d  = (b >>  4) & 0x01;
 801074c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801074e:	091b      	lsrs	r3, r3, #4
 8010750:	f003 0301 	and.w	r3, r3, #1
 8010754:	643b      	str	r3, [r7, #64]	; 0x40
  int lv = b & 0x0f;
 8010756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010758:	f003 030f 	and.w	r3, r3, #15
 801075c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if( b & 0x400 ) {	// check REST parameter.
 801075e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010764:	2b00      	cmp	r3, #0
 8010766:	d005      	beq.n	8010774 <op_argary+0x6c>
    // TODO: want to support.
    mrbc_raise( vm, MRBC_CLASS(NotImplementedError), "Not support rest parameter by super.");
 8010768:	4a73      	ldr	r2, [pc, #460]	; (8010938 <op_argary+0x230>)
 801076a:	4974      	ldr	r1, [pc, #464]	; (801093c <op_argary+0x234>)
 801076c:	6978      	ldr	r0, [r7, #20]
 801076e:	f7fa fe5b 	bl	800b428 <mrbc_raise>
    return;
 8010772:	e0de      	b.n	8010932 <op_argary+0x22a>
  }
  if( b & 0x3e0 ) {	// check m2 parameter.
 8010774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010776:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 801077a:	2b00      	cmp	r3, #0
 801077c:	d005      	beq.n	801078a <op_argary+0x82>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "not support m2 or keyword argument.");
 801077e:	4a70      	ldr	r2, [pc, #448]	; (8010940 <op_argary+0x238>)
 8010780:	4970      	ldr	r1, [pc, #448]	; (8010944 <op_argary+0x23c>)
 8010782:	6978      	ldr	r0, [r7, #20]
 8010784:	f7fa fe50 	bl	800b428 <mrbc_raise>
    return;
 8010788:	e0d3      	b.n	8010932 <op_argary+0x22a>
  }

  mrbc_value *reg0 = regs;
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	65fb      	str	r3, [r7, #92]	; 0x5c

  // rewind proc nest
  if( lv ) {
 801078e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010790:	2b00      	cmp	r3, #0
 8010792:	d04b      	beq.n	801082c <op_argary+0x124>
    assert( mrbc_type(*reg0) == MRBC_TT_PROC );
 8010794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010796:	f993 3000 	ldrsb.w	r3, [r3]
 801079a:	2b09      	cmp	r3, #9
 801079c:	d006      	beq.n	80107ac <op_argary+0xa4>
 801079e:	4b6a      	ldr	r3, [pc, #424]	; (8010948 <op_argary+0x240>)
 80107a0:	4a6a      	ldr	r2, [pc, #424]	; (801094c <op_argary+0x244>)
 80107a2:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 80107a6:	486a      	ldr	r0, [pc, #424]	; (8010950 <op_argary+0x248>)
 80107a8:	f004 ff4c 	bl	8015644 <__assert_func>
    mrbc_callinfo *callinfo = reg0->proc->callinfo;
 80107ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107ae:	689b      	ldr	r3, [r3, #8]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	65bb      	str	r3, [r7, #88]	; 0x58
    assert( callinfo );
 80107b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d106      	bne.n	80107c8 <op_argary+0xc0>
 80107ba:	4b66      	ldr	r3, [pc, #408]	; (8010954 <op_argary+0x24c>)
 80107bc:	4a63      	ldr	r2, [pc, #396]	; (801094c <op_argary+0x244>)
 80107be:	f240 5162 	movw	r1, #1378	; 0x562
 80107c2:	4863      	ldr	r0, [pc, #396]	; (8010950 <op_argary+0x248>)
 80107c4:	f004 ff3e 	bl	8015644 <__assert_func>

    for( int i = 1; i < lv; i ++ ) {
 80107c8:	2301      	movs	r3, #1
 80107ca:	657b      	str	r3, [r7, #84]	; 0x54
 80107cc:	e023      	b.n	8010816 <op_argary+0x10e>
      reg0 = callinfo->cur_regs + callinfo->reg_offset;
 80107ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107d0:	68da      	ldr	r2, [r3, #12]
 80107d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107d4:	7f9b      	ldrb	r3, [r3, #30]
 80107d6:	011b      	lsls	r3, r3, #4
 80107d8:	4413      	add	r3, r2
 80107da:	65fb      	str	r3, [r7, #92]	; 0x5c
      assert( mrbc_type(*reg0) == MRBC_TT_PROC );
 80107dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107de:	f993 3000 	ldrsb.w	r3, [r3]
 80107e2:	2b09      	cmp	r3, #9
 80107e4:	d006      	beq.n	80107f4 <op_argary+0xec>
 80107e6:	4b58      	ldr	r3, [pc, #352]	; (8010948 <op_argary+0x240>)
 80107e8:	4a58      	ldr	r2, [pc, #352]	; (801094c <op_argary+0x244>)
 80107ea:	f240 5166 	movw	r1, #1382	; 0x566
 80107ee:	4858      	ldr	r0, [pc, #352]	; (8010950 <op_argary+0x248>)
 80107f0:	f004 ff28 	bl	8015644 <__assert_func>
      callinfo = reg0->proc->callinfo;
 80107f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107f6:	689b      	ldr	r3, [r3, #8]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	65bb      	str	r3, [r7, #88]	; 0x58
      assert( callinfo );
 80107fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d106      	bne.n	8010810 <op_argary+0x108>
 8010802:	4b54      	ldr	r3, [pc, #336]	; (8010954 <op_argary+0x24c>)
 8010804:	4a51      	ldr	r2, [pc, #324]	; (801094c <op_argary+0x244>)
 8010806:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 801080a:	4851      	ldr	r0, [pc, #324]	; (8010950 <op_argary+0x248>)
 801080c:	f004 ff1a 	bl	8015644 <__assert_func>
    for( int i = 1; i < lv; i ++ ) {
 8010810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010812:	3301      	adds	r3, #1
 8010814:	657b      	str	r3, [r7, #84]	; 0x54
 8010816:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801081a:	429a      	cmp	r2, r3
 801081c:	dbd7      	blt.n	80107ce <op_argary+0xc6>
    }

    reg0 = callinfo->cur_regs + callinfo->reg_offset;
 801081e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010820:	68da      	ldr	r2, [r3, #12]
 8010822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010824:	7f9b      	ldrb	r3, [r3, #30]
 8010826:	011b      	lsls	r3, r3, #4
 8010828:	4413      	add	r3, r2
 801082a:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  // create arguent array.
  int array_size = m1 + d;
 801082c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801082e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010830:	4413      	add	r3, r2
 8010832:	63bb      	str	r3, [r7, #56]	; 0x38
  mrbc_value val = mrbc_array_new( vm, array_size );
 8010834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801083a:	6979      	ldr	r1, [r7, #20]
 801083c:	4618      	mov	r0, r3
 801083e:	f7f1 fd8a 	bl	8002356 <mrbc_array_new>
  if( !val.array ) return;	// ENOMEM
 8010842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010844:	2b00      	cmp	r3, #0
 8010846:	d073      	beq.n	8010930 <op_argary+0x228>

  if( vm->callinfo_tail->karg_keep ) {
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	69db      	ldr	r3, [r3, #28]
 801084c:	699b      	ldr	r3, [r3, #24]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d022      	beq.n	8010898 <op_argary+0x190>
    mrbc_value karg = {.tt = MRBC_TT_HASH, .hash = vm->callinfo_tail->karg_keep};
 8010852:	f107 0318 	add.w	r3, r7, #24
 8010856:	2200      	movs	r2, #0
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	605a      	str	r2, [r3, #4]
 801085c:	609a      	str	r2, [r3, #8]
 801085e:	60da      	str	r2, [r3, #12]
 8010860:	230d      	movs	r3, #13
 8010862:	763b      	strb	r3, [r7, #24]
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	69db      	ldr	r3, [r3, #28]
 8010868:	699b      	ldr	r3, [r3, #24]
 801086a:	623b      	str	r3, [r7, #32]
    karg = mrbc_hash_dup(vm, &karg);
 801086c:	463b      	mov	r3, r7
 801086e:	f107 0218 	add.w	r2, r7, #24
 8010872:	6979      	ldr	r1, [r7, #20]
 8010874:	4618      	mov	r0, r3
 8010876:	f7f3 fcc9 	bl	800420c <mrbc_hash_dup>
 801087a:	f107 0418 	add.w	r4, r7, #24
 801087e:	463b      	mov	r3, r7
 8010880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010882:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_array_push( &val, &karg );
 8010886:	f107 0218 	add.w	r2, r7, #24
 801088a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801088e:	4611      	mov	r1, r2
 8010890:	4618      	mov	r0, r3
 8010892:	f7f1 fe90 	bl	80025b6 <mrbc_array_push>
 8010896:	e01a      	b.n	80108ce <op_argary+0x1c6>
  } else {
    for( int i = 1; i <= array_size; i++ ) {
 8010898:	2301      	movs	r3, #1
 801089a:	653b      	str	r3, [r7, #80]	; 0x50
 801089c:	e013      	b.n	80108c6 <op_argary+0x1be>
      mrbc_incref( &reg0[i] );
 801089e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108a0:	011b      	lsls	r3, r3, #4
 80108a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80108a4:	4413      	add	r3, r2
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fd fde4 	bl	800e474 <mrbc_incref>
      mrbc_array_push( &val, &reg0[i] );
 80108ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108ae:	011b      	lsls	r3, r3, #4
 80108b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80108b2:	441a      	add	r2, r3
 80108b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80108b8:	4611      	mov	r1, r2
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7f1 fe7b 	bl	80025b6 <mrbc_array_push>
    for( int i = 1; i <= array_size; i++ ) {
 80108c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108c2:	3301      	adds	r3, #1
 80108c4:	653b      	str	r3, [r7, #80]	; 0x50
 80108c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80108c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ca:	429a      	cmp	r2, r3
 80108cc:	dde7      	ble.n	801089e <op_argary+0x196>
    }
  }

  mrbc_decref( &regs[a] );
 80108ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108d0:	011b      	lsls	r3, r3, #4
 80108d2:	693a      	ldr	r2, [r7, #16]
 80108d4:	4413      	add	r3, r2
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7fd fe00 	bl	800e4dc <mrbc_decref>
  regs[a] = val;
 80108dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108de:	011b      	lsls	r3, r3, #4
 80108e0:	693a      	ldr	r2, [r7, #16]
 80108e2:	4413      	add	r3, r2
 80108e4:	461c      	mov	r4, r3
 80108e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80108ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // copy a block object
  mrbc_decref( &regs[a+1] );
 80108f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108f2:	3301      	adds	r3, #1
 80108f4:	011b      	lsls	r3, r3, #4
 80108f6:	693a      	ldr	r2, [r7, #16]
 80108f8:	4413      	add	r3, r2
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fd fdee 	bl	800e4dc <mrbc_decref>
  regs[a+1] = reg0[array_size+1];
 8010900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010902:	3301      	adds	r3, #1
 8010904:	011b      	lsls	r3, r3, #4
 8010906:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010908:	18d1      	adds	r1, r2, r3
 801090a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801090c:	3301      	adds	r3, #1
 801090e:	011b      	lsls	r3, r3, #4
 8010910:	693a      	ldr	r2, [r7, #16]
 8010912:	4413      	add	r3, r2
 8010914:	461c      	mov	r4, r3
 8010916:	460b      	mov	r3, r1
 8010918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801091a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref( &regs[a+1] );
 801091e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010920:	3301      	adds	r3, #1
 8010922:	011b      	lsls	r3, r3, #4
 8010924:	693a      	ldr	r2, [r7, #16]
 8010926:	4413      	add	r3, r2
 8010928:	4618      	mov	r0, r3
 801092a:	f7fd fda3 	bl	800e474 <mrbc_incref>
 801092e:	e000      	b.n	8010932 <op_argary+0x22a>
  if( !val.array ) return;	// ENOMEM
 8010930:	bf00      	nop
}
 8010932:	3764      	adds	r7, #100	; 0x64
 8010934:	46bd      	mov	sp, r7
 8010936:	bd90      	pop	{r4, r7, pc}
 8010938:	0801a560 	.word	0x0801a560
 801093c:	20000134 	.word	0x20000134
 8010940:	0801a588 	.word	0x0801a588
 8010944:	20000154 	.word	0x20000154
 8010948:	0801a5ac 	.word	0x0801a5ac
 801094c:	0801bf7c 	.word	0x0801bf7c
 8010950:	0801a368 	.word	0x0801a368
 8010954:	0801a428 	.word	0x0801a428

08010958 <op_enter>:
  arg setup according to flags (23=m5:o5:r1:m5:k5:d1:b1)

  flags: 0mmm_mmoo_ooor_mmmm_mkkk_kkdb
*/
static inline void op_enter( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010958:	b590      	push	{r4, r7, lr}
 801095a:	b0a7      	sub	sp, #156	; 0x9c
 801095c:	af00      	add	r7, sp, #0
 801095e:	6178      	str	r0, [r7, #20]
 8010960:	6139      	str	r1, [r7, #16]
#define FLAG_M2		0x0f80
#define FLAG_KW		0x007c
#define FLAG_DICT	0x0002
#define FLAG_BLOCK	0x0001

  FETCH_W();
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	691b      	ldr	r3, [r3, #16]
 8010966:	1c59      	adds	r1, r3, #1
 8010968:	697a      	ldr	r2, [r7, #20]
 801096a:	6111      	str	r1, [r2, #16]
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	677b      	str	r3, [r7, #116]	; 0x74
 8010970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010972:	021a      	lsls	r2, r3, #8
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	691b      	ldr	r3, [r3, #16]
 8010978:	1c58      	adds	r0, r3, #1
 801097a:	6979      	ldr	r1, [r7, #20]
 801097c:	6108      	str	r0, [r1, #16]
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	4313      	orrs	r3, r2
 8010982:	677b      	str	r3, [r7, #116]	; 0x74
 8010984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010986:	021a      	lsls	r2, r3, #8
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	691b      	ldr	r3, [r3, #16]
 801098c:	1c58      	adds	r0, r3, #1
 801098e:	6979      	ldr	r1, [r7, #20]
 8010990:	6108      	str	r0, [r1, #16]
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	4313      	orrs	r3, r2
 8010996:	677b      	str	r3, [r7, #116]	; 0x74

  // Check the number of registers to use.
  int reg_use_max = regs - vm->regs + vm->cur_irep->nregs;
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	3338      	adds	r3, #56	; 0x38
 801099c:	693a      	ldr	r2, [r7, #16]
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	111b      	asrs	r3, r3, #4
 80109a2:	461a      	mov	r2, r3
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	889b      	ldrh	r3, [r3, #4]
 80109aa:	4413      	add	r3, r2
 80109ac:	673b      	str	r3, [r7, #112]	; 0x70
  if( reg_use_max >= vm->regs_size ) {
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	88db      	ldrh	r3, [r3, #6]
 80109b2:	461a      	mov	r2, r3
 80109b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80109b6:	4293      	cmp	r3, r2
 80109b8:	db05      	blt.n	80109c6 <op_enter+0x6e>
    mrbc_raise( vm, MRBC_CLASS(Exception), "MAX_REGS_SIZE overflow.");
 80109ba:	4aa0      	ldr	r2, [pc, #640]	; (8010c3c <op_enter+0x2e4>)
 80109bc:	49a0      	ldr	r1, [pc, #640]	; (8010c40 <op_enter+0x2e8>)
 80109be:	6978      	ldr	r0, [r7, #20]
 80109c0:	f7fa fd32 	bl	800b428 <mrbc_raise>
    return;
 80109c4:	e228      	b.n	8010e18 <op_enter+0x4c0>
  }

  // Check m2 parameter.
  if( a & FLAG_M2 ) {
 80109c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109c8:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d005      	beq.n	80109dc <op_enter+0x84>
    mrbc_raise( vm, MRBC_CLASS(NotImplementedError), "not support m2 argument.");
 80109d0:	4a9c      	ldr	r2, [pc, #624]	; (8010c44 <op_enter+0x2ec>)
 80109d2:	499d      	ldr	r1, [pc, #628]	; (8010c48 <op_enter+0x2f0>)
 80109d4:	6978      	ldr	r0, [r7, #20]
 80109d6:	f7fa fd27 	bl	800b428 <mrbc_raise>
    return;
 80109da:	e21d      	b.n	8010e18 <op_enter+0x4c0>
  }

  int m1 = (a >> 18) & 0x1f;	// num of required parameters 1
 80109dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109de:	0c9b      	lsrs	r3, r3, #18
 80109e0:	f003 031f 	and.w	r3, r3, #31
 80109e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  int o  = (a >> 13) & 0x1f;	// num of optional parameters
 80109e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109e8:	0b5b      	lsrs	r3, r3, #13
 80109ea:	f003 031f 	and.w	r3, r3, #31
 80109ee:	66bb      	str	r3, [r7, #104]	; 0x68
  int argc = vm->callinfo_tail->n_args;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	69db      	ldr	r3, [r3, #28]
 80109f4:	7fdb      	ldrb	r3, [r3, #31]
 80109f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  if( argc < m1 && mrbc_type(regs[0]) != MRBC_TT_PROC ) {
 80109fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80109fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a00:	429a      	cmp	r2, r3
 8010a02:	da0a      	bge.n	8010a1a <op_enter+0xc2>
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	f993 3000 	ldrsb.w	r3, [r3]
 8010a0a:	2b09      	cmp	r3, #9
 8010a0c:	d005      	beq.n	8010a1a <op_enter+0xc2>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "wrong number of arguments.");
 8010a0e:	4a8f      	ldr	r2, [pc, #572]	; (8010c4c <op_enter+0x2f4>)
 8010a10:	498f      	ldr	r1, [pc, #572]	; (8010c50 <op_enter+0x2f8>)
 8010a12:	6978      	ldr	r0, [r7, #20]
 8010a14:	f7fa fd08 	bl	800b428 <mrbc_raise>
    return;
 8010a18:	e1fe      	b.n	8010e18 <op_enter+0x4c0>
  }

  // save proc (or nil) object.
  mrbc_value proc = regs[argc+1];
 8010a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a1e:	3301      	adds	r3, #1
 8010a20:	011b      	lsls	r3, r3, #4
 8010a22:	693a      	ldr	r2, [r7, #16]
 8010a24:	4413      	add	r3, r2
 8010a26:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8010a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[argc+1].tt = MRBC_TT_EMPTY;
 8010a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a34:	3301      	adds	r3, #1
 8010a36:	011b      	lsls	r3, r3, #4
 8010a38:	693a      	ldr	r2, [r7, #16]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	701a      	strb	r2, [r3, #0]

  // support yield [...] pattern, to expand array.
  if( mrbc_type(regs[0]) == MRBC_TT_PROC &&
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	f993 3000 	ldrsb.w	r3, [r3]
 8010a46:	2b09      	cmp	r3, #9
 8010a48:	d167      	bne.n	8010b1a <op_enter+0x1c2>
      mrbc_type(regs[1]) == MRBC_TT_ARRAY &&
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	3310      	adds	r3, #16
 8010a4e:	f993 3000 	ldrsb.w	r3, [r3]
  if( mrbc_type(regs[0]) == MRBC_TT_PROC &&
 8010a52:	2b0a      	cmp	r3, #10
 8010a54:	d161      	bne.n	8010b1a <op_enter+0x1c2>
      mrbc_type(regs[1]) == MRBC_TT_ARRAY &&
 8010a56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a5a:	2b01      	cmp	r3, #1
 8010a5c:	d15d      	bne.n	8010b1a <op_enter+0x1c2>
      argc == 1 && m1 > 1 ) {
 8010a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	dd5a      	ble.n	8010b1a <op_enter+0x1c2>
    mrbc_value argary = regs[1];
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8010a6a:	3310      	adds	r3, #16
 8010a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    regs[1].tt = MRBC_TT_EMPTY;
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	3310      	adds	r3, #16
 8010a76:	2200      	movs	r2, #0
 8010a78:	701a      	strb	r2, [r3, #0]

    argc = mrbc_array_size(&argary);
 8010a7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fd fdf0 	bl	800e664 <mrbc_array_size>
 8010a84:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if( argc < m1 ) argc = m1;
 8010a88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	da02      	bge.n	8010a98 <op_enter+0x140>
 8010a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for( int i = 0; i < argc; i++ ) {
 8010a98:	2300      	movs	r3, #0
 8010a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a9e:	e031      	b.n	8010b04 <op_enter+0x1ac>
      mrbc_decref( &regs[i+1] );
 8010aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	011b      	lsls	r3, r3, #4
 8010aa8:	693a      	ldr	r2, [r7, #16]
 8010aaa:	4413      	add	r3, r2
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fd fd15 	bl	800e4dc <mrbc_decref>
      if( mrbc_array_size(&argary) > i ) {
 8010ab2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7fd fdd4 	bl	800e664 <mrbc_array_size>
 8010abc:	4602      	mov	r2, r0
 8010abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	da11      	bge.n	8010aea <op_enter+0x192>
	regs[i+1] = argary.array->data[i];
 8010ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ac8:	689a      	ldr	r2, [r3, #8]
 8010aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ace:	011b      	lsls	r3, r3, #4
 8010ad0:	18d1      	adds	r1, r2, r3
 8010ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	011b      	lsls	r3, r3, #4
 8010ada:	693a      	ldr	r2, [r7, #16]
 8010adc:	4413      	add	r3, r2
 8010ade:	461c      	mov	r4, r3
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010ae8:	e007      	b.n	8010afa <op_enter+0x1a2>
      } else {
	mrbc_set_nil( &regs[i+1] );
 8010aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010aee:	3301      	adds	r3, #1
 8010af0:	011b      	lsls	r3, r3, #4
 8010af2:	693a      	ldr	r2, [r7, #16]
 8010af4:	4413      	add	r3, r2
 8010af6:	2201      	movs	r2, #1
 8010af8:	701a      	strb	r2, [r3, #0]
    for( int i = 0; i < argc; i++ ) {
 8010afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010afe:	3301      	adds	r3, #1
 8010b00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010b04:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	dbc7      	blt.n	8010aa0 <op_enter+0x148>
      }
    }
    mrbc_array_delete_handle( &argary );
 8010b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7fd fdb2 	bl	800e67e <mrbc_array_delete_handle>
  }

  // dictionary, keyword or rest parameter exists.
  if( a & (FLAG_DICT|FLAG_KW|FLAG_REST) ) {
 8010b1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010b1c:	f241 037e 	movw	r3, #4222	; 0x107e
 8010b20:	4013      	ands	r3, r2
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f000 811b 	beq.w	8010d5e <op_enter+0x406>
    mrbc_value dict;
    if( a & (FLAG_DICT|FLAG_KW) ) {
 8010b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b2a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d02f      	beq.n	8010b92 <op_enter+0x23a>
      if( (argc - m1) > 0 && mrbc_type(regs[argc]) == MRBC_TT_HASH ) {
 8010b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b38:	1ad3      	subs	r3, r2, r3
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	dd1d      	ble.n	8010b7a <op_enter+0x222>
 8010b3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b42:	011b      	lsls	r3, r3, #4
 8010b44:	693a      	ldr	r2, [r7, #16]
 8010b46:	4413      	add	r3, r2
 8010b48:	f993 3000 	ldrsb.w	r3, [r3]
 8010b4c:	2b0d      	cmp	r3, #13
 8010b4e:	d114      	bne.n	8010b7a <op_enter+0x222>
	dict = regs[argc];
 8010b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b54:	011b      	lsls	r3, r3, #4
 8010b56:	693a      	ldr	r2, [r7, #16]
 8010b58:	4413      	add	r3, r2
 8010b5a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8010b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	regs[argc--].tt = MRBC_TT_EMPTY;
 8010b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b68:	1e5a      	subs	r2, r3, #1
 8010b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010b6e:	011b      	lsls	r3, r3, #4
 8010b70:	693a      	ldr	r2, [r7, #16]
 8010b72:	4413      	add	r3, r2
 8010b74:	2200      	movs	r2, #0
 8010b76:	701a      	strb	r2, [r3, #0]
 8010b78:	e00b      	b.n	8010b92 <op_enter+0x23a>
      } else {
	dict = mrbc_hash_new( vm, 0 );
 8010b7a:	463b      	mov	r3, r7
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	6979      	ldr	r1, [r7, #20]
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7f3 f95c 	bl	8003e3e <mrbc_hash_new>
 8010b86:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8010b8a:	463b      	mov	r3, r7
 8010b8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
    }

    mrbc_value rest;
    if( a & FLAG_REST ) {
 8010b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d049      	beq.n	8010c30 <op_enter+0x2d8>
      int rest_size = argc - m1 - o;
 8010b9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ba2:	1ad2      	subs	r2, r2, r3
 8010ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ba6:	1ad3      	subs	r3, r2, r3
 8010ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if( rest_size < 0 ) rest_size = 0;
 8010bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	da02      	bge.n	8010bba <op_enter+0x262>
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      rest = mrbc_array_new(vm, rest_size);
 8010bba:	463b      	mov	r3, r7
 8010bbc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010bc0:	6979      	ldr	r1, [r7, #20]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7f1 fbc7 	bl	8002356 <mrbc_array_new>
 8010bc8:	f107 0418 	add.w	r4, r7, #24
 8010bcc:	463b      	mov	r3, r7
 8010bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      if( !rest.array ) return;	// ENOMEM
 8010bd4:	6a3b      	ldr	r3, [r7, #32]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	f000 811d 	beq.w	8010e16 <op_enter+0x4be>

      int rest_reg = m1 + o + 1;
 8010bdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010be0:	4413      	add	r3, r2
 8010be2:	3301      	adds	r3, #1
 8010be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      for( int i = 0; i < rest_size; i++ ) {
 8010be8:	2300      	movs	r3, #0
 8010bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010bee:	e019      	b.n	8010c24 <op_enter+0x2cc>
	mrbc_array_push( &rest, &regs[rest_reg] );
 8010bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bf4:	011b      	lsls	r3, r3, #4
 8010bf6:	693a      	ldr	r2, [r7, #16]
 8010bf8:	441a      	add	r2, r3
 8010bfa:	f107 0318 	add.w	r3, r7, #24
 8010bfe:	4611      	mov	r1, r2
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7f1 fcd8 	bl	80025b6 <mrbc_array_push>
	regs[rest_reg++].tt = MRBC_TT_EMPTY;
 8010c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c0a:	1c5a      	adds	r2, r3, #1
 8010c0c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010c10:	011b      	lsls	r3, r3, #4
 8010c12:	693a      	ldr	r2, [r7, #16]
 8010c14:	4413      	add	r3, r2
 8010c16:	2200      	movs	r2, #0
 8010c18:	701a      	strb	r2, [r3, #0]
      for( int i = 0; i < rest_size; i++ ) {
 8010c1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010c1e:	3301      	adds	r3, #1
 8010c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010c24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	dbdf      	blt.n	8010bf0 <op_enter+0x298>
      }
    }

    // reorder arguments.
    int i;
    for( i = argc; i < m1; ) {
 8010c30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010c38:	e020      	b.n	8010c7c <op_enter+0x324>
 8010c3a:	bf00      	nop
 8010c3c:	0801a5d0 	.word	0x0801a5d0
 8010c40:	2000010c 	.word	0x2000010c
 8010c44:	0801a5e8 	.word	0x0801a5e8
 8010c48:	20000134 	.word	0x20000134
 8010c4c:	0801a604 	.word	0x0801a604
 8010c50:	20000154 	.word	0x20000154
      mrbc_decref( &regs[++i] );
 8010c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c58:	3301      	adds	r3, #1
 8010c5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c62:	011b      	lsls	r3, r3, #4
 8010c64:	693a      	ldr	r2, [r7, #16]
 8010c66:	4413      	add	r3, r2
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7fd fc37 	bl	800e4dc <mrbc_decref>
      mrbc_set_nil( &regs[i] );
 8010c6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c72:	011b      	lsls	r3, r3, #4
 8010c74:	693a      	ldr	r2, [r7, #16]
 8010c76:	4413      	add	r3, r2
 8010c78:	2201      	movs	r2, #1
 8010c7a:	701a      	strb	r2, [r3, #0]
    for( i = argc; i < m1; ) {
 8010c7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c82:	429a      	cmp	r2, r3
 8010c84:	dbe6      	blt.n	8010c54 <op_enter+0x2fc>
    }
    i = m1 + o;
 8010c86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c8a:	4413      	add	r3, r2
 8010c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if( a & FLAG_REST ) {
 8010c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d017      	beq.n	8010cca <op_enter+0x372>
      mrbc_decref(&regs[++i]);
 8010c9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ca8:	011b      	lsls	r3, r3, #4
 8010caa:	693a      	ldr	r2, [r7, #16]
 8010cac:	4413      	add	r3, r2
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fd fc14 	bl	800e4dc <mrbc_decref>
      regs[i] = rest;
 8010cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cb8:	011b      	lsls	r3, r3, #4
 8010cba:	693a      	ldr	r2, [r7, #16]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	461c      	mov	r4, r3
 8010cc0:	f107 0318 	add.w	r3, r7, #24
 8010cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
    if( a & (FLAG_DICT|FLAG_KW) ) {
 8010cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ccc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d028      	beq.n	8010d26 <op_enter+0x3ce>
      mrbc_decref(&regs[++i]);
 8010cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cd8:	3301      	adds	r3, #1
 8010cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ce2:	011b      	lsls	r3, r3, #4
 8010ce4:	693a      	ldr	r2, [r7, #16]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fd fbf7 	bl	800e4dc <mrbc_decref>
      regs[i] = dict;
 8010cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cf2:	011b      	lsls	r3, r3, #4
 8010cf4:	693a      	ldr	r2, [r7, #16]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	461c      	mov	r4, r3
 8010cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      if( a & FLAG_KW ) {
 8010d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d06:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00b      	beq.n	8010d26 <op_enter+0x3ce>
	vm->callinfo_tail->karg_keep = mrbc_hash_dup(vm, &dict).hash;
 8010d0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010d12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d16:	6979      	ldr	r1, [r7, #20]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7f3 fa77 	bl	800420c <mrbc_hash_dup>
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	69db      	ldr	r3, [r3, #28]
 8010d22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010d24:	619a      	str	r2, [r3, #24]
      }
    }
    mrbc_decref(&regs[i+1]);
 8010d26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	011b      	lsls	r3, r3, #4
 8010d2e:	693a      	ldr	r2, [r7, #16]
 8010d30:	4413      	add	r3, r2
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fd fbd2 	bl	800e4dc <mrbc_decref>
    regs[i+1] = proc;
 8010d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	011b      	lsls	r3, r3, #4
 8010d40:	693a      	ldr	r2, [r7, #16]
 8010d42:	4413      	add	r3, r2
 8010d44:	461c      	mov	r4, r3
 8010d46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->callinfo_tail->n_args = i;
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	69db      	ldr	r3, [r3, #28]
 8010d54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d58:	b2d2      	uxtb	r2, r2
 8010d5a:	77da      	strb	r2, [r3, #31]
 8010d5c:	e033      	b.n	8010dc6 <op_enter+0x46e>

  } else {
    // reorder arguments.
    int i;
    for( i = argc; i < m1; ) {
 8010d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010d64:	e00f      	b.n	8010d86 <op_enter+0x42e>
      mrbc_decref( &regs[++i] );
 8010d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d68:	3301      	adds	r3, #1
 8010d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010d6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d6e:	011b      	lsls	r3, r3, #4
 8010d70:	693a      	ldr	r2, [r7, #16]
 8010d72:	4413      	add	r3, r2
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7fd fbb1 	bl	800e4dc <mrbc_decref>
      mrbc_set_nil( &regs[i] );
 8010d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d7c:	011b      	lsls	r3, r3, #4
 8010d7e:	693a      	ldr	r2, [r7, #16]
 8010d80:	4413      	add	r3, r2
 8010d82:	2201      	movs	r2, #1
 8010d84:	701a      	strb	r2, [r3, #0]
    for( i = argc; i < m1; ) {
 8010d86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	dbeb      	blt.n	8010d66 <op_enter+0x40e>
    }
    i = m1 + o;
 8010d8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d92:	4413      	add	r3, r2
 8010d94:	67fb      	str	r3, [r7, #124]	; 0x7c
    mrbc_decref(&regs[i+1]);
 8010d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d98:	3301      	adds	r3, #1
 8010d9a:	011b      	lsls	r3, r3, #4
 8010d9c:	693a      	ldr	r2, [r7, #16]
 8010d9e:	4413      	add	r3, r2
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7fd fb9b 	bl	800e4dc <mrbc_decref>
    regs[i+1] = proc;
 8010da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010da8:	3301      	adds	r3, #1
 8010daa:	011b      	lsls	r3, r3, #4
 8010dac:	693a      	ldr	r2, [r7, #16]
 8010dae:	4413      	add	r3, r2
 8010db0:	461c      	mov	r4, r3
 8010db2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->callinfo_tail->n_args = i;
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	69db      	ldr	r3, [r3, #28]
 8010dc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010dc2:	b2d2      	uxtb	r2, r2
 8010dc4:	77da      	strb	r2, [r3, #31]
  }

  // prepare for get default arguments.
  int jmp_ofs = argc - m1;
 8010dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010dcc:	1ad3      	subs	r3, r2, r3
 8010dce:	67bb      	str	r3, [r7, #120]	; 0x78
  if( jmp_ofs > 0 ) {
 8010dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	dd20      	ble.n	8010e18 <op_enter+0x4c0>
    if( jmp_ofs > o ) {
 8010dd6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010dd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	dd11      	ble.n	8010e02 <op_enter+0x4aa>
      jmp_ofs = o;
 8010dde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010de0:	67bb      	str	r3, [r7, #120]	; 0x78

      if( !(a & FLAG_REST) && mrbc_type(regs[0]) != MRBC_TT_PROC ) {
 8010de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d10a      	bne.n	8010e02 <op_enter+0x4aa>
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	f993 3000 	ldrsb.w	r3, [r3]
 8010df2:	2b09      	cmp	r3, #9
 8010df4:	d005      	beq.n	8010e02 <op_enter+0x4aa>
	mrbc_raise( vm, MRBC_CLASS(ArgumentError), "wrong number of arguments.");
 8010df6:	4a0a      	ldr	r2, [pc, #40]	; (8010e20 <op_enter+0x4c8>)
 8010df8:	490a      	ldr	r1, [pc, #40]	; (8010e24 <op_enter+0x4cc>)
 8010dfa:	6978      	ldr	r0, [r7, #20]
 8010dfc:	f7fa fb14 	bl	800b428 <mrbc_raise>
	return;
 8010e00:	e00a      	b.n	8010e18 <op_enter+0x4c0>
      }
    }
    vm->inst += jmp_ofs * 3;	// 3 = bytecode size of OP_JMP
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	6919      	ldr	r1, [r3, #16]
 8010e06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010e08:	4613      	mov	r3, r2
 8010e0a:	005b      	lsls	r3, r3, #1
 8010e0c:	4413      	add	r3, r2
 8010e0e:	18ca      	adds	r2, r1, r3
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	611a      	str	r2, [r3, #16]
 8010e14:	e000      	b.n	8010e18 <op_enter+0x4c0>
      if( !rest.array ) return;	// ENOMEM
 8010e16:	bf00      	nop
#undef FLAG_REST
#undef FLAG_M2
#undef FLAG_KW
#undef FLAG_DICT
#undef FLAG_BLOCK
}
 8010e18:	379c      	adds	r7, #156	; 0x9c
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd90      	pop	{r4, r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	0801a604 	.word	0x0801a604
 8010e24:	20000154 	.word	0x20000154

08010e28 <op_key_p>:
/*! op_key_p

  R[a] = kdict.key?(Syms[b])
*/
static inline void op_key_p( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b088      	sub	sp, #32
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	691b      	ldr	r3, [r3, #16]
 8010e36:	1c59      	adds	r1, r3, #1
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	6111      	str	r1, [r2, #16]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	61fb      	str	r3, [r7, #28]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	1c59      	adds	r1, r3, #1
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	6111      	str	r1, [r2, #16]
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	61bb      	str	r3, [r7, #24]

  mrbc_value *kdict = &regs[vm->callinfo_tail->n_args];
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	69db      	ldr	r3, [r3, #28]
 8010e52:	7fdb      	ldrb	r3, [r3, #31]
 8010e54:	011b      	lsls	r3, r3, #4
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	4413      	add	r3, r2
 8010e5a:	617b      	str	r3, [r7, #20]
  mrbc_sym sym_id = mrbc_irep_symbol_id( vm->cur_irep, b );
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	f103 0220 	add.w	r2, r3, #32
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	005b      	lsls	r3, r3, #1
 8010e68:	4413      	add	r3, r2
 8010e6a:	881b      	ldrh	r3, [r3, #0]
 8010e6c:	827b      	strh	r3, [r7, #18]
  mrbc_value *v = mrbc_hash_search_by_id( kdict, sym_id );
 8010e6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010e72:	4619      	mov	r1, r3
 8010e74:	6978      	ldr	r0, [r7, #20]
 8010e76:	f7f3 f867 	bl	8003f48 <mrbc_hash_search_by_id>
 8010e7a:	60f8      	str	r0, [r7, #12]

  mrbc_decref(&regs[a]);
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	011b      	lsls	r3, r3, #4
 8010e80:	683a      	ldr	r2, [r7, #0]
 8010e82:	4413      	add	r3, r2
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fd fb29 	bl	800e4dc <mrbc_decref>
  mrbc_set_bool(&regs[a], v);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d001      	beq.n	8010e94 <op_key_p+0x6c>
 8010e90:	2103      	movs	r1, #3
 8010e92:	e000      	b.n	8010e96 <op_key_p+0x6e>
 8010e94:	2102      	movs	r1, #2
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	011b      	lsls	r3, r3, #4
 8010e9a:	683a      	ldr	r2, [r7, #0]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	460a      	mov	r2, r1
 8010ea0:	701a      	strb	r2, [r3, #0]
}
 8010ea2:	bf00      	nop
 8010ea4:	3720      	adds	r7, #32
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
	...

08010eac <op_keyend>:
/*! op_keyend

  raise unless kdict.empty?
*/
static inline void op_keyend( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b088      	sub	sp, #32
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	6039      	str	r1, [r7, #0]
  FETCH_Z();

  mrbc_value *kdict = &regs[vm->callinfo_tail->n_args];
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	7fdb      	ldrb	r3, [r3, #31]
 8010ebc:	011b      	lsls	r3, r3, #4
 8010ebe:	683a      	ldr	r2, [r7, #0]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	61fb      	str	r3, [r7, #28]

  if( mrbc_hash_size(kdict) != 0 ) {
 8010ec4:	69f8      	ldr	r0, [r7, #28]
 8010ec6:	f7fd fbed 	bl	800e6a4 <mrbc_hash_size>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d017      	beq.n	8010f00 <op_keyend+0x54>
    mrbc_hash_iterator ite = mrbc_hash_iterator_new(kdict);
 8010ed0:	f107 030c 	add.w	r3, r7, #12
 8010ed4:	69f9      	ldr	r1, [r7, #28]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fd fbf3 	bl	800e6c2 <mrbc_hash_iterator_new>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 8010edc:	f107 030c 	add.w	r3, r7, #12
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fd fc21 	bl	800e728 <mrbc_hash_i_next>
 8010ee6:	61b8      	str	r0, [r7, #24]

    mrbc_raisef(vm, MRBC_CLASS(ArgumentError), "unknown keyword: %s",
		mrbc_symid_to_str(kv->i));
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	689b      	ldr	r3, [r3, #8]
    mrbc_raisef(vm, MRBC_CLASS(ArgumentError), "unknown keyword: %s",
 8010eec:	b21b      	sxth	r3, r3
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fc fea6 	bl	800dc40 <mrbc_symid_to_str>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	4a04      	ldr	r2, [pc, #16]	; (8010f08 <op_keyend+0x5c>)
 8010ef8:	4904      	ldr	r1, [pc, #16]	; (8010f0c <op_keyend+0x60>)
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7fa fae8 	bl	800b4d0 <mrbc_raisef>
  }
}
 8010f00:	bf00      	nop
 8010f02:	3720      	adds	r7, #32
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	0801a620 	.word	0x0801a620
 8010f0c:	20000154 	.word	0x20000154

08010f10 <op_karg>:
/*! op_karg

  R[a] = kdict[Syms[b]]; kdict.delete(Syms[b])
*/
static inline void op_karg( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010f10:	b590      	push	{r4, r7, lr}
 8010f12:	b08b      	sub	sp, #44	; 0x2c
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	691b      	ldr	r3, [r3, #16]
 8010f1e:	1c59      	adds	r1, r3, #1
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	6111      	str	r1, [r2, #16]
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	627b      	str	r3, [r7, #36]	; 0x24
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	691b      	ldr	r3, [r3, #16]
 8010f2c:	1c59      	adds	r1, r3, #1
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	6111      	str	r1, [r2, #16]
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	623b      	str	r3, [r7, #32]

  mrbc_value *kdict = &regs[vm->callinfo_tail->n_args];
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	69db      	ldr	r3, [r3, #28]
 8010f3a:	7fdb      	ldrb	r3, [r3, #31]
 8010f3c:	011b      	lsls	r3, r3, #4
 8010f3e:	683a      	ldr	r2, [r7, #0]
 8010f40:	4413      	add	r3, r2
 8010f42:	61fb      	str	r3, [r7, #28]
  mrbc_sym sym_id = mrbc_irep_symbol_id( vm->cur_irep, b );
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	f103 0220 	add.w	r2, r3, #32
 8010f4c:	6a3b      	ldr	r3, [r7, #32]
 8010f4e:	005b      	lsls	r3, r3, #1
 8010f50:	4413      	add	r3, r2
 8010f52:	881b      	ldrh	r3, [r3, #0]
 8010f54:	837b      	strh	r3, [r7, #26]
  mrbc_value v = mrbc_hash_remove_by_id( kdict, sym_id );
 8010f56:	f107 0308 	add.w	r3, r7, #8
 8010f5a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010f5e:	69f9      	ldr	r1, [r7, #28]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7f3 f8c4 	bl	80040ee <mrbc_hash_remove_by_id>

  if( v.tt == MRBC_TT_EMPTY ) {
 8010f66:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d10b      	bne.n	8010f86 <op_karg+0x76>
    mrbc_raisef(vm, MRBC_CLASS(ArgumentError), "missing keywords: %s",
 8010f6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7fc fe64 	bl	800dc40 <mrbc_symid_to_str>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	4a0d      	ldr	r2, [pc, #52]	; (8010fb0 <op_karg+0xa0>)
 8010f7c:	490d      	ldr	r1, [pc, #52]	; (8010fb4 <op_karg+0xa4>)
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f7fa faa6 	bl	800b4d0 <mrbc_raisef>
 8010f84:	e010      	b.n	8010fa8 <op_karg+0x98>
		mrbc_symid_to_str(sym_id));
    return;
  }

  mrbc_decref(&regs[a]);
 8010f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f88:	011b      	lsls	r3, r3, #4
 8010f8a:	683a      	ldr	r2, [r7, #0]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fd faa4 	bl	800e4dc <mrbc_decref>
  regs[a] = v;
 8010f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f96:	011b      	lsls	r3, r3, #4
 8010f98:	683a      	ldr	r2, [r7, #0]
 8010f9a:	4413      	add	r3, r2
 8010f9c:	461c      	mov	r4, r3
 8010f9e:	f107 0308 	add.w	r3, r7, #8
 8010fa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8010fa8:	372c      	adds	r7, #44	; 0x2c
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd90      	pop	{r4, r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	0801a634 	.word	0x0801a634
 8010fb4:	20000154 	.word	0x20000154

08010fb8 <op_return__sub>:

//================================================================
/*! op_return, op_return_blk subroutine.
*/
static inline void op_return__sub( mrbc_vm *vm, mrbc_value *regs, int a )
{
 8010fb8:	b590      	push	{r4, r7, lr}
 8010fba:	b087      	sub	sp, #28
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	607a      	str	r2, [r7, #4]
  // If have a ensure, jump to it.
  if( vm->cur_irep->clen ) {
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	891b      	ldrh	r3, [r3, #8]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d038      	beq.n	8011040 <op_return__sub+0x88>
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	f7fd fd1c 	bl	800ea0c <find_catch_handler_ensure>
 8010fd4:	6178      	str	r0, [r7, #20]
    if( handler ) {
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d031      	beq.n	8011040 <op_return__sub+0x88>
      assert( vm->exception.tt == MRBC_TT_NIL );
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d006      	beq.n	8010ff4 <op_return__sub+0x3c>
 8010fe6:	4b38      	ldr	r3, [pc, #224]	; (80110c8 <op_return__sub+0x110>)
 8010fe8:	4a38      	ldr	r2, [pc, #224]	; (80110cc <op_return__sub+0x114>)
 8010fea:	f240 6163 	movw	r1, #1635	; 0x663
 8010fee:	4838      	ldr	r0, [pc, #224]	; (80110d0 <op_return__sub+0x118>)
 8010ff0:	f004 fb28 	bl	8015644 <__assert_func>

      // Save the return value in the last+1 register.
      regs[ vm->cur_irep->nregs ] = regs[a];
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	011b      	lsls	r3, r3, #4
 8010ff8:	68ba      	ldr	r2, [r7, #8]
 8010ffa:	18d1      	adds	r1, r2, r3
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	889b      	ldrh	r3, [r3, #4]
 8011002:	011b      	lsls	r3, r3, #4
 8011004:	68ba      	ldr	r2, [r7, #8]
 8011006:	4413      	add	r3, r2
 8011008:	461c      	mov	r4, r3
 801100a:	460b      	mov	r3, r1
 801100c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801100e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      regs[a].tt = MRBC_TT_EMPTY;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	011b      	lsls	r3, r3, #4
 8011016:	68ba      	ldr	r2, [r7, #8]
 8011018:	4413      	add	r3, r2
 801101a:	2200      	movs	r2, #0
 801101c:	701a      	strb	r2, [r3, #0]

      vm->exception.tt = MRBC_TT_RETURN;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	22fe      	movs	r2, #254	; 0xfe
 8011022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	699c      	ldr	r4, [r3, #24]
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	3309      	adds	r3, #9
 8011030:	4618      	mov	r0, r3
 8011032:	f7fd fb8d 	bl	800e750 <bin_to_uint32>
 8011036:	4603      	mov	r3, r0
 8011038:	18e2      	adds	r2, r4, r3
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	611a      	str	r2, [r3, #16]
      return;
 801103e:	e03f      	b.n	80110c0 <op_return__sub+0x108>
    }
  }

  // return without anything if top level.
  if( vm->callinfo_tail == NULL ) {
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	69db      	ldr	r3, [r3, #28]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d116      	bne.n	8011076 <op_return__sub+0xbe>
    if( vm->flag_permanence ) mrbc_incref(&regs[a]);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	791b      	ldrb	r3, [r3, #4]
 801104c:	f003 0304 	and.w	r3, r3, #4
 8011050:	b2db      	uxtb	r3, r3
 8011052:	2b00      	cmp	r3, #0
 8011054:	d006      	beq.n	8011064 <op_return__sub+0xac>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	011b      	lsls	r3, r3, #4
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	4413      	add	r3, r2
 801105e:	4618      	mov	r0, r3
 8011060:	f7fd fa08 	bl	800e474 <mrbc_incref>
    vm->flag_preemption = 1;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2201      	movs	r2, #1
 8011068:	70da      	strb	r2, [r3, #3]
    vm->flag_stop = 1;
 801106a:	68fa      	ldr	r2, [r7, #12]
 801106c:	7913      	ldrb	r3, [r2, #4]
 801106e:	f043 0302 	orr.w	r3, r3, #2
 8011072:	7113      	strb	r3, [r2, #4]
    return;
 8011074:	e024      	b.n	80110c0 <op_return__sub+0x108>
  }

  // not in initialize method, set return value.
  if( vm->callinfo_tail->method_id != MRBC_SYM(initialize) ) goto SET_RETURN;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	69db      	ldr	r3, [r3, #28]
 801107a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801107e:	2b76      	cmp	r3, #118	; 0x76
 8011080:	d106      	bne.n	8011090 <op_return__sub+0xd8>

  // not called by op_super, ignore return value.
  if( !vm->callinfo_tail->is_called_super ) goto RETURN;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	69db      	ldr	r3, [r3, #28]
 8011086:	f893 3020 	ldrb.w	r3, [r3, #32]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d014      	beq.n	80110b8 <op_return__sub+0x100>

  // set the return value
 SET_RETURN:
 801108e:	e000      	b.n	8011092 <op_return__sub+0xda>
  if( vm->callinfo_tail->method_id != MRBC_SYM(initialize) ) goto SET_RETURN;
 8011090:	bf00      	nop
  mrbc_decref(&regs[0]);
 8011092:	68b8      	ldr	r0, [r7, #8]
 8011094:	f7fd fa22 	bl	800e4dc <mrbc_decref>
  regs[0] = regs[a];
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	011b      	lsls	r3, r3, #4
 801109c:	68ba      	ldr	r2, [r7, #8]
 801109e:	4413      	add	r3, r2
 80110a0:	68ba      	ldr	r2, [r7, #8]
 80110a2:	4614      	mov	r4, r2
 80110a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a].tt = MRBC_TT_EMPTY;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	011b      	lsls	r3, r3, #4
 80110ae:	68ba      	ldr	r2, [r7, #8]
 80110b0:	4413      	add	r3, r2
 80110b2:	2200      	movs	r2, #0
 80110b4:	701a      	strb	r2, [r3, #0]
 80110b6:	e000      	b.n	80110ba <op_return__sub+0x102>
  if( !vm->callinfo_tail->is_called_super ) goto RETURN;
 80110b8:	bf00      	nop

 RETURN:
  mrbc_pop_callinfo(vm);
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f7fd fd9a 	bl	800ebf4 <mrbc_pop_callinfo>
}
 80110c0:	371c      	adds	r7, #28
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd90      	pop	{r4, r7, pc}
 80110c6:	bf00      	nop
 80110c8:	0801a46c 	.word	0x0801a46c
 80110cc:	0801bf88 	.word	0x0801bf88
 80110d0:	0801a368 	.word	0x0801a368

080110d4 <op_return>:
/*! OP_RETURN

  return R[a] (normal)
*/
static inline void op_return( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b084      	sub	sp, #16
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	691b      	ldr	r3, [r3, #16]
 80110e2:	1c59      	adds	r1, r3, #1
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	6111      	str	r1, [r2, #16]
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	60fb      	str	r3, [r7, #12]

  op_return__sub( vm, regs, a );
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	461a      	mov	r2, r3
 80110f0:	6839      	ldr	r1, [r7, #0]
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f7ff ff60 	bl	8010fb8 <op_return__sub>
}
 80110f8:	bf00      	nop
 80110fa:	3710      	adds	r7, #16
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <op_return_blk>:
/*! OP_RETURN_BLK

  return R[a] (in-block return)
*/
static inline void op_return_blk( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011100:	b590      	push	{r4, r7, lr}
 8011102:	b089      	sub	sp, #36	; 0x24
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
  FETCH_B();
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	691b      	ldr	r3, [r3, #16]
 801110e:	1c59      	adds	r1, r3, #1
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	6111      	str	r1, [r2, #16]
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	61fb      	str	r3, [r7, #28]

  if( mrbc_type(regs[0]) != MRBC_TT_PROC ) {
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	f993 3000 	ldrsb.w	r3, [r3]
 801111e:	2b09      	cmp	r3, #9
 8011120:	d006      	beq.n	8011130 <op_return_blk+0x30>
    op_return__sub( vm, regs, a );
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	461a      	mov	r2, r3
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7ff ff45 	bl	8010fb8 <op_return__sub>
    return;
 801112e:	e07a      	b.n	8011226 <op_return_blk+0x126>
  }

  // Save the return value in the proc object.
  mrbc_incref( &regs[0] );
 8011130:	6838      	ldr	r0, [r7, #0]
 8011132:	f7fd f99f 	bl	800e474 <mrbc_incref>
  vm->ret_blk = regs[0].proc;
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	689a      	ldr	r2, [r3, #8]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	621a      	str	r2, [r3, #32]
  vm->ret_blk->ret_val = regs[a];
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	011b      	lsls	r3, r3, #4
 8011142:	683a      	ldr	r2, [r7, #0]
 8011144:	441a      	add	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6a1b      	ldr	r3, [r3, #32]
 801114a:	f103 0410 	add.w	r4, r3, #16
 801114e:	4613      	mov	r3, r2
 8011150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a].tt = MRBC_TT_EMPTY;
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	011b      	lsls	r3, r3, #4
 801115a:	683a      	ldr	r2, [r7, #0]
 801115c:	4413      	add	r3, r2
 801115e:	2200      	movs	r2, #0
 8011160:	701a      	strb	r2, [r3, #0]

  // return to the proc generated level.
  while( 1 ) {
    // If have a ensure, jump to it.
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f7fd fc52 	bl	800ea0c <find_catch_handler_ensure>
 8011168:	61b8      	str	r0, [r7, #24]
    if( handler ) {
 801116a:	69bb      	ldr	r3, [r7, #24]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d01c      	beq.n	80111aa <op_return_blk+0xaa>
      assert( vm->exception.tt == MRBC_TT_NIL );
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8011176:	2b01      	cmp	r3, #1
 8011178:	d006      	beq.n	8011188 <op_return_blk+0x88>
 801117a:	4b2c      	ldr	r3, [pc, #176]	; (801122c <op_return_blk+0x12c>)
 801117c:	4a2c      	ldr	r2, [pc, #176]	; (8011230 <op_return_blk+0x130>)
 801117e:	f240 61ae 	movw	r1, #1710	; 0x6ae
 8011182:	482c      	ldr	r0, [pc, #176]	; (8011234 <op_return_blk+0x134>)
 8011184:	f004 fa5e 	bl	8015644 <__assert_func>
      vm->exception.tt = MRBC_TT_RETURN_BLK;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	22fd      	movs	r2, #253	; 0xfd
 801118c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	699c      	ldr	r4, [r3, #24]
 8011196:	69bb      	ldr	r3, [r7, #24]
 8011198:	3309      	adds	r3, #9
 801119a:	4618      	mov	r0, r3
 801119c:	f7fd fad8 	bl	800e750 <bin_to_uint32>
 80111a0:	4603      	mov	r3, r0
 80111a2:	18e2      	adds	r2, r4, r3
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	611a      	str	r2, [r3, #16]
      return;
 80111a8:	e03d      	b.n	8011226 <op_return_blk+0x126>
    }

    // Is it the origin (generator) of proc?
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	69da      	ldr	r2, [r3, #28]
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a1b      	ldr	r3, [r3, #32]
 80111b2:	689b      	ldr	r3, [r3, #8]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d003      	beq.n	80111c0 <op_return_blk+0xc0>

    mrbc_pop_callinfo(vm);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f7fd fd1b 	bl	800ebf4 <mrbc_pop_callinfo>
  while( 1 ) {
 80111be:	e7d0      	b.n	8011162 <op_return_blk+0x62>
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 80111c0:	bf00      	nop
  }

  // top level return ?
  if( vm->callinfo_tail == NULL ) {
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	69db      	ldr	r3, [r3, #28]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d108      	bne.n	80111dc <op_return_blk+0xdc>
    vm->flag_preemption = 1;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2201      	movs	r2, #1
 80111ce:	70da      	strb	r2, [r3, #3]
    vm->flag_stop = 1;
 80111d0:	687a      	ldr	r2, [r7, #4]
 80111d2:	7913      	ldrb	r3, [r2, #4]
 80111d4:	f043 0302 	orr.w	r3, r3, #2
 80111d8:	7113      	strb	r3, [r2, #4]
 80111da:	e010      	b.n	80111fe <op_return_blk+0xfe>
  } else {
    // set the return value.
    mrbc_decref(&vm->cur_regs[0]);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	695b      	ldr	r3, [r3, #20]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7fd f97b 	bl	800e4dc <mrbc_decref>
    vm->cur_regs[0] = vm->ret_blk->ret_val;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6a1b      	ldr	r3, [r3, #32]
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	6952      	ldr	r2, [r2, #20]
 80111ee:	4614      	mov	r4, r2
 80111f0:	3310      	adds	r3, #16
 80111f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80111f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    mrbc_pop_callinfo(vm);
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f7fd fcfb 	bl	800ebf4 <mrbc_pop_callinfo>
  }

  mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 80111fe:	f107 0308 	add.w	r3, r7, #8
 8011202:	2200      	movs	r2, #0
 8011204:	601a      	str	r2, [r3, #0]
 8011206:	605a      	str	r2, [r3, #4]
 8011208:	609a      	str	r2, [r3, #8]
 801120a:	60da      	str	r2, [r3, #12]
 801120c:	2309      	movs	r3, #9
 801120e:	723b      	strb	r3, [r7, #8]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6a1b      	ldr	r3, [r3, #32]
 8011214:	613b      	str	r3, [r7, #16]
 8011216:	f107 0308 	add.w	r3, r7, #8
 801121a:	4618      	mov	r0, r3
 801121c:	f7fd f95e 	bl	800e4dc <mrbc_decref>
  vm->ret_blk = 0;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	621a      	str	r2, [r3, #32]
}
 8011226:	3724      	adds	r7, #36	; 0x24
 8011228:	46bd      	mov	sp, r7
 801122a:	bd90      	pop	{r4, r7, pc}
 801122c:	0801a46c 	.word	0x0801a46c
 8011230:	0801bf98 	.word	0x0801bf98
 8011234:	0801a368 	.word	0x0801a368

08011238 <op_break>:
/*! OP_BREAK

  break R[a]
*/
static inline void op_break( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011238:	b590      	push	{r4, r7, lr}
 801123a:	b08b      	sub	sp, #44	; 0x2c
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	691b      	ldr	r3, [r3, #16]
 8011246:	1c59      	adds	r1, r3, #1
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	6111      	str	r1, [r2, #16]
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	623b      	str	r3, [r7, #32]

  assert( regs[0].tt == MRBC_TT_PROC );
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	f993 3000 	ldrsb.w	r3, [r3]
 8011256:	2b09      	cmp	r3, #9
 8011258:	d006      	beq.n	8011268 <op_break+0x30>
 801125a:	4b3f      	ldr	r3, [pc, #252]	; (8011358 <op_break+0x120>)
 801125c:	4a3f      	ldr	r2, [pc, #252]	; (801135c <op_break+0x124>)
 801125e:	f240 61d4 	movw	r1, #1748	; 0x6d4
 8011262:	483f      	ldr	r0, [pc, #252]	; (8011360 <op_break+0x128>)
 8011264:	f004 f9ee 	bl	8015644 <__assert_func>

  // Save the return value in the proc object.
  mrbc_incref( &regs[0] );
 8011268:	6838      	ldr	r0, [r7, #0]
 801126a:	f7fd f903 	bl	800e474 <mrbc_incref>
  vm->ret_blk = regs[0].proc;
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	689a      	ldr	r2, [r3, #8]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	621a      	str	r2, [r3, #32]
  vm->ret_blk->ret_val = regs[a];
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	011b      	lsls	r3, r3, #4
 801127a:	683a      	ldr	r2, [r7, #0]
 801127c:	441a      	add	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6a1b      	ldr	r3, [r3, #32]
 8011282:	f103 0410 	add.w	r4, r3, #16
 8011286:	4613      	mov	r3, r2
 8011288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801128a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a].tt = MRBC_TT_EMPTY;
 801128e:	6a3b      	ldr	r3, [r7, #32]
 8011290:	011b      	lsls	r3, r3, #4
 8011292:	683a      	ldr	r2, [r7, #0]
 8011294:	4413      	add	r3, r2
 8011296:	2200      	movs	r2, #0
 8011298:	701a      	strb	r2, [r3, #0]

  // return to the proc generated level.
  int reg_offset = 0;
 801129a:	2300      	movs	r3, #0
 801129c:	627b      	str	r3, [r7, #36]	; 0x24
  while( 1 ) {
    // If have a ensure, jump to it.
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f7fd fbb4 	bl	800ea0c <find_catch_handler_ensure>
 80112a4:	61f8      	str	r0, [r7, #28]
    if( handler ) {
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d01c      	beq.n	80112e6 <op_break+0xae>
      assert( vm->exception.tt == MRBC_TT_NIL );
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80112b2:	2b01      	cmp	r3, #1
 80112b4:	d006      	beq.n	80112c4 <op_break+0x8c>
 80112b6:	4b2b      	ldr	r3, [pc, #172]	; (8011364 <op_break+0x12c>)
 80112b8:	4a28      	ldr	r2, [pc, #160]	; (801135c <op_break+0x124>)
 80112ba:	f240 61e2 	movw	r1, #1762	; 0x6e2
 80112be:	4828      	ldr	r0, [pc, #160]	; (8011360 <op_break+0x128>)
 80112c0:	f004 f9c0 	bl	8015644 <__assert_func>
      vm->exception.tt = MRBC_TT_BREAK;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	22fc      	movs	r2, #252	; 0xfc
 80112c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	699c      	ldr	r4, [r3, #24]
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	3309      	adds	r3, #9
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fd fa3a 	bl	800e750 <bin_to_uint32>
 80112dc:	4603      	mov	r3, r0
 80112de:	18e2      	adds	r2, r4, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	611a      	str	r2, [r3, #16]
 80112e4:	e034      	b.n	8011350 <op_break+0x118>
      return;
    }

    // Is it the origin (generator) of proc?
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	69da      	ldr	r2, [r3, #28]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6a1b      	ldr	r3, [r3, #32]
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d007      	beq.n	8011304 <op_break+0xcc>

    reg_offset = vm->callinfo_tail->reg_offset;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	69db      	ldr	r3, [r3, #28]
 80112f8:	7f9b      	ldrb	r3, [r3, #30]
 80112fa:	627b      	str	r3, [r7, #36]	; 0x24
    mrbc_pop_callinfo(vm);
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f7fd fc79 	bl	800ebf4 <mrbc_pop_callinfo>
  while( 1 ) {
 8011302:	e7cc      	b.n	801129e <op_break+0x66>
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 8011304:	bf00      	nop
  }

  // set the return value.
  mrbc_value *reg0 = vm->cur_regs + reg_offset;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	695a      	ldr	r2, [r3, #20]
 801130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130c:	011b      	lsls	r3, r3, #4
 801130e:	4413      	add	r3, r2
 8011310:	61bb      	str	r3, [r7, #24]
  mrbc_decref(reg0);
 8011312:	69b8      	ldr	r0, [r7, #24]
 8011314:	f7fd f8e2 	bl	800e4dc <mrbc_decref>
  *reg0 = vm->ret_blk->ret_val;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a1b      	ldr	r3, [r3, #32]
 801131c:	69ba      	ldr	r2, [r7, #24]
 801131e:	4614      	mov	r4, r2
 8011320:	3310      	adds	r3, #16
 8011322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 8011328:	f107 0308 	add.w	r3, r7, #8
 801132c:	2200      	movs	r2, #0
 801132e:	601a      	str	r2, [r3, #0]
 8011330:	605a      	str	r2, [r3, #4]
 8011332:	609a      	str	r2, [r3, #8]
 8011334:	60da      	str	r2, [r3, #12]
 8011336:	2309      	movs	r3, #9
 8011338:	723b      	strb	r3, [r7, #8]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6a1b      	ldr	r3, [r3, #32]
 801133e:	613b      	str	r3, [r7, #16]
 8011340:	f107 0308 	add.w	r3, r7, #8
 8011344:	4618      	mov	r0, r3
 8011346:	f7fd f8c9 	bl	800e4dc <mrbc_decref>
  vm->ret_blk = 0;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2200      	movs	r2, #0
 801134e:	621a      	str	r2, [r3, #32]
}
 8011350:	372c      	adds	r7, #44	; 0x2c
 8011352:	46bd      	mov	sp, r7
 8011354:	bd90      	pop	{r4, r7, pc}
 8011356:	bf00      	nop
 8011358:	0801a434 	.word	0x0801a434
 801135c:	0801bfa8 	.word	0x0801bfa8
 8011360:	0801a368 	.word	0x0801a368
 8011364:	0801a46c 	.word	0x0801a46c

08011368 <op_blkpush>:
/*! OP_BLKPUSH

  R[a] = block (16=m5:r1:m5:d1:lv4)
*/
static inline void op_blkpush( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011368:	b590      	push	{r4, r7, lr}
 801136a:	b08d      	sub	sp, #52	; 0x34
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	1c59      	adds	r1, r3, #1
 8011378:	687a      	ldr	r2, [r7, #4]
 801137a:	6111      	str	r1, [r2, #16]
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	691b      	ldr	r3, [r3, #16]
 8011384:	1c59      	adds	r1, r3, #1
 8011386:	687a      	ldr	r2, [r7, #4]
 8011388:	6111      	str	r1, [r2, #16]
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	627b      	str	r3, [r7, #36]	; 0x24
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	021a      	lsls	r2, r3, #8
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	691b      	ldr	r3, [r3, #16]
 8011396:	1c58      	adds	r0, r3, #1
 8011398:	6879      	ldr	r1, [r7, #4]
 801139a:	6108      	str	r0, [r1, #16]
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	4313      	orrs	r3, r2
 80113a0:	627b      	str	r3, [r7, #36]	; 0x24

  int m1 = (b >> 11) & 0x3f;
 80113a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a4:	0adb      	lsrs	r3, r3, #11
 80113a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113aa:	623b      	str	r3, [r7, #32]
  int r  = (b >> 10) & 0x01;
 80113ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ae:	0a9b      	lsrs	r3, r3, #10
 80113b0:	f003 0301 	and.w	r3, r3, #1
 80113b4:	61fb      	str	r3, [r7, #28]
  int m2 = (b >>  5) & 0x1f;
 80113b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b8:	095b      	lsrs	r3, r3, #5
 80113ba:	f003 031f 	and.w	r3, r3, #31
 80113be:	61bb      	str	r3, [r7, #24]
  int d  = (b >>  4) & 0x01;
 80113c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c2:	091b      	lsrs	r3, r3, #4
 80113c4:	f003 0301 	and.w	r3, r3, #1
 80113c8:	617b      	str	r3, [r7, #20]
  int lv = (b      ) & 0x0f;
 80113ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113cc:	f003 030f 	and.w	r3, r3, #15
 80113d0:	613b      	str	r3, [r7, #16]

  if( m2 ) {
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d005      	beq.n	80113e4 <op_blkpush+0x7c>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "not support m2 or keyword argument.");
 80113d8:	4a28      	ldr	r2, [pc, #160]	; (801147c <op_blkpush+0x114>)
 80113da:	4929      	ldr	r1, [pc, #164]	; (8011480 <op_blkpush+0x118>)
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f7fa f823 	bl	800b428 <mrbc_raise>
    return;
 80113e2:	e047      	b.n	8011474 <op_blkpush+0x10c>
  }

  int offset = m1 + r + d + 1;
 80113e4:	6a3a      	ldr	r2, [r7, #32]
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	441a      	add	r2, r3
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	4413      	add	r3, r2
 80113ee:	3301      	adds	r3, #1
 80113f0:	60fb      	str	r3, [r7, #12]
  mrbc_value *blk;

  if( lv == 0 ) {
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d105      	bne.n	8011404 <op_blkpush+0x9c>
    // current env
    blk = regs + offset;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	011b      	lsls	r3, r3, #4
 80113fc:	683a      	ldr	r2, [r7, #0]
 80113fe:	4413      	add	r3, r2
 8011400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011402:	e019      	b.n	8011438 <op_blkpush+0xd0>
  } else {
    // upper env
    assert( regs[0].tt == MRBC_TT_PROC );
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	f993 3000 	ldrsb.w	r3, [r3]
 801140a:	2b09      	cmp	r3, #9
 801140c:	d006      	beq.n	801141c <op_blkpush+0xb4>
 801140e:	4b1d      	ldr	r3, [pc, #116]	; (8011484 <op_blkpush+0x11c>)
 8011410:	4a1d      	ldr	r2, [pc, #116]	; (8011488 <op_blkpush+0x120>)
 8011412:	f240 7115 	movw	r1, #1813	; 0x715
 8011416:	481d      	ldr	r0, [pc, #116]	; (801148c <op_blkpush+0x124>)
 8011418:	f004 f914 	bl	8015644 <__assert_func>

    mrbc_callinfo *callinfo = regs[0].proc->callinfo_self;
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	689b      	ldr	r3, [r3, #8]
 8011420:	689b      	ldr	r3, [r3, #8]
 8011422:	60bb      	str	r3, [r7, #8]
    blk = callinfo->cur_regs + callinfo->reg_offset + offset;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	68da      	ldr	r2, [r3, #12]
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	7f9b      	ldrb	r3, [r3, #30]
 801142c:	4619      	mov	r1, r3
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	440b      	add	r3, r1
 8011432:	011b      	lsls	r3, r3, #4
 8011434:	4413      	add	r3, r2
 8011436:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  if( blk->tt != MRBC_TT_PROC ) {
 8011438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143a:	f993 3000 	ldrsb.w	r3, [r3]
 801143e:	2b09      	cmp	r3, #9
 8011440:	d005      	beq.n	801144e <op_blkpush+0xe6>
    mrbc_raise( vm, MRBC_CLASS(Exception), "no block given (yield)");
 8011442:	4a13      	ldr	r2, [pc, #76]	; (8011490 <op_blkpush+0x128>)
 8011444:	4913      	ldr	r1, [pc, #76]	; (8011494 <op_blkpush+0x12c>)
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f7f9 ffee 	bl	800b428 <mrbc_raise>
    return;
 801144c:	e012      	b.n	8011474 <op_blkpush+0x10c>
  }

  mrbc_incref(blk);
 801144e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011450:	f7fd f810 	bl	800e474 <mrbc_incref>
  mrbc_decref(&regs[a]);
 8011454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011456:	011b      	lsls	r3, r3, #4
 8011458:	683a      	ldr	r2, [r7, #0]
 801145a:	4413      	add	r3, r2
 801145c:	4618      	mov	r0, r3
 801145e:	f7fd f83d 	bl	800e4dc <mrbc_decref>
  regs[a] = *blk;
 8011462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011464:	011b      	lsls	r3, r3, #4
 8011466:	683a      	ldr	r2, [r7, #0]
 8011468:	441a      	add	r2, r3
 801146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146c:	4614      	mov	r4, r2
 801146e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8011474:	3734      	adds	r7, #52	; 0x34
 8011476:	46bd      	mov	sp, r7
 8011478:	bd90      	pop	{r4, r7, pc}
 801147a:	bf00      	nop
 801147c:	0801a588 	.word	0x0801a588
 8011480:	20000154 	.word	0x20000154
 8011484:	0801a434 	.word	0x0801a434
 8011488:	0801bfb4 	.word	0x0801bfb4
 801148c:	0801a368 	.word	0x0801a368
 8011490:	0801a64c 	.word	0x0801a64c
 8011494:	2000010c 	.word	0x2000010c

08011498 <op_add>:
/*! OP_ADD

  R[a] = R[a]+R[a+1]
*/
static inline void op_add( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801149a:	b085      	sub	sp, #20
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	691b      	ldr	r3, [r3, #16]
 80114a6:	1c59      	adds	r1, r3, #1
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	6111      	str	r1, [r2, #16]
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	60fb      	str	r3, [r7, #12]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	011b      	lsls	r3, r3, #4
 80114b4:	683a      	ldr	r2, [r7, #0]
 80114b6:	4413      	add	r3, r2
 80114b8:	f993 3000 	ldrsb.w	r3, [r3]
 80114bc:	2b04      	cmp	r3, #4
 80114be:	d143      	bne.n	8011548 <op_add+0xb0>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Integer, Integer
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	3301      	adds	r3, #1
 80114c4:	011b      	lsls	r3, r3, #4
 80114c6:	683a      	ldr	r2, [r7, #0]
 80114c8:	4413      	add	r3, r2
 80114ca:	f993 3000 	ldrsb.w	r3, [r3]
 80114ce:	2b04      	cmp	r3, #4
 80114d0:	d111      	bne.n	80114f6 <op_add+0x5e>
      regs[a].i += regs[a+1].i;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	011b      	lsls	r3, r3, #4
 80114d6:	683a      	ldr	r2, [r7, #0]
 80114d8:	4413      	add	r3, r2
 80114da:	6899      	ldr	r1, [r3, #8]
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	3301      	adds	r3, #1
 80114e0:	011b      	lsls	r3, r3, #4
 80114e2:	683a      	ldr	r2, [r7, #0]
 80114e4:	4413      	add	r3, r2
 80114e6:	689a      	ldr	r2, [r3, #8]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	011b      	lsls	r3, r3, #4
 80114ec:	6838      	ldr	r0, [r7, #0]
 80114ee:	4403      	add	r3, r0
 80114f0:	440a      	add	r2, r1
 80114f2:	609a      	str	r2, [r3, #8]
      return;
 80114f4:	e07e      	b.n	80115f4 <op_add+0x15c>
    }
#if MRBC_USE_FLOAT
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Integer, Float
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	3301      	adds	r3, #1
 80114fa:	011b      	lsls	r3, r3, #4
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	4413      	add	r3, r2
 8011500:	f993 3000 	ldrsb.w	r3, [r3]
 8011504:	2b05      	cmp	r3, #5
 8011506:	d11f      	bne.n	8011548 <op_add+0xb0>
      regs[a].tt = MRBC_TT_FLOAT;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	011b      	lsls	r3, r3, #4
 801150c:	683a      	ldr	r2, [r7, #0]
 801150e:	4413      	add	r3, r2
 8011510:	2205      	movs	r2, #5
 8011512:	701a      	strb	r2, [r3, #0]
      regs[a].d = regs[a].i + regs[a+1].d;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	011b      	lsls	r3, r3, #4
 8011518:	683a      	ldr	r2, [r7, #0]
 801151a:	4413      	add	r3, r2
 801151c:	689b      	ldr	r3, [r3, #8]
 801151e:	4618      	mov	r0, r3
 8011520:	f7ef f818 	bl	8000554 <__aeabi_i2d>
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	3301      	adds	r3, #1
 8011528:	011b      	lsls	r3, r3, #4
 801152a:	683a      	ldr	r2, [r7, #0]
 801152c:	4413      	add	r3, r2
 801152e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011532:	68fc      	ldr	r4, [r7, #12]
 8011534:	0124      	lsls	r4, r4, #4
 8011536:	683d      	ldr	r5, [r7, #0]
 8011538:	442c      	add	r4, r5
 801153a:	f7ee febf 	bl	80002bc <__adddf3>
 801153e:	4602      	mov	r2, r0
 8011540:	460b      	mov	r3, r1
 8011542:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 8011546:	e055      	b.n	80115f4 <op_add+0x15c>
    }
  }
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	011b      	lsls	r3, r3, #4
 801154c:	683a      	ldr	r2, [r7, #0]
 801154e:	4413      	add	r3, r2
 8011550:	f993 3000 	ldrsb.w	r3, [r3]
 8011554:	2b05      	cmp	r3, #5
 8011556:	d147      	bne.n	80115e8 <op_add+0x150>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Float, Integer
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	3301      	adds	r3, #1
 801155c:	011b      	lsls	r3, r3, #4
 801155e:	683a      	ldr	r2, [r7, #0]
 8011560:	4413      	add	r3, r2
 8011562:	f993 3000 	ldrsb.w	r3, [r3]
 8011566:	2b04      	cmp	r3, #4
 8011568:	d11d      	bne.n	80115a6 <op_add+0x10e>
      regs[a].d += regs[a+1].i;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	011b      	lsls	r3, r3, #4
 801156e:	683a      	ldr	r2, [r7, #0]
 8011570:	4413      	add	r3, r2
 8011572:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	3301      	adds	r3, #1
 801157a:	011b      	lsls	r3, r3, #4
 801157c:	683a      	ldr	r2, [r7, #0]
 801157e:	4413      	add	r3, r2
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	4618      	mov	r0, r3
 8011584:	f7ee ffe6 	bl	8000554 <__aeabi_i2d>
 8011588:	4602      	mov	r2, r0
 801158a:	460b      	mov	r3, r1
 801158c:	68f9      	ldr	r1, [r7, #12]
 801158e:	0109      	lsls	r1, r1, #4
 8011590:	6838      	ldr	r0, [r7, #0]
 8011592:	1846      	adds	r6, r0, r1
 8011594:	4620      	mov	r0, r4
 8011596:	4629      	mov	r1, r5
 8011598:	f7ee fe90 	bl	80002bc <__adddf3>
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	e9c6 2302 	strd	r2, r3, [r6, #8]
      return;
 80115a4:	e026      	b.n	80115f4 <op_add+0x15c>
    }
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Float, Float
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	3301      	adds	r3, #1
 80115aa:	011b      	lsls	r3, r3, #4
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	4413      	add	r3, r2
 80115b0:	f993 3000 	ldrsb.w	r3, [r3]
 80115b4:	2b05      	cmp	r3, #5
 80115b6:	d117      	bne.n	80115e8 <op_add+0x150>
      regs[a].d += regs[a+1].d;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	011b      	lsls	r3, r3, #4
 80115bc:	683a      	ldr	r2, [r7, #0]
 80115be:	4413      	add	r3, r2
 80115c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	3301      	adds	r3, #1
 80115c8:	011b      	lsls	r3, r3, #4
 80115ca:	683a      	ldr	r2, [r7, #0]
 80115cc:	4413      	add	r3, r2
 80115ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80115d2:	68fc      	ldr	r4, [r7, #12]
 80115d4:	0124      	lsls	r4, r4, #4
 80115d6:	683d      	ldr	r5, [r7, #0]
 80115d8:	442c      	add	r4, r5
 80115da:	f7ee fe6f 	bl	80002bc <__adddf3>
 80115de:	4602      	mov	r2, r0
 80115e0:	460b      	mov	r3, r1
 80115e2:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 80115e6:	e005      	b.n	80115f4 <op_add+0x15c>
    }
#endif
  }

  // other case
  send_by_name( vm, MRBC_SYM(PLUS), a, 1 );
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	2301      	movs	r3, #1
 80115ec:	2107      	movs	r1, #7
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f7fd f8cc 	bl	800e78c <send_by_name>
}
 80115f4:	3714      	adds	r7, #20
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080115fc <op_addi>:
/*! OP_ADDI

  R[a] = R[a]+mrb_int(b)
*/
static inline void op_addi( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80115fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115fe:	b085      	sub	sp, #20
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	691b      	ldr	r3, [r3, #16]
 801160a:	1c59      	adds	r1, r3, #1
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	6111      	str	r1, [r2, #16]
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	60fb      	str	r3, [r7, #12]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	691b      	ldr	r3, [r3, #16]
 8011618:	1c59      	adds	r1, r3, #1
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	6111      	str	r1, [r2, #16]
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	011b      	lsls	r3, r3, #4
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	4413      	add	r3, r2
 801162a:	f993 3000 	ldrsb.w	r3, [r3]
 801162e:	2b04      	cmp	r3, #4
 8011630:	d10e      	bne.n	8011650 <op_addi+0x54>
    regs[a].i += b;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	011b      	lsls	r3, r3, #4
 8011636:	683a      	ldr	r2, [r7, #0]
 8011638:	4413      	add	r3, r2
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	461a      	mov	r2, r3
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	18d1      	adds	r1, r2, r3
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	011b      	lsls	r3, r3, #4
 8011646:	683a      	ldr	r2, [r7, #0]
 8011648:	4413      	add	r3, r2
 801164a:	460a      	mov	r2, r1
 801164c:	609a      	str	r2, [r3, #8]
    return;
 801164e:	e024      	b.n	801169a <op_addi+0x9e>
  }

#if MRBC_USE_FLOAT
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	011b      	lsls	r3, r3, #4
 8011654:	683a      	ldr	r2, [r7, #0]
 8011656:	4413      	add	r3, r2
 8011658:	f993 3000 	ldrsb.w	r3, [r3]
 801165c:	2b05      	cmp	r3, #5
 801165e:	d117      	bne.n	8011690 <op_addi+0x94>
    regs[a].d += b;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	011b      	lsls	r3, r3, #4
 8011664:	683a      	ldr	r2, [r7, #0]
 8011666:	4413      	add	r3, r2
 8011668:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 801166c:	68b8      	ldr	r0, [r7, #8]
 801166e:	f7ee ff61 	bl	8000534 <__aeabi_ui2d>
 8011672:	4602      	mov	r2, r0
 8011674:	460b      	mov	r3, r1
 8011676:	68f9      	ldr	r1, [r7, #12]
 8011678:	0109      	lsls	r1, r1, #4
 801167a:	6838      	ldr	r0, [r7, #0]
 801167c:	1846      	adds	r6, r0, r1
 801167e:	4620      	mov	r0, r4
 8011680:	4629      	mov	r1, r5
 8011682:	f7ee fe1b 	bl	80002bc <__adddf3>
 8011686:	4602      	mov	r2, r0
 8011688:	460b      	mov	r3, r1
 801168a:	e9c6 2302 	strd	r2, r3, [r6, #8]
    return;
 801168e:	e004      	b.n	801169a <op_addi+0x9e>
  }
#endif

  mrbc_raise(vm, MRBC_CLASS(TypeError), "no implicit conversion of Integer");
 8011690:	4a03      	ldr	r2, [pc, #12]	; (80116a0 <op_addi+0xa4>)
 8011692:	4904      	ldr	r1, [pc, #16]	; (80116a4 <op_addi+0xa8>)
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7f9 fec7 	bl	800b428 <mrbc_raise>
}
 801169a:	3714      	adds	r7, #20
 801169c:	46bd      	mov	sp, r7
 801169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a0:	0801a664 	.word	0x0801a664
 80116a4:	200001b4 	.word	0x200001b4

080116a8 <op_sub>:
/*! OP_SUB

  R[a] = R[a]-R[a+1]
*/
static inline void op_sub( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80116a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	691b      	ldr	r3, [r3, #16]
 80116b6:	1c59      	adds	r1, r3, #1
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	6111      	str	r1, [r2, #16]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	60fb      	str	r3, [r7, #12]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	011b      	lsls	r3, r3, #4
 80116c4:	683a      	ldr	r2, [r7, #0]
 80116c6:	4413      	add	r3, r2
 80116c8:	f993 3000 	ldrsb.w	r3, [r3]
 80116cc:	2b04      	cmp	r3, #4
 80116ce:	d143      	bne.n	8011758 <op_sub+0xb0>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Integer, Integer
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	3301      	adds	r3, #1
 80116d4:	011b      	lsls	r3, r3, #4
 80116d6:	683a      	ldr	r2, [r7, #0]
 80116d8:	4413      	add	r3, r2
 80116da:	f993 3000 	ldrsb.w	r3, [r3]
 80116de:	2b04      	cmp	r3, #4
 80116e0:	d111      	bne.n	8011706 <op_sub+0x5e>
      regs[a].i -= regs[a+1].i;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	011b      	lsls	r3, r3, #4
 80116e6:	683a      	ldr	r2, [r7, #0]
 80116e8:	4413      	add	r3, r2
 80116ea:	6899      	ldr	r1, [r3, #8]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	3301      	adds	r3, #1
 80116f0:	011b      	lsls	r3, r3, #4
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	4413      	add	r3, r2
 80116f6:	689a      	ldr	r2, [r3, #8]
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	011b      	lsls	r3, r3, #4
 80116fc:	6838      	ldr	r0, [r7, #0]
 80116fe:	4403      	add	r3, r0
 8011700:	1a8a      	subs	r2, r1, r2
 8011702:	609a      	str	r2, [r3, #8]
      return;
 8011704:	e07e      	b.n	8011804 <op_sub+0x15c>
    }
#if MRBC_USE_FLOAT
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Integer, Float
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	3301      	adds	r3, #1
 801170a:	011b      	lsls	r3, r3, #4
 801170c:	683a      	ldr	r2, [r7, #0]
 801170e:	4413      	add	r3, r2
 8011710:	f993 3000 	ldrsb.w	r3, [r3]
 8011714:	2b05      	cmp	r3, #5
 8011716:	d11f      	bne.n	8011758 <op_sub+0xb0>
      regs[a].tt = MRBC_TT_FLOAT;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	011b      	lsls	r3, r3, #4
 801171c:	683a      	ldr	r2, [r7, #0]
 801171e:	4413      	add	r3, r2
 8011720:	2205      	movs	r2, #5
 8011722:	701a      	strb	r2, [r3, #0]
      regs[a].d = regs[a].i - regs[a+1].d;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	011b      	lsls	r3, r3, #4
 8011728:	683a      	ldr	r2, [r7, #0]
 801172a:	4413      	add	r3, r2
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	4618      	mov	r0, r3
 8011730:	f7ee ff10 	bl	8000554 <__aeabi_i2d>
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	3301      	adds	r3, #1
 8011738:	011b      	lsls	r3, r3, #4
 801173a:	683a      	ldr	r2, [r7, #0]
 801173c:	4413      	add	r3, r2
 801173e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011742:	68fc      	ldr	r4, [r7, #12]
 8011744:	0124      	lsls	r4, r4, #4
 8011746:	683d      	ldr	r5, [r7, #0]
 8011748:	442c      	add	r4, r5
 801174a:	f7ee fdb5 	bl	80002b8 <__aeabi_dsub>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 8011756:	e055      	b.n	8011804 <op_sub+0x15c>
    }
  }
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	011b      	lsls	r3, r3, #4
 801175c:	683a      	ldr	r2, [r7, #0]
 801175e:	4413      	add	r3, r2
 8011760:	f993 3000 	ldrsb.w	r3, [r3]
 8011764:	2b05      	cmp	r3, #5
 8011766:	d147      	bne.n	80117f8 <op_sub+0x150>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Float, Integer
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	3301      	adds	r3, #1
 801176c:	011b      	lsls	r3, r3, #4
 801176e:	683a      	ldr	r2, [r7, #0]
 8011770:	4413      	add	r3, r2
 8011772:	f993 3000 	ldrsb.w	r3, [r3]
 8011776:	2b04      	cmp	r3, #4
 8011778:	d11d      	bne.n	80117b6 <op_sub+0x10e>
      regs[a].d -= regs[a+1].i;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	011b      	lsls	r3, r3, #4
 801177e:	683a      	ldr	r2, [r7, #0]
 8011780:	4413      	add	r3, r2
 8011782:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	3301      	adds	r3, #1
 801178a:	011b      	lsls	r3, r3, #4
 801178c:	683a      	ldr	r2, [r7, #0]
 801178e:	4413      	add	r3, r2
 8011790:	689b      	ldr	r3, [r3, #8]
 8011792:	4618      	mov	r0, r3
 8011794:	f7ee fede 	bl	8000554 <__aeabi_i2d>
 8011798:	4602      	mov	r2, r0
 801179a:	460b      	mov	r3, r1
 801179c:	68f9      	ldr	r1, [r7, #12]
 801179e:	0109      	lsls	r1, r1, #4
 80117a0:	6838      	ldr	r0, [r7, #0]
 80117a2:	1846      	adds	r6, r0, r1
 80117a4:	4620      	mov	r0, r4
 80117a6:	4629      	mov	r1, r5
 80117a8:	f7ee fd86 	bl	80002b8 <__aeabi_dsub>
 80117ac:	4602      	mov	r2, r0
 80117ae:	460b      	mov	r3, r1
 80117b0:	e9c6 2302 	strd	r2, r3, [r6, #8]
      return;
 80117b4:	e026      	b.n	8011804 <op_sub+0x15c>
    }
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Float, Float
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	3301      	adds	r3, #1
 80117ba:	011b      	lsls	r3, r3, #4
 80117bc:	683a      	ldr	r2, [r7, #0]
 80117be:	4413      	add	r3, r2
 80117c0:	f993 3000 	ldrsb.w	r3, [r3]
 80117c4:	2b05      	cmp	r3, #5
 80117c6:	d117      	bne.n	80117f8 <op_sub+0x150>
      regs[a].d -= regs[a+1].d;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	011b      	lsls	r3, r3, #4
 80117cc:	683a      	ldr	r2, [r7, #0]
 80117ce:	4413      	add	r3, r2
 80117d0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	3301      	adds	r3, #1
 80117d8:	011b      	lsls	r3, r3, #4
 80117da:	683a      	ldr	r2, [r7, #0]
 80117dc:	4413      	add	r3, r2
 80117de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80117e2:	68fc      	ldr	r4, [r7, #12]
 80117e4:	0124      	lsls	r4, r4, #4
 80117e6:	683d      	ldr	r5, [r7, #0]
 80117e8:	442c      	add	r4, r5
 80117ea:	f7ee fd65 	bl	80002b8 <__aeabi_dsub>
 80117ee:	4602      	mov	r2, r0
 80117f0:	460b      	mov	r3, r1
 80117f2:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 80117f6:	e005      	b.n	8011804 <op_sub+0x15c>
    }
#endif
  }

  // other case
  send_by_name( vm, MRBC_SYM(MINUS), a, 1 );
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	2301      	movs	r3, #1
 80117fc:	2109      	movs	r1, #9
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7fc ffc4 	bl	800e78c <send_by_name>
}
 8011804:	3714      	adds	r7, #20
 8011806:	46bd      	mov	sp, r7
 8011808:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801180c <op_subi>:
/*! OP_SUBI

  R[a] = R[a]-mrb_int(b)
*/
static inline void op_subi( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801180e:	b085      	sub	sp, #20
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	691b      	ldr	r3, [r3, #16]
 801181a:	1c59      	adds	r1, r3, #1
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	6111      	str	r1, [r2, #16]
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	60fb      	str	r3, [r7, #12]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	691b      	ldr	r3, [r3, #16]
 8011828:	1c59      	adds	r1, r3, #1
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	6111      	str	r1, [r2, #16]
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	011b      	lsls	r3, r3, #4
 8011836:	683a      	ldr	r2, [r7, #0]
 8011838:	4413      	add	r3, r2
 801183a:	f993 3000 	ldrsb.w	r3, [r3]
 801183e:	2b04      	cmp	r3, #4
 8011840:	d10e      	bne.n	8011860 <op_subi+0x54>
    regs[a].i -= b;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	011b      	lsls	r3, r3, #4
 8011846:	683a      	ldr	r2, [r7, #0]
 8011848:	4413      	add	r3, r2
 801184a:	689b      	ldr	r3, [r3, #8]
 801184c:	461a      	mov	r2, r3
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	1ad1      	subs	r1, r2, r3
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	011b      	lsls	r3, r3, #4
 8011856:	683a      	ldr	r2, [r7, #0]
 8011858:	4413      	add	r3, r2
 801185a:	460a      	mov	r2, r1
 801185c:	609a      	str	r2, [r3, #8]
    return;
 801185e:	e024      	b.n	80118aa <op_subi+0x9e>
  }

#if MRBC_USE_FLOAT
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	011b      	lsls	r3, r3, #4
 8011864:	683a      	ldr	r2, [r7, #0]
 8011866:	4413      	add	r3, r2
 8011868:	f993 3000 	ldrsb.w	r3, [r3]
 801186c:	2b05      	cmp	r3, #5
 801186e:	d117      	bne.n	80118a0 <op_subi+0x94>
    regs[a].d -= b;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	011b      	lsls	r3, r3, #4
 8011874:	683a      	ldr	r2, [r7, #0]
 8011876:	4413      	add	r3, r2
 8011878:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 801187c:	68b8      	ldr	r0, [r7, #8]
 801187e:	f7ee fe59 	bl	8000534 <__aeabi_ui2d>
 8011882:	4602      	mov	r2, r0
 8011884:	460b      	mov	r3, r1
 8011886:	68f9      	ldr	r1, [r7, #12]
 8011888:	0109      	lsls	r1, r1, #4
 801188a:	6838      	ldr	r0, [r7, #0]
 801188c:	1846      	adds	r6, r0, r1
 801188e:	4620      	mov	r0, r4
 8011890:	4629      	mov	r1, r5
 8011892:	f7ee fd11 	bl	80002b8 <__aeabi_dsub>
 8011896:	4602      	mov	r2, r0
 8011898:	460b      	mov	r3, r1
 801189a:	e9c6 2302 	strd	r2, r3, [r6, #8]
    return;
 801189e:	e004      	b.n	80118aa <op_subi+0x9e>
  }
#endif

  mrbc_raise(vm, MRBC_CLASS(TypeError), "no implicit conversion of Integer");
 80118a0:	4a03      	ldr	r2, [pc, #12]	; (80118b0 <op_subi+0xa4>)
 80118a2:	4904      	ldr	r1, [pc, #16]	; (80118b4 <op_subi+0xa8>)
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f7f9 fdbf 	bl	800b428 <mrbc_raise>
}
 80118aa:	3714      	adds	r7, #20
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118b0:	0801a664 	.word	0x0801a664
 80118b4:	200001b4 	.word	0x200001b4

080118b8 <op_mul>:
/*! OP_MUL

  R[a] = R[a]*R[a+1]
*/
static inline void op_mul( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80118b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ba:	b085      	sub	sp, #20
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	691b      	ldr	r3, [r3, #16]
 80118c6:	1c59      	adds	r1, r3, #1
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	6111      	str	r1, [r2, #16]
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	60fb      	str	r3, [r7, #12]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	011b      	lsls	r3, r3, #4
 80118d4:	683a      	ldr	r2, [r7, #0]
 80118d6:	4413      	add	r3, r2
 80118d8:	f993 3000 	ldrsb.w	r3, [r3]
 80118dc:	2b04      	cmp	r3, #4
 80118de:	d144      	bne.n	801196a <op_mul+0xb2>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Integer, Integer
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	3301      	adds	r3, #1
 80118e4:	011b      	lsls	r3, r3, #4
 80118e6:	683a      	ldr	r2, [r7, #0]
 80118e8:	4413      	add	r3, r2
 80118ea:	f993 3000 	ldrsb.w	r3, [r3]
 80118ee:	2b04      	cmp	r3, #4
 80118f0:	d112      	bne.n	8011918 <op_mul+0x60>
      regs[a].i *= regs[a+1].i;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	011b      	lsls	r3, r3, #4
 80118f6:	683a      	ldr	r2, [r7, #0]
 80118f8:	4413      	add	r3, r2
 80118fa:	689a      	ldr	r2, [r3, #8]
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	3301      	adds	r3, #1
 8011900:	011b      	lsls	r3, r3, #4
 8011902:	6839      	ldr	r1, [r7, #0]
 8011904:	440b      	add	r3, r1
 8011906:	6899      	ldr	r1, [r3, #8]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	011b      	lsls	r3, r3, #4
 801190c:	6838      	ldr	r0, [r7, #0]
 801190e:	4403      	add	r3, r0
 8011910:	fb01 f202 	mul.w	r2, r1, r2
 8011914:	609a      	str	r2, [r3, #8]
      return;
 8011916:	e07e      	b.n	8011a16 <op_mul+0x15e>
    }
#if MRBC_USE_FLOAT
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Integer, Float
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	3301      	adds	r3, #1
 801191c:	011b      	lsls	r3, r3, #4
 801191e:	683a      	ldr	r2, [r7, #0]
 8011920:	4413      	add	r3, r2
 8011922:	f993 3000 	ldrsb.w	r3, [r3]
 8011926:	2b05      	cmp	r3, #5
 8011928:	d11f      	bne.n	801196a <op_mul+0xb2>
      regs[a].tt = MRBC_TT_FLOAT;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	011b      	lsls	r3, r3, #4
 801192e:	683a      	ldr	r2, [r7, #0]
 8011930:	4413      	add	r3, r2
 8011932:	2205      	movs	r2, #5
 8011934:	701a      	strb	r2, [r3, #0]
      regs[a].d = regs[a].i * regs[a+1].d;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	011b      	lsls	r3, r3, #4
 801193a:	683a      	ldr	r2, [r7, #0]
 801193c:	4413      	add	r3, r2
 801193e:	689b      	ldr	r3, [r3, #8]
 8011940:	4618      	mov	r0, r3
 8011942:	f7ee fe07 	bl	8000554 <__aeabi_i2d>
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	3301      	adds	r3, #1
 801194a:	011b      	lsls	r3, r3, #4
 801194c:	683a      	ldr	r2, [r7, #0]
 801194e:	4413      	add	r3, r2
 8011950:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011954:	68fc      	ldr	r4, [r7, #12]
 8011956:	0124      	lsls	r4, r4, #4
 8011958:	683d      	ldr	r5, [r7, #0]
 801195a:	442c      	add	r4, r5
 801195c:	f7ee fe64 	bl	8000628 <__aeabi_dmul>
 8011960:	4602      	mov	r2, r0
 8011962:	460b      	mov	r3, r1
 8011964:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 8011968:	e055      	b.n	8011a16 <op_mul+0x15e>
    }
  }
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	011b      	lsls	r3, r3, #4
 801196e:	683a      	ldr	r2, [r7, #0]
 8011970:	4413      	add	r3, r2
 8011972:	f993 3000 	ldrsb.w	r3, [r3]
 8011976:	2b05      	cmp	r3, #5
 8011978:	d147      	bne.n	8011a0a <op_mul+0x152>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Float, Integer
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	3301      	adds	r3, #1
 801197e:	011b      	lsls	r3, r3, #4
 8011980:	683a      	ldr	r2, [r7, #0]
 8011982:	4413      	add	r3, r2
 8011984:	f993 3000 	ldrsb.w	r3, [r3]
 8011988:	2b04      	cmp	r3, #4
 801198a:	d11d      	bne.n	80119c8 <op_mul+0x110>
      regs[a].d *= regs[a+1].i;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	011b      	lsls	r3, r3, #4
 8011990:	683a      	ldr	r2, [r7, #0]
 8011992:	4413      	add	r3, r2
 8011994:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	3301      	adds	r3, #1
 801199c:	011b      	lsls	r3, r3, #4
 801199e:	683a      	ldr	r2, [r7, #0]
 80119a0:	4413      	add	r3, r2
 80119a2:	689b      	ldr	r3, [r3, #8]
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7ee fdd5 	bl	8000554 <__aeabi_i2d>
 80119aa:	4602      	mov	r2, r0
 80119ac:	460b      	mov	r3, r1
 80119ae:	68f9      	ldr	r1, [r7, #12]
 80119b0:	0109      	lsls	r1, r1, #4
 80119b2:	6838      	ldr	r0, [r7, #0]
 80119b4:	1846      	adds	r6, r0, r1
 80119b6:	4620      	mov	r0, r4
 80119b8:	4629      	mov	r1, r5
 80119ba:	f7ee fe35 	bl	8000628 <__aeabi_dmul>
 80119be:	4602      	mov	r2, r0
 80119c0:	460b      	mov	r3, r1
 80119c2:	e9c6 2302 	strd	r2, r3, [r6, #8]
      return;
 80119c6:	e026      	b.n	8011a16 <op_mul+0x15e>
    }
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Float, Float
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	3301      	adds	r3, #1
 80119cc:	011b      	lsls	r3, r3, #4
 80119ce:	683a      	ldr	r2, [r7, #0]
 80119d0:	4413      	add	r3, r2
 80119d2:	f993 3000 	ldrsb.w	r3, [r3]
 80119d6:	2b05      	cmp	r3, #5
 80119d8:	d117      	bne.n	8011a0a <op_mul+0x152>
      regs[a].d *= regs[a+1].d;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	011b      	lsls	r3, r3, #4
 80119de:	683a      	ldr	r2, [r7, #0]
 80119e0:	4413      	add	r3, r2
 80119e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	3301      	adds	r3, #1
 80119ea:	011b      	lsls	r3, r3, #4
 80119ec:	683a      	ldr	r2, [r7, #0]
 80119ee:	4413      	add	r3, r2
 80119f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80119f4:	68fc      	ldr	r4, [r7, #12]
 80119f6:	0124      	lsls	r4, r4, #4
 80119f8:	683d      	ldr	r5, [r7, #0]
 80119fa:	442c      	add	r4, r5
 80119fc:	f7ee fe14 	bl	8000628 <__aeabi_dmul>
 8011a00:	4602      	mov	r2, r0
 8011a02:	460b      	mov	r3, r1
 8011a04:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 8011a08:	e005      	b.n	8011a16 <op_mul+0x15e>
    }
#endif
  }

  // other case
  send_by_name( vm, MRBC_SYM(MUL), a, 1 );
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	2105      	movs	r1, #5
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f7fc febb 	bl	800e78c <send_by_name>
}
 8011a16:	3714      	adds	r7, #20
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a1c <op_div>:
/*! OP_DIV

  R[a] = R[a]/R[a+1]
*/
static inline void op_div( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a1e:	b085      	sub	sp, #20
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	691b      	ldr	r3, [r3, #16]
 8011a2a:	1c59      	adds	r1, r3, #1
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	6111      	str	r1, [r2, #16]
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	60fb      	str	r3, [r7, #12]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	011b      	lsls	r3, r3, #4
 8011a38:	683a      	ldr	r2, [r7, #0]
 8011a3a:	4413      	add	r3, r2
 8011a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8011a40:	2b04      	cmp	r3, #4
 8011a42:	d152      	bne.n	8011aea <op_div+0xce>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Integer, Integer
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	3301      	adds	r3, #1
 8011a48:	011b      	lsls	r3, r3, #4
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8011a52:	2b04      	cmp	r3, #4
 8011a54:	d120      	bne.n	8011a98 <op_div+0x7c>
      if( regs[a+1].i == 0 ) {
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	3301      	adds	r3, #1
 8011a5a:	011b      	lsls	r3, r3, #4
 8011a5c:	683a      	ldr	r2, [r7, #0]
 8011a5e:	4413      	add	r3, r2
 8011a60:	689b      	ldr	r3, [r3, #8]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d105      	bne.n	8011a72 <op_div+0x56>
	mrbc_raise(vm, MRBC_CLASS(ZeroDivisionError), 0 );
 8011a66:	2200      	movs	r2, #0
 8011a68:	494c      	ldr	r1, [pc, #304]	; (8011b9c <op_div+0x180>)
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7f9 fcdc 	bl	800b428 <mrbc_raise>
      } else {
	regs[a].i /= regs[a+1].i;
      }
      return;
 8011a70:	e091      	b.n	8011b96 <op_div+0x17a>
	regs[a].i /= regs[a+1].i;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	011b      	lsls	r3, r3, #4
 8011a76:	683a      	ldr	r2, [r7, #0]
 8011a78:	4413      	add	r3, r2
 8011a7a:	6899      	ldr	r1, [r3, #8]
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	011b      	lsls	r3, r3, #4
 8011a82:	683a      	ldr	r2, [r7, #0]
 8011a84:	4413      	add	r3, r2
 8011a86:	689a      	ldr	r2, [r3, #8]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	011b      	lsls	r3, r3, #4
 8011a8c:	6838      	ldr	r0, [r7, #0]
 8011a8e:	4403      	add	r3, r0
 8011a90:	fb91 f2f2 	sdiv	r2, r1, r2
 8011a94:	609a      	str	r2, [r3, #8]
      return;
 8011a96:	e07e      	b.n	8011b96 <op_div+0x17a>
    }
#if MRBC_USE_FLOAT
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Integer, Float
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	011b      	lsls	r3, r3, #4
 8011a9e:	683a      	ldr	r2, [r7, #0]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	f993 3000 	ldrsb.w	r3, [r3]
 8011aa6:	2b05      	cmp	r3, #5
 8011aa8:	d11f      	bne.n	8011aea <op_div+0xce>
      regs[a].tt = MRBC_TT_FLOAT;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	011b      	lsls	r3, r3, #4
 8011aae:	683a      	ldr	r2, [r7, #0]
 8011ab0:	4413      	add	r3, r2
 8011ab2:	2205      	movs	r2, #5
 8011ab4:	701a      	strb	r2, [r3, #0]
      regs[a].d = regs[a].i / regs[a+1].d;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	011b      	lsls	r3, r3, #4
 8011aba:	683a      	ldr	r2, [r7, #0]
 8011abc:	4413      	add	r3, r2
 8011abe:	689b      	ldr	r3, [r3, #8]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7ee fd47 	bl	8000554 <__aeabi_i2d>
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	011b      	lsls	r3, r3, #4
 8011acc:	683a      	ldr	r2, [r7, #0]
 8011ace:	4413      	add	r3, r2
 8011ad0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011ad4:	68fc      	ldr	r4, [r7, #12]
 8011ad6:	0124      	lsls	r4, r4, #4
 8011ad8:	683d      	ldr	r5, [r7, #0]
 8011ada:	442c      	add	r4, r5
 8011adc:	f7ee fece 	bl	800087c <__aeabi_ddiv>
 8011ae0:	4602      	mov	r2, r0
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 8011ae8:	e055      	b.n	8011b96 <op_div+0x17a>
    }
  }
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	011b      	lsls	r3, r3, #4
 8011aee:	683a      	ldr	r2, [r7, #0]
 8011af0:	4413      	add	r3, r2
 8011af2:	f993 3000 	ldrsb.w	r3, [r3]
 8011af6:	2b05      	cmp	r3, #5
 8011af8:	d147      	bne.n	8011b8a <op_div+0x16e>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Float, Integer
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	3301      	adds	r3, #1
 8011afe:	011b      	lsls	r3, r3, #4
 8011b00:	683a      	ldr	r2, [r7, #0]
 8011b02:	4413      	add	r3, r2
 8011b04:	f993 3000 	ldrsb.w	r3, [r3]
 8011b08:	2b04      	cmp	r3, #4
 8011b0a:	d11d      	bne.n	8011b48 <op_div+0x12c>
      regs[a].d /= regs[a+1].i;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	011b      	lsls	r3, r3, #4
 8011b10:	683a      	ldr	r2, [r7, #0]
 8011b12:	4413      	add	r3, r2
 8011b14:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	011b      	lsls	r3, r3, #4
 8011b1e:	683a      	ldr	r2, [r7, #0]
 8011b20:	4413      	add	r3, r2
 8011b22:	689b      	ldr	r3, [r3, #8]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7ee fd15 	bl	8000554 <__aeabi_i2d>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	68f9      	ldr	r1, [r7, #12]
 8011b30:	0109      	lsls	r1, r1, #4
 8011b32:	6838      	ldr	r0, [r7, #0]
 8011b34:	1846      	adds	r6, r0, r1
 8011b36:	4620      	mov	r0, r4
 8011b38:	4629      	mov	r1, r5
 8011b3a:	f7ee fe9f 	bl	800087c <__aeabi_ddiv>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	460b      	mov	r3, r1
 8011b42:	e9c6 2302 	strd	r2, r3, [r6, #8]
      return;
 8011b46:	e026      	b.n	8011b96 <op_div+0x17a>
    }
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Float, Float
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	011b      	lsls	r3, r3, #4
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	4413      	add	r3, r2
 8011b52:	f993 3000 	ldrsb.w	r3, [r3]
 8011b56:	2b05      	cmp	r3, #5
 8011b58:	d117      	bne.n	8011b8a <op_div+0x16e>
      regs[a].d /= regs[a+1].d;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	011b      	lsls	r3, r3, #4
 8011b5e:	683a      	ldr	r2, [r7, #0]
 8011b60:	4413      	add	r3, r2
 8011b62:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	011b      	lsls	r3, r3, #4
 8011b6c:	683a      	ldr	r2, [r7, #0]
 8011b6e:	4413      	add	r3, r2
 8011b70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011b74:	68fc      	ldr	r4, [r7, #12]
 8011b76:	0124      	lsls	r4, r4, #4
 8011b78:	683d      	ldr	r5, [r7, #0]
 8011b7a:	442c      	add	r4, r5
 8011b7c:	f7ee fe7e 	bl	800087c <__aeabi_ddiv>
 8011b80:	4602      	mov	r2, r0
 8011b82:	460b      	mov	r3, r1
 8011b84:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 8011b88:	e005      	b.n	8011b96 <op_div+0x17a>
    }
#endif
  }

  // other case
  send_by_name( vm, MRBC_SYM(DIV), a, 1 );
 8011b8a:	68fa      	ldr	r2, [r7, #12]
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	210b      	movs	r1, #11
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7fc fdfb 	bl	800e78c <send_by_name>
}
 8011b96:	3714      	adds	r7, #20
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b9c:	200001c4 	.word	0x200001c4

08011ba0 <op_eq>:
/*! OP_EQ

  R[a] = R[a]==R[a+1]
*/
static inline void op_eq( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b084      	sub	sp, #16
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	691b      	ldr	r3, [r3, #16]
 8011bae:	1c59      	adds	r1, r3, #1
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	6111      	str	r1, [r2, #16]
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	011b      	lsls	r3, r3, #4
 8011bbc:	683a      	ldr	r2, [r7, #0]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8011bc4:	2b08      	cmp	r3, #8
 8011bc6:	d106      	bne.n	8011bd6 <op_eq+0x36>
    send_by_name(vm, MRBC_SYM(EQ_EQ), a, 1);
 8011bc8:	68fa      	ldr	r2, [r7, #12]
 8011bca:	2301      	movs	r3, #1
 8011bcc:	2110      	movs	r1, #16
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f7fc fddc 	bl	800e78c <send_by_name>
    return;
 8011bd4:	e01f      	b.n	8011c16 <op_eq+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	011b      	lsls	r3, r3, #4
 8011bda:	683a      	ldr	r2, [r7, #0]
 8011bdc:	18d0      	adds	r0, r2, r3
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	3301      	adds	r3, #1
 8011be2:	011b      	lsls	r3, r3, #4
 8011be4:	683a      	ldr	r2, [r7, #0]
 8011be6:	4413      	add	r3, r2
 8011be8:	4619      	mov	r1, r3
 8011bea:	f7fc faa9 	bl	800e140 <mrbc_compare>
 8011bee:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	011b      	lsls	r3, r3, #4
 8011bf4:	683a      	ldr	r2, [r7, #0]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7fc fc6f 	bl	800e4dc <mrbc_decref>
  regs[a].tt = result ? MRBC_TT_FALSE : MRBC_TT_TRUE;
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d001      	beq.n	8011c08 <op_eq+0x68>
 8011c04:	2102      	movs	r1, #2
 8011c06:	e000      	b.n	8011c0a <op_eq+0x6a>
 8011c08:	2103      	movs	r1, #3
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	011b      	lsls	r3, r3, #4
 8011c0e:	683a      	ldr	r2, [r7, #0]
 8011c10:	4413      	add	r3, r2
 8011c12:	460a      	mov	r2, r1
 8011c14:	701a      	strb	r2, [r3, #0]
}
 8011c16:	3710      	adds	r7, #16
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <op_lt>:
/*! OP_LT

  R[a] = R[a]<R[a+1]
*/
static inline void op_lt( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	691b      	ldr	r3, [r3, #16]
 8011c2a:	1c59      	adds	r1, r3, #1
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	6111      	str	r1, [r2, #16]
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	011b      	lsls	r3, r3, #4
 8011c38:	683a      	ldr	r2, [r7, #0]
 8011c3a:	4413      	add	r3, r2
 8011c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8011c40:	2b08      	cmp	r3, #8
 8011c42:	d106      	bne.n	8011c52 <op_lt+0x36>
    send_by_name(vm, MRBC_SYM(LT), a, 1);
 8011c44:	68fa      	ldr	r2, [r7, #12]
 8011c46:	2301      	movs	r3, #1
 8011c48:	210c      	movs	r1, #12
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7fc fd9e 	bl	800e78c <send_by_name>
    return;
 8011c50:	e01f      	b.n	8011c92 <op_lt+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	011b      	lsls	r3, r3, #4
 8011c56:	683a      	ldr	r2, [r7, #0]
 8011c58:	18d0      	adds	r0, r2, r3
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	011b      	lsls	r3, r3, #4
 8011c60:	683a      	ldr	r2, [r7, #0]
 8011c62:	4413      	add	r3, r2
 8011c64:	4619      	mov	r1, r3
 8011c66:	f7fc fa6b 	bl	800e140 <mrbc_compare>
 8011c6a:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	011b      	lsls	r3, r3, #4
 8011c70:	683a      	ldr	r2, [r7, #0]
 8011c72:	4413      	add	r3, r2
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7fc fc31 	bl	800e4dc <mrbc_decref>
  regs[a].tt = result < 0 ? MRBC_TT_TRUE : MRBC_TT_FALSE;
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	da01      	bge.n	8011c84 <op_lt+0x68>
 8011c80:	2103      	movs	r1, #3
 8011c82:	e000      	b.n	8011c86 <op_lt+0x6a>
 8011c84:	2102      	movs	r1, #2
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	011b      	lsls	r3, r3, #4
 8011c8a:	683a      	ldr	r2, [r7, #0]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	460a      	mov	r2, r1
 8011c90:	701a      	strb	r2, [r3, #0]
}
 8011c92:	3710      	adds	r7, #16
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <op_le>:
/*! OP_LE

  R[a] = R[a]<=R[a+1]
*/
static inline void op_le( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	691b      	ldr	r3, [r3, #16]
 8011ca6:	1c59      	adds	r1, r3, #1
 8011ca8:	687a      	ldr	r2, [r7, #4]
 8011caa:	6111      	str	r1, [r2, #16]
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	011b      	lsls	r3, r3, #4
 8011cb4:	683a      	ldr	r2, [r7, #0]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8011cbc:	2b08      	cmp	r3, #8
 8011cbe:	d106      	bne.n	8011cce <op_le+0x36>
    send_by_name(vm, MRBC_SYM(LT_EQ), a, 1);
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	210e      	movs	r1, #14
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f7fc fd60 	bl	800e78c <send_by_name>
    return;
 8011ccc:	e01f      	b.n	8011d0e <op_le+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	011b      	lsls	r3, r3, #4
 8011cd2:	683a      	ldr	r2, [r7, #0]
 8011cd4:	18d0      	adds	r0, r2, r3
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	3301      	adds	r3, #1
 8011cda:	011b      	lsls	r3, r3, #4
 8011cdc:	683a      	ldr	r2, [r7, #0]
 8011cde:	4413      	add	r3, r2
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	f7fc fa2d 	bl	800e140 <mrbc_compare>
 8011ce6:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	011b      	lsls	r3, r3, #4
 8011cec:	683a      	ldr	r2, [r7, #0]
 8011cee:	4413      	add	r3, r2
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7fc fbf3 	bl	800e4dc <mrbc_decref>
  regs[a].tt = result <= 0 ? MRBC_TT_TRUE : MRBC_TT_FALSE;
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	dc01      	bgt.n	8011d00 <op_le+0x68>
 8011cfc:	2103      	movs	r1, #3
 8011cfe:	e000      	b.n	8011d02 <op_le+0x6a>
 8011d00:	2102      	movs	r1, #2
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	011b      	lsls	r3, r3, #4
 8011d06:	683a      	ldr	r2, [r7, #0]
 8011d08:	4413      	add	r3, r2
 8011d0a:	460a      	mov	r2, r1
 8011d0c:	701a      	strb	r2, [r3, #0]
}
 8011d0e:	3710      	adds	r7, #16
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}

08011d14 <op_gt>:
/*! OP_GT

  R[a] = R[a]>R[a+1]
*/
static inline void op_gt( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	691b      	ldr	r3, [r3, #16]
 8011d22:	1c59      	adds	r1, r3, #1
 8011d24:	687a      	ldr	r2, [r7, #4]
 8011d26:	6111      	str	r1, [r2, #16]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	011b      	lsls	r3, r3, #4
 8011d30:	683a      	ldr	r2, [r7, #0]
 8011d32:	4413      	add	r3, r2
 8011d34:	f993 3000 	ldrsb.w	r3, [r3]
 8011d38:	2b08      	cmp	r3, #8
 8011d3a:	d106      	bne.n	8011d4a <op_gt+0x36>
    send_by_name(vm, MRBC_SYM(GT), a, 1);
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	2301      	movs	r3, #1
 8011d40:	2112      	movs	r1, #18
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f7fc fd22 	bl	800e78c <send_by_name>
    return;
 8011d48:	e01f      	b.n	8011d8a <op_gt+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	011b      	lsls	r3, r3, #4
 8011d4e:	683a      	ldr	r2, [r7, #0]
 8011d50:	18d0      	adds	r0, r2, r3
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	3301      	adds	r3, #1
 8011d56:	011b      	lsls	r3, r3, #4
 8011d58:	683a      	ldr	r2, [r7, #0]
 8011d5a:	4413      	add	r3, r2
 8011d5c:	4619      	mov	r1, r3
 8011d5e:	f7fc f9ef 	bl	800e140 <mrbc_compare>
 8011d62:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	011b      	lsls	r3, r3, #4
 8011d68:	683a      	ldr	r2, [r7, #0]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7fc fbb5 	bl	800e4dc <mrbc_decref>
  regs[a].tt = result > 0 ? MRBC_TT_TRUE : MRBC_TT_FALSE;
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	dd01      	ble.n	8011d7c <op_gt+0x68>
 8011d78:	2103      	movs	r1, #3
 8011d7a:	e000      	b.n	8011d7e <op_gt+0x6a>
 8011d7c:	2102      	movs	r1, #2
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	011b      	lsls	r3, r3, #4
 8011d82:	683a      	ldr	r2, [r7, #0]
 8011d84:	4413      	add	r3, r2
 8011d86:	460a      	mov	r2, r1
 8011d88:	701a      	strb	r2, [r3, #0]
}
 8011d8a:	3710      	adds	r7, #16
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <op_ge>:
/*! OP_GE

  R[a] = R[a]>=R[a+1]
*/
static inline void op_ge( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	691b      	ldr	r3, [r3, #16]
 8011d9e:	1c59      	adds	r1, r3, #1
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	6111      	str	r1, [r2, #16]
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	011b      	lsls	r3, r3, #4
 8011dac:	683a      	ldr	r2, [r7, #0]
 8011dae:	4413      	add	r3, r2
 8011db0:	f993 3000 	ldrsb.w	r3, [r3]
 8011db4:	2b08      	cmp	r3, #8
 8011db6:	d106      	bne.n	8011dc6 <op_ge+0x36>
    send_by_name(vm, MRBC_SYM(GT_EQ), a, 1);
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	2301      	movs	r3, #1
 8011dbc:	2113      	movs	r1, #19
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f7fc fce4 	bl	800e78c <send_by_name>
    return;
 8011dc4:	e01f      	b.n	8011e06 <op_ge+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	011b      	lsls	r3, r3, #4
 8011dca:	683a      	ldr	r2, [r7, #0]
 8011dcc:	18d0      	adds	r0, r2, r3
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	011b      	lsls	r3, r3, #4
 8011dd4:	683a      	ldr	r2, [r7, #0]
 8011dd6:	4413      	add	r3, r2
 8011dd8:	4619      	mov	r1, r3
 8011dda:	f7fc f9b1 	bl	800e140 <mrbc_compare>
 8011dde:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	011b      	lsls	r3, r3, #4
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	4413      	add	r3, r2
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fc fb77 	bl	800e4dc <mrbc_decref>
  regs[a].tt = result >= 0 ? MRBC_TT_TRUE : MRBC_TT_FALSE;
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	db01      	blt.n	8011df8 <op_ge+0x68>
 8011df4:	2103      	movs	r1, #3
 8011df6:	e000      	b.n	8011dfa <op_ge+0x6a>
 8011df8:	2102      	movs	r1, #2
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	011b      	lsls	r3, r3, #4
 8011dfe:	683a      	ldr	r2, [r7, #0]
 8011e00:	4413      	add	r3, r2
 8011e02:	460a      	mov	r2, r1
 8011e04:	701a      	strb	r2, [r3, #0]
}
 8011e06:	3710      	adds	r7, #16
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <op_array>:
/*! OP_ARRAY

  R[a] = ary_new(R[a],R[a+1]..R[a+b])
*/
static inline void op_array( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011e0c:	b590      	push	{r4, r7, lr}
 8011e0e:	b089      	sub	sp, #36	; 0x24
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	691b      	ldr	r3, [r3, #16]
 8011e1a:	1c59      	adds	r1, r3, #1
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	6111      	str	r1, [r2, #16]
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	61fb      	str	r3, [r7, #28]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	691b      	ldr	r3, [r3, #16]
 8011e28:	1c59      	adds	r1, r3, #1
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	6111      	str	r1, [r2, #16]
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	61bb      	str	r3, [r7, #24]

  mrbc_value value = mrbc_array_new(vm, b);
 8011e32:	69ba      	ldr	r2, [r7, #24]
 8011e34:	f107 0308 	add.w	r3, r7, #8
 8011e38:	6879      	ldr	r1, [r7, #4]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7f0 fa8b 	bl	8002356 <mrbc_array_new>
  if( value.array == NULL ) return;  // ENOMEM
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d02a      	beq.n	8011e9c <op_array+0x90>

  memcpy( value.array->data, &regs[a], sizeof(mrbc_value) * b );
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	6898      	ldr	r0, [r3, #8]
 8011e4a:	69fb      	ldr	r3, [r7, #28]
 8011e4c:	011b      	lsls	r3, r3, #4
 8011e4e:	683a      	ldr	r2, [r7, #0]
 8011e50:	18d1      	adds	r1, r2, r3
 8011e52:	69bb      	ldr	r3, [r7, #24]
 8011e54:	011b      	lsls	r3, r3, #4
 8011e56:	461a      	mov	r2, r3
 8011e58:	f004 fccd 	bl	80167f6 <memcpy>
  memset( &regs[a], 0, sizeof(mrbc_value) * b );
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	011b      	lsls	r3, r3, #4
 8011e60:	683a      	ldr	r2, [r7, #0]
 8011e62:	18d0      	adds	r0, r2, r3
 8011e64:	69bb      	ldr	r3, [r7, #24]
 8011e66:	011b      	lsls	r3, r3, #4
 8011e68:	461a      	mov	r2, r3
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	f004 fc29 	bl	80166c2 <memset>
  value.array->n_stored = b;
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	69ba      	ldr	r2, [r7, #24]
 8011e74:	b292      	uxth	r2, r2
 8011e76:	80da      	strh	r2, [r3, #6]

  mrbc_decref(&regs[a]);
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	011b      	lsls	r3, r3, #4
 8011e7c:	683a      	ldr	r2, [r7, #0]
 8011e7e:	4413      	add	r3, r2
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fc fb2b 	bl	800e4dc <mrbc_decref>
  regs[a] = value;
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	011b      	lsls	r3, r3, #4
 8011e8a:	683a      	ldr	r2, [r7, #0]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	461c      	mov	r4, r3
 8011e90:	f107 0308 	add.w	r3, r7, #8
 8011e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011e9a:	e000      	b.n	8011e9e <op_array+0x92>
  if( value.array == NULL ) return;  // ENOMEM
 8011e9c:	bf00      	nop
}
 8011e9e:	3724      	adds	r7, #36	; 0x24
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd90      	pop	{r4, r7, pc}

08011ea4 <op_array2>:
/*! OP_ARRAY2

  R[a] = ary_new(R[b],R[b+1]..R[b+c])
*/
static inline void op_array2( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011ea4:	b590      	push	{r4, r7, lr}
 8011ea6:	b08b      	sub	sp, #44	; 0x2c
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	691b      	ldr	r3, [r3, #16]
 8011eb2:	1c59      	adds	r1, r3, #1
 8011eb4:	687a      	ldr	r2, [r7, #4]
 8011eb6:	6111      	str	r1, [r2, #16]
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	623b      	str	r3, [r7, #32]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	691b      	ldr	r3, [r3, #16]
 8011ec0:	1c59      	adds	r1, r3, #1
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	6111      	str	r1, [r2, #16]
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	61fb      	str	r3, [r7, #28]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	691b      	ldr	r3, [r3, #16]
 8011ece:	1c59      	adds	r1, r3, #1
 8011ed0:	687a      	ldr	r2, [r7, #4]
 8011ed2:	6111      	str	r1, [r2, #16]
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	61bb      	str	r3, [r7, #24]

  mrbc_value value = mrbc_array_new(vm, c);
 8011ed8:	69ba      	ldr	r2, [r7, #24]
 8011eda:	f107 0308 	add.w	r3, r7, #8
 8011ede:	6879      	ldr	r1, [r7, #4]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7f0 fa38 	bl	8002356 <mrbc_array_new>
  if( value.array == NULL ) return;  // ENOMEM
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d038      	beq.n	8011f5e <op_array2+0xba>

  for( int i = 0; i < c; i++ ) {
 8011eec:	2300      	movs	r3, #0
 8011eee:	627b      	str	r3, [r7, #36]	; 0x24
 8011ef0:	e01b      	b.n	8011f2a <op_array2+0x86>
    mrbc_incref( &regs[b+i] );
 8011ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	011b      	lsls	r3, r3, #4
 8011efa:	683a      	ldr	r2, [r7, #0]
 8011efc:	4413      	add	r3, r2
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fc fab8 	bl	800e474 <mrbc_incref>
    value.array->data[i] = regs[b+i];
 8011f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	4413      	add	r3, r2
 8011f0a:	011b      	lsls	r3, r3, #4
 8011f0c:	683a      	ldr	r2, [r7, #0]
 8011f0e:	18d1      	adds	r1, r2, r3
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	689a      	ldr	r2, [r3, #8]
 8011f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f16:	011b      	lsls	r3, r3, #4
 8011f18:	4413      	add	r3, r2
 8011f1a:	461c      	mov	r4, r3
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for( int i = 0; i < c; i++ ) {
 8011f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f26:	3301      	adds	r3, #1
 8011f28:	627b      	str	r3, [r7, #36]	; 0x24
 8011f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2c:	69ba      	ldr	r2, [r7, #24]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d8df      	bhi.n	8011ef2 <op_array2+0x4e>
  }
  value.array->n_stored = c;
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	69ba      	ldr	r2, [r7, #24]
 8011f36:	b292      	uxth	r2, r2
 8011f38:	80da      	strh	r2, [r3, #6]

  mrbc_decref(&regs[a]);
 8011f3a:	6a3b      	ldr	r3, [r7, #32]
 8011f3c:	011b      	lsls	r3, r3, #4
 8011f3e:	683a      	ldr	r2, [r7, #0]
 8011f40:	4413      	add	r3, r2
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fc faca 	bl	800e4dc <mrbc_decref>
  regs[a] = value;
 8011f48:	6a3b      	ldr	r3, [r7, #32]
 8011f4a:	011b      	lsls	r3, r3, #4
 8011f4c:	683a      	ldr	r2, [r7, #0]
 8011f4e:	4413      	add	r3, r2
 8011f50:	461c      	mov	r4, r3
 8011f52:	f107 0308 	add.w	r3, r7, #8
 8011f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011f5c:	e000      	b.n	8011f60 <op_array2+0xbc>
  if( value.array == NULL ) return;  // ENOMEM
 8011f5e:	bf00      	nop
}
 8011f60:	372c      	adds	r7, #44	; 0x2c
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd90      	pop	{r4, r7, pc}
	...

08011f68 <op_arycat>:
/*! OP_ARYCAT

  ary_cat(R[a],R[a+1])
*/
static inline void op_arycat( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011f68:	b590      	push	{r4, r7, lr}
 8011f6a:	b089      	sub	sp, #36	; 0x24
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	691b      	ldr	r3, [r3, #16]
 8011f76:	1c59      	adds	r1, r3, #1
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	6111      	str	r1, [r2, #16]
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	61bb      	str	r3, [r7, #24]

  if( regs[a].tt == MRBC_TT_NIL ) {
 8011f80:	69bb      	ldr	r3, [r7, #24]
 8011f82:	011b      	lsls	r3, r3, #4
 8011f84:	683a      	ldr	r2, [r7, #0]
 8011f86:	4413      	add	r3, r2
 8011f88:	f993 3000 	ldrsb.w	r3, [r3]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d125      	bne.n	8011fdc <op_arycat+0x74>
    // arycat(nil, [...]) #=> [...]
    assert( regs[a+1].tt == MRBC_TT_ARRAY );
 8011f90:	69bb      	ldr	r3, [r7, #24]
 8011f92:	3301      	adds	r3, #1
 8011f94:	011b      	lsls	r3, r3, #4
 8011f96:	683a      	ldr	r2, [r7, #0]
 8011f98:	4413      	add	r3, r2
 8011f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8011f9e:	2b0a      	cmp	r3, #10
 8011fa0:	d006      	beq.n	8011fb0 <op_arycat+0x48>
 8011fa2:	4b52      	ldr	r3, [pc, #328]	; (80120ec <op_arycat+0x184>)
 8011fa4:	4a52      	ldr	r2, [pc, #328]	; (80120f0 <op_arycat+0x188>)
 8011fa6:	f640 0193 	movw	r1, #2195	; 0x893
 8011faa:	4852      	ldr	r0, [pc, #328]	; (80120f4 <op_arycat+0x18c>)
 8011fac:	f003 fb4a 	bl	8015644 <__assert_func>
    regs[a] = regs[a+1];
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	011b      	lsls	r3, r3, #4
 8011fb6:	683a      	ldr	r2, [r7, #0]
 8011fb8:	18d1      	adds	r1, r2, r3
 8011fba:	69bb      	ldr	r3, [r7, #24]
 8011fbc:	011b      	lsls	r3, r3, #4
 8011fbe:	683a      	ldr	r2, [r7, #0]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	461c      	mov	r4, r3
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    regs[a+1].tt = MRBC_TT_NIL;
 8011fcc:	69bb      	ldr	r3, [r7, #24]
 8011fce:	3301      	adds	r3, #1
 8011fd0:	011b      	lsls	r3, r3, #4
 8011fd2:	683a      	ldr	r2, [r7, #0]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	2201      	movs	r2, #1
 8011fd8:	701a      	strb	r2, [r3, #0]

    return;
 8011fda:	e083      	b.n	80120e4 <op_arycat+0x17c>
  }

  assert( regs[a  ].tt == MRBC_TT_ARRAY );
 8011fdc:	69bb      	ldr	r3, [r7, #24]
 8011fde:	011b      	lsls	r3, r3, #4
 8011fe0:	683a      	ldr	r2, [r7, #0]
 8011fe2:	4413      	add	r3, r2
 8011fe4:	f993 3000 	ldrsb.w	r3, [r3]
 8011fe8:	2b0a      	cmp	r3, #10
 8011fea:	d006      	beq.n	8011ffa <op_arycat+0x92>
 8011fec:	4b42      	ldr	r3, [pc, #264]	; (80120f8 <op_arycat+0x190>)
 8011fee:	4a40      	ldr	r2, [pc, #256]	; (80120f0 <op_arycat+0x188>)
 8011ff0:	f640 019a 	movw	r1, #2202	; 0x89a
 8011ff4:	483f      	ldr	r0, [pc, #252]	; (80120f4 <op_arycat+0x18c>)
 8011ff6:	f003 fb25 	bl	8015644 <__assert_func>
  assert( regs[a+1].tt == MRBC_TT_ARRAY );
 8011ffa:	69bb      	ldr	r3, [r7, #24]
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	011b      	lsls	r3, r3, #4
 8012000:	683a      	ldr	r2, [r7, #0]
 8012002:	4413      	add	r3, r2
 8012004:	f993 3000 	ldrsb.w	r3, [r3]
 8012008:	2b0a      	cmp	r3, #10
 801200a:	d006      	beq.n	801201a <op_arycat+0xb2>
 801200c:	4b37      	ldr	r3, [pc, #220]	; (80120ec <op_arycat+0x184>)
 801200e:	4a38      	ldr	r2, [pc, #224]	; (80120f0 <op_arycat+0x188>)
 8012010:	f640 019b 	movw	r1, #2203	; 0x89b
 8012014:	4837      	ldr	r0, [pc, #220]	; (80120f4 <op_arycat+0x18c>)
 8012016:	f003 fb15 	bl	8015644 <__assert_func>

  int size_1 = regs[a  ].array->n_stored;
 801201a:	69bb      	ldr	r3, [r7, #24]
 801201c:	011b      	lsls	r3, r3, #4
 801201e:	683a      	ldr	r2, [r7, #0]
 8012020:	4413      	add	r3, r2
 8012022:	689b      	ldr	r3, [r3, #8]
 8012024:	88db      	ldrh	r3, [r3, #6]
 8012026:	617b      	str	r3, [r7, #20]
  int size_2 = regs[a+1].array->n_stored;
 8012028:	69bb      	ldr	r3, [r7, #24]
 801202a:	3301      	adds	r3, #1
 801202c:	011b      	lsls	r3, r3, #4
 801202e:	683a      	ldr	r2, [r7, #0]
 8012030:	4413      	add	r3, r2
 8012032:	689b      	ldr	r3, [r3, #8]
 8012034:	88db      	ldrh	r3, [r3, #6]
 8012036:	613b      	str	r3, [r7, #16]
  int new_size = size_1 + regs[a+1].array->n_stored;
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	3301      	adds	r3, #1
 801203c:	011b      	lsls	r3, r3, #4
 801203e:	683a      	ldr	r2, [r7, #0]
 8012040:	4413      	add	r3, r2
 8012042:	689b      	ldr	r3, [r3, #8]
 8012044:	88db      	ldrh	r3, [r3, #6]
 8012046:	461a      	mov	r2, r3
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	4413      	add	r3, r2
 801204c:	60fb      	str	r3, [r7, #12]

  // need resize?
  if( regs[a].array->data_size < new_size ) {
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	011b      	lsls	r3, r3, #4
 8012052:	683a      	ldr	r2, [r7, #0]
 8012054:	4413      	add	r3, r2
 8012056:	689b      	ldr	r3, [r3, #8]
 8012058:	889b      	ldrh	r3, [r3, #4]
 801205a:	461a      	mov	r2, r3
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	4293      	cmp	r3, r2
 8012060:	dd07      	ble.n	8012072 <op_arycat+0x10a>
    mrbc_array_resize(&regs[a], new_size);
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	011b      	lsls	r3, r3, #4
 8012066:	683a      	ldr	r2, [r7, #0]
 8012068:	4413      	add	r3, r2
 801206a:	68f9      	ldr	r1, [r7, #12]
 801206c:	4618      	mov	r0, r3
 801206e:	f7f0 f9e7 	bl	8002440 <mrbc_array_resize>
  }

  for( int i = 0; i < size_2; i++ ) {
 8012072:	2300      	movs	r3, #0
 8012074:	61fb      	str	r3, [r7, #28]
 8012076:	e029      	b.n	80120cc <op_arycat+0x164>
    mrbc_incref( &regs[a+1].array->data[i] );
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	3301      	adds	r3, #1
 801207c:	011b      	lsls	r3, r3, #4
 801207e:	683a      	ldr	r2, [r7, #0]
 8012080:	4413      	add	r3, r2
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	689a      	ldr	r2, [r3, #8]
 8012086:	69fb      	ldr	r3, [r7, #28]
 8012088:	011b      	lsls	r3, r3, #4
 801208a:	4413      	add	r3, r2
 801208c:	4618      	mov	r0, r3
 801208e:	f7fc f9f1 	bl	800e474 <mrbc_incref>
    regs[a].array->data[size_1+i] = regs[a+1].array->data[i];
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	3301      	adds	r3, #1
 8012096:	011b      	lsls	r3, r3, #4
 8012098:	683a      	ldr	r2, [r7, #0]
 801209a:	4413      	add	r3, r2
 801209c:	689b      	ldr	r3, [r3, #8]
 801209e:	689a      	ldr	r2, [r3, #8]
 80120a0:	69fb      	ldr	r3, [r7, #28]
 80120a2:	011b      	lsls	r3, r3, #4
 80120a4:	18d0      	adds	r0, r2, r3
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	011b      	lsls	r3, r3, #4
 80120aa:	683a      	ldr	r2, [r7, #0]
 80120ac:	4413      	add	r3, r2
 80120ae:	689b      	ldr	r3, [r3, #8]
 80120b0:	689a      	ldr	r2, [r3, #8]
 80120b2:	6979      	ldr	r1, [r7, #20]
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	440b      	add	r3, r1
 80120b8:	011b      	lsls	r3, r3, #4
 80120ba:	4413      	add	r3, r2
 80120bc:	461c      	mov	r4, r3
 80120be:	4603      	mov	r3, r0
 80120c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80120c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for( int i = 0; i < size_2; i++ ) {
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	3301      	adds	r3, #1
 80120ca:	61fb      	str	r3, [r7, #28]
 80120cc:	69fa      	ldr	r2, [r7, #28]
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	dbd1      	blt.n	8012078 <op_arycat+0x110>
  }
  regs[a].array->n_stored = new_size;
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	011b      	lsls	r3, r3, #4
 80120d8:	683a      	ldr	r2, [r7, #0]
 80120da:	4413      	add	r3, r2
 80120dc:	689b      	ldr	r3, [r3, #8]
 80120de:	68fa      	ldr	r2, [r7, #12]
 80120e0:	b292      	uxth	r2, r2
 80120e2:	80da      	strh	r2, [r3, #6]
}
 80120e4:	3724      	adds	r7, #36	; 0x24
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd90      	pop	{r4, r7, pc}
 80120ea:	bf00      	nop
 80120ec:	0801a688 	.word	0x0801a688
 80120f0:	0801bfc0 	.word	0x0801bfc0
 80120f4:	0801a368 	.word	0x0801a368
 80120f8:	0801a6a8 	.word	0x0801a6a8

080120fc <op_arypush>:
/*! OP_ARYPUSH

  ary_push(R[a],R[a+1]..R[a+b])
*/
static inline void op_arypush( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b086      	sub	sp, #24
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	691b      	ldr	r3, [r3, #16]
 801210a:	1c59      	adds	r1, r3, #1
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	6111      	str	r1, [r2, #16]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	617b      	str	r3, [r7, #20]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	691b      	ldr	r3, [r3, #16]
 8012118:	1c59      	adds	r1, r3, #1
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	6111      	str	r1, [r2, #16]
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	613b      	str	r3, [r7, #16]

  int sz1 = mrbc_array_size(&regs[a]);
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	011b      	lsls	r3, r3, #4
 8012126:	683a      	ldr	r2, [r7, #0]
 8012128:	4413      	add	r3, r2
 801212a:	4618      	mov	r0, r3
 801212c:	f7fc fa9a 	bl	800e664 <mrbc_array_size>
 8012130:	60f8      	str	r0, [r7, #12]

  int ret = mrbc_array_resize(&regs[a], sz1 + b);
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	011b      	lsls	r3, r3, #4
 8012136:	683a      	ldr	r2, [r7, #0]
 8012138:	18d0      	adds	r0, r2, r3
 801213a:	68fa      	ldr	r2, [r7, #12]
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	4413      	add	r3, r2
 8012140:	4619      	mov	r1, r3
 8012142:	f7f0 f97d 	bl	8002440 <mrbc_array_resize>
 8012146:	60b8      	str	r0, [r7, #8]
  if( ret != 0 ) return;	// ENOMEM ?
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d12a      	bne.n	80121a4 <op_arypush+0xa8>

  // data copy.
  memcpy( regs[a].array->data + sz1, &regs[a+1], sizeof(mrbc_value) * b );
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	011b      	lsls	r3, r3, #4
 8012152:	683a      	ldr	r2, [r7, #0]
 8012154:	4413      	add	r3, r2
 8012156:	689b      	ldr	r3, [r3, #8]
 8012158:	689a      	ldr	r2, [r3, #8]
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	011b      	lsls	r3, r3, #4
 801215e:	18d0      	adds	r0, r2, r3
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	3301      	adds	r3, #1
 8012164:	011b      	lsls	r3, r3, #4
 8012166:	683a      	ldr	r2, [r7, #0]
 8012168:	18d1      	adds	r1, r2, r3
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	011b      	lsls	r3, r3, #4
 801216e:	461a      	mov	r2, r3
 8012170:	f004 fb41 	bl	80167f6 <memcpy>
  memset( &regs[a+1], 0, sizeof(mrbc_value) * b );
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	3301      	adds	r3, #1
 8012178:	011b      	lsls	r3, r3, #4
 801217a:	683a      	ldr	r2, [r7, #0]
 801217c:	18d0      	adds	r0, r2, r3
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	011b      	lsls	r3, r3, #4
 8012182:	461a      	mov	r2, r3
 8012184:	2100      	movs	r1, #0
 8012186:	f004 fa9c 	bl	80166c2 <memset>
  regs[a].array->n_stored = sz1 + b;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	b299      	uxth	r1, r3
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	b29a      	uxth	r2, r3
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	011b      	lsls	r3, r3, #4
 8012196:	6838      	ldr	r0, [r7, #0]
 8012198:	4403      	add	r3, r0
 801219a:	689b      	ldr	r3, [r3, #8]
 801219c:	440a      	add	r2, r1
 801219e:	b292      	uxth	r2, r2
 80121a0:	80da      	strh	r2, [r3, #6]
 80121a2:	e000      	b.n	80121a6 <op_arypush+0xaa>
  if( ret != 0 ) return;	// ENOMEM ?
 80121a4:	bf00      	nop
}
 80121a6:	3718      	adds	r7, #24
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <op_arydup>:
/*! OP_ARYDUP

  R[a] = ary_dup(R[a])
*/
static inline void op_arydup( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80121ac:	b590      	push	{r4, r7, lr}
 80121ae:	b089      	sub	sp, #36	; 0x24
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	691b      	ldr	r3, [r3, #16]
 80121ba:	1c59      	adds	r1, r3, #1
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	6111      	str	r1, [r2, #16]
 80121c0:	781b      	ldrb	r3, [r3, #0]
 80121c2:	61fb      	str	r3, [r7, #28]

  mrbc_value ret = mrbc_array_dup( vm, &regs[a] );
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	011b      	lsls	r3, r3, #4
 80121c8:	683a      	ldr	r2, [r7, #0]
 80121ca:	441a      	add	r2, r3
 80121cc:	f107 0308 	add.w	r3, r7, #8
 80121d0:	6879      	ldr	r1, [r7, #4]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7f0 fc6c 	bl	8002ab0 <mrbc_array_dup>
  mrbc_decref(&regs[a]);
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	011b      	lsls	r3, r3, #4
 80121dc:	683a      	ldr	r2, [r7, #0]
 80121de:	4413      	add	r3, r2
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7fc f97b 	bl	800e4dc <mrbc_decref>
  regs[a] = ret;
 80121e6:	69fb      	ldr	r3, [r7, #28]
 80121e8:	011b      	lsls	r3, r3, #4
 80121ea:	683a      	ldr	r2, [r7, #0]
 80121ec:	4413      	add	r3, r2
 80121ee:	461c      	mov	r4, r3
 80121f0:	f107 0308 	add.w	r3, r7, #8
 80121f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80121f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80121fa:	bf00      	nop
 80121fc:	3724      	adds	r7, #36	; 0x24
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd90      	pop	{r4, r7, pc}

08012202 <op_aref>:
/*! OP_AREF

  R[a] = R[b][c]
*/
static inline void op_aref( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012202:	b590      	push	{r4, r7, lr}
 8012204:	b08d      	sub	sp, #52	; 0x34
 8012206:	af00      	add	r7, sp, #0
 8012208:	6178      	str	r0, [r7, #20]
 801220a:	6139      	str	r1, [r7, #16]
  FETCH_BBB();
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	691b      	ldr	r3, [r3, #16]
 8012210:	1c59      	adds	r1, r3, #1
 8012212:	697a      	ldr	r2, [r7, #20]
 8012214:	6111      	str	r1, [r2, #16]
 8012216:	781b      	ldrb	r3, [r3, #0]
 8012218:	62fb      	str	r3, [r7, #44]	; 0x2c
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	691b      	ldr	r3, [r3, #16]
 801221e:	1c59      	adds	r1, r3, #1
 8012220:	697a      	ldr	r2, [r7, #20]
 8012222:	6111      	str	r1, [r2, #16]
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	62bb      	str	r3, [r7, #40]	; 0x28
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	691b      	ldr	r3, [r3, #16]
 801222c:	1c59      	adds	r1, r3, #1
 801222e:	697a      	ldr	r2, [r7, #20]
 8012230:	6111      	str	r1, [r2, #16]
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_value *src = &regs[b];
 8012236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012238:	011b      	lsls	r3, r3, #4
 801223a:	693a      	ldr	r2, [r7, #16]
 801223c:	4413      	add	r3, r2
 801223e:	623b      	str	r3, [r7, #32]
  mrbc_value *dst = &regs[a];
 8012240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012242:	011b      	lsls	r3, r3, #4
 8012244:	693a      	ldr	r2, [r7, #16]
 8012246:	4413      	add	r3, r2
 8012248:	61fb      	str	r3, [r7, #28]

  mrbc_decref( dst );
 801224a:	69f8      	ldr	r0, [r7, #28]
 801224c:	f7fc f946 	bl	800e4dc <mrbc_decref>

  if( mrbc_type(*src) == MRBC_TT_ARRAY ) {
 8012250:	6a3b      	ldr	r3, [r7, #32]
 8012252:	f993 3000 	ldrsb.w	r3, [r3]
 8012256:	2b0a      	cmp	r3, #10
 8012258:	d10e      	bne.n	8012278 <op_aref+0x76>
    // src is Array
    *dst = mrbc_array_get(src, c);
 801225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801225c:	69fc      	ldr	r4, [r7, #28]
 801225e:	463b      	mov	r3, r7
 8012260:	6a39      	ldr	r1, [r7, #32]
 8012262:	4618      	mov	r0, r3
 8012264:	f7f0 f972 	bl	800254c <mrbc_array_get>
 8012268:	463b      	mov	r3, r7
 801226a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801226c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_incref(dst);
 8012270:	69f8      	ldr	r0, [r7, #28]
 8012272:	f7fc f8ff 	bl	800e474 <mrbc_incref>
      *dst = *src;
    } else {
      mrbc_set_nil( dst );
    }
  }
}
 8012276:	e00f      	b.n	8012298 <op_aref+0x96>
    if( c == 0 ) {
 8012278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227a:	2b00      	cmp	r3, #0
 801227c:	d109      	bne.n	8012292 <op_aref+0x90>
      mrbc_incref(src);
 801227e:	6a38      	ldr	r0, [r7, #32]
 8012280:	f7fc f8f8 	bl	800e474 <mrbc_incref>
      *dst = *src;
 8012284:	69fa      	ldr	r2, [r7, #28]
 8012286:	6a3b      	ldr	r3, [r7, #32]
 8012288:	4614      	mov	r4, r2
 801228a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801228c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012290:	e002      	b.n	8012298 <op_aref+0x96>
      mrbc_set_nil( dst );
 8012292:	69fb      	ldr	r3, [r7, #28]
 8012294:	2201      	movs	r2, #1
 8012296:	701a      	strb	r2, [r3, #0]
}
 8012298:	bf00      	nop
 801229a:	3734      	adds	r7, #52	; 0x34
 801229c:	46bd      	mov	sp, r7
 801229e:	bd90      	pop	{r4, r7, pc}

080122a0 <op_aset>:
/*! OP_ASET

  R[b][c] = R[a]
*/
static inline void op_aset( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b086      	sub	sp, #24
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	691b      	ldr	r3, [r3, #16]
 80122ae:	1c59      	adds	r1, r3, #1
 80122b0:	687a      	ldr	r2, [r7, #4]
 80122b2:	6111      	str	r1, [r2, #16]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	617b      	str	r3, [r7, #20]
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	691b      	ldr	r3, [r3, #16]
 80122bc:	1c59      	adds	r1, r3, #1
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	6111      	str	r1, [r2, #16]
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	613b      	str	r3, [r7, #16]
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	691b      	ldr	r3, [r3, #16]
 80122ca:	1c59      	adds	r1, r3, #1
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	6111      	str	r1, [r2, #16]
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	60fb      	str	r3, [r7, #12]

  assert( mrbc_type(regs[b]) == MRBC_TT_ARRAY );
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	011b      	lsls	r3, r3, #4
 80122d8:	683a      	ldr	r2, [r7, #0]
 80122da:	4413      	add	r3, r2
 80122dc:	f993 3000 	ldrsb.w	r3, [r3]
 80122e0:	2b0a      	cmp	r3, #10
 80122e2:	d006      	beq.n	80122f2 <op_aset+0x52>
 80122e4:	4b0e      	ldr	r3, [pc, #56]	; (8012320 <op_aset+0x80>)
 80122e6:	4a0f      	ldr	r2, [pc, #60]	; (8012324 <op_aset+0x84>)
 80122e8:	f640 01f9 	movw	r1, #2297	; 0x8f9
 80122ec:	480e      	ldr	r0, [pc, #56]	; (8012328 <op_aset+0x88>)
 80122ee:	f003 f9a9 	bl	8015644 <__assert_func>

  mrbc_incref( &regs[b] );
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	011b      	lsls	r3, r3, #4
 80122f6:	683a      	ldr	r2, [r7, #0]
 80122f8:	4413      	add	r3, r2
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7fc f8ba 	bl	800e474 <mrbc_incref>
  mrbc_array_set(&regs[a], c, &regs[b]);
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	011b      	lsls	r3, r3, #4
 8012304:	683a      	ldr	r2, [r7, #0]
 8012306:	18d0      	adds	r0, r2, r3
 8012308:	68f9      	ldr	r1, [r7, #12]
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	011b      	lsls	r3, r3, #4
 801230e:	683a      	ldr	r2, [r7, #0]
 8012310:	4413      	add	r3, r2
 8012312:	461a      	mov	r2, r3
 8012314:	f7f0 f8b6 	bl	8002484 <mrbc_array_set>
}
 8012318:	bf00      	nop
 801231a:	3718      	adds	r7, #24
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}
 8012320:	0801a6c8 	.word	0x0801a6c8
 8012324:	0801bfcc 	.word	0x0801bfcc
 8012328:	0801a368 	.word	0x0801a368

0801232c <op_apost>:
/*! OP_APOST

  *R[a],R[a+1]..R[a+c] = R[a][b..]
*/
static inline void op_apost( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801232c:	b590      	push	{r4, r7, lr}
 801232e:	b093      	sub	sp, #76	; 0x4c
 8012330:	af00      	add	r7, sp, #0
 8012332:	6178      	str	r0, [r7, #20]
 8012334:	6139      	str	r1, [r7, #16]
  FETCH_BBB();
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	691b      	ldr	r3, [r3, #16]
 801233a:	1c59      	adds	r1, r3, #1
 801233c:	697a      	ldr	r2, [r7, #20]
 801233e:	6111      	str	r1, [r2, #16]
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	643b      	str	r3, [r7, #64]	; 0x40
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	691b      	ldr	r3, [r3, #16]
 8012348:	1c59      	adds	r1, r3, #1
 801234a:	697a      	ldr	r2, [r7, #20]
 801234c:	6111      	str	r1, [r2, #16]
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	691b      	ldr	r3, [r3, #16]
 8012356:	1c59      	adds	r1, r3, #1
 8012358:	697a      	ldr	r2, [r7, #20]
 801235a:	6111      	str	r1, [r2, #16]
 801235c:	781b      	ldrb	r3, [r3, #0]
 801235e:	63bb      	str	r3, [r7, #56]	; 0x38

  mrbc_value src = regs[a];
 8012360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012362:	011b      	lsls	r3, r3, #4
 8012364:	693a      	ldr	r2, [r7, #16]
 8012366:	4413      	add	r3, r2
 8012368:	f107 0418 	add.w	r4, r7, #24
 801236c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801236e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if( mrbc_type(src) != MRBC_TT_ARRAY ) {
 8012372:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8012376:	2b0a      	cmp	r3, #10
 8012378:	d019      	beq.n	80123ae <op_apost+0x82>
    src = mrbc_array_new(vm, 1);
 801237a:	463b      	mov	r3, r7
 801237c:	2201      	movs	r2, #1
 801237e:	6979      	ldr	r1, [r7, #20]
 8012380:	4618      	mov	r0, r3
 8012382:	f7ef ffe8 	bl	8002356 <mrbc_array_new>
 8012386:	f107 0418 	add.w	r4, r7, #24
 801238a:	463b      	mov	r3, r7
 801238c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801238e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    src.array->data[0] = regs[a];
 8012392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012394:	011b      	lsls	r3, r3, #4
 8012396:	693a      	ldr	r2, [r7, #16]
 8012398:	441a      	add	r2, r3
 801239a:	6a3b      	ldr	r3, [r7, #32]
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	461c      	mov	r4, r3
 80123a0:	4613      	mov	r3, r2
 80123a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80123a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    src.array->n_stored = 1;
 80123a8:	6a3b      	ldr	r3, [r7, #32]
 80123aa:	2201      	movs	r2, #1
 80123ac:	80da      	strh	r2, [r3, #6]
  }

  int pre  = b;
 80123ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123b0:	637b      	str	r3, [r7, #52]	; 0x34
  int post = c;
 80123b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b4:	633b      	str	r3, [r7, #48]	; 0x30
  int len = mrbc_array_size(&src);
 80123b6:	f107 0318 	add.w	r3, r7, #24
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7fc f952 	bl	800e664 <mrbc_array_size>
 80123c0:	62f8      	str	r0, [r7, #44]	; 0x2c

  if( len > pre + post ) {
 80123c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c6:	4413      	add	r3, r2
 80123c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123ca:	429a      	cmp	r2, r3
 80123cc:	dd47      	ble.n	801245e <op_apost+0x132>
    int ary_size = len - pre - post;
 80123ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d2:	1ad2      	subs	r2, r2, r3
 80123d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	62bb      	str	r3, [r7, #40]	; 0x28
    regs[a] = mrbc_array_new(vm, ary_size);
 80123da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123dc:	011b      	lsls	r3, r3, #4
 80123de:	693a      	ldr	r2, [r7, #16]
 80123e0:	18d4      	adds	r4, r2, r3
 80123e2:	463b      	mov	r3, r7
 80123e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123e6:	6979      	ldr	r1, [r7, #20]
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7ef ffb4 	bl	8002356 <mrbc_array_new>
 80123ee:	463b      	mov	r3, r7
 80123f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80123f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // copy elements
    for( int i = 0; i < ary_size; i++ ) {
 80123f6:	2300      	movs	r3, #0
 80123f8:	647b      	str	r3, [r7, #68]	; 0x44
 80123fa:	e023      	b.n	8012444 <op_apost+0x118>
      regs[a].array->data[i] = src.array->data[pre+i];
 80123fc:	6a3b      	ldr	r3, [r7, #32]
 80123fe:	689a      	ldr	r2, [r3, #8]
 8012400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012404:	440b      	add	r3, r1
 8012406:	011b      	lsls	r3, r3, #4
 8012408:	18d1      	adds	r1, r2, r3
 801240a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801240c:	011b      	lsls	r3, r3, #4
 801240e:	693a      	ldr	r2, [r7, #16]
 8012410:	4413      	add	r3, r2
 8012412:	689b      	ldr	r3, [r3, #8]
 8012414:	689a      	ldr	r2, [r3, #8]
 8012416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012418:	011b      	lsls	r3, r3, #4
 801241a:	4413      	add	r3, r2
 801241c:	461c      	mov	r4, r3
 801241e:	460b      	mov	r3, r1
 8012420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012422:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      mrbc_incref( &regs[a].array->data[i] );
 8012426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012428:	011b      	lsls	r3, r3, #4
 801242a:	693a      	ldr	r2, [r7, #16]
 801242c:	4413      	add	r3, r2
 801242e:	689b      	ldr	r3, [r3, #8]
 8012430:	689a      	ldr	r2, [r3, #8]
 8012432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012434:	011b      	lsls	r3, r3, #4
 8012436:	4413      	add	r3, r2
 8012438:	4618      	mov	r0, r3
 801243a:	f7fc f81b 	bl	800e474 <mrbc_incref>
    for( int i = 0; i < ary_size; i++ ) {
 801243e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012440:	3301      	adds	r3, #1
 8012442:	647b      	str	r3, [r7, #68]	; 0x44
 8012444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012448:	429a      	cmp	r2, r3
 801244a:	dbd7      	blt.n	80123fc <op_apost+0xd0>
    }
    regs[a].array->n_stored = ary_size;
 801244c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801244e:	011b      	lsls	r3, r3, #4
 8012450:	693a      	ldr	r2, [r7, #16]
 8012452:	4413      	add	r3, r2
 8012454:	689b      	ldr	r3, [r3, #8]
 8012456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012458:	b292      	uxth	r2, r2
 801245a:	80da      	strh	r2, [r3, #6]
 801245c:	e006      	b.n	801246c <op_apost+0x140>

  } else {
    assert(!"Not support this case in op_apost.");
 801245e:	4b08      	ldr	r3, [pc, #32]	; (8012480 <op_apost+0x154>)
 8012460:	4a08      	ldr	r2, [pc, #32]	; (8012484 <op_apost+0x158>)
 8012462:	f44f 6112 	mov.w	r1, #2336	; 0x920
 8012466:	4808      	ldr	r0, [pc, #32]	; (8012488 <op_apost+0x15c>)
 8012468:	f003 f8ec 	bl	8015644 <__assert_func>
    // empty
    regs[a] = mrbc_array_new(vm, 0);
  }

  mrbc_decref(&src);
 801246c:	f107 0318 	add.w	r3, r7, #24
 8012470:	4618      	mov	r0, r3
 8012472:	f7fc f833 	bl	800e4dc <mrbc_decref>
}
 8012476:	bf00      	nop
 8012478:	374c      	adds	r7, #76	; 0x4c
 801247a:	46bd      	mov	sp, r7
 801247c:	bd90      	pop	{r4, r7, pc}
 801247e:	bf00      	nop
 8012480:	0801a6ec 	.word	0x0801a6ec
 8012484:	0801bfd4 	.word	0x0801bfd4
 8012488:	0801a368 	.word	0x0801a368

0801248c <op_intern>:
/*! OP_INTERN

  R[a] = intern(R[a])
*/
static inline void op_intern( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801248c:	b590      	push	{r4, r7, lr}
 801248e:	b089      	sub	sp, #36	; 0x24
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	691b      	ldr	r3, [r3, #16]
 801249a:	1c59      	adds	r1, r3, #1
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	6111      	str	r1, [r2, #16]
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	61fb      	str	r3, [r7, #28]

  assert( regs[a].tt == MRBC_TT_STRING );
 80124a4:	69fb      	ldr	r3, [r7, #28]
 80124a6:	011b      	lsls	r3, r3, #4
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	4413      	add	r3, r2
 80124ac:	f993 3000 	ldrsb.w	r3, [r3]
 80124b0:	2b0b      	cmp	r3, #11
 80124b2:	d006      	beq.n	80124c2 <op_intern+0x36>
 80124b4:	4b13      	ldr	r3, [pc, #76]	; (8012504 <op_intern+0x78>)
 80124b6:	4a14      	ldr	r2, [pc, #80]	; (8012508 <op_intern+0x7c>)
 80124b8:	f640 1132 	movw	r1, #2354	; 0x932
 80124bc:	4813      	ldr	r0, [pc, #76]	; (801250c <op_intern+0x80>)
 80124be:	f003 f8c1 	bl	8015644 <__assert_func>

  mrbc_value sym_val = mrbc_symbol_new(vm, (const char*)regs[a].string->data);
 80124c2:	69fb      	ldr	r3, [r7, #28]
 80124c4:	011b      	lsls	r3, r3, #4
 80124c6:	683a      	ldr	r2, [r7, #0]
 80124c8:	4413      	add	r3, r2
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	689a      	ldr	r2, [r3, #8]
 80124ce:	f107 0308 	add.w	r3, r7, #8
 80124d2:	6879      	ldr	r1, [r7, #4]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7fb fce1 	bl	800de9c <mrbc_symbol_new>

  mrbc_decref( &regs[a] );
 80124da:	69fb      	ldr	r3, [r7, #28]
 80124dc:	011b      	lsls	r3, r3, #4
 80124de:	683a      	ldr	r2, [r7, #0]
 80124e0:	4413      	add	r3, r2
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7fb fffa 	bl	800e4dc <mrbc_decref>
  regs[a] = sym_val;
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	011b      	lsls	r3, r3, #4
 80124ec:	683a      	ldr	r2, [r7, #0]
 80124ee:	4413      	add	r3, r2
 80124f0:	461c      	mov	r4, r3
 80124f2:	f107 0308 	add.w	r3, r7, #8
 80124f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80124f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80124fc:	bf00      	nop
 80124fe:	3724      	adds	r7, #36	; 0x24
 8012500:	46bd      	mov	sp, r7
 8012502:	bd90      	pop	{r4, r7, pc}
 8012504:	0801a714 	.word	0x0801a714
 8012508:	0801bfe0 	.word	0x0801bfe0
 801250c:	0801a368 	.word	0x0801a368

08012510 <op_symbol>:
/*! OP_SYMBOL

  R[a] = intern(Pool[b])
*/
static inline void op_symbol( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b08a      	sub	sp, #40	; 0x28
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	691b      	ldr	r3, [r3, #16]
 801251e:	1c59      	adds	r1, r3, #1
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	6111      	str	r1, [r2, #16]
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	627b      	str	r3, [r7, #36]	; 0x24
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	691b      	ldr	r3, [r3, #16]
 801252c:	1c59      	adds	r1, r3, #1
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	6111      	str	r1, [r2, #16]
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	623b      	str	r3, [r7, #32]

  const char *p = (const char *)mrbc_irep_pool_ptr(vm->cur_irep, b);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	69db      	ldr	r3, [r3, #28]
 801253c:	687a      	ldr	r2, [r7, #4]
 801253e:	68d2      	ldr	r2, [r2, #12]
 8012540:	f102 0120 	add.w	r1, r2, #32
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	68d2      	ldr	r2, [r2, #12]
 8012548:	8a52      	ldrh	r2, [r2, #18]
 801254a:	4610      	mov	r0, r2
 801254c:	6a3a      	ldr	r2, [r7, #32]
 801254e:	4402      	add	r2, r0
 8012550:	0052      	lsls	r2, r2, #1
 8012552:	440a      	add	r2, r1
 8012554:	8812      	ldrh	r2, [r2, #0]
 8012556:	4413      	add	r3, r2
 8012558:	61fb      	str	r3, [r7, #28]
  mrbc_sym sym_id = mrbc_str_to_symid( p+3 );	// 3 is TT and length
 801255a:	69fb      	ldr	r3, [r7, #28]
 801255c:	3303      	adds	r3, #3
 801255e:	4618      	mov	r0, r3
 8012560:	f7fb fb36 	bl	800dbd0 <mrbc_str_to_symid>
 8012564:	4603      	mov	r3, r0
 8012566:	837b      	strh	r3, [r7, #26]
  if( sym_id < 0 ) {
 8012568:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801256c:	2b00      	cmp	r3, #0
 801256e:	da05      	bge.n	801257c <op_symbol+0x6c>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 8012570:	4a0f      	ldr	r2, [pc, #60]	; (80125b0 <op_symbol+0xa0>)
 8012572:	4910      	ldr	r1, [pc, #64]	; (80125b4 <op_symbol+0xa4>)
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f7f8 ff57 	bl	800b428 <mrbc_raise>
 801257a:	e015      	b.n	80125a8 <op_symbol+0x98>
    return;
  }

  mrbc_decref(&regs[a]);
 801257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801257e:	011b      	lsls	r3, r3, #4
 8012580:	683a      	ldr	r2, [r7, #0]
 8012582:	4413      	add	r3, r2
 8012584:	4618      	mov	r0, r3
 8012586:	f7fb ffa9 	bl	800e4dc <mrbc_decref>
  regs[a] = mrbc_symbol_value( sym_id );
 801258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258c:	011b      	lsls	r3, r3, #4
 801258e:	683a      	ldr	r2, [r7, #0]
 8012590:	18d1      	adds	r1, r2, r3
 8012592:	f9b7 001a 	ldrsh.w	r0, [r7, #26]
 8012596:	460a      	mov	r2, r1
 8012598:	2300      	movs	r3, #0
 801259a:	6013      	str	r3, [r2, #0]
 801259c:	6053      	str	r3, [r2, #4]
 801259e:	6093      	str	r3, [r2, #8]
 80125a0:	60d3      	str	r3, [r2, #12]
 80125a2:	2306      	movs	r3, #6
 80125a4:	700b      	strb	r3, [r1, #0]
 80125a6:	6088      	str	r0, [r1, #8]
}
 80125a8:	3728      	adds	r7, #40	; 0x28
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	0801a3ac 	.word	0x0801a3ac
 80125b4:	2000010c 	.word	0x2000010c

080125b8 <op_string>:
/*! OP_STRING

  R[a] = str_dup(Pool[b])
*/
static inline void op_string( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80125b8:	b590      	push	{r4, r7, lr}
 80125ba:	b089      	sub	sp, #36	; 0x24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6178      	str	r0, [r7, #20]
 80125c0:	6139      	str	r1, [r7, #16]
  FETCH_BB();
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	691b      	ldr	r3, [r3, #16]
 80125c6:	1c59      	adds	r1, r3, #1
 80125c8:	697a      	ldr	r2, [r7, #20]
 80125ca:	6111      	str	r1, [r2, #16]
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	61fb      	str	r3, [r7, #28]
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	691b      	ldr	r3, [r3, #16]
 80125d4:	1c59      	adds	r1, r3, #1
 80125d6:	697a      	ldr	r2, [r7, #20]
 80125d8:	6111      	str	r1, [r2, #16]
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	61bb      	str	r3, [r7, #24]

  mrbc_decref(&regs[a]);
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	011b      	lsls	r3, r3, #4
 80125e2:	693a      	ldr	r2, [r7, #16]
 80125e4:	4413      	add	r3, r2
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7fb ff78 	bl	800e4dc <mrbc_decref>
  regs[a] = mrbc_irep_pool_value(vm, b);
 80125ec:	69b9      	ldr	r1, [r7, #24]
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	011b      	lsls	r3, r3, #4
 80125f2:	693a      	ldr	r2, [r7, #16]
 80125f4:	18d4      	adds	r4, r2, r3
 80125f6:	463b      	mov	r3, r7
 80125f8:	460a      	mov	r2, r1
 80125fa:	6979      	ldr	r1, [r7, #20]
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7f9 ffb7 	bl	800c570 <mrbc_irep_pool_value>
 8012602:	463b      	mov	r3, r7
 8012604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801260a:	bf00      	nop
 801260c:	3724      	adds	r7, #36	; 0x24
 801260e:	46bd      	mov	sp, r7
 8012610:	bd90      	pop	{r4, r7, pc}

08012612 <op_strcat>:
/*! OP_STRCAT

  str_cat(R[a],R[a+1])
*/
static inline void op_strcat( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012612:	b580      	push	{r7, lr}
 8012614:	b086      	sub	sp, #24
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
 801261a:	6039      	str	r1, [r7, #0]
  FETCH_B();
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	691b      	ldr	r3, [r3, #16]
 8012620:	1c59      	adds	r1, r3, #1
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	6111      	str	r1, [r2, #16]
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	617b      	str	r3, [r7, #20]

#if MRBC_USE_STRING
  // call "to_s"
  mrbc_method method;
  if( mrbc_find_method( &method, find_class_by_object(&regs[a+1]),
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	3301      	adds	r3, #1
 801262e:	011b      	lsls	r3, r3, #4
 8012630:	683a      	ldr	r2, [r7, #0]
 8012632:	4413      	add	r3, r2
 8012634:	4618      	mov	r0, r3
 8012636:	f7fb ffbf 	bl	800e5b8 <find_class_by_object>
 801263a:	4601      	mov	r1, r0
 801263c:	f107 0308 	add.w	r3, r7, #8
 8012640:	22c6      	movs	r2, #198	; 0xc6
 8012642:	4618      	mov	r0, r3
 8012644:	f7f7 f83c 	bl	80096c0 <mrbc_find_method>
 8012648:	4603      	mov	r3, r0
 801264a:	2b00      	cmp	r3, #0
 801264c:	d020      	beq.n	8012690 <op_strcat+0x7e>
			MRBC_SYM(to_s)) == 0 ) return;
  if( !method.c_func ) return;		// TODO: Not support?
 801264e:	7a7b      	ldrb	r3, [r7, #9]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d01f      	beq.n	8012694 <op_strcat+0x82>

  method.func( vm, regs + a + 1, 0 );
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	697a      	ldr	r2, [r7, #20]
 8012658:	3201      	adds	r2, #1
 801265a:	0112      	lsls	r2, r2, #4
 801265c:	6839      	ldr	r1, [r7, #0]
 801265e:	4411      	add	r1, r2
 8012660:	2200      	movs	r2, #0
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	4798      	blx	r3
  mrbc_string_append( &regs[a], &regs[a+1] );
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	011b      	lsls	r3, r3, #4
 801266a:	683a      	ldr	r2, [r7, #0]
 801266c:	18d0      	adds	r0, r2, r3
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	3301      	adds	r3, #1
 8012672:	011b      	lsls	r3, r3, #4
 8012674:	683a      	ldr	r2, [r7, #0]
 8012676:	4413      	add	r3, r2
 8012678:	4619      	mov	r1, r3
 801267a:	f7f4 fed6 	bl	800742a <mrbc_string_append>
  mrbc_decref_empty( &regs[a+1] );
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	3301      	adds	r3, #1
 8012682:	011b      	lsls	r3, r3, #4
 8012684:	683a      	ldr	r2, [r7, #0]
 8012686:	4413      	add	r3, r2
 8012688:	4618      	mov	r0, r3
 801268a:	f7fb ff6d 	bl	800e568 <mrbc_decref_empty>
 801268e:	e002      	b.n	8012696 <op_strcat+0x84>
			MRBC_SYM(to_s)) == 0 ) return;
 8012690:	bf00      	nop
 8012692:	e000      	b.n	8012696 <op_strcat+0x84>
  if( !method.c_func ) return;		// TODO: Not support?
 8012694:	bf00      	nop

#else
  mrbc_raise(vm, MRBC_CLASS(Exception), "Not support String.");
#endif
}
 8012696:	3718      	adds	r7, #24
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <op_hash>:
/*! OP_HASH

  R[a] = hash_new(R[a],R[a+1]..R[a+b*2-1])
*/
static inline void op_hash( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801269c:	b590      	push	{r4, r7, lr}
 801269e:	b089      	sub	sp, #36	; 0x24
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	691b      	ldr	r3, [r3, #16]
 80126aa:	1c59      	adds	r1, r3, #1
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	6111      	str	r1, [r2, #16]
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	61fb      	str	r3, [r7, #28]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	691b      	ldr	r3, [r3, #16]
 80126b8:	1c59      	adds	r1, r3, #1
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	6111      	str	r1, [r2, #16]
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	61bb      	str	r3, [r7, #24]

  mrbc_value value = mrbc_hash_new(vm, b);
 80126c2:	69ba      	ldr	r2, [r7, #24]
 80126c4:	f107 0308 	add.w	r3, r7, #8
 80126c8:	6879      	ldr	r1, [r7, #4]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7f1 fbb7 	bl	8003e3e <mrbc_hash_new>
  if( value.hash == NULL ) return;   // ENOMEM
 80126d0:	693b      	ldr	r3, [r7, #16]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d02d      	beq.n	8012732 <op_hash+0x96>

  // note: Do not detect duplicate keys.
  b *= 2;
 80126d6:	69bb      	ldr	r3, [r7, #24]
 80126d8:	005b      	lsls	r3, r3, #1
 80126da:	61bb      	str	r3, [r7, #24]
  memcpy( value.hash->data, &regs[a], sizeof(mrbc_value) * b );
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	6898      	ldr	r0, [r3, #8]
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	011b      	lsls	r3, r3, #4
 80126e4:	683a      	ldr	r2, [r7, #0]
 80126e6:	18d1      	adds	r1, r2, r3
 80126e8:	69bb      	ldr	r3, [r7, #24]
 80126ea:	011b      	lsls	r3, r3, #4
 80126ec:	461a      	mov	r2, r3
 80126ee:	f004 f882 	bl	80167f6 <memcpy>
  memset( &regs[a], 0, sizeof(mrbc_value) * b );
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	011b      	lsls	r3, r3, #4
 80126f6:	683a      	ldr	r2, [r7, #0]
 80126f8:	18d0      	adds	r0, r2, r3
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	011b      	lsls	r3, r3, #4
 80126fe:	461a      	mov	r2, r3
 8012700:	2100      	movs	r1, #0
 8012702:	f003 ffde 	bl	80166c2 <memset>
  value.hash->n_stored = b;
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	69ba      	ldr	r2, [r7, #24]
 801270a:	b292      	uxth	r2, r2
 801270c:	80da      	strh	r2, [r3, #6]

  mrbc_decref(&regs[a]);
 801270e:	69fb      	ldr	r3, [r7, #28]
 8012710:	011b      	lsls	r3, r3, #4
 8012712:	683a      	ldr	r2, [r7, #0]
 8012714:	4413      	add	r3, r2
 8012716:	4618      	mov	r0, r3
 8012718:	f7fb fee0 	bl	800e4dc <mrbc_decref>
  regs[a] = value;
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	011b      	lsls	r3, r3, #4
 8012720:	683a      	ldr	r2, [r7, #0]
 8012722:	4413      	add	r3, r2
 8012724:	461c      	mov	r4, r3
 8012726:	f107 0308 	add.w	r3, r7, #8
 801272a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801272c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012730:	e000      	b.n	8012734 <op_hash+0x98>
  if( value.hash == NULL ) return;   // ENOMEM
 8012732:	bf00      	nop
}
 8012734:	3724      	adds	r7, #36	; 0x24
 8012736:	46bd      	mov	sp, r7
 8012738:	bd90      	pop	{r4, r7, pc}

0801273a <op_hashadd>:
/*! OP_HASHADD

  hash_push(R[a],R[a+1]..R[a+b*2])
*/
static inline void op_hashadd( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801273a:	b580      	push	{r7, lr}
 801273c:	b088      	sub	sp, #32
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
 8012742:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	691b      	ldr	r3, [r3, #16]
 8012748:	1c59      	adds	r1, r3, #1
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	6111      	str	r1, [r2, #16]
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	61fb      	str	r3, [r7, #28]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	691b      	ldr	r3, [r3, #16]
 8012756:	1c59      	adds	r1, r3, #1
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	6111      	str	r1, [r2, #16]
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	61bb      	str	r3, [r7, #24]

  int sz1 = mrbc_array_size(&regs[a]);
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	011b      	lsls	r3, r3, #4
 8012764:	683a      	ldr	r2, [r7, #0]
 8012766:	4413      	add	r3, r2
 8012768:	4618      	mov	r0, r3
 801276a:	f7fb ff7b 	bl	800e664 <mrbc_array_size>
 801276e:	6178      	str	r0, [r7, #20]
  int sz2 = b * 2;
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	005b      	lsls	r3, r3, #1
 8012774:	613b      	str	r3, [r7, #16]

  int ret = mrbc_array_resize(&regs[a], sz1 + sz2);
 8012776:	69fb      	ldr	r3, [r7, #28]
 8012778:	011b      	lsls	r3, r3, #4
 801277a:	683a      	ldr	r2, [r7, #0]
 801277c:	18d0      	adds	r0, r2, r3
 801277e:	697a      	ldr	r2, [r7, #20]
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	4413      	add	r3, r2
 8012784:	4619      	mov	r1, r3
 8012786:	f7ef fe5b 	bl	8002440 <mrbc_array_resize>
 801278a:	60f8      	str	r0, [r7, #12]
  if( ret != 0 ) return;	// ENOMEM
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d12a      	bne.n	80127e8 <op_hashadd+0xae>

  // data copy.
  // note: Do not detect duplicate keys.
  memcpy( regs[a].hash->data + sz1, &regs[a+1], sizeof(mrbc_value) * sz2 );
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	011b      	lsls	r3, r3, #4
 8012796:	683a      	ldr	r2, [r7, #0]
 8012798:	4413      	add	r3, r2
 801279a:	689b      	ldr	r3, [r3, #8]
 801279c:	689a      	ldr	r2, [r3, #8]
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	011b      	lsls	r3, r3, #4
 80127a2:	18d0      	adds	r0, r2, r3
 80127a4:	69fb      	ldr	r3, [r7, #28]
 80127a6:	3301      	adds	r3, #1
 80127a8:	011b      	lsls	r3, r3, #4
 80127aa:	683a      	ldr	r2, [r7, #0]
 80127ac:	18d1      	adds	r1, r2, r3
 80127ae:	693b      	ldr	r3, [r7, #16]
 80127b0:	011b      	lsls	r3, r3, #4
 80127b2:	461a      	mov	r2, r3
 80127b4:	f004 f81f 	bl	80167f6 <memcpy>
  memset( &regs[a+1], 0, sizeof(mrbc_value) * sz2 );
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	3301      	adds	r3, #1
 80127bc:	011b      	lsls	r3, r3, #4
 80127be:	683a      	ldr	r2, [r7, #0]
 80127c0:	18d0      	adds	r0, r2, r3
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	011b      	lsls	r3, r3, #4
 80127c6:	461a      	mov	r2, r3
 80127c8:	2100      	movs	r1, #0
 80127ca:	f003 ff7a 	bl	80166c2 <memset>
  regs[a].hash->n_stored = sz1 + sz2;
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	b299      	uxth	r1, r3
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	b29a      	uxth	r2, r3
 80127d6:	69fb      	ldr	r3, [r7, #28]
 80127d8:	011b      	lsls	r3, r3, #4
 80127da:	6838      	ldr	r0, [r7, #0]
 80127dc:	4403      	add	r3, r0
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	440a      	add	r2, r1
 80127e2:	b292      	uxth	r2, r2
 80127e4:	80da      	strh	r2, [r3, #6]
 80127e6:	e000      	b.n	80127ea <op_hashadd+0xb0>
  if( ret != 0 ) return;	// ENOMEM
 80127e8:	bf00      	nop
}
 80127ea:	3720      	adds	r7, #32
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <op_hashcat>:
/*! OP_HASHCAT

  R[a] = hash_cat(R[a],R[a+1])
*/
static inline void op_hashcat( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b088      	sub	sp, #32
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	691b      	ldr	r3, [r3, #16]
 80127fe:	1c59      	adds	r1, r3, #1
 8012800:	687a      	ldr	r2, [r7, #4]
 8012802:	6111      	str	r1, [r2, #16]
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	61fb      	str	r3, [r7, #28]

  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&regs[a+1]);
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	3301      	adds	r3, #1
 801280c:	011b      	lsls	r3, r3, #4
 801280e:	683a      	ldr	r2, [r7, #0]
 8012810:	441a      	add	r2, r3
 8012812:	f107 030c 	add.w	r3, r7, #12
 8012816:	4611      	mov	r1, r2
 8012818:	4618      	mov	r0, r3
 801281a:	f7fb ff52 	bl	800e6c2 <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 801281e:	e017      	b.n	8012850 <op_hashcat+0x60>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 8012820:	f107 030c 	add.w	r3, r7, #12
 8012824:	4618      	mov	r0, r3
 8012826:	f7fb ff7f 	bl	800e728 <mrbc_hash_i_next>
 801282a:	61b8      	str	r0, [r7, #24]
    mrbc_hash_set( &regs[a], &kv[0], &kv[1] );
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	011b      	lsls	r3, r3, #4
 8012830:	683a      	ldr	r2, [r7, #0]
 8012832:	18d0      	adds	r0, r2, r3
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	3310      	adds	r3, #16
 8012838:	461a      	mov	r2, r3
 801283a:	69b9      	ldr	r1, [r7, #24]
 801283c:	f7f1 fbb1 	bl	8003fa2 <mrbc_hash_set>
    mrbc_incref( &kv[0] );
 8012840:	69b8      	ldr	r0, [r7, #24]
 8012842:	f7fb fe17 	bl	800e474 <mrbc_incref>
    mrbc_incref( &kv[1] );
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	3310      	adds	r3, #16
 801284a:	4618      	mov	r0, r3
 801284c:	f7fb fe12 	bl	800e474 <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 8012850:	f107 030c 	add.w	r3, r7, #12
 8012854:	4618      	mov	r0, r3
 8012856:	f7fb ff54 	bl	800e702 <mrbc_hash_i_has_next>
 801285a:	4603      	mov	r3, r0
 801285c:	2b00      	cmp	r3, #0
 801285e:	d1df      	bne.n	8012820 <op_hashcat+0x30>
  }
}
 8012860:	bf00      	nop
 8012862:	bf00      	nop
 8012864:	3720      	adds	r7, #32
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <op_method>:

  R[a] = lambda(Irep[b],L_BLOCK)
  R[a] = lambda(Irep[b],L_METHOD)
*/
static inline void op_method( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801286a:	b590      	push	{r4, r7, lr}
 801286c:	b089      	sub	sp, #36	; 0x24
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
 8012872:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	691b      	ldr	r3, [r3, #16]
 8012878:	1c59      	adds	r1, r3, #1
 801287a:	687a      	ldr	r2, [r7, #4]
 801287c:	6111      	str	r1, [r2, #16]
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	61fb      	str	r3, [r7, #28]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	691b      	ldr	r3, [r3, #16]
 8012886:	1c59      	adds	r1, r3, #1
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	6111      	str	r1, [r2, #16]
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	61bb      	str	r3, [r7, #24]

  mrbc_decref(&regs[a]);
 8012890:	69fb      	ldr	r3, [r7, #28]
 8012892:	011b      	lsls	r3, r3, #4
 8012894:	683a      	ldr	r2, [r7, #0]
 8012896:	4413      	add	r3, r2
 8012898:	4618      	mov	r0, r3
 801289a:	f7fb fe1f 	bl	800e4dc <mrbc_decref>

  mrbc_value val = mrbc_proc_new(vm, mrbc_irep_child_irep(vm->cur_irep, b));
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	f103 0220 	add.w	r2, r3, #32
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	8a9b      	ldrh	r3, [r3, #20]
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	4619      	mov	r1, r3
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	009b      	lsls	r3, r3, #2
 80128b4:	440b      	add	r3, r1
 80128b6:	4413      	add	r3, r2
 80128b8:	681a      	ldr	r2, [r3, #0]
 80128ba:	f107 0308 	add.w	r3, r7, #8
 80128be:	6879      	ldr	r1, [r7, #4]
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7f6 fe8a 	bl	80095da <mrbc_proc_new>
  if( !val.proc ) return;	// ENOMEM
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d00a      	beq.n	80128e2 <op_method+0x78>

  regs[a] = val;
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	011b      	lsls	r3, r3, #4
 80128d0:	683a      	ldr	r2, [r7, #0]
 80128d2:	4413      	add	r3, r2
 80128d4:	461c      	mov	r4, r3
 80128d6:	f107 0308 	add.w	r3, r7, #8
 80128da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80128dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80128e0:	e000      	b.n	80128e4 <op_method+0x7a>
  if( !val.proc ) return;	// ENOMEM
 80128e2:	bf00      	nop
}
 80128e4:	3724      	adds	r7, #36	; 0x24
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd90      	pop	{r4, r7, pc}

080128ea <op_range_inc>:
/*! OP_RANGE_INC

  R[a] = range_new(R[a],R[a+1],FALSE)
*/
static inline void op_range_inc( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80128ea:	b590      	push	{r4, r7, lr}
 80128ec:	b08b      	sub	sp, #44	; 0x2c
 80128ee:	af02      	add	r7, sp, #8
 80128f0:	6078      	str	r0, [r7, #4]
 80128f2:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	691b      	ldr	r3, [r3, #16]
 80128f8:	1c59      	adds	r1, r3, #1
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	6111      	str	r1, [r2, #16]
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	61fb      	str	r3, [r7, #28]

  mrbc_value value = mrbc_range_new(vm, &regs[a], &regs[a+1], 0);
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	011b      	lsls	r3, r3, #4
 8012906:	683a      	ldr	r2, [r7, #0]
 8012908:	18d1      	adds	r1, r2, r3
 801290a:	69fb      	ldr	r3, [r7, #28]
 801290c:	3301      	adds	r3, #1
 801290e:	011b      	lsls	r3, r3, #4
 8012910:	683a      	ldr	r2, [r7, #0]
 8012912:	4413      	add	r3, r2
 8012914:	f107 0008 	add.w	r0, r7, #8
 8012918:	2200      	movs	r2, #0
 801291a:	9200      	str	r2, [sp, #0]
 801291c:	460a      	mov	r2, r1
 801291e:	6879      	ldr	r1, [r7, #4]
 8012920:	f7f4 f96d 	bl	8006bfe <mrbc_range_new>
  regs[a] = value;
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	011b      	lsls	r3, r3, #4
 8012928:	683a      	ldr	r2, [r7, #0]
 801292a:	4413      	add	r3, r2
 801292c:	461c      	mov	r4, r3
 801292e:	f107 0308 	add.w	r3, r7, #8
 8012932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a+1].tt = MRBC_TT_EMPTY;
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	3301      	adds	r3, #1
 801293c:	011b      	lsls	r3, r3, #4
 801293e:	683a      	ldr	r2, [r7, #0]
 8012940:	4413      	add	r3, r2
 8012942:	2200      	movs	r2, #0
 8012944:	701a      	strb	r2, [r3, #0]
}
 8012946:	bf00      	nop
 8012948:	3724      	adds	r7, #36	; 0x24
 801294a:	46bd      	mov	sp, r7
 801294c:	bd90      	pop	{r4, r7, pc}

0801294e <op_range_exc>:
/*! OP_RANGE_EXC

  R[a] = range_new(R[a],R[a+1],TRUE)
*/
static inline void op_range_exc( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801294e:	b590      	push	{r4, r7, lr}
 8012950:	b08b      	sub	sp, #44	; 0x2c
 8012952:	af02      	add	r7, sp, #8
 8012954:	6078      	str	r0, [r7, #4]
 8012956:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	691b      	ldr	r3, [r3, #16]
 801295c:	1c59      	adds	r1, r3, #1
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	6111      	str	r1, [r2, #16]
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	61fb      	str	r3, [r7, #28]

  mrbc_value value = mrbc_range_new(vm, &regs[a], &regs[a+1], 1);
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	011b      	lsls	r3, r3, #4
 801296a:	683a      	ldr	r2, [r7, #0]
 801296c:	18d1      	adds	r1, r2, r3
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	3301      	adds	r3, #1
 8012972:	011b      	lsls	r3, r3, #4
 8012974:	683a      	ldr	r2, [r7, #0]
 8012976:	4413      	add	r3, r2
 8012978:	f107 0008 	add.w	r0, r7, #8
 801297c:	2201      	movs	r2, #1
 801297e:	9200      	str	r2, [sp, #0]
 8012980:	460a      	mov	r2, r1
 8012982:	6879      	ldr	r1, [r7, #4]
 8012984:	f7f4 f93b 	bl	8006bfe <mrbc_range_new>
  regs[a] = value;
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	011b      	lsls	r3, r3, #4
 801298c:	683a      	ldr	r2, [r7, #0]
 801298e:	4413      	add	r3, r2
 8012990:	461c      	mov	r4, r3
 8012992:	f107 0308 	add.w	r3, r7, #8
 8012996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a+1].tt = MRBC_TT_EMPTY;
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	3301      	adds	r3, #1
 80129a0:	011b      	lsls	r3, r3, #4
 80129a2:	683a      	ldr	r2, [r7, #0]
 80129a4:	4413      	add	r3, r2
 80129a6:	2200      	movs	r2, #0
 80129a8:	701a      	strb	r2, [r3, #0]
}
 80129aa:	bf00      	nop
 80129ac:	3724      	adds	r7, #36	; 0x24
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd90      	pop	{r4, r7, pc}
	...

080129b4 <op_oclass>:
/*! OP_OCLASS

  R[a] = ::Object
*/
static inline void op_oclass( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	691b      	ldr	r3, [r3, #16]
 80129c2:	1c59      	adds	r1, r3, #1
 80129c4:	687a      	ldr	r2, [r7, #4]
 80129c6:	6111      	str	r1, [r2, #16]
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	011b      	lsls	r3, r3, #4
 80129d0:	683a      	ldr	r2, [r7, #0]
 80129d2:	4413      	add	r3, r2
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7fb fd81 	bl	800e4dc <mrbc_decref>
  regs[a].tt = MRBC_TT_CLASS;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	011b      	lsls	r3, r3, #4
 80129de:	683a      	ldr	r2, [r7, #0]
 80129e0:	4413      	add	r3, r2
 80129e2:	2207      	movs	r2, #7
 80129e4:	701a      	strb	r2, [r3, #0]
  regs[a].cls = mrbc_class_object;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	011b      	lsls	r3, r3, #4
 80129ea:	683a      	ldr	r2, [r7, #0]
 80129ec:	4413      	add	r3, r2
 80129ee:	4a03      	ldr	r2, [pc, #12]	; (80129fc <op_oclass+0x48>)
 80129f0:	609a      	str	r2, [r3, #8]
}
 80129f2:	bf00      	nop
 80129f4:	3710      	adds	r7, #16
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}
 80129fa:	bf00      	nop
 80129fc:	20000064 	.word	0x20000064

08012a00 <op_class>:
/*! OP_CLASS

  R[a] = newclass(R[a],Syms[b],R[a+1])
*/
static inline void op_class( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b08a      	sub	sp, #40	; 0x28
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	691b      	ldr	r3, [r3, #16]
 8012a0e:	1c59      	adds	r1, r3, #1
 8012a10:	687a      	ldr	r2, [r7, #4]
 8012a12:	6111      	str	r1, [r2, #16]
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	61bb      	str	r3, [r7, #24]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	691b      	ldr	r3, [r3, #16]
 8012a1c:	1c59      	adds	r1, r3, #1
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	6111      	str	r1, [r2, #16]
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	617b      	str	r3, [r7, #20]

  mrbc_class *super = (regs[a+1].tt == MRBC_TT_CLASS) ? regs[a+1].cls : 0;
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	3301      	adds	r3, #1
 8012a2a:	011b      	lsls	r3, r3, #4
 8012a2c:	683a      	ldr	r2, [r7, #0]
 8012a2e:	4413      	add	r3, r2
 8012a30:	f993 3000 	ldrsb.w	r3, [r3]
 8012a34:	2b07      	cmp	r3, #7
 8012a36:	d106      	bne.n	8012a46 <op_class+0x46>
 8012a38:	69bb      	ldr	r3, [r7, #24]
 8012a3a:	3301      	adds	r3, #1
 8012a3c:	011b      	lsls	r3, r3, #4
 8012a3e:	683a      	ldr	r2, [r7, #0]
 8012a40:	4413      	add	r3, r2
 8012a42:	689b      	ldr	r3, [r3, #8]
 8012a44:	e000      	b.n	8012a48 <op_class+0x48>
 8012a46:	2300      	movs	r3, #0
 8012a48:	613b      	str	r3, [r7, #16]

  // check unsupported pattern.
  if( super ) {
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d015      	beq.n	8012a7c <op_class+0x7c>
    for( int i = 1; i < MRBC_TT_MAXVAL; i++ ) {
 8012a50:	2301      	movs	r3, #1
 8012a52:	627b      	str	r3, [r7, #36]	; 0x24
 8012a54:	e00f      	b.n	8012a76 <op_class+0x76>
      if( super == mrbc_class_tbl[i] ) {
 8012a56:	4a2d      	ldr	r2, [pc, #180]	; (8012b0c <op_class+0x10c>)
 8012a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a5e:	693a      	ldr	r2, [r7, #16]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d105      	bne.n	8012a70 <op_class+0x70>
	mrbc_raise(vm, MRBC_CLASS(NotImplementedError), "Inherit the built-in class is not supported.");
 8012a64:	4a2a      	ldr	r2, [pc, #168]	; (8012b10 <op_class+0x110>)
 8012a66:	492b      	ldr	r1, [pc, #172]	; (8012b14 <op_class+0x114>)
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f7f8 fcdd 	bl	800b428 <mrbc_raise>
	return;
 8012a6e:	e04a      	b.n	8012b06 <op_class+0x106>
    for( int i = 1; i < MRBC_TT_MAXVAL; i++ ) {
 8012a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a72:	3301      	adds	r3, #1
 8012a74:	627b      	str	r3, [r7, #36]	; 0x24
 8012a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a78:	2b0d      	cmp	r3, #13
 8012a7a:	ddec      	ble.n	8012a56 <op_class+0x56>
      }
    }
  }

  mrbc_class *outer = 0;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	623b      	str	r3, [r7, #32]

  if( regs[a].tt == MRBC_TT_CLASS ) {
 8012a80:	69bb      	ldr	r3, [r7, #24]
 8012a82:	011b      	lsls	r3, r3, #4
 8012a84:	683a      	ldr	r2, [r7, #0]
 8012a86:	4413      	add	r3, r2
 8012a88:	f993 3000 	ldrsb.w	r3, [r3]
 8012a8c:	2b07      	cmp	r3, #7
 8012a8e:	d106      	bne.n	8012a9e <op_class+0x9e>
    outer = regs[a].cls;
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	011b      	lsls	r3, r3, #4
 8012a94:	683a      	ldr	r2, [r7, #0]
 8012a96:	4413      	add	r3, r2
 8012a98:	689b      	ldr	r3, [r3, #8]
 8012a9a:	623b      	str	r3, [r7, #32]
 8012a9c:	e009      	b.n	8012ab2 <op_class+0xb2>
  } else if( vm->cur_regs[0].tt == MRBC_TT_CLASS ) {
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	695b      	ldr	r3, [r3, #20]
 8012aa2:	f993 3000 	ldrsb.w	r3, [r3]
 8012aa6:	2b07      	cmp	r3, #7
 8012aa8:	d103      	bne.n	8012ab2 <op_class+0xb2>
    outer = vm->cur_regs[0].cls;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	695b      	ldr	r3, [r3, #20]
 8012aae:	689b      	ldr	r3, [r3, #8]
 8012ab0:	623b      	str	r3, [r7, #32]
  }

  const char *class_name = mrbc_irep_symbol_cstr(vm->cur_irep, b);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	68db      	ldr	r3, [r3, #12]
 8012ab6:	f103 0220 	add.w	r2, r3, #32
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	005b      	lsls	r3, r3, #1
 8012abe:	4413      	add	r3, r2
 8012ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7fb f8bb 	bl	800dc40 <mrbc_symid_to_str>
 8012aca:	60f8      	str	r0, [r7, #12]
  mrbc_class *cls;

  // define a new class (or get an already defined class)
  if( outer ) {
 8012acc:	6a3b      	ldr	r3, [r7, #32]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d007      	beq.n	8012ae2 <op_class+0xe2>
    cls = mrbc_define_class_under(vm, outer, class_name, super);
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	68fa      	ldr	r2, [r7, #12]
 8012ad6:	6a39      	ldr	r1, [r7, #32]
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7f6 fc13 	bl	8009304 <mrbc_define_class_under>
 8012ade:	61f8      	str	r0, [r7, #28]
 8012ae0:	e005      	b.n	8012aee <op_class+0xee>
  } else {
    cls = mrbc_define_class(vm, class_name, super);
 8012ae2:	693a      	ldr	r2, [r7, #16]
 8012ae4:	68f9      	ldr	r1, [r7, #12]
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f7f6 fba0 	bl	800922c <mrbc_define_class>
 8012aec:	61f8      	str	r0, [r7, #28]
  }

  // (note)
  //  regs[a] was set to NIL or Class by compiler. So, no need to release.
  regs[a].tt = MRBC_TT_CLASS;
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	011b      	lsls	r3, r3, #4
 8012af2:	683a      	ldr	r2, [r7, #0]
 8012af4:	4413      	add	r3, r2
 8012af6:	2207      	movs	r2, #7
 8012af8:	701a      	strb	r2, [r3, #0]
  regs[a].cls = cls;
 8012afa:	69bb      	ldr	r3, [r7, #24]
 8012afc:	011b      	lsls	r3, r3, #4
 8012afe:	683a      	ldr	r2, [r7, #0]
 8012b00:	4413      	add	r3, r2
 8012b02:	69fa      	ldr	r2, [r7, #28]
 8012b04:	609a      	str	r2, [r3, #8]
}
 8012b06:	3728      	adds	r7, #40	; 0x28
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	0801adf4 	.word	0x0801adf4
 8012b10:	0801a734 	.word	0x0801a734
 8012b14:	20000134 	.word	0x20000134

08012b18 <op_exec>:
/*! OP_EXEC

  R[a] = blockexec(R[a],Irep[b])
*/
static inline void op_exec( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	691b      	ldr	r3, [r3, #16]
 8012b26:	1c59      	adds	r1, r3, #1
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	6111      	str	r1, [r2, #16]
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	60fb      	str	r3, [r7, #12]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	691b      	ldr	r3, [r3, #16]
 8012b34:	1c59      	adds	r1, r3, #1
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	6111      	str	r1, [r2, #16]
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	60bb      	str	r3, [r7, #8]
  assert( regs[a].tt == MRBC_TT_CLASS );
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	011b      	lsls	r3, r3, #4
 8012b42:	683a      	ldr	r2, [r7, #0]
 8012b44:	4413      	add	r3, r2
 8012b46:	f993 3000 	ldrsb.w	r3, [r3]
 8012b4a:	2b07      	cmp	r3, #7
 8012b4c:	d006      	beq.n	8012b5c <op_exec+0x44>
 8012b4e:	4b1a      	ldr	r3, [pc, #104]	; (8012bb8 <op_exec+0xa0>)
 8012b50:	4a1a      	ldr	r2, [pc, #104]	; (8012bbc <op_exec+0xa4>)
 8012b52:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8012b56:	481a      	ldr	r0, [pc, #104]	; (8012bc0 <op_exec+0xa8>)
 8012b58:	f002 fd74 	bl	8015644 <__assert_func>

  // prepare callinfo
  mrbc_push_callinfo(vm, 0, a, 0);
 8012b5c:	68fa      	ldr	r2, [r7, #12]
 8012b5e:	2300      	movs	r3, #0
 8012b60:	2100      	movs	r1, #0
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f7fc f804 	bl	800eb70 <mrbc_push_callinfo>

  // target irep
  vm->cur_irep = mrbc_irep_child_irep(vm->cur_irep, b);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	68db      	ldr	r3, [r3, #12]
 8012b6c:	f103 0220 	add.w	r2, r3, #32
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	8a9b      	ldrh	r3, [r3, #20]
 8012b76:	009b      	lsls	r3, r3, #2
 8012b78:	4619      	mov	r1, r3
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	009b      	lsls	r3, r3, #2
 8012b7e:	440b      	add	r3, r1
 8012b80:	4413      	add	r3, r2
 8012b82:	681a      	ldr	r2, [r3, #0]
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	699a      	ldr	r2, [r3, #24]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	611a      	str	r2, [r3, #16]
  vm->cur_regs += a;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	695a      	ldr	r2, [r3, #20]
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	011b      	lsls	r3, r3, #4
 8012b9a:	441a      	add	r2, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	615a      	str	r2, [r3, #20]

  vm->target_class = regs[a].cls;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	011b      	lsls	r3, r3, #4
 8012ba4:	683a      	ldr	r2, [r7, #0]
 8012ba6:	4413      	add	r3, r2
 8012ba8:	689a      	ldr	r2, [r3, #8]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	619a      	str	r2, [r3, #24]
}
 8012bae:	bf00      	nop
 8012bb0:	3710      	adds	r7, #16
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}
 8012bb6:	bf00      	nop
 8012bb8:	0801a764 	.word	0x0801a764
 8012bbc:	0801bfec 	.word	0x0801bfec
 8012bc0:	0801a368 	.word	0x0801a368

08012bc4 <op_def>:
/*! OP_DEF

  R[a].newmethod(Syms[b],R[a+1]); R[a] = Syms[b]
*/
static inline void op_def( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b08a      	sub	sp, #40	; 0x28
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	691b      	ldr	r3, [r3, #16]
 8012bd2:	1c59      	adds	r1, r3, #1
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	6111      	str	r1, [r2, #16]
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	623b      	str	r3, [r7, #32]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	691b      	ldr	r3, [r3, #16]
 8012be0:	1c59      	adds	r1, r3, #1
 8012be2:	687a      	ldr	r2, [r7, #4]
 8012be4:	6111      	str	r1, [r2, #16]
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	61fb      	str	r3, [r7, #28]

  assert( regs[a].tt == MRBC_TT_CLASS );
 8012bea:	6a3b      	ldr	r3, [r7, #32]
 8012bec:	011b      	lsls	r3, r3, #4
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	4413      	add	r3, r2
 8012bf2:	f993 3000 	ldrsb.w	r3, [r3]
 8012bf6:	2b07      	cmp	r3, #7
 8012bf8:	d006      	beq.n	8012c08 <op_def+0x44>
 8012bfa:	4b45      	ldr	r3, [pc, #276]	; (8012d10 <op_def+0x14c>)
 8012bfc:	4a45      	ldr	r2, [pc, #276]	; (8012d14 <op_def+0x150>)
 8012bfe:	f640 2147 	movw	r1, #2631	; 0xa47
 8012c02:	4845      	ldr	r0, [pc, #276]	; (8012d18 <op_def+0x154>)
 8012c04:	f002 fd1e 	bl	8015644 <__assert_func>
  assert( regs[a+1].tt == MRBC_TT_PROC );
 8012c08:	6a3b      	ldr	r3, [r7, #32]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	011b      	lsls	r3, r3, #4
 8012c0e:	683a      	ldr	r2, [r7, #0]
 8012c10:	4413      	add	r3, r2
 8012c12:	f993 3000 	ldrsb.w	r3, [r3]
 8012c16:	2b09      	cmp	r3, #9
 8012c18:	d006      	beq.n	8012c28 <op_def+0x64>
 8012c1a:	4b40      	ldr	r3, [pc, #256]	; (8012d1c <op_def+0x158>)
 8012c1c:	4a3d      	ldr	r2, [pc, #244]	; (8012d14 <op_def+0x150>)
 8012c1e:	f640 2148 	movw	r1, #2632	; 0xa48
 8012c22:	483d      	ldr	r0, [pc, #244]	; (8012d18 <op_def+0x154>)
 8012c24:	f002 fd0e 	bl	8015644 <__assert_func>

  mrbc_class *cls = regs[a].cls;
 8012c28:	6a3b      	ldr	r3, [r7, #32]
 8012c2a:	011b      	lsls	r3, r3, #4
 8012c2c:	683a      	ldr	r2, [r7, #0]
 8012c2e:	4413      	add	r3, r2
 8012c30:	689b      	ldr	r3, [r3, #8]
 8012c32:	61bb      	str	r3, [r7, #24]
  mrbc_sym sym_id = mrbc_irep_symbol_id(vm->cur_irep, b);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	68db      	ldr	r3, [r3, #12]
 8012c38:	f103 0220 	add.w	r2, r3, #32
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	005b      	lsls	r3, r3, #1
 8012c40:	4413      	add	r3, r2
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	82fb      	strh	r3, [r7, #22]
  mrbc_proc *proc = regs[a+1].proc;
 8012c46:	6a3b      	ldr	r3, [r7, #32]
 8012c48:	3301      	adds	r3, #1
 8012c4a:	011b      	lsls	r3, r3, #4
 8012c4c:	683a      	ldr	r2, [r7, #0]
 8012c4e:	4413      	add	r3, r2
 8012c50:	689b      	ldr	r3, [r3, #8]
 8012c52:	613b      	str	r3, [r7, #16]
  mrbc_method *method;

  if( vm->vm_id == 0 ) {
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	789b      	ldrb	r3, [r3, #2]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d104      	bne.n	8012c66 <op_def+0xa2>
    method = mrbc_raw_alloc_no_free( sizeof(mrbc_method) );
 8012c5c:	200c      	movs	r0, #12
 8012c5e:	f7ef f893 	bl	8001d88 <mrbc_raw_alloc_no_free>
 8012c62:	6278      	str	r0, [r7, #36]	; 0x24
 8012c64:	e003      	b.n	8012c6e <op_def+0xaa>
  } else {
    method = mrbc_raw_alloc( sizeof(mrbc_method) );
 8012c66:	200c      	movs	r0, #12
 8012c68:	f7ee ff2e 	bl	8001ac8 <mrbc_raw_alloc>
 8012c6c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if( !method ) return; // ENOMEM
 8012c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d048      	beq.n	8012d06 <op_def+0x142>

  method->type = (vm->vm_id == 0) ? 'm' : 'M';
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	789b      	ldrb	r3, [r3, #2]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d101      	bne.n	8012c80 <op_def+0xbc>
 8012c7c:	226d      	movs	r2, #109	; 0x6d
 8012c7e:	e000      	b.n	8012c82 <op_def+0xbe>
 8012c80:	224d      	movs	r2, #77	; 0x4d
 8012c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c84:	701a      	strb	r2, [r3, #0]
  method->c_func = 0;
 8012c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c88:	2200      	movs	r2, #0
 8012c8a:	705a      	strb	r2, [r3, #1]
  method->sym_id = sym_id;
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	8afa      	ldrh	r2, [r7, #22]
 8012c90:	805a      	strh	r2, [r3, #2]
  method->irep = proc->irep;
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	68da      	ldr	r2, [r3, #12]
 8012c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c98:	605a      	str	r2, [r3, #4]
  method->next = cls->method_link;
 8012c9a:	69bb      	ldr	r3, [r7, #24]
 8012c9c:	689a      	ldr	r2, [r3, #8]
 8012c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca0:	609a      	str	r2, [r3, #8]
  cls->method_link = method;
 8012ca2:	69bb      	ldr	r3, [r7, #24]
 8012ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ca6:	609a      	str	r2, [r3, #8]

  // checking same method
  for( ;method->next != NULL; method = method->next ) {
 8012ca8:	e019      	b.n	8012cde <op_def+0x11a>
    if( method->next->sym_id == sym_id ) {
 8012caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cac:	689b      	ldr	r3, [r3, #8]
 8012cae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012cb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d10e      	bne.n	8012cd8 <op_def+0x114>
      // Found it. Unchain it in linked list and remove.
      mrbc_method *del_method = method->next;
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	60fb      	str	r3, [r7, #12]

      method->next = del_method->next;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	689a      	ldr	r2, [r3, #8]
 8012cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc6:	609a      	str	r2, [r3, #8]
      if( del_method->type == 'M' ) mrbc_raw_free( del_method );
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b4d      	cmp	r3, #77	; 0x4d
 8012cce:	d10b      	bne.n	8012ce8 <op_def+0x124>
 8012cd0:	68f8      	ldr	r0, [r7, #12]
 8012cd2:	f7ef f8d5 	bl	8001e80 <mrbc_raw_free>

      break;
 8012cd6:	e007      	b.n	8012ce8 <op_def+0x124>
  for( ;method->next != NULL; method = method->next ) {
 8012cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8012cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce0:	689b      	ldr	r3, [r3, #8]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d1e1      	bne.n	8012caa <op_def+0xe6>
 8012ce6:	e000      	b.n	8012cea <op_def+0x126>
      break;
 8012ce8:	bf00      	nop
    }
  }

  mrbc_set_symbol(&regs[a], sym_id);
 8012cea:	6a3b      	ldr	r3, [r7, #32]
 8012cec:	011b      	lsls	r3, r3, #4
 8012cee:	683a      	ldr	r2, [r7, #0]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	2206      	movs	r2, #6
 8012cf4:	701a      	strb	r2, [r3, #0]
 8012cf6:	6a3b      	ldr	r3, [r7, #32]
 8012cf8:	011b      	lsls	r3, r3, #4
 8012cfa:	683a      	ldr	r2, [r7, #0]
 8012cfc:	4413      	add	r3, r2
 8012cfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d02:	609a      	str	r2, [r3, #8]
 8012d04:	e000      	b.n	8012d08 <op_def+0x144>
  if( !method ) return; // ENOMEM
 8012d06:	bf00      	nop
}
 8012d08:	3728      	adds	r7, #40	; 0x28
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}
 8012d0e:	bf00      	nop
 8012d10:	0801a764 	.word	0x0801a764
 8012d14:	0801bff4 	.word	0x0801bff4
 8012d18:	0801a368 	.word	0x0801a368
 8012d1c:	0801a780 	.word	0x0801a780

08012d20 <op_alias>:
/*! OP_ALIAS

  alias_method(target_class,Syms[a],Syms[b])
*/
static inline void op_alias( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b088      	sub	sp, #32
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	691b      	ldr	r3, [r3, #16]
 8012d2e:	1c59      	adds	r1, r3, #1
 8012d30:	687a      	ldr	r2, [r7, #4]
 8012d32:	6111      	str	r1, [r2, #16]
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	61bb      	str	r3, [r7, #24]
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	691b      	ldr	r3, [r3, #16]
 8012d3c:	1c59      	adds	r1, r3, #1
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	6111      	str	r1, [r2, #16]
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	617b      	str	r3, [r7, #20]

  mrbc_sym sym_id_new = mrbc_irep_symbol_id(vm->cur_irep, a);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	68db      	ldr	r3, [r3, #12]
 8012d4a:	f103 0220 	add.w	r2, r3, #32
 8012d4e:	69bb      	ldr	r3, [r7, #24]
 8012d50:	005b      	lsls	r3, r3, #1
 8012d52:	4413      	add	r3, r2
 8012d54:	881b      	ldrh	r3, [r3, #0]
 8012d56:	827b      	strh	r3, [r7, #18]
  mrbc_sym sym_id_org = mrbc_irep_symbol_id(vm->cur_irep, b);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	f103 0220 	add.w	r2, r3, #32
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	005b      	lsls	r3, r3, #1
 8012d64:	4413      	add	r3, r2
 8012d66:	881b      	ldrh	r3, [r3, #0]
 8012d68:	823b      	strh	r3, [r7, #16]
  mrbc_class *cls = vm->target_class;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	699b      	ldr	r3, [r3, #24]
 8012d6e:	60fb      	str	r3, [r7, #12]
  mrbc_method *method = mrbc_raw_alloc( sizeof(mrbc_method) );
 8012d70:	200c      	movs	r0, #12
 8012d72:	f7ee fea9 	bl	8001ac8 <mrbc_raw_alloc>
 8012d76:	61f8      	str	r0, [r7, #28]
  if( !method ) return;	// ENOMEM
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d045      	beq.n	8012e0a <op_alias+0xea>

  if( mrbc_find_method( method, cls, sym_id_org ) == 0 ) {
 8012d7e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012d82:	461a      	mov	r2, r3
 8012d84:	68f9      	ldr	r1, [r7, #12]
 8012d86:	69f8      	ldr	r0, [r7, #28]
 8012d88:	f7f6 fc9a 	bl	80096c0 <mrbc_find_method>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d10e      	bne.n	8012db0 <op_alias+0x90>
    mrbc_raisef(vm, MRBC_CLASS(NameError), "undefined method '%s'",
 8012d92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fa ff52 	bl	800dc40 <mrbc_symid_to_str>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	4a1e      	ldr	r2, [pc, #120]	; (8012e18 <op_alias+0xf8>)
 8012da0:	491e      	ldr	r1, [pc, #120]	; (8012e1c <op_alias+0xfc>)
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f7f8 fb94 	bl	800b4d0 <mrbc_raisef>
		mrbc_symid_to_str(sym_id_org));
    mrbc_raw_free( method );
 8012da8:	69f8      	ldr	r0, [r7, #28]
 8012daa:	f7ef f869 	bl	8001e80 <mrbc_raw_free>
    return;
 8012dae:	e02f      	b.n	8012e10 <op_alias+0xf0>
  }

  method->type = 'M';
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	224d      	movs	r2, #77	; 0x4d
 8012db4:	701a      	strb	r2, [r3, #0]
  method->sym_id = sym_id_new;
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	8a7a      	ldrh	r2, [r7, #18]
 8012dba:	805a      	strh	r2, [r3, #2]
  method->next = cls->method_link;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	689a      	ldr	r2, [r3, #8]
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	609a      	str	r2, [r3, #8]
  cls->method_link = method;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	69fa      	ldr	r2, [r7, #28]
 8012dc8:	609a      	str	r2, [r3, #8]

  // checking same method
  //  see OP_DEF function. same it.
  for( ;method->next != NULL; method = method->next ) {
 8012dca:	e019      	b.n	8012e00 <op_alias+0xe0>
    if( method->next->sym_id == sym_id_new ) {
 8012dcc:	69fb      	ldr	r3, [r7, #28]
 8012dce:	689b      	ldr	r3, [r3, #8]
 8012dd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012dd4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d10e      	bne.n	8012dfa <op_alias+0xda>
      mrbc_method *del_method = method->next;
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	60bb      	str	r3, [r7, #8]
      method->next = del_method->next;
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	689a      	ldr	r2, [r3, #8]
 8012de6:	69fb      	ldr	r3, [r7, #28]
 8012de8:	609a      	str	r2, [r3, #8]
      if( del_method->type == 'M' ) mrbc_raw_free( del_method );
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	2b4d      	cmp	r3, #77	; 0x4d
 8012df0:	d10d      	bne.n	8012e0e <op_alias+0xee>
 8012df2:	68b8      	ldr	r0, [r7, #8]
 8012df4:	f7ef f844 	bl	8001e80 <mrbc_raw_free>
      break;
 8012df8:	e009      	b.n	8012e0e <op_alias+0xee>
  for( ;method->next != NULL; method = method->next ) {
 8012dfa:	69fb      	ldr	r3, [r7, #28]
 8012dfc:	689b      	ldr	r3, [r3, #8]
 8012dfe:	61fb      	str	r3, [r7, #28]
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	689b      	ldr	r3, [r3, #8]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d1e1      	bne.n	8012dcc <op_alias+0xac>
 8012e08:	e002      	b.n	8012e10 <op_alias+0xf0>
  if( !method ) return;	// ENOMEM
 8012e0a:	bf00      	nop
 8012e0c:	e000      	b.n	8012e10 <op_alias+0xf0>
      break;
 8012e0e:	bf00      	nop
    }
  }
}
 8012e10:	3720      	adds	r7, #32
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	0801a7a0 	.word	0x0801a7a0
 8012e1c:	20000174 	.word	0x20000174

08012e20 <op_sclass>:
/*! OP_SCLASS

  R[a] = R[a].singleton_class
*/
static inline void op_sclass( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012e20:	b480      	push	{r7}
 8012e22:	b085      	sub	sp, #20
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  // currently, not supported
  FETCH_B();
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	691b      	ldr	r3, [r3, #16]
 8012e2e:	1c59      	adds	r1, r3, #1
 8012e30:	687a      	ldr	r2, [r7, #4]
 8012e32:	6111      	str	r1, [r2, #16]
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	60fb      	str	r3, [r7, #12]
}
 8012e38:	bf00      	nop
 8012e3a:	3714      	adds	r7, #20
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e42:	4770      	bx	lr

08012e44 <op_tclass>:
/*! OP_TCLASS

  R[a] = target_class
*/
static inline void op_tclass( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	691b      	ldr	r3, [r3, #16]
 8012e52:	1c59      	adds	r1, r3, #1
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	6111      	str	r1, [r2, #16]
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	011b      	lsls	r3, r3, #4
 8012e60:	683a      	ldr	r2, [r7, #0]
 8012e62:	4413      	add	r3, r2
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7fb fb39 	bl	800e4dc <mrbc_decref>
  regs[a].tt = MRBC_TT_CLASS;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	011b      	lsls	r3, r3, #4
 8012e6e:	683a      	ldr	r2, [r7, #0]
 8012e70:	4413      	add	r3, r2
 8012e72:	2207      	movs	r2, #7
 8012e74:	701a      	strb	r2, [r3, #0]
  regs[a].cls = vm->target_class;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	011b      	lsls	r3, r3, #4
 8012e7a:	683a      	ldr	r2, [r7, #0]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	687a      	ldr	r2, [r7, #4]
 8012e80:	6992      	ldr	r2, [r2, #24]
 8012e82:	609a      	str	r2, [r3, #8]
}
 8012e84:	bf00      	nop
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <op_ext>:
  make 1st operand (a) 16bit
  make 2nd operand (b) 16bit
  make 2nd operand (b) 16bit
*/
static inline void op_ext( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
  FETCH_Z();
  mrbc_raise(vm, MRBC_CLASS(Exception),
 8012e96:	4a04      	ldr	r2, [pc, #16]	; (8012ea8 <op_ext+0x1c>)
 8012e98:	4904      	ldr	r1, [pc, #16]	; (8012eac <op_ext+0x20>)
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f7f8 fac4 	bl	800b428 <mrbc_raise>
	     "Not support op_ext. Re-compile with MRBC_SUPPORT_OP_EXT");
}
 8012ea0:	bf00      	nop
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	0801a7b8 	.word	0x0801a7b8
 8012eac:	2000010c 	.word	0x2000010c

08012eb0 <op_stop>:
/*! OP_STOP

  stop VM
*/
static inline void op_stop( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b083      	sub	sp, #12
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
  FETCH_Z();

  vm->flag_preemption = 1;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	70da      	strb	r2, [r3, #3]
  vm->flag_stop = 1;
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	7913      	ldrb	r3, [r2, #4]
 8012ec4:	f043 0302 	orr.w	r3, r3, #2
 8012ec8:	7113      	strb	r3, [r2, #4]
}
 8012eca:	bf00      	nop
 8012ecc:	370c      	adds	r7, #12
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed4:	4770      	bx	lr
	...

08012ed8 <op_unsupported>:

//================================================================
/* Unsupported opecodes
*/
static inline void op_unsupported( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
 8012ee0:	6039      	str	r1, [r7, #0]
  mrbc_raisef( vm, MRBC_CLASS(Exception),
	       "Unimplemented opcode (0x%02x) found.", *(vm->inst - 1));
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	691b      	ldr	r3, [r3, #16]
 8012ee6:	3b01      	subs	r3, #1
 8012ee8:	781b      	ldrb	r3, [r3, #0]
  mrbc_raisef( vm, MRBC_CLASS(Exception),
 8012eea:	4a04      	ldr	r2, [pc, #16]	; (8012efc <op_unsupported+0x24>)
 8012eec:	4904      	ldr	r1, [pc, #16]	; (8012f00 <op_unsupported+0x28>)
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f7f8 faee 	bl	800b4d0 <mrbc_raisef>
}
 8012ef4:	bf00      	nop
 8012ef6:	3708      	adds	r7, #8
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	0801a7f0 	.word	0x0801a7f0
 8012f00:	2000010c 	.word	0x2000010c

08012f04 <mrbc_vm_run>:
  @retval 0	(maybe) preemption by timer.
  @retval 1	program done.
  @retval 2	exception occurred.
*/
int mrbc_vm_run( struct VM *vm )
{
 8012f04:	b590      	push	{r4, r7, lr}
 8012f06:	b08b      	sub	sp, #44	; 0x2c
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
#else
#define EXT
#endif

  while( 1 ) {
    mrbc_value *regs = vm->cur_regs;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	695b      	ldr	r3, [r3, #20]
 8012f10:	623b      	str	r3, [r7, #32]
    uint8_t op = *vm->inst++;		// Dispatch
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	691b      	ldr	r3, [r3, #16]
 8012f16:	1c59      	adds	r1, r3, #1
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	6111      	str	r1, [r2, #16]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	77fb      	strb	r3, [r7, #31]

    switch( op ) {
 8012f20:	7ffb      	ldrb	r3, [r7, #31]
 8012f22:	2b69      	cmp	r3, #105	; 0x69
 8012f24:	f200 82b3 	bhi.w	801348e <mrbc_vm_run+0x58a>
 8012f28:	a201      	add	r2, pc, #4	; (adr r2, 8012f30 <mrbc_vm_run+0x2c>)
 8012f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f2e:	bf00      	nop
 8012f30:	080130d9 	.word	0x080130d9
 8012f34:	080130e3 	.word	0x080130e3
 8012f38:	080130ed 	.word	0x080130ed
 8012f3c:	080130f7 	.word	0x080130f7
 8012f40:	08013101 	.word	0x08013101
 8012f44:	0801310b 	.word	0x0801310b
 8012f48:	0801310b 	.word	0x0801310b
 8012f4c:	0801310b 	.word	0x0801310b
 8012f50:	0801310b 	.word	0x0801310b
 8012f54:	0801310b 	.word	0x0801310b
 8012f58:	0801310b 	.word	0x0801310b
 8012f5c:	0801310b 	.word	0x0801310b
 8012f60:	0801310b 	.word	0x0801310b
 8012f64:	0801310b 	.word	0x0801310b
 8012f68:	08013115 	.word	0x08013115
 8012f6c:	0801311f 	.word	0x0801311f
 8012f70:	08013129 	.word	0x08013129
 8012f74:	08013133 	.word	0x08013133
 8012f78:	0801313d 	.word	0x0801313d
 8012f7c:	08013147 	.word	0x08013147
 8012f80:	08013151 	.word	0x08013151
 8012f84:	0801315b 	.word	0x0801315b
 8012f88:	08013165 	.word	0x08013165
 8012f8c:	0801316f 	.word	0x0801316f
 8012f90:	08013179 	.word	0x08013179
 8012f94:	08013183 	.word	0x08013183
 8012f98:	0801318d 	.word	0x0801318d
 8012f9c:	08013197 	.word	0x08013197
 8012fa0:	080131a1 	.word	0x080131a1
 8012fa4:	080131ab 	.word	0x080131ab
 8012fa8:	080131b5 	.word	0x080131b5
 8012fac:	080131bf 	.word	0x080131bf
 8012fb0:	080131c9 	.word	0x080131c9
 8012fb4:	080131d3 	.word	0x080131d3
 8012fb8:	080131dd 	.word	0x080131dd
 8012fbc:	080131e7 	.word	0x080131e7
 8012fc0:	080131f1 	.word	0x080131f1
 8012fc4:	080131fb 	.word	0x080131fb
 8012fc8:	08013205 	.word	0x08013205
 8012fcc:	0801320f 	.word	0x0801320f
 8012fd0:	08013219 	.word	0x08013219
 8012fd4:	08013223 	.word	0x08013223
 8012fd8:	0801322d 	.word	0x0801322d
 8012fdc:	08013237 	.word	0x08013237
 8012fe0:	08013241 	.word	0x08013241
 8012fe4:	0801324b 	.word	0x0801324b
 8012fe8:	08013255 	.word	0x08013255
 8012fec:	0801325f 	.word	0x0801325f
 8012ff0:	08013269 	.word	0x08013269
 8012ff4:	08013273 	.word	0x08013273
 8012ff8:	0801327d 	.word	0x0801327d
 8012ffc:	08013287 	.word	0x08013287
 8013000:	08013291 	.word	0x08013291
 8013004:	0801329b 	.word	0x0801329b
 8013008:	080132a5 	.word	0x080132a5
 801300c:	080132af 	.word	0x080132af
 8013010:	080132b9 	.word	0x080132b9
 8013014:	080132c3 	.word	0x080132c3
 8013018:	080132cd 	.word	0x080132cd
 801301c:	080132d7 	.word	0x080132d7
 8013020:	080132e1 	.word	0x080132e1
 8013024:	080132eb 	.word	0x080132eb
 8013028:	080132f5 	.word	0x080132f5
 801302c:	080132ff 	.word	0x080132ff
 8013030:	08013309 	.word	0x08013309
 8013034:	08013313 	.word	0x08013313
 8013038:	0801331d 	.word	0x0801331d
 801303c:	08013327 	.word	0x08013327
 8013040:	08013331 	.word	0x08013331
 8013044:	0801333b 	.word	0x0801333b
 8013048:	08013345 	.word	0x08013345
 801304c:	0801334f 	.word	0x0801334f
 8013050:	08013359 	.word	0x08013359
 8013054:	08013363 	.word	0x08013363
 8013058:	0801336d 	.word	0x0801336d
 801305c:	08013377 	.word	0x08013377
 8013060:	08013381 	.word	0x08013381
 8013064:	0801338b 	.word	0x0801338b
 8013068:	08013395 	.word	0x08013395
 801306c:	0801339f 	.word	0x0801339f
 8013070:	080133a9 	.word	0x080133a9
 8013074:	080133b3 	.word	0x080133b3
 8013078:	080133bd 	.word	0x080133bd
 801307c:	080133c7 	.word	0x080133c7
 8013080:	080133d1 	.word	0x080133d1
 8013084:	080133db 	.word	0x080133db
 8013088:	080133e5 	.word	0x080133e5
 801308c:	080133ef 	.word	0x080133ef
 8013090:	080133ef 	.word	0x080133ef
 8013094:	080133f9 	.word	0x080133f9
 8013098:	08013403 	.word	0x08013403
 801309c:	0801340d 	.word	0x0801340d
 80130a0:	08013417 	.word	0x08013417
 80130a4:	08013421 	.word	0x08013421
 80130a8:	0801342b 	.word	0x0801342b
 80130ac:	08013435 	.word	0x08013435
 80130b0:	0801343f 	.word	0x0801343f
 80130b4:	08013449 	.word	0x08013449
 80130b8:	08013453 	.word	0x08013453
 80130bc:	0801345d 	.word	0x0801345d
 80130c0:	08013467 	.word	0x08013467
 80130c4:	08013471 	.word	0x08013471
 80130c8:	0801347b 	.word	0x0801347b
 80130cc:	0801347b 	.word	0x0801347b
 80130d0:	0801347b 	.word	0x0801347b
 80130d4:	08013485 	.word	0x08013485
    case OP_NOP:        op_nop        (vm, regs EXT); break;
 80130d8:	6a39      	ldr	r1, [r7, #32]
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f7fb ff5e 	bl	800ef9c <op_nop>
 80130e0:	e1da      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_MOVE:       op_move       (vm, regs EXT); break;
 80130e2:	6a39      	ldr	r1, [r7, #32]
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f7fb ff64 	bl	800efb2 <op_move>
 80130ea:	e1d5      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADL:      op_loadl      (vm, regs EXT); break;
 80130ec:	6a39      	ldr	r1, [r7, #32]
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f7fb ff91 	bl	800f016 <op_loadl>
 80130f4:	e1d0      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADI:      op_loadi      (vm, regs EXT); break;
 80130f6:	6a39      	ldr	r1, [r7, #32]
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f7fb ffb9 	bl	800f070 <op_loadi>
 80130fe:	e1cb      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADINEG:   op_loadineg   (vm, regs EXT); break;
 8013100:	6a39      	ldr	r1, [r7, #32]
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f7fb ffde 	bl	800f0c4 <op_loadineg>
 8013108:	e1c6      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADI_2:    // fall through
    case OP_LOADI_3:    // fall through
    case OP_LOADI_4:    // fall through
    case OP_LOADI_5:    // fall through
    case OP_LOADI_6:    // fall through
    case OP_LOADI_7:    op_loadi_n    (vm, regs EXT); break;
 801310a:	6a39      	ldr	r1, [r7, #32]
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f7fc f804 	bl	800f11a <op_loadi_n>
 8013112:	e1c1      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADI16:    op_loadi16    (vm, regs EXT); break;
 8013114:	6a39      	ldr	r1, [r7, #32]
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f7fc f82a 	bl	800f170 <op_loadi16>
 801311c:	e1bc      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADI32:    op_loadi32    (vm, regs EXT); break;
 801311e:	6a39      	ldr	r1, [r7, #32]
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f7fc f85c 	bl	800f1de <op_loadi32>
 8013126:	e1b7      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADSYM:    op_loadsym    (vm, regs EXT); break;
 8013128:	6a39      	ldr	r1, [r7, #32]
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f7fc f89f 	bl	800f26e <op_loadsym>
 8013130:	e1b2      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADNIL:    op_loadnil    (vm, regs EXT); break;
 8013132:	6a39      	ldr	r1, [r7, #32]
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f7fc f8cd 	bl	800f2d4 <op_loadnil>
 801313a:	e1ad      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADSELF:   op_loadself   (vm, regs EXT); break;
 801313c:	6a39      	ldr	r1, [r7, #32]
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7fc f8e5 	bl	800f30e <op_loadself>
 8013144:	e1a8      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADT:      op_loadt      (vm, regs EXT); break;
 8013146:	6a39      	ldr	r1, [r7, #32]
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f7fc f90c 	bl	800f366 <op_loadt>
 801314e:	e1a3      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LOADF:      op_loadf      (vm, regs EXT); break;
 8013150:	6a39      	ldr	r1, [r7, #32]
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f7fc f924 	bl	800f3a0 <op_loadf>
 8013158:	e19e      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GETGV:      op_getgv      (vm, regs EXT); break;
 801315a:	6a39      	ldr	r1, [r7, #32]
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f7fc f93c 	bl	800f3da <op_getgv>
 8013162:	e199      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SETGV:      op_setgv      (vm, regs EXT); break;
 8013164:	6a39      	ldr	r1, [r7, #32]
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f7fc f978 	bl	800f45c <op_setgv>
 801316c:	e194      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GETSV:      op_unsupported(vm, regs EXT); break; // not implemented.
 801316e:	6a39      	ldr	r1, [r7, #32]
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f7ff feb1 	bl	8012ed8 <op_unsupported>
 8013176:	e18f      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SETSV:      op_unsupported(vm, regs EXT); break; // not implemented.
 8013178:	6a39      	ldr	r1, [r7, #32]
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f7ff feac 	bl	8012ed8 <op_unsupported>
 8013180:	e18a      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GETIV:      op_getiv      (vm, regs EXT); break;
 8013182:	6a39      	ldr	r1, [r7, #32]
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f7fc f997 	bl	800f4b8 <op_getiv>
 801318a:	e185      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SETIV:      op_setiv      (vm, regs EXT); break;
 801318c:	6a39      	ldr	r1, [r7, #32]
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f7fc f9e6 	bl	800f560 <op_setiv>
 8013194:	e180      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GETCV:      op_unsupported(vm, regs EXT); break; // not implemented.
 8013196:	6a39      	ldr	r1, [r7, #32]
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f7ff fe9d 	bl	8012ed8 <op_unsupported>
 801319e:	e17b      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SETCV:      op_unsupported(vm, regs EXT); break; // not implemented.
 80131a0:	6a39      	ldr	r1, [r7, #32]
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f7ff fe98 	bl	8012ed8 <op_unsupported>
 80131a8:	e176      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GETCONST:   op_getconst   (vm, regs EXT); break;
 80131aa:	6a39      	ldr	r1, [r7, #32]
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f7fc fa1f 	bl	800f5f0 <op_getconst>
 80131b2:	e171      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SETCONST:   op_setconst   (vm, regs EXT); break;
 80131b4:	6a39      	ldr	r1, [r7, #32]
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f7fc fabe 	bl	800f738 <op_setconst>
 80131bc:	e16c      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GETMCNST:   op_getmcnst   (vm, regs EXT); break;
 80131be:	6a39      	ldr	r1, [r7, #32]
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f7fc fafb 	bl	800f7bc <op_getmcnst>
 80131c6:	e167      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SETMCNST:   op_unsupported(vm, regs EXT); break; // not implemented.
 80131c8:	6a39      	ldr	r1, [r7, #32]
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7ff fe84 	bl	8012ed8 <op_unsupported>
 80131d0:	e162      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GETUPVAR:   op_getupvar   (vm, regs EXT); break;
 80131d2:	6a39      	ldr	r1, [r7, #32]
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7fc fb59 	bl	800f88c <op_getupvar>
 80131da:	e15d      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SETUPVAR:   op_setupvar   (vm, regs EXT); break;
 80131dc:	6a39      	ldr	r1, [r7, #32]
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f7fc fbd8 	bl	800f994 <op_setupvar>
 80131e4:	e158      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GETIDX:     op_getidx     (vm, regs EXT); break;
 80131e6:	6a39      	ldr	r1, [r7, #32]
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7fc fc5f 	bl	800faac <op_getidx>
 80131ee:	e153      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SETIDX:     op_setidx     (vm, regs EXT); break;
 80131f0:	6a39      	ldr	r1, [r7, #32]
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f7fc fc70 	bl	800fad8 <op_setidx>
 80131f8:	e14e      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_JMP:        op_jmp        (vm, regs EXT); break;
 80131fa:	6a39      	ldr	r1, [r7, #32]
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f7fc fc81 	bl	800fb04 <op_jmp>
 8013202:	e149      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_JMPIF:      op_jmpif      (vm, regs EXT); break;
 8013204:	6a39      	ldr	r1, [r7, #32]
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7fc fc9f 	bl	800fb4a <op_jmpif>
 801320c:	e144      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_JMPNOT:     op_jmpnot     (vm, regs EXT); break;
 801320e:	6a39      	ldr	r1, [r7, #32]
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f7fc fccc 	bl	800fbae <op_jmpnot>
 8013216:	e13f      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_JMPNIL:     op_jmpnil     (vm, regs EXT); break;
 8013218:	6a39      	ldr	r1, [r7, #32]
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f7fc fcf9 	bl	800fc12 <op_jmpnil>
 8013220:	e13a      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_JMPUW:      op_jmpuw      (vm, regs EXT); break;
 8013222:	6a39      	ldr	r1, [r7, #32]
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7fc fd27 	bl	800fc78 <op_jmpuw>
 801322a:	e135      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_EXCEPT:     op_except     (vm, regs EXT); break;
 801322c:	6a39      	ldr	r1, [r7, #32]
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f7fc fd8e 	bl	800fd50 <op_except>
 8013234:	e130      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_RESCUE:     op_rescue     (vm, regs EXT); break;
 8013236:	6a39      	ldr	r1, [r7, #32]
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f7fc fdaf 	bl	800fd9c <op_rescue>
 801323e:	e12b      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_RAISEIF:    op_raiseif    (vm, regs EXT); break;
 8013240:	6a39      	ldr	r1, [r7, #32]
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f7fc fe00 	bl	800fe48 <op_raiseif>
 8013248:	e126      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SSEND:      op_ssend      (vm, regs EXT); break;
 801324a:	6a39      	ldr	r1, [r7, #32]
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f7fc ffe3 	bl	8010218 <op_ssend>
 8013252:	e121      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SSENDB:     op_ssendb     (vm, regs EXT); break;
 8013254:	6a39      	ldr	r1, [r7, #32]
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f7fd f826 	bl	80102a8 <op_ssendb>
 801325c:	e11c      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SEND:       op_send       (vm, regs EXT); break;
 801325e:	6a39      	ldr	r1, [r7, #32]
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f7fd f86b 	bl	801033c <op_send>
 8013266:	e117      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SENDB:      op_sendb      (vm, regs EXT); break;
 8013268:	6a39      	ldr	r1, [r7, #32]
 801326a:	6878      	ldr	r0, [r7, #4]
 801326c:	f7fd f892 	bl	8010394 <op_sendb>
 8013270:	e112      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_CALL:       op_unsupported(vm, regs EXT); break; // not implemented.
 8013272:	6a39      	ldr	r1, [r7, #32]
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f7ff fe2f 	bl	8012ed8 <op_unsupported>
 801327a:	e10d      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SUPER:      op_super      (vm, regs EXT); break;
 801327c:	6a39      	ldr	r1, [r7, #32]
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f7fd f8b6 	bl	80103f0 <op_super>
 8013284:	e108      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ARGARY:     op_argary     (vm, regs EXT); break;
 8013286:	6a39      	ldr	r1, [r7, #32]
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f7fd fa3d 	bl	8010708 <op_argary>
 801328e:	e103      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ENTER:      op_enter      (vm, regs EXT); break;
 8013290:	6a39      	ldr	r1, [r7, #32]
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f7fd fb60 	bl	8010958 <op_enter>
 8013298:	e0fe      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_KEY_P:      op_key_p      (vm, regs EXT); break;
 801329a:	6a39      	ldr	r1, [r7, #32]
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f7fd fdc3 	bl	8010e28 <op_key_p>
 80132a2:	e0f9      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_KEYEND:     op_keyend     (vm, regs EXT); break;
 80132a4:	6a39      	ldr	r1, [r7, #32]
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f7fd fe00 	bl	8010eac <op_keyend>
 80132ac:	e0f4      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_KARG:       op_karg       (vm, regs EXT); break;
 80132ae:	6a39      	ldr	r1, [r7, #32]
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f7fd fe2d 	bl	8010f10 <op_karg>
 80132b6:	e0ef      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_RETURN:     op_return     (vm, regs EXT); break;
 80132b8:	6a39      	ldr	r1, [r7, #32]
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	f7fd ff0a 	bl	80110d4 <op_return>
 80132c0:	e0ea      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_RETURN_BLK: op_return_blk (vm, regs EXT); break;
 80132c2:	6a39      	ldr	r1, [r7, #32]
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f7fd ff1b 	bl	8011100 <op_return_blk>
 80132ca:	e0e5      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_BREAK:      op_break      (vm, regs EXT); break;
 80132cc:	6a39      	ldr	r1, [r7, #32]
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f7fd ffb2 	bl	8011238 <op_break>
 80132d4:	e0e0      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_BLKPUSH:    op_blkpush    (vm, regs EXT); break;
 80132d6:	6a39      	ldr	r1, [r7, #32]
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7fe f845 	bl	8011368 <op_blkpush>
 80132de:	e0db      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ADD:        op_add        (vm, regs EXT); break;
 80132e0:	6a39      	ldr	r1, [r7, #32]
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f7fe f8d8 	bl	8011498 <op_add>
 80132e8:	e0d6      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ADDI:       op_addi       (vm, regs EXT); break;
 80132ea:	6a39      	ldr	r1, [r7, #32]
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7fe f985 	bl	80115fc <op_addi>
 80132f2:	e0d1      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SUB:        op_sub        (vm, regs EXT); break;
 80132f4:	6a39      	ldr	r1, [r7, #32]
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f7fe f9d6 	bl	80116a8 <op_sub>
 80132fc:	e0cc      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SUBI:       op_subi       (vm, regs EXT); break;
 80132fe:	6a39      	ldr	r1, [r7, #32]
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f7fe fa83 	bl	801180c <op_subi>
 8013306:	e0c7      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_MUL:        op_mul        (vm, regs EXT); break;
 8013308:	6a39      	ldr	r1, [r7, #32]
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f7fe fad4 	bl	80118b8 <op_mul>
 8013310:	e0c2      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_DIV:        op_div        (vm, regs EXT); break;
 8013312:	6a39      	ldr	r1, [r7, #32]
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f7fe fb81 	bl	8011a1c <op_div>
 801331a:	e0bd      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_EQ:         op_eq         (vm, regs EXT); break;
 801331c:	6a39      	ldr	r1, [r7, #32]
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f7fe fc3e 	bl	8011ba0 <op_eq>
 8013324:	e0b8      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LT:         op_lt         (vm, regs EXT); break;
 8013326:	6a39      	ldr	r1, [r7, #32]
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f7fe fc77 	bl	8011c1c <op_lt>
 801332e:	e0b3      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LE:         op_le         (vm, regs EXT); break;
 8013330:	6a39      	ldr	r1, [r7, #32]
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f7fe fcb0 	bl	8011c98 <op_le>
 8013338:	e0ae      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GT:         op_gt         (vm, regs EXT); break;
 801333a:	6a39      	ldr	r1, [r7, #32]
 801333c:	6878      	ldr	r0, [r7, #4]
 801333e:	f7fe fce9 	bl	8011d14 <op_gt>
 8013342:	e0a9      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_GE:         op_ge         (vm, regs EXT); break;
 8013344:	6a39      	ldr	r1, [r7, #32]
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f7fe fd22 	bl	8011d90 <op_ge>
 801334c:	e0a4      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ARRAY:      op_array      (vm, regs EXT); break;
 801334e:	6a39      	ldr	r1, [r7, #32]
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f7fe fd5b 	bl	8011e0c <op_array>
 8013356:	e09f      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ARRAY2:     op_array2     (vm, regs EXT); break;
 8013358:	6a39      	ldr	r1, [r7, #32]
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f7fe fda2 	bl	8011ea4 <op_array2>
 8013360:	e09a      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ARYCAT:     op_arycat     (vm, regs EXT); break;
 8013362:	6a39      	ldr	r1, [r7, #32]
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f7fe fdff 	bl	8011f68 <op_arycat>
 801336a:	e095      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ARYPUSH:    op_arypush    (vm, regs EXT); break;
 801336c:	6a39      	ldr	r1, [r7, #32]
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f7fe fec4 	bl	80120fc <op_arypush>
 8013374:	e090      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ARYDUP:     op_arydup     (vm, regs EXT); break;
 8013376:	6a39      	ldr	r1, [r7, #32]
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f7fe ff17 	bl	80121ac <op_arydup>
 801337e:	e08b      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_AREF:       op_aref       (vm, regs EXT); break;
 8013380:	6a39      	ldr	r1, [r7, #32]
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f7fe ff3d 	bl	8012202 <op_aref>
 8013388:	e086      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ASET:       op_aset       (vm, regs EXT); break;
 801338a:	6a39      	ldr	r1, [r7, #32]
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f7fe ff87 	bl	80122a0 <op_aset>
 8013392:	e081      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_APOST:      op_apost      (vm, regs EXT); break;
 8013394:	6a39      	ldr	r1, [r7, #32]
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f7fe ffc8 	bl	801232c <op_apost>
 801339c:	e07c      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_INTERN:     op_intern     (vm, regs EXT); break;
 801339e:	6a39      	ldr	r1, [r7, #32]
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f7ff f873 	bl	801248c <op_intern>
 80133a6:	e077      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SYMBOL:     op_symbol     (vm, regs EXT); break;
 80133a8:	6a39      	ldr	r1, [r7, #32]
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f7ff f8b0 	bl	8012510 <op_symbol>
 80133b0:	e072      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_STRING:     op_string     (vm, regs EXT); break;
 80133b2:	6a39      	ldr	r1, [r7, #32]
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7ff f8ff 	bl	80125b8 <op_string>
 80133ba:	e06d      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_STRCAT:     op_strcat     (vm, regs EXT); break;
 80133bc:	6a39      	ldr	r1, [r7, #32]
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7ff f927 	bl	8012612 <op_strcat>
 80133c4:	e068      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_HASH:       op_hash       (vm, regs EXT); break;
 80133c6:	6a39      	ldr	r1, [r7, #32]
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f7ff f967 	bl	801269c <op_hash>
 80133ce:	e063      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_HASHADD:    op_hashadd    (vm, regs EXT); break;
 80133d0:	6a39      	ldr	r1, [r7, #32]
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f7ff f9b1 	bl	801273a <op_hashadd>
 80133d8:	e05e      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_HASHCAT:    op_hashcat    (vm, regs EXT); break;
 80133da:	6a39      	ldr	r1, [r7, #32]
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7ff fa07 	bl	80127f0 <op_hashcat>
 80133e2:	e059      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_LAMBDA:     op_unsupported(vm, regs EXT); break; // not implemented.
 80133e4:	6a39      	ldr	r1, [r7, #32]
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f7ff fd76 	bl	8012ed8 <op_unsupported>
 80133ec:	e054      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_BLOCK:      // fall through
    case OP_METHOD:     op_method     (vm, regs EXT); break;
 80133ee:	6a39      	ldr	r1, [r7, #32]
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f7ff fa3a 	bl	801286a <op_method>
 80133f6:	e04f      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_RANGE_INC:  op_range_inc  (vm, regs EXT); break;
 80133f8:	6a39      	ldr	r1, [r7, #32]
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f7ff fa75 	bl	80128ea <op_range_inc>
 8013400:	e04a      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_RANGE_EXC:  op_range_exc  (vm, regs EXT); break;
 8013402:	6a39      	ldr	r1, [r7, #32]
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7ff faa2 	bl	801294e <op_range_exc>
 801340a:	e045      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_OCLASS:     op_oclass     (vm, regs EXT); break;
 801340c:	6a39      	ldr	r1, [r7, #32]
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f7ff fad0 	bl	80129b4 <op_oclass>
 8013414:	e040      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_CLASS:      op_class      (vm, regs EXT); break;
 8013416:	6a39      	ldr	r1, [r7, #32]
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f7ff faf1 	bl	8012a00 <op_class>
 801341e:	e03b      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_MODULE:     op_unsupported(vm, regs EXT); break; // not implemented.
 8013420:	6a39      	ldr	r1, [r7, #32]
 8013422:	6878      	ldr	r0, [r7, #4]
 8013424:	f7ff fd58 	bl	8012ed8 <op_unsupported>
 8013428:	e036      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_EXEC:       op_exec       (vm, regs EXT); break;
 801342a:	6a39      	ldr	r1, [r7, #32]
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7ff fb73 	bl	8012b18 <op_exec>
 8013432:	e031      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_DEF:        op_def        (vm, regs EXT); break;
 8013434:	6a39      	ldr	r1, [r7, #32]
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f7ff fbc4 	bl	8012bc4 <op_def>
 801343c:	e02c      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ALIAS:      op_alias      (vm, regs EXT); break;
 801343e:	6a39      	ldr	r1, [r7, #32]
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f7ff fc6d 	bl	8012d20 <op_alias>
 8013446:	e027      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_UNDEF:      op_unsupported(vm, regs EXT); break; // not implemented.
 8013448:	6a39      	ldr	r1, [r7, #32]
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7ff fd44 	bl	8012ed8 <op_unsupported>
 8013450:	e022      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_SCLASS:     op_sclass     (vm, regs EXT); break;
 8013452:	6a39      	ldr	r1, [r7, #32]
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f7ff fce3 	bl	8012e20 <op_sclass>
 801345a:	e01d      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_TCLASS:     op_tclass     (vm, regs EXT); break;
 801345c:	6a39      	ldr	r1, [r7, #32]
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f7ff fcf0 	bl	8012e44 <op_tclass>
 8013464:	e018      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_DEBUG:      op_unsupported(vm, regs EXT); break; // not implemented.
 8013466:	6a39      	ldr	r1, [r7, #32]
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f7ff fd35 	bl	8012ed8 <op_unsupported>
 801346e:	e013      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_ERR:        op_unsupported(vm, regs EXT); break; // not implemented.
 8013470:	6a39      	ldr	r1, [r7, #32]
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f7ff fd30 	bl	8012ed8 <op_unsupported>
 8013478:	e00e      	b.n	8013498 <mrbc_vm_run+0x594>
    case OP_EXT2:       ext = 2; continue;
    case OP_EXT3:       ext = 3; continue;
#else
    case OP_EXT1:       // fall through
    case OP_EXT2:       // fall through
    case OP_EXT3:       op_ext        (vm, regs EXT); break;
 801347a:	6a39      	ldr	r1, [r7, #32]
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f7ff fd05 	bl	8012e8c <op_ext>
 8013482:	e009      	b.n	8013498 <mrbc_vm_run+0x594>
#endif
    case OP_STOP:       op_stop       (vm, regs EXT); break;
 8013484:	6a39      	ldr	r1, [r7, #32]
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f7ff fd12 	bl	8012eb0 <op_stop>
 801348c:	e004      	b.n	8013498 <mrbc_vm_run+0x594>
    default:		op_unsupported(vm, regs EXT); break;
 801348e:	6a39      	ldr	r1, [r7, #32]
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f7ff fd21 	bl	8012ed8 <op_unsupported>
 8013496:	bf00      	nop

#undef EXT
#if defined(MRBC_SUPPORT_OP_EXT)
    ext = 0;
#endif
    if( !vm->flag_preemption ) continue;	// execute next ope code.
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	78db      	ldrb	r3, [r3, #3]
 801349c:	b25b      	sxtb	r3, r3
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d05c      	beq.n	801355c <mrbc_vm_run+0x658>
    if( !mrbc_israised(vm) ) return vm->flag_stop; // normal return.
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80134a8:	2b0e      	cmp	r3, #14
 80134aa:	d005      	beq.n	80134b8 <mrbc_vm_run+0x5b4>
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	791b      	ldrb	r3, [r3, #4]
 80134b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80134b4:	b2db      	uxtb	r3, r3
 80134b6:	e053      	b.n	8013560 <mrbc_vm_run+0x65c>
    vm->flag_preemption = 0;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2200      	movs	r2, #0
 80134bc:	70da      	strb	r2, [r3, #3]

    // Handle exception
    const mrbc_irep_catch_handler *handler;

    while( 1 ) {
      const mrbc_irep *irep = vm->cur_irep;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	68db      	ldr	r3, [r3, #12]
 80134c2:	61bb      	str	r3, [r7, #24]
      const mrbc_irep_catch_handler *catch_table =
	(const mrbc_irep_catch_handler *)(irep->inst + irep->ilen);
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	699a      	ldr	r2, [r3, #24]
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	68db      	ldr	r3, [r3, #12]
      const mrbc_irep_catch_handler *catch_table =
 80134cc:	4413      	add	r3, r2
 80134ce:	617b      	str	r3, [r7, #20]
      uint32_t inst = vm->inst - irep->inst;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	691a      	ldr	r2, [r3, #16]
 80134d4:	69bb      	ldr	r3, [r7, #24]
 80134d6:	699b      	ldr	r3, [r3, #24]
 80134d8:	1ad3      	subs	r3, r2, r3
 80134da:	613b      	str	r3, [r7, #16]
      int cnt = irep->clen;
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	891b      	ldrh	r3, [r3, #8]
 80134e0:	627b      	str	r3, [r7, #36]	; 0x24

      for( cnt--; cnt >= 0 ; cnt-- ) {
 80134e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e4:	3b01      	subs	r3, #1
 80134e6:	627b      	str	r3, [r7, #36]	; 0x24
 80134e8:	e01d      	b.n	8013526 <mrbc_vm_run+0x622>
	handler = catch_table + cnt;
 80134ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134ec:	4613      	mov	r3, r2
 80134ee:	005b      	lsls	r3, r3, #1
 80134f0:	4413      	add	r3, r2
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	4413      	add	r3, r2
 80134f6:	697a      	ldr	r2, [r7, #20]
 80134f8:	4413      	add	r3, r2
 80134fa:	60fb      	str	r3, [r7, #12]
	if( (bin_to_uint32(handler->begin) < inst) &&
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	3301      	adds	r3, #1
 8013500:	4618      	mov	r0, r3
 8013502:	f7fb f925 	bl	800e750 <bin_to_uint32>
 8013506:	4602      	mov	r2, r0
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	4293      	cmp	r3, r2
 801350c:	d908      	bls.n	8013520 <mrbc_vm_run+0x61c>
	    (inst <= bin_to_uint32(handler->end)) ) goto JUMP_TO_HANDLER;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	3305      	adds	r3, #5
 8013512:	4618      	mov	r0, r3
 8013514:	f7fb f91c 	bl	800e750 <bin_to_uint32>
 8013518:	4602      	mov	r2, r0
	if( (bin_to_uint32(handler->begin) < inst) &&
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	4293      	cmp	r3, r2
 801351e:	d90f      	bls.n	8013540 <mrbc_vm_run+0x63c>
      for( cnt--; cnt >= 0 ; cnt-- ) {
 8013520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013522:	3b01      	subs	r3, #1
 8013524:	627b      	str	r3, [r7, #36]	; 0x24
 8013526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013528:	2b00      	cmp	r3, #0
 801352a:	dade      	bge.n	80134ea <mrbc_vm_run+0x5e6>
      }

      if( !vm->callinfo_tail ) return 2;	// return due to exception.
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	69db      	ldr	r3, [r3, #28]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d101      	bne.n	8013538 <mrbc_vm_run+0x634>
 8013534:	2302      	movs	r3, #2
 8013536:	e013      	b.n	8013560 <mrbc_vm_run+0x65c>
      mrbc_pop_callinfo( vm );
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f7fb fb5b 	bl	800ebf4 <mrbc_pop_callinfo>
    while( 1 ) {
 801353e:	e7be      	b.n	80134be <mrbc_vm_run+0x5ba>
	    (inst <= bin_to_uint32(handler->end)) ) goto JUMP_TO_HANDLER;
 8013540:	bf00      	nop
    }

  JUMP_TO_HANDLER:
    // jump to handler (rescue or ensure).
    vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	68db      	ldr	r3, [r3, #12]
 8013546:	699c      	ldr	r4, [r3, #24]
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	3309      	adds	r3, #9
 801354c:	4618      	mov	r0, r3
 801354e:	f7fb f8ff 	bl	800e750 <bin_to_uint32>
 8013552:	4603      	mov	r3, r0
 8013554:	18e2      	adds	r2, r4, r3
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	611a      	str	r2, [r3, #16]
 801355a:	e4d7      	b.n	8012f0c <mrbc_vm_run+0x8>
    if( !vm->flag_preemption ) continue;	// execute next ope code.
 801355c:	bf00      	nop
  while( 1 ) {
 801355e:	e4d5      	b.n	8012f0c <mrbc_vm_run+0x8>
  }
}
 8013560:	4618      	mov	r0, r3
 8013562:	372c      	adds	r7, #44	; 0x2c
 8013564:	46bd      	mov	sp, r7
 8013566:	bd90      	pop	{r4, r7, pc}

08013568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8013568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80135a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 801356c:	f7ee f852 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8013570:	480c      	ldr	r0, [pc, #48]	; (80135a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8013572:	490d      	ldr	r1, [pc, #52]	; (80135a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8013574:	4a0d      	ldr	r2, [pc, #52]	; (80135ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8013576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013578:	e002      	b.n	8013580 <LoopCopyDataInit>

0801357a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801357a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801357c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801357e:	3304      	adds	r3, #4

08013580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013584:	d3f9      	bcc.n	801357a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013586:	4a0a      	ldr	r2, [pc, #40]	; (80135b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8013588:	4c0a      	ldr	r4, [pc, #40]	; (80135b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 801358a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801358c:	e001      	b.n	8013592 <LoopFillZerobss>

0801358e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801358e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013590:	3204      	adds	r2, #4

08013592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013594:	d3fb      	bcc.n	801358e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8013596:	f003 f907 	bl	80167a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801359a:	f7ed fceb 	bl	8000f74 <main>
  bx  lr    
 801359e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80135a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80135a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80135a8:	2000077c 	.word	0x2000077c
  ldr r2, =_sidata
 80135ac:	0801c3c8 	.word	0x0801c3c8
  ldr r2, =_sbss
 80135b0:	2000077c 	.word	0x2000077c
  ldr r4, =_ebss
 80135b4:	200089a4 	.word	0x200089a4

080135b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80135b8:	e7fe      	b.n	80135b8 <ADC_IRQHandler>
	...

080135bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80135c0:	4b0e      	ldr	r3, [pc, #56]	; (80135fc <HAL_Init+0x40>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	4a0d      	ldr	r2, [pc, #52]	; (80135fc <HAL_Init+0x40>)
 80135c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80135ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80135cc:	4b0b      	ldr	r3, [pc, #44]	; (80135fc <HAL_Init+0x40>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	4a0a      	ldr	r2, [pc, #40]	; (80135fc <HAL_Init+0x40>)
 80135d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80135d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80135d8:	4b08      	ldr	r3, [pc, #32]	; (80135fc <HAL_Init+0x40>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	4a07      	ldr	r2, [pc, #28]	; (80135fc <HAL_Init+0x40>)
 80135de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80135e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80135e4:	2003      	movs	r0, #3
 80135e6:	f000 f94f 	bl	8013888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80135ea:	2000      	movs	r0, #0
 80135ec:	f000 f808 	bl	8013600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80135f0:	f7ed fe80 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80135f4:	2300      	movs	r3, #0
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	40023c00 	.word	0x40023c00

08013600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013608:	4b12      	ldr	r3, [pc, #72]	; (8013654 <HAL_InitTick+0x54>)
 801360a:	681a      	ldr	r2, [r3, #0]
 801360c:	4b12      	ldr	r3, [pc, #72]	; (8013658 <HAL_InitTick+0x58>)
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	4619      	mov	r1, r3
 8013612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013616:	fbb3 f3f1 	udiv	r3, r3, r1
 801361a:	fbb2 f3f3 	udiv	r3, r2, r3
 801361e:	4618      	mov	r0, r3
 8013620:	f000 f967 	bl	80138f2 <HAL_SYSTICK_Config>
 8013624:	4603      	mov	r3, r0
 8013626:	2b00      	cmp	r3, #0
 8013628:	d001      	beq.n	801362e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801362a:	2301      	movs	r3, #1
 801362c:	e00e      	b.n	801364c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2b0f      	cmp	r3, #15
 8013632:	d80a      	bhi.n	801364a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013634:	2200      	movs	r2, #0
 8013636:	6879      	ldr	r1, [r7, #4]
 8013638:	f04f 30ff 	mov.w	r0, #4294967295
 801363c:	f000 f92f 	bl	801389e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013640:	4a06      	ldr	r2, [pc, #24]	; (801365c <HAL_InitTick+0x5c>)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013646:	2300      	movs	r3, #0
 8013648:	e000      	b.n	801364c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801364a:	2301      	movs	r3, #1
}
 801364c:	4618      	mov	r0, r3
 801364e:	3708      	adds	r7, #8
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	20000000 	.word	0x20000000
 8013658:	200005b0 	.word	0x200005b0
 801365c:	200005ac 	.word	0x200005ac

08013660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013660:	b480      	push	{r7}
 8013662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013664:	4b06      	ldr	r3, [pc, #24]	; (8013680 <HAL_IncTick+0x20>)
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	461a      	mov	r2, r3
 801366a:	4b06      	ldr	r3, [pc, #24]	; (8013684 <HAL_IncTick+0x24>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4413      	add	r3, r2
 8013670:	4a04      	ldr	r2, [pc, #16]	; (8013684 <HAL_IncTick+0x24>)
 8013672:	6013      	str	r3, [r2, #0]
}
 8013674:	bf00      	nop
 8013676:	46bd      	mov	sp, r7
 8013678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367c:	4770      	bx	lr
 801367e:	bf00      	nop
 8013680:	200005b0 	.word	0x200005b0
 8013684:	20008854 	.word	0x20008854

08013688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013688:	b480      	push	{r7}
 801368a:	af00      	add	r7, sp, #0
  return uwTick;
 801368c:	4b03      	ldr	r3, [pc, #12]	; (801369c <HAL_GetTick+0x14>)
 801368e:	681b      	ldr	r3, [r3, #0]
}
 8013690:	4618      	mov	r0, r3
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr
 801369a:	bf00      	nop
 801369c:	20008854 	.word	0x20008854

080136a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b084      	sub	sp, #16
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80136a8:	f7ff ffee 	bl	8013688 <HAL_GetTick>
 80136ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136b8:	d005      	beq.n	80136c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80136ba:	4b0a      	ldr	r3, [pc, #40]	; (80136e4 <HAL_Delay+0x44>)
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	461a      	mov	r2, r3
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	4413      	add	r3, r2
 80136c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80136c6:	bf00      	nop
 80136c8:	f7ff ffde 	bl	8013688 <HAL_GetTick>
 80136cc:	4602      	mov	r2, r0
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	1ad3      	subs	r3, r2, r3
 80136d2:	68fa      	ldr	r2, [r7, #12]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d8f7      	bhi.n	80136c8 <HAL_Delay+0x28>
  {
  }
}
 80136d8:	bf00      	nop
 80136da:	bf00      	nop
 80136dc:	3710      	adds	r7, #16
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	200005b0 	.word	0x200005b0

080136e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80136e8:	b480      	push	{r7}
 80136ea:	b085      	sub	sp, #20
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f003 0307 	and.w	r3, r3, #7
 80136f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80136f8:	4b0c      	ldr	r3, [pc, #48]	; (801372c <__NVIC_SetPriorityGrouping+0x44>)
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80136fe:	68ba      	ldr	r2, [r7, #8]
 8013700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013704:	4013      	ands	r3, r2
 8013706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801371a:	4a04      	ldr	r2, [pc, #16]	; (801372c <__NVIC_SetPriorityGrouping+0x44>)
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	60d3      	str	r3, [r2, #12]
}
 8013720:	bf00      	nop
 8013722:	3714      	adds	r7, #20
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr
 801372c:	e000ed00 	.word	0xe000ed00

08013730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8013730:	b480      	push	{r7}
 8013732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013734:	4b04      	ldr	r3, [pc, #16]	; (8013748 <__NVIC_GetPriorityGrouping+0x18>)
 8013736:	68db      	ldr	r3, [r3, #12]
 8013738:	0a1b      	lsrs	r3, r3, #8
 801373a:	f003 0307 	and.w	r3, r3, #7
}
 801373e:	4618      	mov	r0, r3
 8013740:	46bd      	mov	sp, r7
 8013742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013746:	4770      	bx	lr
 8013748:	e000ed00 	.word	0xe000ed00

0801374c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801374c:	b480      	push	{r7}
 801374e:	b083      	sub	sp, #12
 8013750:	af00      	add	r7, sp, #0
 8013752:	4603      	mov	r3, r0
 8013754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801375a:	2b00      	cmp	r3, #0
 801375c:	db0b      	blt.n	8013776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801375e:	79fb      	ldrb	r3, [r7, #7]
 8013760:	f003 021f 	and.w	r2, r3, #31
 8013764:	4907      	ldr	r1, [pc, #28]	; (8013784 <__NVIC_EnableIRQ+0x38>)
 8013766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801376a:	095b      	lsrs	r3, r3, #5
 801376c:	2001      	movs	r0, #1
 801376e:	fa00 f202 	lsl.w	r2, r0, r2
 8013772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8013776:	bf00      	nop
 8013778:	370c      	adds	r7, #12
 801377a:	46bd      	mov	sp, r7
 801377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013780:	4770      	bx	lr
 8013782:	bf00      	nop
 8013784:	e000e100 	.word	0xe000e100

08013788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8013788:	b480      	push	{r7}
 801378a:	b083      	sub	sp, #12
 801378c:	af00      	add	r7, sp, #0
 801378e:	4603      	mov	r3, r0
 8013790:	6039      	str	r1, [r7, #0]
 8013792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013798:	2b00      	cmp	r3, #0
 801379a:	db0a      	blt.n	80137b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	b2da      	uxtb	r2, r3
 80137a0:	490c      	ldr	r1, [pc, #48]	; (80137d4 <__NVIC_SetPriority+0x4c>)
 80137a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80137a6:	0112      	lsls	r2, r2, #4
 80137a8:	b2d2      	uxtb	r2, r2
 80137aa:	440b      	add	r3, r1
 80137ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80137b0:	e00a      	b.n	80137c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	b2da      	uxtb	r2, r3
 80137b6:	4908      	ldr	r1, [pc, #32]	; (80137d8 <__NVIC_SetPriority+0x50>)
 80137b8:	79fb      	ldrb	r3, [r7, #7]
 80137ba:	f003 030f 	and.w	r3, r3, #15
 80137be:	3b04      	subs	r3, #4
 80137c0:	0112      	lsls	r2, r2, #4
 80137c2:	b2d2      	uxtb	r2, r2
 80137c4:	440b      	add	r3, r1
 80137c6:	761a      	strb	r2, [r3, #24]
}
 80137c8:	bf00      	nop
 80137ca:	370c      	adds	r7, #12
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr
 80137d4:	e000e100 	.word	0xe000e100
 80137d8:	e000ed00 	.word	0xe000ed00

080137dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80137dc:	b480      	push	{r7}
 80137de:	b089      	sub	sp, #36	; 0x24
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f003 0307 	and.w	r3, r3, #7
 80137ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	f1c3 0307 	rsb	r3, r3, #7
 80137f6:	2b04      	cmp	r3, #4
 80137f8:	bf28      	it	cs
 80137fa:	2304      	movcs	r3, #4
 80137fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	3304      	adds	r3, #4
 8013802:	2b06      	cmp	r3, #6
 8013804:	d902      	bls.n	801380c <NVIC_EncodePriority+0x30>
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	3b03      	subs	r3, #3
 801380a:	e000      	b.n	801380e <NVIC_EncodePriority+0x32>
 801380c:	2300      	movs	r3, #0
 801380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013810:	f04f 32ff 	mov.w	r2, #4294967295
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	fa02 f303 	lsl.w	r3, r2, r3
 801381a:	43da      	mvns	r2, r3
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	401a      	ands	r2, r3
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013824:	f04f 31ff 	mov.w	r1, #4294967295
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	fa01 f303 	lsl.w	r3, r1, r3
 801382e:	43d9      	mvns	r1, r3
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013834:	4313      	orrs	r3, r2
         );
}
 8013836:	4618      	mov	r0, r3
 8013838:	3724      	adds	r7, #36	; 0x24
 801383a:	46bd      	mov	sp, r7
 801383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013840:	4770      	bx	lr
	...

08013844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	3b01      	subs	r3, #1
 8013850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013854:	d301      	bcc.n	801385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8013856:	2301      	movs	r3, #1
 8013858:	e00f      	b.n	801387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801385a:	4a0a      	ldr	r2, [pc, #40]	; (8013884 <SysTick_Config+0x40>)
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	3b01      	subs	r3, #1
 8013860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8013862:	210f      	movs	r1, #15
 8013864:	f04f 30ff 	mov.w	r0, #4294967295
 8013868:	f7ff ff8e 	bl	8013788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801386c:	4b05      	ldr	r3, [pc, #20]	; (8013884 <SysTick_Config+0x40>)
 801386e:	2200      	movs	r2, #0
 8013870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8013872:	4b04      	ldr	r3, [pc, #16]	; (8013884 <SysTick_Config+0x40>)
 8013874:	2207      	movs	r2, #7
 8013876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8013878:	2300      	movs	r3, #0
}
 801387a:	4618      	mov	r0, r3
 801387c:	3708      	adds	r7, #8
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	e000e010 	.word	0xe000e010

08013888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f7ff ff29 	bl	80136e8 <__NVIC_SetPriorityGrouping>
}
 8013896:	bf00      	nop
 8013898:	3708      	adds	r7, #8
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}

0801389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801389e:	b580      	push	{r7, lr}
 80138a0:	b086      	sub	sp, #24
 80138a2:	af00      	add	r7, sp, #0
 80138a4:	4603      	mov	r3, r0
 80138a6:	60b9      	str	r1, [r7, #8]
 80138a8:	607a      	str	r2, [r7, #4]
 80138aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80138ac:	2300      	movs	r3, #0
 80138ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80138b0:	f7ff ff3e 	bl	8013730 <__NVIC_GetPriorityGrouping>
 80138b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	68b9      	ldr	r1, [r7, #8]
 80138ba:	6978      	ldr	r0, [r7, #20]
 80138bc:	f7ff ff8e 	bl	80137dc <NVIC_EncodePriority>
 80138c0:	4602      	mov	r2, r0
 80138c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138c6:	4611      	mov	r1, r2
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff ff5d 	bl	8013788 <__NVIC_SetPriority>
}
 80138ce:	bf00      	nop
 80138d0:	3718      	adds	r7, #24
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}

080138d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b082      	sub	sp, #8
 80138da:	af00      	add	r7, sp, #0
 80138dc:	4603      	mov	r3, r0
 80138de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80138e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80138e4:	4618      	mov	r0, r3
 80138e6:	f7ff ff31 	bl	801374c <__NVIC_EnableIRQ>
}
 80138ea:	bf00      	nop
 80138ec:	3708      	adds	r7, #8
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}

080138f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b082      	sub	sp, #8
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f7ff ffa2 	bl	8013844 <SysTick_Config>
 8013900:	4603      	mov	r3, r0
}
 8013902:	4618      	mov	r0, r3
 8013904:	3708      	adds	r7, #8
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}
	...

0801390c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801390c:	b480      	push	{r7}
 801390e:	b089      	sub	sp, #36	; 0x24
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8013916:	2300      	movs	r3, #0
 8013918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801391a:	2300      	movs	r3, #0
 801391c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801391e:	2300      	movs	r3, #0
 8013920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013922:	2300      	movs	r3, #0
 8013924:	61fb      	str	r3, [r7, #28]
 8013926:	e159      	b.n	8013bdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8013928:	2201      	movs	r2, #1
 801392a:	69fb      	ldr	r3, [r7, #28]
 801392c:	fa02 f303 	lsl.w	r3, r2, r3
 8013930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	697a      	ldr	r2, [r7, #20]
 8013938:	4013      	ands	r3, r2
 801393a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801393c:	693a      	ldr	r2, [r7, #16]
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	429a      	cmp	r2, r3
 8013942:	f040 8148 	bne.w	8013bd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	f003 0303 	and.w	r3, r3, #3
 801394e:	2b01      	cmp	r3, #1
 8013950:	d005      	beq.n	801395e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	685b      	ldr	r3, [r3, #4]
 8013956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801395a:	2b02      	cmp	r3, #2
 801395c:	d130      	bne.n	80139c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	005b      	lsls	r3, r3, #1
 8013968:	2203      	movs	r2, #3
 801396a:	fa02 f303 	lsl.w	r3, r2, r3
 801396e:	43db      	mvns	r3, r3
 8013970:	69ba      	ldr	r2, [r7, #24]
 8013972:	4013      	ands	r3, r2
 8013974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	68da      	ldr	r2, [r3, #12]
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	005b      	lsls	r3, r3, #1
 801397e:	fa02 f303 	lsl.w	r3, r2, r3
 8013982:	69ba      	ldr	r2, [r7, #24]
 8013984:	4313      	orrs	r3, r2
 8013986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	69ba      	ldr	r2, [r7, #24]
 801398c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8013994:	2201      	movs	r2, #1
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	fa02 f303 	lsl.w	r3, r2, r3
 801399c:	43db      	mvns	r3, r3
 801399e:	69ba      	ldr	r2, [r7, #24]
 80139a0:	4013      	ands	r3, r2
 80139a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	685b      	ldr	r3, [r3, #4]
 80139a8:	091b      	lsrs	r3, r3, #4
 80139aa:	f003 0201 	and.w	r2, r3, #1
 80139ae:	69fb      	ldr	r3, [r7, #28]
 80139b0:	fa02 f303 	lsl.w	r3, r2, r3
 80139b4:	69ba      	ldr	r2, [r7, #24]
 80139b6:	4313      	orrs	r3, r2
 80139b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	69ba      	ldr	r2, [r7, #24]
 80139be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	685b      	ldr	r3, [r3, #4]
 80139c4:	f003 0303 	and.w	r3, r3, #3
 80139c8:	2b03      	cmp	r3, #3
 80139ca:	d017      	beq.n	80139fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80139d2:	69fb      	ldr	r3, [r7, #28]
 80139d4:	005b      	lsls	r3, r3, #1
 80139d6:	2203      	movs	r2, #3
 80139d8:	fa02 f303 	lsl.w	r3, r2, r3
 80139dc:	43db      	mvns	r3, r3
 80139de:	69ba      	ldr	r2, [r7, #24]
 80139e0:	4013      	ands	r3, r2
 80139e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	689a      	ldr	r2, [r3, #8]
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	005b      	lsls	r3, r3, #1
 80139ec:	fa02 f303 	lsl.w	r3, r2, r3
 80139f0:	69ba      	ldr	r2, [r7, #24]
 80139f2:	4313      	orrs	r3, r2
 80139f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	69ba      	ldr	r2, [r7, #24]
 80139fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	f003 0303 	and.w	r3, r3, #3
 8013a04:	2b02      	cmp	r3, #2
 8013a06:	d123      	bne.n	8013a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	08da      	lsrs	r2, r3, #3
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	3208      	adds	r2, #8
 8013a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	f003 0307 	and.w	r3, r3, #7
 8013a1c:	009b      	lsls	r3, r3, #2
 8013a1e:	220f      	movs	r2, #15
 8013a20:	fa02 f303 	lsl.w	r3, r2, r3
 8013a24:	43db      	mvns	r3, r3
 8013a26:	69ba      	ldr	r2, [r7, #24]
 8013a28:	4013      	ands	r3, r2
 8013a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	691a      	ldr	r2, [r3, #16]
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	f003 0307 	and.w	r3, r3, #7
 8013a36:	009b      	lsls	r3, r3, #2
 8013a38:	fa02 f303 	lsl.w	r3, r2, r3
 8013a3c:	69ba      	ldr	r2, [r7, #24]
 8013a3e:	4313      	orrs	r3, r2
 8013a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013a42:	69fb      	ldr	r3, [r7, #28]
 8013a44:	08da      	lsrs	r2, r3, #3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	3208      	adds	r2, #8
 8013a4a:	69b9      	ldr	r1, [r7, #24]
 8013a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	005b      	lsls	r3, r3, #1
 8013a5a:	2203      	movs	r2, #3
 8013a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8013a60:	43db      	mvns	r3, r3
 8013a62:	69ba      	ldr	r2, [r7, #24]
 8013a64:	4013      	ands	r3, r2
 8013a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	f003 0203 	and.w	r2, r3, #3
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	005b      	lsls	r3, r3, #1
 8013a74:	fa02 f303 	lsl.w	r3, r2, r3
 8013a78:	69ba      	ldr	r2, [r7, #24]
 8013a7a:	4313      	orrs	r3, r2
 8013a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	69ba      	ldr	r2, [r7, #24]
 8013a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	f000 80a2 	beq.w	8013bd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013a92:	2300      	movs	r3, #0
 8013a94:	60fb      	str	r3, [r7, #12]
 8013a96:	4b57      	ldr	r3, [pc, #348]	; (8013bf4 <HAL_GPIO_Init+0x2e8>)
 8013a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a9a:	4a56      	ldr	r2, [pc, #344]	; (8013bf4 <HAL_GPIO_Init+0x2e8>)
 8013a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8013aa2:	4b54      	ldr	r3, [pc, #336]	; (8013bf4 <HAL_GPIO_Init+0x2e8>)
 8013aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013aaa:	60fb      	str	r3, [r7, #12]
 8013aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013aae:	4a52      	ldr	r2, [pc, #328]	; (8013bf8 <HAL_GPIO_Init+0x2ec>)
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	089b      	lsrs	r3, r3, #2
 8013ab4:	3302      	adds	r3, #2
 8013ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	f003 0303 	and.w	r3, r3, #3
 8013ac2:	009b      	lsls	r3, r3, #2
 8013ac4:	220f      	movs	r2, #15
 8013ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8013aca:	43db      	mvns	r3, r3
 8013acc:	69ba      	ldr	r2, [r7, #24]
 8013ace:	4013      	ands	r3, r2
 8013ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	4a49      	ldr	r2, [pc, #292]	; (8013bfc <HAL_GPIO_Init+0x2f0>)
 8013ad6:	4293      	cmp	r3, r2
 8013ad8:	d019      	beq.n	8013b0e <HAL_GPIO_Init+0x202>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	4a48      	ldr	r2, [pc, #288]	; (8013c00 <HAL_GPIO_Init+0x2f4>)
 8013ade:	4293      	cmp	r3, r2
 8013ae0:	d013      	beq.n	8013b0a <HAL_GPIO_Init+0x1fe>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	4a47      	ldr	r2, [pc, #284]	; (8013c04 <HAL_GPIO_Init+0x2f8>)
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d00d      	beq.n	8013b06 <HAL_GPIO_Init+0x1fa>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	4a46      	ldr	r2, [pc, #280]	; (8013c08 <HAL_GPIO_Init+0x2fc>)
 8013aee:	4293      	cmp	r3, r2
 8013af0:	d007      	beq.n	8013b02 <HAL_GPIO_Init+0x1f6>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	4a45      	ldr	r2, [pc, #276]	; (8013c0c <HAL_GPIO_Init+0x300>)
 8013af6:	4293      	cmp	r3, r2
 8013af8:	d101      	bne.n	8013afe <HAL_GPIO_Init+0x1f2>
 8013afa:	2304      	movs	r3, #4
 8013afc:	e008      	b.n	8013b10 <HAL_GPIO_Init+0x204>
 8013afe:	2307      	movs	r3, #7
 8013b00:	e006      	b.n	8013b10 <HAL_GPIO_Init+0x204>
 8013b02:	2303      	movs	r3, #3
 8013b04:	e004      	b.n	8013b10 <HAL_GPIO_Init+0x204>
 8013b06:	2302      	movs	r3, #2
 8013b08:	e002      	b.n	8013b10 <HAL_GPIO_Init+0x204>
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e000      	b.n	8013b10 <HAL_GPIO_Init+0x204>
 8013b0e:	2300      	movs	r3, #0
 8013b10:	69fa      	ldr	r2, [r7, #28]
 8013b12:	f002 0203 	and.w	r2, r2, #3
 8013b16:	0092      	lsls	r2, r2, #2
 8013b18:	4093      	lsls	r3, r2
 8013b1a:	69ba      	ldr	r2, [r7, #24]
 8013b1c:	4313      	orrs	r3, r2
 8013b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013b20:	4935      	ldr	r1, [pc, #212]	; (8013bf8 <HAL_GPIO_Init+0x2ec>)
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	089b      	lsrs	r3, r3, #2
 8013b26:	3302      	adds	r3, #2
 8013b28:	69ba      	ldr	r2, [r7, #24]
 8013b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013b2e:	4b38      	ldr	r3, [pc, #224]	; (8013c10 <HAL_GPIO_Init+0x304>)
 8013b30:	689b      	ldr	r3, [r3, #8]
 8013b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013b34:	693b      	ldr	r3, [r7, #16]
 8013b36:	43db      	mvns	r3, r3
 8013b38:	69ba      	ldr	r2, [r7, #24]
 8013b3a:	4013      	ands	r3, r2
 8013b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	685b      	ldr	r3, [r3, #4]
 8013b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d003      	beq.n	8013b52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8013b4a:	69ba      	ldr	r2, [r7, #24]
 8013b4c:	693b      	ldr	r3, [r7, #16]
 8013b4e:	4313      	orrs	r3, r2
 8013b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8013b52:	4a2f      	ldr	r2, [pc, #188]	; (8013c10 <HAL_GPIO_Init+0x304>)
 8013b54:	69bb      	ldr	r3, [r7, #24]
 8013b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013b58:	4b2d      	ldr	r3, [pc, #180]	; (8013c10 <HAL_GPIO_Init+0x304>)
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	43db      	mvns	r3, r3
 8013b62:	69ba      	ldr	r2, [r7, #24]
 8013b64:	4013      	ands	r3, r2
 8013b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d003      	beq.n	8013b7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8013b74:	69ba      	ldr	r2, [r7, #24]
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	4313      	orrs	r3, r2
 8013b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013b7c:	4a24      	ldr	r2, [pc, #144]	; (8013c10 <HAL_GPIO_Init+0x304>)
 8013b7e:	69bb      	ldr	r3, [r7, #24]
 8013b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8013b82:	4b23      	ldr	r3, [pc, #140]	; (8013c10 <HAL_GPIO_Init+0x304>)
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	43db      	mvns	r3, r3
 8013b8c:	69ba      	ldr	r2, [r7, #24]
 8013b8e:	4013      	ands	r3, r2
 8013b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	685b      	ldr	r3, [r3, #4]
 8013b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d003      	beq.n	8013ba6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8013b9e:	69ba      	ldr	r2, [r7, #24]
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	4313      	orrs	r3, r2
 8013ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013ba6:	4a1a      	ldr	r2, [pc, #104]	; (8013c10 <HAL_GPIO_Init+0x304>)
 8013ba8:	69bb      	ldr	r3, [r7, #24]
 8013baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013bac:	4b18      	ldr	r3, [pc, #96]	; (8013c10 <HAL_GPIO_Init+0x304>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	43db      	mvns	r3, r3
 8013bb6:	69ba      	ldr	r2, [r7, #24]
 8013bb8:	4013      	ands	r3, r2
 8013bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d003      	beq.n	8013bd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8013bc8:	69ba      	ldr	r2, [r7, #24]
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8013bd0:	4a0f      	ldr	r2, [pc, #60]	; (8013c10 <HAL_GPIO_Init+0x304>)
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013bd6:	69fb      	ldr	r3, [r7, #28]
 8013bd8:	3301      	adds	r3, #1
 8013bda:	61fb      	str	r3, [r7, #28]
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	2b0f      	cmp	r3, #15
 8013be0:	f67f aea2 	bls.w	8013928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013be4:	bf00      	nop
 8013be6:	bf00      	nop
 8013be8:	3724      	adds	r7, #36	; 0x24
 8013bea:	46bd      	mov	sp, r7
 8013bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf0:	4770      	bx	lr
 8013bf2:	bf00      	nop
 8013bf4:	40023800 	.word	0x40023800
 8013bf8:	40013800 	.word	0x40013800
 8013bfc:	40020000 	.word	0x40020000
 8013c00:	40020400 	.word	0x40020400
 8013c04:	40020800 	.word	0x40020800
 8013c08:	40020c00 	.word	0x40020c00
 8013c0c:	40021000 	.word	0x40021000
 8013c10:	40013c00 	.word	0x40013c00

08013c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	807b      	strh	r3, [r7, #2]
 8013c20:	4613      	mov	r3, r2
 8013c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013c24:	787b      	ldrb	r3, [r7, #1]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d003      	beq.n	8013c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013c2a:	887a      	ldrh	r2, [r7, #2]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8013c30:	e003      	b.n	8013c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8013c32:	887b      	ldrh	r3, [r7, #2]
 8013c34:	041a      	lsls	r2, r3, #16
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	619a      	str	r2, [r3, #24]
}
 8013c3a:	bf00      	nop
 8013c3c:	370c      	adds	r7, #12
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c44:	4770      	bx	lr
	...

08013c48 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	460b      	mov	r3, r1
 8013c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8013c54:	4b0b      	ldr	r3, [pc, #44]	; (8013c84 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8013c56:	691b      	ldr	r3, [r3, #16]
 8013c58:	4a0a      	ldr	r2, [pc, #40]	; (8013c84 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8013c5a:	f023 0304 	bic.w	r3, r3, #4
 8013c5e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8013c60:	78fb      	ldrb	r3, [r7, #3]
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d101      	bne.n	8013c6a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8013c66:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8013c68:	e005      	b.n	8013c76 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 8013c6a:	78fb      	ldrb	r3, [r7, #3]
 8013c6c:	2b03      	cmp	r3, #3
 8013c6e:	d001      	beq.n	8013c74 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8013c70:	bf40      	sev
      __WFE();
 8013c72:	bf20      	wfe
    __WFE();
 8013c74:	bf20      	wfe
}
 8013c76:	bf00      	nop
 8013c78:	370c      	adds	r7, #12
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	e000ed00 	.word	0xe000ed00

08013c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b086      	sub	sp, #24
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d101      	bne.n	8013c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013c96:	2301      	movs	r3, #1
 8013c98:	e267      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	f003 0301 	and.w	r3, r3, #1
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d075      	beq.n	8013d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013ca6:	4b88      	ldr	r3, [pc, #544]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013ca8:	689b      	ldr	r3, [r3, #8]
 8013caa:	f003 030c 	and.w	r3, r3, #12
 8013cae:	2b04      	cmp	r3, #4
 8013cb0:	d00c      	beq.n	8013ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013cb2:	4b85      	ldr	r3, [pc, #532]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013cb4:	689b      	ldr	r3, [r3, #8]
 8013cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013cba:	2b08      	cmp	r3, #8
 8013cbc:	d112      	bne.n	8013ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013cbe:	4b82      	ldr	r3, [pc, #520]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013cc0:	685b      	ldr	r3, [r3, #4]
 8013cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013cca:	d10b      	bne.n	8013ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013ccc:	4b7e      	ldr	r3, [pc, #504]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d05b      	beq.n	8013d90 <HAL_RCC_OscConfig+0x108>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d157      	bne.n	8013d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013ce0:	2301      	movs	r3, #1
 8013ce2:	e242      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013cec:	d106      	bne.n	8013cfc <HAL_RCC_OscConfig+0x74>
 8013cee:	4b76      	ldr	r3, [pc, #472]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	4a75      	ldr	r2, [pc, #468]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013cf8:	6013      	str	r3, [r2, #0]
 8013cfa:	e01d      	b.n	8013d38 <HAL_RCC_OscConfig+0xb0>
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013d04:	d10c      	bne.n	8013d20 <HAL_RCC_OscConfig+0x98>
 8013d06:	4b70      	ldr	r3, [pc, #448]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	4a6f      	ldr	r2, [pc, #444]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013d10:	6013      	str	r3, [r2, #0]
 8013d12:	4b6d      	ldr	r3, [pc, #436]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4a6c      	ldr	r2, [pc, #432]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013d1c:	6013      	str	r3, [r2, #0]
 8013d1e:	e00b      	b.n	8013d38 <HAL_RCC_OscConfig+0xb0>
 8013d20:	4b69      	ldr	r3, [pc, #420]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	4a68      	ldr	r2, [pc, #416]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013d2a:	6013      	str	r3, [r2, #0]
 8013d2c:	4b66      	ldr	r3, [pc, #408]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	4a65      	ldr	r2, [pc, #404]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	685b      	ldr	r3, [r3, #4]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d013      	beq.n	8013d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d40:	f7ff fca2 	bl	8013688 <HAL_GetTick>
 8013d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d46:	e008      	b.n	8013d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013d48:	f7ff fc9e 	bl	8013688 <HAL_GetTick>
 8013d4c:	4602      	mov	r2, r0
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	1ad3      	subs	r3, r2, r3
 8013d52:	2b64      	cmp	r3, #100	; 0x64
 8013d54:	d901      	bls.n	8013d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013d56:	2303      	movs	r3, #3
 8013d58:	e207      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d5a:	4b5b      	ldr	r3, [pc, #364]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d0f0      	beq.n	8013d48 <HAL_RCC_OscConfig+0xc0>
 8013d66:	e014      	b.n	8013d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d68:	f7ff fc8e 	bl	8013688 <HAL_GetTick>
 8013d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013d6e:	e008      	b.n	8013d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013d70:	f7ff fc8a 	bl	8013688 <HAL_GetTick>
 8013d74:	4602      	mov	r2, r0
 8013d76:	693b      	ldr	r3, [r7, #16]
 8013d78:	1ad3      	subs	r3, r2, r3
 8013d7a:	2b64      	cmp	r3, #100	; 0x64
 8013d7c:	d901      	bls.n	8013d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013d7e:	2303      	movs	r3, #3
 8013d80:	e1f3      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013d82:	4b51      	ldr	r3, [pc, #324]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d1f0      	bne.n	8013d70 <HAL_RCC_OscConfig+0xe8>
 8013d8e:	e000      	b.n	8013d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f003 0302 	and.w	r3, r3, #2
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d063      	beq.n	8013e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013d9e:	4b4a      	ldr	r3, [pc, #296]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013da0:	689b      	ldr	r3, [r3, #8]
 8013da2:	f003 030c 	and.w	r3, r3, #12
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d00b      	beq.n	8013dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013daa:	4b47      	ldr	r3, [pc, #284]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013dac:	689b      	ldr	r3, [r3, #8]
 8013dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013db2:	2b08      	cmp	r3, #8
 8013db4:	d11c      	bne.n	8013df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013db6:	4b44      	ldr	r3, [pc, #272]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013db8:	685b      	ldr	r3, [r3, #4]
 8013dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d116      	bne.n	8013df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013dc2:	4b41      	ldr	r3, [pc, #260]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	f003 0302 	and.w	r3, r3, #2
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d005      	beq.n	8013dda <HAL_RCC_OscConfig+0x152>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d001      	beq.n	8013dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	e1c7      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013dda:	4b3b      	ldr	r3, [pc, #236]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	691b      	ldr	r3, [r3, #16]
 8013de6:	00db      	lsls	r3, r3, #3
 8013de8:	4937      	ldr	r1, [pc, #220]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013dea:	4313      	orrs	r3, r2
 8013dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013dee:	e03a      	b.n	8013e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	68db      	ldr	r3, [r3, #12]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d020      	beq.n	8013e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013df8:	4b34      	ldr	r3, [pc, #208]	; (8013ecc <HAL_RCC_OscConfig+0x244>)
 8013dfa:	2201      	movs	r2, #1
 8013dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013dfe:	f7ff fc43 	bl	8013688 <HAL_GetTick>
 8013e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013e04:	e008      	b.n	8013e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013e06:	f7ff fc3f 	bl	8013688 <HAL_GetTick>
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	693b      	ldr	r3, [r7, #16]
 8013e0e:	1ad3      	subs	r3, r2, r3
 8013e10:	2b02      	cmp	r3, #2
 8013e12:	d901      	bls.n	8013e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013e14:	2303      	movs	r3, #3
 8013e16:	e1a8      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013e18:	4b2b      	ldr	r3, [pc, #172]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f003 0302 	and.w	r3, r3, #2
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d0f0      	beq.n	8013e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013e24:	4b28      	ldr	r3, [pc, #160]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	691b      	ldr	r3, [r3, #16]
 8013e30:	00db      	lsls	r3, r3, #3
 8013e32:	4925      	ldr	r1, [pc, #148]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013e34:	4313      	orrs	r3, r2
 8013e36:	600b      	str	r3, [r1, #0]
 8013e38:	e015      	b.n	8013e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013e3a:	4b24      	ldr	r3, [pc, #144]	; (8013ecc <HAL_RCC_OscConfig+0x244>)
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e40:	f7ff fc22 	bl	8013688 <HAL_GetTick>
 8013e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013e46:	e008      	b.n	8013e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013e48:	f7ff fc1e 	bl	8013688 <HAL_GetTick>
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	1ad3      	subs	r3, r2, r3
 8013e52:	2b02      	cmp	r3, #2
 8013e54:	d901      	bls.n	8013e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013e56:	2303      	movs	r3, #3
 8013e58:	e187      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013e5a:	4b1b      	ldr	r3, [pc, #108]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	f003 0302 	and.w	r3, r3, #2
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d1f0      	bne.n	8013e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	f003 0308 	and.w	r3, r3, #8
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d036      	beq.n	8013ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	695b      	ldr	r3, [r3, #20]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d016      	beq.n	8013ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013e7a:	4b15      	ldr	r3, [pc, #84]	; (8013ed0 <HAL_RCC_OscConfig+0x248>)
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013e80:	f7ff fc02 	bl	8013688 <HAL_GetTick>
 8013e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013e86:	e008      	b.n	8013e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013e88:	f7ff fbfe 	bl	8013688 <HAL_GetTick>
 8013e8c:	4602      	mov	r2, r0
 8013e8e:	693b      	ldr	r3, [r7, #16]
 8013e90:	1ad3      	subs	r3, r2, r3
 8013e92:	2b02      	cmp	r3, #2
 8013e94:	d901      	bls.n	8013e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013e96:	2303      	movs	r3, #3
 8013e98:	e167      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013e9a:	4b0b      	ldr	r3, [pc, #44]	; (8013ec8 <HAL_RCC_OscConfig+0x240>)
 8013e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e9e:	f003 0302 	and.w	r3, r3, #2
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d0f0      	beq.n	8013e88 <HAL_RCC_OscConfig+0x200>
 8013ea6:	e01b      	b.n	8013ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013ea8:	4b09      	ldr	r3, [pc, #36]	; (8013ed0 <HAL_RCC_OscConfig+0x248>)
 8013eaa:	2200      	movs	r2, #0
 8013eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013eae:	f7ff fbeb 	bl	8013688 <HAL_GetTick>
 8013eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013eb4:	e00e      	b.n	8013ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013eb6:	f7ff fbe7 	bl	8013688 <HAL_GetTick>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	1ad3      	subs	r3, r2, r3
 8013ec0:	2b02      	cmp	r3, #2
 8013ec2:	d907      	bls.n	8013ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8013ec4:	2303      	movs	r3, #3
 8013ec6:	e150      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
 8013ec8:	40023800 	.word	0x40023800
 8013ecc:	42470000 	.word	0x42470000
 8013ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013ed4:	4b88      	ldr	r3, [pc, #544]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ed8:	f003 0302 	and.w	r3, r3, #2
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d1ea      	bne.n	8013eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f003 0304 	and.w	r3, r3, #4
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f000 8097 	beq.w	801401c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013ef2:	4b81      	ldr	r3, [pc, #516]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d10f      	bne.n	8013f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013efe:	2300      	movs	r3, #0
 8013f00:	60bb      	str	r3, [r7, #8]
 8013f02:	4b7d      	ldr	r3, [pc, #500]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f06:	4a7c      	ldr	r2, [pc, #496]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8013f0e:	4b7a      	ldr	r3, [pc, #488]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f16:	60bb      	str	r3, [r7, #8]
 8013f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f1e:	4b77      	ldr	r3, [pc, #476]	; (80140fc <HAL_RCC_OscConfig+0x474>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d118      	bne.n	8013f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013f2a:	4b74      	ldr	r3, [pc, #464]	; (80140fc <HAL_RCC_OscConfig+0x474>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4a73      	ldr	r2, [pc, #460]	; (80140fc <HAL_RCC_OscConfig+0x474>)
 8013f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013f36:	f7ff fba7 	bl	8013688 <HAL_GetTick>
 8013f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f3c:	e008      	b.n	8013f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013f3e:	f7ff fba3 	bl	8013688 <HAL_GetTick>
 8013f42:	4602      	mov	r2, r0
 8013f44:	693b      	ldr	r3, [r7, #16]
 8013f46:	1ad3      	subs	r3, r2, r3
 8013f48:	2b02      	cmp	r3, #2
 8013f4a:	d901      	bls.n	8013f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8013f4c:	2303      	movs	r3, #3
 8013f4e:	e10c      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f50:	4b6a      	ldr	r3, [pc, #424]	; (80140fc <HAL_RCC_OscConfig+0x474>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d0f0      	beq.n	8013f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d106      	bne.n	8013f72 <HAL_RCC_OscConfig+0x2ea>
 8013f64:	4b64      	ldr	r3, [pc, #400]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f68:	4a63      	ldr	r2, [pc, #396]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f6a:	f043 0301 	orr.w	r3, r3, #1
 8013f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8013f70:	e01c      	b.n	8013fac <HAL_RCC_OscConfig+0x324>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	689b      	ldr	r3, [r3, #8]
 8013f76:	2b05      	cmp	r3, #5
 8013f78:	d10c      	bne.n	8013f94 <HAL_RCC_OscConfig+0x30c>
 8013f7a:	4b5f      	ldr	r3, [pc, #380]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f7e:	4a5e      	ldr	r2, [pc, #376]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f80:	f043 0304 	orr.w	r3, r3, #4
 8013f84:	6713      	str	r3, [r2, #112]	; 0x70
 8013f86:	4b5c      	ldr	r3, [pc, #368]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f8a:	4a5b      	ldr	r2, [pc, #364]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f8c:	f043 0301 	orr.w	r3, r3, #1
 8013f90:	6713      	str	r3, [r2, #112]	; 0x70
 8013f92:	e00b      	b.n	8013fac <HAL_RCC_OscConfig+0x324>
 8013f94:	4b58      	ldr	r3, [pc, #352]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f98:	4a57      	ldr	r2, [pc, #348]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013f9a:	f023 0301 	bic.w	r3, r3, #1
 8013f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8013fa0:	4b55      	ldr	r3, [pc, #340]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fa4:	4a54      	ldr	r2, [pc, #336]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013fa6:	f023 0304 	bic.w	r3, r3, #4
 8013faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	689b      	ldr	r3, [r3, #8]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d015      	beq.n	8013fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013fb4:	f7ff fb68 	bl	8013688 <HAL_GetTick>
 8013fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013fba:	e00a      	b.n	8013fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013fbc:	f7ff fb64 	bl	8013688 <HAL_GetTick>
 8013fc0:	4602      	mov	r2, r0
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	1ad3      	subs	r3, r2, r3
 8013fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fca:	4293      	cmp	r3, r2
 8013fcc:	d901      	bls.n	8013fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8013fce:	2303      	movs	r3, #3
 8013fd0:	e0cb      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013fd2:	4b49      	ldr	r3, [pc, #292]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8013fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd6:	f003 0302 	and.w	r3, r3, #2
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d0ee      	beq.n	8013fbc <HAL_RCC_OscConfig+0x334>
 8013fde:	e014      	b.n	801400a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013fe0:	f7ff fb52 	bl	8013688 <HAL_GetTick>
 8013fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013fe6:	e00a      	b.n	8013ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013fe8:	f7ff fb4e 	bl	8013688 <HAL_GetTick>
 8013fec:	4602      	mov	r2, r0
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	1ad3      	subs	r3, r2, r3
 8013ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ff6:	4293      	cmp	r3, r2
 8013ff8:	d901      	bls.n	8013ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8013ffa:	2303      	movs	r3, #3
 8013ffc:	e0b5      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013ffe:	4b3e      	ldr	r3, [pc, #248]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8014000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014002:	f003 0302 	and.w	r3, r3, #2
 8014006:	2b00      	cmp	r3, #0
 8014008:	d1ee      	bne.n	8013fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801400a:	7dfb      	ldrb	r3, [r7, #23]
 801400c:	2b01      	cmp	r3, #1
 801400e:	d105      	bne.n	801401c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014010:	4b39      	ldr	r3, [pc, #228]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8014012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014014:	4a38      	ldr	r2, [pc, #224]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8014016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801401a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	699b      	ldr	r3, [r3, #24]
 8014020:	2b00      	cmp	r3, #0
 8014022:	f000 80a1 	beq.w	8014168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8014026:	4b34      	ldr	r3, [pc, #208]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 8014028:	689b      	ldr	r3, [r3, #8]
 801402a:	f003 030c 	and.w	r3, r3, #12
 801402e:	2b08      	cmp	r3, #8
 8014030:	d05c      	beq.n	80140ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	699b      	ldr	r3, [r3, #24]
 8014036:	2b02      	cmp	r3, #2
 8014038:	d141      	bne.n	80140be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801403a:	4b31      	ldr	r3, [pc, #196]	; (8014100 <HAL_RCC_OscConfig+0x478>)
 801403c:	2200      	movs	r2, #0
 801403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014040:	f7ff fb22 	bl	8013688 <HAL_GetTick>
 8014044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014046:	e008      	b.n	801405a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014048:	f7ff fb1e 	bl	8013688 <HAL_GetTick>
 801404c:	4602      	mov	r2, r0
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	1ad3      	subs	r3, r2, r3
 8014052:	2b02      	cmp	r3, #2
 8014054:	d901      	bls.n	801405a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8014056:	2303      	movs	r3, #3
 8014058:	e087      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801405a:	4b27      	ldr	r3, [pc, #156]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014062:	2b00      	cmp	r3, #0
 8014064:	d1f0      	bne.n	8014048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	69da      	ldr	r2, [r3, #28]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	6a1b      	ldr	r3, [r3, #32]
 801406e:	431a      	orrs	r2, r3
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014074:	019b      	lsls	r3, r3, #6
 8014076:	431a      	orrs	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801407c:	085b      	lsrs	r3, r3, #1
 801407e:	3b01      	subs	r3, #1
 8014080:	041b      	lsls	r3, r3, #16
 8014082:	431a      	orrs	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014088:	061b      	lsls	r3, r3, #24
 801408a:	491b      	ldr	r1, [pc, #108]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 801408c:	4313      	orrs	r3, r2
 801408e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014090:	4b1b      	ldr	r3, [pc, #108]	; (8014100 <HAL_RCC_OscConfig+0x478>)
 8014092:	2201      	movs	r2, #1
 8014094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014096:	f7ff faf7 	bl	8013688 <HAL_GetTick>
 801409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801409c:	e008      	b.n	80140b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801409e:	f7ff faf3 	bl	8013688 <HAL_GetTick>
 80140a2:	4602      	mov	r2, r0
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	1ad3      	subs	r3, r2, r3
 80140a8:	2b02      	cmp	r3, #2
 80140aa:	d901      	bls.n	80140b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80140ac:	2303      	movs	r3, #3
 80140ae:	e05c      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80140b0:	4b11      	ldr	r3, [pc, #68]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d0f0      	beq.n	801409e <HAL_RCC_OscConfig+0x416>
 80140bc:	e054      	b.n	8014168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80140be:	4b10      	ldr	r3, [pc, #64]	; (8014100 <HAL_RCC_OscConfig+0x478>)
 80140c0:	2200      	movs	r2, #0
 80140c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80140c4:	f7ff fae0 	bl	8013688 <HAL_GetTick>
 80140c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80140ca:	e008      	b.n	80140de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80140cc:	f7ff fadc 	bl	8013688 <HAL_GetTick>
 80140d0:	4602      	mov	r2, r0
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	1ad3      	subs	r3, r2, r3
 80140d6:	2b02      	cmp	r3, #2
 80140d8:	d901      	bls.n	80140de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80140da:	2303      	movs	r3, #3
 80140dc:	e045      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80140de:	4b06      	ldr	r3, [pc, #24]	; (80140f8 <HAL_RCC_OscConfig+0x470>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d1f0      	bne.n	80140cc <HAL_RCC_OscConfig+0x444>
 80140ea:	e03d      	b.n	8014168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	699b      	ldr	r3, [r3, #24]
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	d107      	bne.n	8014104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80140f4:	2301      	movs	r3, #1
 80140f6:	e038      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
 80140f8:	40023800 	.word	0x40023800
 80140fc:	40007000 	.word	0x40007000
 8014100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8014104:	4b1b      	ldr	r3, [pc, #108]	; (8014174 <HAL_RCC_OscConfig+0x4ec>)
 8014106:	685b      	ldr	r3, [r3, #4]
 8014108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	699b      	ldr	r3, [r3, #24]
 801410e:	2b01      	cmp	r3, #1
 8014110:	d028      	beq.n	8014164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801411c:	429a      	cmp	r2, r3
 801411e:	d121      	bne.n	8014164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801412a:	429a      	cmp	r2, r3
 801412c:	d11a      	bne.n	8014164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801412e:	68fa      	ldr	r2, [r7, #12]
 8014130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014134:	4013      	ands	r3, r2
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801413a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801413c:	4293      	cmp	r3, r2
 801413e:	d111      	bne.n	8014164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801414a:	085b      	lsrs	r3, r3, #1
 801414c:	3b01      	subs	r3, #1
 801414e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8014150:	429a      	cmp	r2, r3
 8014152:	d107      	bne.n	8014164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801415e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8014160:	429a      	cmp	r2, r3
 8014162:	d001      	beq.n	8014168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8014164:	2301      	movs	r3, #1
 8014166:	e000      	b.n	801416a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8014168:	2300      	movs	r3, #0
}
 801416a:	4618      	mov	r0, r3
 801416c:	3718      	adds	r7, #24
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
 8014172:	bf00      	nop
 8014174:	40023800 	.word	0x40023800

08014178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b084      	sub	sp, #16
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d101      	bne.n	801418c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014188:	2301      	movs	r3, #1
 801418a:	e0cc      	b.n	8014326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801418c:	4b68      	ldr	r3, [pc, #416]	; (8014330 <HAL_RCC_ClockConfig+0x1b8>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	f003 0307 	and.w	r3, r3, #7
 8014194:	683a      	ldr	r2, [r7, #0]
 8014196:	429a      	cmp	r2, r3
 8014198:	d90c      	bls.n	80141b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801419a:	4b65      	ldr	r3, [pc, #404]	; (8014330 <HAL_RCC_ClockConfig+0x1b8>)
 801419c:	683a      	ldr	r2, [r7, #0]
 801419e:	b2d2      	uxtb	r2, r2
 80141a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80141a2:	4b63      	ldr	r3, [pc, #396]	; (8014330 <HAL_RCC_ClockConfig+0x1b8>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	f003 0307 	and.w	r3, r3, #7
 80141aa:	683a      	ldr	r2, [r7, #0]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d001      	beq.n	80141b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80141b0:	2301      	movs	r3, #1
 80141b2:	e0b8      	b.n	8014326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	f003 0302 	and.w	r3, r3, #2
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d020      	beq.n	8014202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	f003 0304 	and.w	r3, r3, #4
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d005      	beq.n	80141d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80141cc:	4b59      	ldr	r3, [pc, #356]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80141ce:	689b      	ldr	r3, [r3, #8]
 80141d0:	4a58      	ldr	r2, [pc, #352]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80141d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80141d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	f003 0308 	and.w	r3, r3, #8
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d005      	beq.n	80141f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80141e4:	4b53      	ldr	r3, [pc, #332]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	4a52      	ldr	r2, [pc, #328]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80141ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80141ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80141f0:	4b50      	ldr	r3, [pc, #320]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80141f2:	689b      	ldr	r3, [r3, #8]
 80141f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	689b      	ldr	r3, [r3, #8]
 80141fc:	494d      	ldr	r1, [pc, #308]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80141fe:	4313      	orrs	r3, r2
 8014200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	f003 0301 	and.w	r3, r3, #1
 801420a:	2b00      	cmp	r3, #0
 801420c:	d044      	beq.n	8014298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	2b01      	cmp	r3, #1
 8014214:	d107      	bne.n	8014226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014216:	4b47      	ldr	r3, [pc, #284]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801421e:	2b00      	cmp	r3, #0
 8014220:	d119      	bne.n	8014256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014222:	2301      	movs	r3, #1
 8014224:	e07f      	b.n	8014326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	2b02      	cmp	r3, #2
 801422c:	d003      	beq.n	8014236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014232:	2b03      	cmp	r3, #3
 8014234:	d107      	bne.n	8014246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014236:	4b3f      	ldr	r3, [pc, #252]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801423e:	2b00      	cmp	r3, #0
 8014240:	d109      	bne.n	8014256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014242:	2301      	movs	r3, #1
 8014244:	e06f      	b.n	8014326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014246:	4b3b      	ldr	r3, [pc, #236]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	f003 0302 	and.w	r3, r3, #2
 801424e:	2b00      	cmp	r3, #0
 8014250:	d101      	bne.n	8014256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014252:	2301      	movs	r3, #1
 8014254:	e067      	b.n	8014326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014256:	4b37      	ldr	r3, [pc, #220]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 8014258:	689b      	ldr	r3, [r3, #8]
 801425a:	f023 0203 	bic.w	r2, r3, #3
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	685b      	ldr	r3, [r3, #4]
 8014262:	4934      	ldr	r1, [pc, #208]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 8014264:	4313      	orrs	r3, r2
 8014266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014268:	f7ff fa0e 	bl	8013688 <HAL_GetTick>
 801426c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801426e:	e00a      	b.n	8014286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014270:	f7ff fa0a 	bl	8013688 <HAL_GetTick>
 8014274:	4602      	mov	r2, r0
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	1ad3      	subs	r3, r2, r3
 801427a:	f241 3288 	movw	r2, #5000	; 0x1388
 801427e:	4293      	cmp	r3, r2
 8014280:	d901      	bls.n	8014286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014282:	2303      	movs	r3, #3
 8014284:	e04f      	b.n	8014326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014286:	4b2b      	ldr	r3, [pc, #172]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 8014288:	689b      	ldr	r3, [r3, #8]
 801428a:	f003 020c 	and.w	r2, r3, #12
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	685b      	ldr	r3, [r3, #4]
 8014292:	009b      	lsls	r3, r3, #2
 8014294:	429a      	cmp	r2, r3
 8014296:	d1eb      	bne.n	8014270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014298:	4b25      	ldr	r3, [pc, #148]	; (8014330 <HAL_RCC_ClockConfig+0x1b8>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f003 0307 	and.w	r3, r3, #7
 80142a0:	683a      	ldr	r2, [r7, #0]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d20c      	bcs.n	80142c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80142a6:	4b22      	ldr	r3, [pc, #136]	; (8014330 <HAL_RCC_ClockConfig+0x1b8>)
 80142a8:	683a      	ldr	r2, [r7, #0]
 80142aa:	b2d2      	uxtb	r2, r2
 80142ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80142ae:	4b20      	ldr	r3, [pc, #128]	; (8014330 <HAL_RCC_ClockConfig+0x1b8>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f003 0307 	and.w	r3, r3, #7
 80142b6:	683a      	ldr	r2, [r7, #0]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d001      	beq.n	80142c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80142bc:	2301      	movs	r3, #1
 80142be:	e032      	b.n	8014326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f003 0304 	and.w	r3, r3, #4
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d008      	beq.n	80142de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80142cc:	4b19      	ldr	r3, [pc, #100]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80142ce:	689b      	ldr	r3, [r3, #8]
 80142d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	4916      	ldr	r1, [pc, #88]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80142da:	4313      	orrs	r3, r2
 80142dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	f003 0308 	and.w	r3, r3, #8
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d009      	beq.n	80142fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80142ea:	4b12      	ldr	r3, [pc, #72]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80142ec:	689b      	ldr	r3, [r3, #8]
 80142ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	691b      	ldr	r3, [r3, #16]
 80142f6:	00db      	lsls	r3, r3, #3
 80142f8:	490e      	ldr	r1, [pc, #56]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 80142fa:	4313      	orrs	r3, r2
 80142fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80142fe:	f000 f821 	bl	8014344 <HAL_RCC_GetSysClockFreq>
 8014302:	4602      	mov	r2, r0
 8014304:	4b0b      	ldr	r3, [pc, #44]	; (8014334 <HAL_RCC_ClockConfig+0x1bc>)
 8014306:	689b      	ldr	r3, [r3, #8]
 8014308:	091b      	lsrs	r3, r3, #4
 801430a:	f003 030f 	and.w	r3, r3, #15
 801430e:	490a      	ldr	r1, [pc, #40]	; (8014338 <HAL_RCC_ClockConfig+0x1c0>)
 8014310:	5ccb      	ldrb	r3, [r1, r3]
 8014312:	fa22 f303 	lsr.w	r3, r2, r3
 8014316:	4a09      	ldr	r2, [pc, #36]	; (801433c <HAL_RCC_ClockConfig+0x1c4>)
 8014318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801431a:	4b09      	ldr	r3, [pc, #36]	; (8014340 <HAL_RCC_ClockConfig+0x1c8>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	4618      	mov	r0, r3
 8014320:	f7ff f96e 	bl	8013600 <HAL_InitTick>

  return HAL_OK;
 8014324:	2300      	movs	r3, #0
}
 8014326:	4618      	mov	r0, r3
 8014328:	3710      	adds	r7, #16
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	40023c00 	.word	0x40023c00
 8014334:	40023800 	.word	0x40023800
 8014338:	0801a890 	.word	0x0801a890
 801433c:	20000000 	.word	0x20000000
 8014340:	200005ac 	.word	0x200005ac

08014344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014348:	b094      	sub	sp, #80	; 0x50
 801434a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801434c:	2300      	movs	r3, #0
 801434e:	647b      	str	r3, [r7, #68]	; 0x44
 8014350:	2300      	movs	r3, #0
 8014352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014354:	2300      	movs	r3, #0
 8014356:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8014358:	2300      	movs	r3, #0
 801435a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801435c:	4b79      	ldr	r3, [pc, #484]	; (8014544 <HAL_RCC_GetSysClockFreq+0x200>)
 801435e:	689b      	ldr	r3, [r3, #8]
 8014360:	f003 030c 	and.w	r3, r3, #12
 8014364:	2b08      	cmp	r3, #8
 8014366:	d00d      	beq.n	8014384 <HAL_RCC_GetSysClockFreq+0x40>
 8014368:	2b08      	cmp	r3, #8
 801436a:	f200 80e1 	bhi.w	8014530 <HAL_RCC_GetSysClockFreq+0x1ec>
 801436e:	2b00      	cmp	r3, #0
 8014370:	d002      	beq.n	8014378 <HAL_RCC_GetSysClockFreq+0x34>
 8014372:	2b04      	cmp	r3, #4
 8014374:	d003      	beq.n	801437e <HAL_RCC_GetSysClockFreq+0x3a>
 8014376:	e0db      	b.n	8014530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014378:	4b73      	ldr	r3, [pc, #460]	; (8014548 <HAL_RCC_GetSysClockFreq+0x204>)
 801437a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801437c:	e0db      	b.n	8014536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801437e:	4b73      	ldr	r3, [pc, #460]	; (801454c <HAL_RCC_GetSysClockFreq+0x208>)
 8014380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8014382:	e0d8      	b.n	8014536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014384:	4b6f      	ldr	r3, [pc, #444]	; (8014544 <HAL_RCC_GetSysClockFreq+0x200>)
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801438c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801438e:	4b6d      	ldr	r3, [pc, #436]	; (8014544 <HAL_RCC_GetSysClockFreq+0x200>)
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014396:	2b00      	cmp	r3, #0
 8014398:	d063      	beq.n	8014462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801439a:	4b6a      	ldr	r3, [pc, #424]	; (8014544 <HAL_RCC_GetSysClockFreq+0x200>)
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	099b      	lsrs	r3, r3, #6
 80143a0:	2200      	movs	r2, #0
 80143a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80143a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80143a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143ac:	633b      	str	r3, [r7, #48]	; 0x30
 80143ae:	2300      	movs	r3, #0
 80143b0:	637b      	str	r3, [r7, #52]	; 0x34
 80143b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80143b6:	4622      	mov	r2, r4
 80143b8:	462b      	mov	r3, r5
 80143ba:	f04f 0000 	mov.w	r0, #0
 80143be:	f04f 0100 	mov.w	r1, #0
 80143c2:	0159      	lsls	r1, r3, #5
 80143c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80143c8:	0150      	lsls	r0, r2, #5
 80143ca:	4602      	mov	r2, r0
 80143cc:	460b      	mov	r3, r1
 80143ce:	4621      	mov	r1, r4
 80143d0:	1a51      	subs	r1, r2, r1
 80143d2:	6139      	str	r1, [r7, #16]
 80143d4:	4629      	mov	r1, r5
 80143d6:	eb63 0301 	sbc.w	r3, r3, r1
 80143da:	617b      	str	r3, [r7, #20]
 80143dc:	f04f 0200 	mov.w	r2, #0
 80143e0:	f04f 0300 	mov.w	r3, #0
 80143e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80143e8:	4659      	mov	r1, fp
 80143ea:	018b      	lsls	r3, r1, #6
 80143ec:	4651      	mov	r1, sl
 80143ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80143f2:	4651      	mov	r1, sl
 80143f4:	018a      	lsls	r2, r1, #6
 80143f6:	4651      	mov	r1, sl
 80143f8:	ebb2 0801 	subs.w	r8, r2, r1
 80143fc:	4659      	mov	r1, fp
 80143fe:	eb63 0901 	sbc.w	r9, r3, r1
 8014402:	f04f 0200 	mov.w	r2, #0
 8014406:	f04f 0300 	mov.w	r3, #0
 801440a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801440e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8014412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8014416:	4690      	mov	r8, r2
 8014418:	4699      	mov	r9, r3
 801441a:	4623      	mov	r3, r4
 801441c:	eb18 0303 	adds.w	r3, r8, r3
 8014420:	60bb      	str	r3, [r7, #8]
 8014422:	462b      	mov	r3, r5
 8014424:	eb49 0303 	adc.w	r3, r9, r3
 8014428:	60fb      	str	r3, [r7, #12]
 801442a:	f04f 0200 	mov.w	r2, #0
 801442e:	f04f 0300 	mov.w	r3, #0
 8014432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8014436:	4629      	mov	r1, r5
 8014438:	024b      	lsls	r3, r1, #9
 801443a:	4621      	mov	r1, r4
 801443c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8014440:	4621      	mov	r1, r4
 8014442:	024a      	lsls	r2, r1, #9
 8014444:	4610      	mov	r0, r2
 8014446:	4619      	mov	r1, r3
 8014448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801444a:	2200      	movs	r2, #0
 801444c:	62bb      	str	r3, [r7, #40]	; 0x28
 801444e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014454:	f7ec fbca 	bl	8000bec <__aeabi_uldivmod>
 8014458:	4602      	mov	r2, r0
 801445a:	460b      	mov	r3, r1
 801445c:	4613      	mov	r3, r2
 801445e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014460:	e058      	b.n	8014514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8014462:	4b38      	ldr	r3, [pc, #224]	; (8014544 <HAL_RCC_GetSysClockFreq+0x200>)
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	099b      	lsrs	r3, r3, #6
 8014468:	2200      	movs	r2, #0
 801446a:	4618      	mov	r0, r3
 801446c:	4611      	mov	r1, r2
 801446e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8014472:	623b      	str	r3, [r7, #32]
 8014474:	2300      	movs	r3, #0
 8014476:	627b      	str	r3, [r7, #36]	; 0x24
 8014478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801447c:	4642      	mov	r2, r8
 801447e:	464b      	mov	r3, r9
 8014480:	f04f 0000 	mov.w	r0, #0
 8014484:	f04f 0100 	mov.w	r1, #0
 8014488:	0159      	lsls	r1, r3, #5
 801448a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801448e:	0150      	lsls	r0, r2, #5
 8014490:	4602      	mov	r2, r0
 8014492:	460b      	mov	r3, r1
 8014494:	4641      	mov	r1, r8
 8014496:	ebb2 0a01 	subs.w	sl, r2, r1
 801449a:	4649      	mov	r1, r9
 801449c:	eb63 0b01 	sbc.w	fp, r3, r1
 80144a0:	f04f 0200 	mov.w	r2, #0
 80144a4:	f04f 0300 	mov.w	r3, #0
 80144a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80144ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80144b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80144b4:	ebb2 040a 	subs.w	r4, r2, sl
 80144b8:	eb63 050b 	sbc.w	r5, r3, fp
 80144bc:	f04f 0200 	mov.w	r2, #0
 80144c0:	f04f 0300 	mov.w	r3, #0
 80144c4:	00eb      	lsls	r3, r5, #3
 80144c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80144ca:	00e2      	lsls	r2, r4, #3
 80144cc:	4614      	mov	r4, r2
 80144ce:	461d      	mov	r5, r3
 80144d0:	4643      	mov	r3, r8
 80144d2:	18e3      	adds	r3, r4, r3
 80144d4:	603b      	str	r3, [r7, #0]
 80144d6:	464b      	mov	r3, r9
 80144d8:	eb45 0303 	adc.w	r3, r5, r3
 80144dc:	607b      	str	r3, [r7, #4]
 80144de:	f04f 0200 	mov.w	r2, #0
 80144e2:	f04f 0300 	mov.w	r3, #0
 80144e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80144ea:	4629      	mov	r1, r5
 80144ec:	028b      	lsls	r3, r1, #10
 80144ee:	4621      	mov	r1, r4
 80144f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80144f4:	4621      	mov	r1, r4
 80144f6:	028a      	lsls	r2, r1, #10
 80144f8:	4610      	mov	r0, r2
 80144fa:	4619      	mov	r1, r3
 80144fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80144fe:	2200      	movs	r2, #0
 8014500:	61bb      	str	r3, [r7, #24]
 8014502:	61fa      	str	r2, [r7, #28]
 8014504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014508:	f7ec fb70 	bl	8000bec <__aeabi_uldivmod>
 801450c:	4602      	mov	r2, r0
 801450e:	460b      	mov	r3, r1
 8014510:	4613      	mov	r3, r2
 8014512:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8014514:	4b0b      	ldr	r3, [pc, #44]	; (8014544 <HAL_RCC_GetSysClockFreq+0x200>)
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	0c1b      	lsrs	r3, r3, #16
 801451a:	f003 0303 	and.w	r3, r3, #3
 801451e:	3301      	adds	r3, #1
 8014520:	005b      	lsls	r3, r3, #1
 8014522:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8014524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014528:	fbb2 f3f3 	udiv	r3, r2, r3
 801452c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801452e:	e002      	b.n	8014536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014530:	4b05      	ldr	r3, [pc, #20]	; (8014548 <HAL_RCC_GetSysClockFreq+0x204>)
 8014532:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8014534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8014536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8014538:	4618      	mov	r0, r3
 801453a:	3750      	adds	r7, #80	; 0x50
 801453c:	46bd      	mov	sp, r7
 801453e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014542:	bf00      	nop
 8014544:	40023800 	.word	0x40023800
 8014548:	00f42400 	.word	0x00f42400
 801454c:	007a1200 	.word	0x007a1200

08014550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014550:	b480      	push	{r7}
 8014552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014554:	4b03      	ldr	r3, [pc, #12]	; (8014564 <HAL_RCC_GetHCLKFreq+0x14>)
 8014556:	681b      	ldr	r3, [r3, #0]
}
 8014558:	4618      	mov	r0, r3
 801455a:	46bd      	mov	sp, r7
 801455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014560:	4770      	bx	lr
 8014562:	bf00      	nop
 8014564:	20000000 	.word	0x20000000

08014568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801456c:	f7ff fff0 	bl	8014550 <HAL_RCC_GetHCLKFreq>
 8014570:	4602      	mov	r2, r0
 8014572:	4b05      	ldr	r3, [pc, #20]	; (8014588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014574:	689b      	ldr	r3, [r3, #8]
 8014576:	0a9b      	lsrs	r3, r3, #10
 8014578:	f003 0307 	and.w	r3, r3, #7
 801457c:	4903      	ldr	r1, [pc, #12]	; (801458c <HAL_RCC_GetPCLK1Freq+0x24>)
 801457e:	5ccb      	ldrb	r3, [r1, r3]
 8014580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014584:	4618      	mov	r0, r3
 8014586:	bd80      	pop	{r7, pc}
 8014588:	40023800 	.word	0x40023800
 801458c:	0801a8a0 	.word	0x0801a8a0

08014590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8014594:	f7ff ffdc 	bl	8014550 <HAL_RCC_GetHCLKFreq>
 8014598:	4602      	mov	r2, r0
 801459a:	4b05      	ldr	r3, [pc, #20]	; (80145b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 801459c:	689b      	ldr	r3, [r3, #8]
 801459e:	0b5b      	lsrs	r3, r3, #13
 80145a0:	f003 0307 	and.w	r3, r3, #7
 80145a4:	4903      	ldr	r1, [pc, #12]	; (80145b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80145a6:	5ccb      	ldrb	r3, [r1, r3]
 80145a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	bd80      	pop	{r7, pc}
 80145b0:	40023800 	.word	0x40023800
 80145b4:	0801a8a0 	.word	0x0801a8a0

080145b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d101      	bne.n	80145ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80145c6:	2301      	movs	r3, #1
 80145c8:	e041      	b.n	801464e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80145d0:	b2db      	uxtb	r3, r3
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d106      	bne.n	80145e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2200      	movs	r2, #0
 80145da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f7ec feb0 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2202      	movs	r2, #2
 80145e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681a      	ldr	r2, [r3, #0]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	3304      	adds	r3, #4
 80145f4:	4619      	mov	r1, r3
 80145f6:	4610      	mov	r0, r2
 80145f8:	f000 fa70 	bl	8014adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2201      	movs	r2, #1
 8014600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2201      	movs	r2, #1
 8014608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2201      	movs	r2, #1
 8014610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2201      	movs	r2, #1
 8014618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2201      	movs	r2, #1
 8014620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	2201      	movs	r2, #1
 8014628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2201      	movs	r2, #1
 8014630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2201      	movs	r2, #1
 8014638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2201      	movs	r2, #1
 8014640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2201      	movs	r2, #1
 8014648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801464c:	2300      	movs	r3, #0
}
 801464e:	4618      	mov	r0, r3
 8014650:	3708      	adds	r7, #8
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
	...

08014658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014658:	b480      	push	{r7}
 801465a:	b085      	sub	sp, #20
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014666:	b2db      	uxtb	r3, r3
 8014668:	2b01      	cmp	r3, #1
 801466a:	d001      	beq.n	8014670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801466c:	2301      	movs	r3, #1
 801466e:	e044      	b.n	80146fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2202      	movs	r2, #2
 8014674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	68da      	ldr	r2, [r3, #12]
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	f042 0201 	orr.w	r2, r2, #1
 8014686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	4a1e      	ldr	r2, [pc, #120]	; (8014708 <HAL_TIM_Base_Start_IT+0xb0>)
 801468e:	4293      	cmp	r3, r2
 8014690:	d018      	beq.n	80146c4 <HAL_TIM_Base_Start_IT+0x6c>
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801469a:	d013      	beq.n	80146c4 <HAL_TIM_Base_Start_IT+0x6c>
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	4a1a      	ldr	r2, [pc, #104]	; (801470c <HAL_TIM_Base_Start_IT+0xb4>)
 80146a2:	4293      	cmp	r3, r2
 80146a4:	d00e      	beq.n	80146c4 <HAL_TIM_Base_Start_IT+0x6c>
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	4a19      	ldr	r2, [pc, #100]	; (8014710 <HAL_TIM_Base_Start_IT+0xb8>)
 80146ac:	4293      	cmp	r3, r2
 80146ae:	d009      	beq.n	80146c4 <HAL_TIM_Base_Start_IT+0x6c>
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4a17      	ldr	r2, [pc, #92]	; (8014714 <HAL_TIM_Base_Start_IT+0xbc>)
 80146b6:	4293      	cmp	r3, r2
 80146b8:	d004      	beq.n	80146c4 <HAL_TIM_Base_Start_IT+0x6c>
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	4a16      	ldr	r2, [pc, #88]	; (8014718 <HAL_TIM_Base_Start_IT+0xc0>)
 80146c0:	4293      	cmp	r3, r2
 80146c2:	d111      	bne.n	80146e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	689b      	ldr	r3, [r3, #8]
 80146ca:	f003 0307 	and.w	r3, r3, #7
 80146ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	2b06      	cmp	r3, #6
 80146d4:	d010      	beq.n	80146f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f042 0201 	orr.w	r2, r2, #1
 80146e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80146e6:	e007      	b.n	80146f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	f042 0201 	orr.w	r2, r2, #1
 80146f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80146f8:	2300      	movs	r3, #0
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3714      	adds	r7, #20
 80146fe:	46bd      	mov	sp, r7
 8014700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014704:	4770      	bx	lr
 8014706:	bf00      	nop
 8014708:	40010000 	.word	0x40010000
 801470c:	40000400 	.word	0x40000400
 8014710:	40000800 	.word	0x40000800
 8014714:	40000c00 	.word	0x40000c00
 8014718:	40014000 	.word	0x40014000

0801471c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b084      	sub	sp, #16
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	68db      	ldr	r3, [r3, #12]
 801472a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	691b      	ldr	r3, [r3, #16]
 8014732:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	f003 0302 	and.w	r3, r3, #2
 801473a:	2b00      	cmp	r3, #0
 801473c:	d020      	beq.n	8014780 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	f003 0302 	and.w	r3, r3, #2
 8014744:	2b00      	cmp	r3, #0
 8014746:	d01b      	beq.n	8014780 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	f06f 0202 	mvn.w	r2, #2
 8014750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2201      	movs	r2, #1
 8014756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	699b      	ldr	r3, [r3, #24]
 801475e:	f003 0303 	and.w	r3, r3, #3
 8014762:	2b00      	cmp	r3, #0
 8014764:	d003      	beq.n	801476e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 f999 	bl	8014a9e <HAL_TIM_IC_CaptureCallback>
 801476c:	e005      	b.n	801477a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f000 f98b 	bl	8014a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f000 f99c 	bl	8014ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	2200      	movs	r2, #0
 801477e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	f003 0304 	and.w	r3, r3, #4
 8014786:	2b00      	cmp	r3, #0
 8014788:	d020      	beq.n	80147cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	f003 0304 	and.w	r3, r3, #4
 8014790:	2b00      	cmp	r3, #0
 8014792:	d01b      	beq.n	80147cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	f06f 0204 	mvn.w	r2, #4
 801479c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	2202      	movs	r2, #2
 80147a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	699b      	ldr	r3, [r3, #24]
 80147aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d003      	beq.n	80147ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f000 f973 	bl	8014a9e <HAL_TIM_IC_CaptureCallback>
 80147b8:	e005      	b.n	80147c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f000 f965 	bl	8014a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f000 f976 	bl	8014ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2200      	movs	r2, #0
 80147ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	f003 0308 	and.w	r3, r3, #8
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d020      	beq.n	8014818 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	f003 0308 	and.w	r3, r3, #8
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d01b      	beq.n	8014818 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	f06f 0208 	mvn.w	r2, #8
 80147e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2204      	movs	r2, #4
 80147ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	69db      	ldr	r3, [r3, #28]
 80147f6:	f003 0303 	and.w	r3, r3, #3
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d003      	beq.n	8014806 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f000 f94d 	bl	8014a9e <HAL_TIM_IC_CaptureCallback>
 8014804:	e005      	b.n	8014812 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 f93f 	bl	8014a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 f950 	bl	8014ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2200      	movs	r2, #0
 8014816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	f003 0310 	and.w	r3, r3, #16
 801481e:	2b00      	cmp	r3, #0
 8014820:	d020      	beq.n	8014864 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	f003 0310 	and.w	r3, r3, #16
 8014828:	2b00      	cmp	r3, #0
 801482a:	d01b      	beq.n	8014864 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	f06f 0210 	mvn.w	r2, #16
 8014834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2208      	movs	r2, #8
 801483a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	69db      	ldr	r3, [r3, #28]
 8014842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014846:	2b00      	cmp	r3, #0
 8014848:	d003      	beq.n	8014852 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	f000 f927 	bl	8014a9e <HAL_TIM_IC_CaptureCallback>
 8014850:	e005      	b.n	801485e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 f919 	bl	8014a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f000 f92a 	bl	8014ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2200      	movs	r2, #0
 8014862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	f003 0301 	and.w	r3, r3, #1
 801486a:	2b00      	cmp	r3, #0
 801486c:	d00c      	beq.n	8014888 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	f003 0301 	and.w	r3, r3, #1
 8014874:	2b00      	cmp	r3, #0
 8014876:	d007      	beq.n	8014888 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	f06f 0201 	mvn.w	r2, #1
 8014880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f7ec fb66 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801488e:	2b00      	cmp	r3, #0
 8014890:	d00c      	beq.n	80148ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014898:	2b00      	cmp	r3, #0
 801489a:	d007      	beq.n	80148ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80148a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f000 fab6 	bl	8014e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d00c      	beq.n	80148d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d007      	beq.n	80148d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80148c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 f8fb 	bl	8014ac6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	f003 0320 	and.w	r3, r3, #32
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00c      	beq.n	80148f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	f003 0320 	and.w	r3, r3, #32
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d007      	beq.n	80148f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	f06f 0220 	mvn.w	r2, #32
 80148ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80148ee:	6878      	ldr	r0, [r7, #4]
 80148f0:	f000 fa88 	bl	8014e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80148f4:	bf00      	nop
 80148f6:	3710      	adds	r7, #16
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}

080148fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b084      	sub	sp, #16
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014906:	2300      	movs	r3, #0
 8014908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014910:	2b01      	cmp	r3, #1
 8014912:	d101      	bne.n	8014918 <HAL_TIM_ConfigClockSource+0x1c>
 8014914:	2302      	movs	r3, #2
 8014916:	e0b4      	b.n	8014a82 <HAL_TIM_ConfigClockSource+0x186>
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2201      	movs	r2, #1
 801491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2202      	movs	r2, #2
 8014924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	689b      	ldr	r3, [r3, #8]
 801492e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801493e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	68ba      	ldr	r2, [r7, #8]
 8014946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014950:	d03e      	beq.n	80149d0 <HAL_TIM_ConfigClockSource+0xd4>
 8014952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014956:	f200 8087 	bhi.w	8014a68 <HAL_TIM_ConfigClockSource+0x16c>
 801495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801495e:	f000 8086 	beq.w	8014a6e <HAL_TIM_ConfigClockSource+0x172>
 8014962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014966:	d87f      	bhi.n	8014a68 <HAL_TIM_ConfigClockSource+0x16c>
 8014968:	2b70      	cmp	r3, #112	; 0x70
 801496a:	d01a      	beq.n	80149a2 <HAL_TIM_ConfigClockSource+0xa6>
 801496c:	2b70      	cmp	r3, #112	; 0x70
 801496e:	d87b      	bhi.n	8014a68 <HAL_TIM_ConfigClockSource+0x16c>
 8014970:	2b60      	cmp	r3, #96	; 0x60
 8014972:	d050      	beq.n	8014a16 <HAL_TIM_ConfigClockSource+0x11a>
 8014974:	2b60      	cmp	r3, #96	; 0x60
 8014976:	d877      	bhi.n	8014a68 <HAL_TIM_ConfigClockSource+0x16c>
 8014978:	2b50      	cmp	r3, #80	; 0x50
 801497a:	d03c      	beq.n	80149f6 <HAL_TIM_ConfigClockSource+0xfa>
 801497c:	2b50      	cmp	r3, #80	; 0x50
 801497e:	d873      	bhi.n	8014a68 <HAL_TIM_ConfigClockSource+0x16c>
 8014980:	2b40      	cmp	r3, #64	; 0x40
 8014982:	d058      	beq.n	8014a36 <HAL_TIM_ConfigClockSource+0x13a>
 8014984:	2b40      	cmp	r3, #64	; 0x40
 8014986:	d86f      	bhi.n	8014a68 <HAL_TIM_ConfigClockSource+0x16c>
 8014988:	2b30      	cmp	r3, #48	; 0x30
 801498a:	d064      	beq.n	8014a56 <HAL_TIM_ConfigClockSource+0x15a>
 801498c:	2b30      	cmp	r3, #48	; 0x30
 801498e:	d86b      	bhi.n	8014a68 <HAL_TIM_ConfigClockSource+0x16c>
 8014990:	2b20      	cmp	r3, #32
 8014992:	d060      	beq.n	8014a56 <HAL_TIM_ConfigClockSource+0x15a>
 8014994:	2b20      	cmp	r3, #32
 8014996:	d867      	bhi.n	8014a68 <HAL_TIM_ConfigClockSource+0x16c>
 8014998:	2b00      	cmp	r3, #0
 801499a:	d05c      	beq.n	8014a56 <HAL_TIM_ConfigClockSource+0x15a>
 801499c:	2b10      	cmp	r3, #16
 801499e:	d05a      	beq.n	8014a56 <HAL_TIM_ConfigClockSource+0x15a>
 80149a0:	e062      	b.n	8014a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80149b2:	f000 f999 	bl	8014ce8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	689b      	ldr	r3, [r3, #8]
 80149bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80149c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	68ba      	ldr	r2, [r7, #8]
 80149cc:	609a      	str	r2, [r3, #8]
      break;
 80149ce:	e04f      	b.n	8014a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80149e0:	f000 f982 	bl	8014ce8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	689a      	ldr	r2, [r3, #8]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80149f2:	609a      	str	r2, [r3, #8]
      break;
 80149f4:	e03c      	b.n	8014a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014a02:	461a      	mov	r2, r3
 8014a04:	f000 f8f6 	bl	8014bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	2150      	movs	r1, #80	; 0x50
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f000 f94f 	bl	8014cb2 <TIM_ITRx_SetConfig>
      break;
 8014a14:	e02c      	b.n	8014a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014a22:	461a      	mov	r2, r3
 8014a24:	f000 f915 	bl	8014c52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	2160      	movs	r1, #96	; 0x60
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f000 f93f 	bl	8014cb2 <TIM_ITRx_SetConfig>
      break;
 8014a34:	e01c      	b.n	8014a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014a42:	461a      	mov	r2, r3
 8014a44:	f000 f8d6 	bl	8014bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	2140      	movs	r1, #64	; 0x40
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f000 f92f 	bl	8014cb2 <TIM_ITRx_SetConfig>
      break;
 8014a54:	e00c      	b.n	8014a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681a      	ldr	r2, [r3, #0]
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	4619      	mov	r1, r3
 8014a60:	4610      	mov	r0, r2
 8014a62:	f000 f926 	bl	8014cb2 <TIM_ITRx_SetConfig>
      break;
 8014a66:	e003      	b.n	8014a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8014a68:	2301      	movs	r3, #1
 8014a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8014a6c:	e000      	b.n	8014a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8014a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2201      	movs	r2, #1
 8014a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3710      	adds	r7, #16
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}

08014a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014a8a:	b480      	push	{r7}
 8014a8c:	b083      	sub	sp, #12
 8014a8e:	af00      	add	r7, sp, #0
 8014a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014a92:	bf00      	nop
 8014a94:	370c      	adds	r7, #12
 8014a96:	46bd      	mov	sp, r7
 8014a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9c:	4770      	bx	lr

08014a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014a9e:	b480      	push	{r7}
 8014aa0:	b083      	sub	sp, #12
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014aa6:	bf00      	nop
 8014aa8:	370c      	adds	r7, #12
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab0:	4770      	bx	lr

08014ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014ab2:	b480      	push	{r7}
 8014ab4:	b083      	sub	sp, #12
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014aba:	bf00      	nop
 8014abc:	370c      	adds	r7, #12
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr

08014ac6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014ac6:	b480      	push	{r7}
 8014ac8:	b083      	sub	sp, #12
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014ace:	bf00      	nop
 8014ad0:	370c      	adds	r7, #12
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad8:	4770      	bx	lr
	...

08014adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014adc:	b480      	push	{r7}
 8014ade:	b085      	sub	sp, #20
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	4a3a      	ldr	r2, [pc, #232]	; (8014bd8 <TIM_Base_SetConfig+0xfc>)
 8014af0:	4293      	cmp	r3, r2
 8014af2:	d00f      	beq.n	8014b14 <TIM_Base_SetConfig+0x38>
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014afa:	d00b      	beq.n	8014b14 <TIM_Base_SetConfig+0x38>
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	4a37      	ldr	r2, [pc, #220]	; (8014bdc <TIM_Base_SetConfig+0x100>)
 8014b00:	4293      	cmp	r3, r2
 8014b02:	d007      	beq.n	8014b14 <TIM_Base_SetConfig+0x38>
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	4a36      	ldr	r2, [pc, #216]	; (8014be0 <TIM_Base_SetConfig+0x104>)
 8014b08:	4293      	cmp	r3, r2
 8014b0a:	d003      	beq.n	8014b14 <TIM_Base_SetConfig+0x38>
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	4a35      	ldr	r2, [pc, #212]	; (8014be4 <TIM_Base_SetConfig+0x108>)
 8014b10:	4293      	cmp	r3, r2
 8014b12:	d108      	bne.n	8014b26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	685b      	ldr	r3, [r3, #4]
 8014b20:	68fa      	ldr	r2, [r7, #12]
 8014b22:	4313      	orrs	r3, r2
 8014b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	4a2b      	ldr	r2, [pc, #172]	; (8014bd8 <TIM_Base_SetConfig+0xfc>)
 8014b2a:	4293      	cmp	r3, r2
 8014b2c:	d01b      	beq.n	8014b66 <TIM_Base_SetConfig+0x8a>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014b34:	d017      	beq.n	8014b66 <TIM_Base_SetConfig+0x8a>
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	4a28      	ldr	r2, [pc, #160]	; (8014bdc <TIM_Base_SetConfig+0x100>)
 8014b3a:	4293      	cmp	r3, r2
 8014b3c:	d013      	beq.n	8014b66 <TIM_Base_SetConfig+0x8a>
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	4a27      	ldr	r2, [pc, #156]	; (8014be0 <TIM_Base_SetConfig+0x104>)
 8014b42:	4293      	cmp	r3, r2
 8014b44:	d00f      	beq.n	8014b66 <TIM_Base_SetConfig+0x8a>
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	4a26      	ldr	r2, [pc, #152]	; (8014be4 <TIM_Base_SetConfig+0x108>)
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	d00b      	beq.n	8014b66 <TIM_Base_SetConfig+0x8a>
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	4a25      	ldr	r2, [pc, #148]	; (8014be8 <TIM_Base_SetConfig+0x10c>)
 8014b52:	4293      	cmp	r3, r2
 8014b54:	d007      	beq.n	8014b66 <TIM_Base_SetConfig+0x8a>
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	4a24      	ldr	r2, [pc, #144]	; (8014bec <TIM_Base_SetConfig+0x110>)
 8014b5a:	4293      	cmp	r3, r2
 8014b5c:	d003      	beq.n	8014b66 <TIM_Base_SetConfig+0x8a>
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	4a23      	ldr	r2, [pc, #140]	; (8014bf0 <TIM_Base_SetConfig+0x114>)
 8014b62:	4293      	cmp	r3, r2
 8014b64:	d108      	bne.n	8014b78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	68db      	ldr	r3, [r3, #12]
 8014b72:	68fa      	ldr	r2, [r7, #12]
 8014b74:	4313      	orrs	r3, r2
 8014b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	695b      	ldr	r3, [r3, #20]
 8014b82:	4313      	orrs	r3, r2
 8014b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	68fa      	ldr	r2, [r7, #12]
 8014b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	689a      	ldr	r2, [r3, #8]
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	681a      	ldr	r2, [r3, #0]
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	4a0e      	ldr	r2, [pc, #56]	; (8014bd8 <TIM_Base_SetConfig+0xfc>)
 8014ba0:	4293      	cmp	r3, r2
 8014ba2:	d103      	bne.n	8014bac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	691a      	ldr	r2, [r3, #16]
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2201      	movs	r2, #1
 8014bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	691b      	ldr	r3, [r3, #16]
 8014bb6:	f003 0301 	and.w	r3, r3, #1
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	d105      	bne.n	8014bca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	691b      	ldr	r3, [r3, #16]
 8014bc2:	f023 0201 	bic.w	r2, r3, #1
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	611a      	str	r2, [r3, #16]
  }
}
 8014bca:	bf00      	nop
 8014bcc:	3714      	adds	r7, #20
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd4:	4770      	bx	lr
 8014bd6:	bf00      	nop
 8014bd8:	40010000 	.word	0x40010000
 8014bdc:	40000400 	.word	0x40000400
 8014be0:	40000800 	.word	0x40000800
 8014be4:	40000c00 	.word	0x40000c00
 8014be8:	40014000 	.word	0x40014000
 8014bec:	40014400 	.word	0x40014400
 8014bf0:	40014800 	.word	0x40014800

08014bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b087      	sub	sp, #28
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	60f8      	str	r0, [r7, #12]
 8014bfc:	60b9      	str	r1, [r7, #8]
 8014bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	6a1b      	ldr	r3, [r3, #32]
 8014c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	6a1b      	ldr	r3, [r3, #32]
 8014c0a:	f023 0201 	bic.w	r2, r3, #1
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	699b      	ldr	r3, [r3, #24]
 8014c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	011b      	lsls	r3, r3, #4
 8014c24:	693a      	ldr	r2, [r7, #16]
 8014c26:	4313      	orrs	r3, r2
 8014c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	f023 030a 	bic.w	r3, r3, #10
 8014c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014c32:	697a      	ldr	r2, [r7, #20]
 8014c34:	68bb      	ldr	r3, [r7, #8]
 8014c36:	4313      	orrs	r3, r2
 8014c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	693a      	ldr	r2, [r7, #16]
 8014c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	697a      	ldr	r2, [r7, #20]
 8014c44:	621a      	str	r2, [r3, #32]
}
 8014c46:	bf00      	nop
 8014c48:	371c      	adds	r7, #28
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c50:	4770      	bx	lr

08014c52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014c52:	b480      	push	{r7}
 8014c54:	b087      	sub	sp, #28
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	60f8      	str	r0, [r7, #12]
 8014c5a:	60b9      	str	r1, [r7, #8]
 8014c5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6a1b      	ldr	r3, [r3, #32]
 8014c62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	6a1b      	ldr	r3, [r3, #32]
 8014c68:	f023 0210 	bic.w	r2, r3, #16
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	699b      	ldr	r3, [r3, #24]
 8014c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014c76:	693b      	ldr	r3, [r7, #16]
 8014c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	031b      	lsls	r3, r3, #12
 8014c82:	693a      	ldr	r2, [r7, #16]
 8014c84:	4313      	orrs	r3, r2
 8014c86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014c8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	011b      	lsls	r3, r3, #4
 8014c94:	697a      	ldr	r2, [r7, #20]
 8014c96:	4313      	orrs	r3, r2
 8014c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	693a      	ldr	r2, [r7, #16]
 8014c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	697a      	ldr	r2, [r7, #20]
 8014ca4:	621a      	str	r2, [r3, #32]
}
 8014ca6:	bf00      	nop
 8014ca8:	371c      	adds	r7, #28
 8014caa:	46bd      	mov	sp, r7
 8014cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb0:	4770      	bx	lr

08014cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014cb2:	b480      	push	{r7}
 8014cb4:	b085      	sub	sp, #20
 8014cb6:	af00      	add	r7, sp, #0
 8014cb8:	6078      	str	r0, [r7, #4]
 8014cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	689b      	ldr	r3, [r3, #8]
 8014cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014cca:	683a      	ldr	r2, [r7, #0]
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	4313      	orrs	r3, r2
 8014cd0:	f043 0307 	orr.w	r3, r3, #7
 8014cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	68fa      	ldr	r2, [r7, #12]
 8014cda:	609a      	str	r2, [r3, #8]
}
 8014cdc:	bf00      	nop
 8014cde:	3714      	adds	r7, #20
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr

08014ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014ce8:	b480      	push	{r7}
 8014cea:	b087      	sub	sp, #28
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	60f8      	str	r0, [r7, #12]
 8014cf0:	60b9      	str	r1, [r7, #8]
 8014cf2:	607a      	str	r2, [r7, #4]
 8014cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	689b      	ldr	r3, [r3, #8]
 8014cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	021a      	lsls	r2, r3, #8
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	431a      	orrs	r2, r3
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	4313      	orrs	r3, r2
 8014d10:	697a      	ldr	r2, [r7, #20]
 8014d12:	4313      	orrs	r3, r2
 8014d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	697a      	ldr	r2, [r7, #20]
 8014d1a:	609a      	str	r2, [r3, #8]
}
 8014d1c:	bf00      	nop
 8014d1e:	371c      	adds	r7, #28
 8014d20:	46bd      	mov	sp, r7
 8014d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d26:	4770      	bx	lr

08014d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014d28:	b480      	push	{r7}
 8014d2a:	b085      	sub	sp, #20
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014d38:	2b01      	cmp	r3, #1
 8014d3a:	d101      	bne.n	8014d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014d3c:	2302      	movs	r3, #2
 8014d3e:	e050      	b.n	8014de2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	2201      	movs	r2, #1
 8014d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2202      	movs	r2, #2
 8014d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	689b      	ldr	r3, [r3, #8]
 8014d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	68fa      	ldr	r2, [r7, #12]
 8014d6e:	4313      	orrs	r3, r2
 8014d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	68fa      	ldr	r2, [r7, #12]
 8014d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	4a1c      	ldr	r2, [pc, #112]	; (8014df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8014d80:	4293      	cmp	r3, r2
 8014d82:	d018      	beq.n	8014db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d8c:	d013      	beq.n	8014db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	4a18      	ldr	r2, [pc, #96]	; (8014df4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8014d94:	4293      	cmp	r3, r2
 8014d96:	d00e      	beq.n	8014db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	4a16      	ldr	r2, [pc, #88]	; (8014df8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8014d9e:	4293      	cmp	r3, r2
 8014da0:	d009      	beq.n	8014db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	4a15      	ldr	r2, [pc, #84]	; (8014dfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8014da8:	4293      	cmp	r3, r2
 8014daa:	d004      	beq.n	8014db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	4a13      	ldr	r2, [pc, #76]	; (8014e00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8014db2:	4293      	cmp	r3, r2
 8014db4:	d10c      	bne.n	8014dd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	68ba      	ldr	r2, [r7, #8]
 8014dc4:	4313      	orrs	r3, r2
 8014dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	68ba      	ldr	r2, [r7, #8]
 8014dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2201      	movs	r2, #1
 8014dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014de0:	2300      	movs	r3, #0
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3714      	adds	r7, #20
 8014de6:	46bd      	mov	sp, r7
 8014de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dec:	4770      	bx	lr
 8014dee:	bf00      	nop
 8014df0:	40010000 	.word	0x40010000
 8014df4:	40000400 	.word	0x40000400
 8014df8:	40000800 	.word	0x40000800
 8014dfc:	40000c00 	.word	0x40000c00
 8014e00:	40014000 	.word	0x40014000

08014e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b083      	sub	sp, #12
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014e0c:	bf00      	nop
 8014e0e:	370c      	adds	r7, #12
 8014e10:	46bd      	mov	sp, r7
 8014e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e16:	4770      	bx	lr

08014e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014e20:	bf00      	nop
 8014e22:	370c      	adds	r7, #12
 8014e24:	46bd      	mov	sp, r7
 8014e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2a:	4770      	bx	lr

08014e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b082      	sub	sp, #8
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d101      	bne.n	8014e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	e042      	b.n	8014ec4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014e44:	b2db      	uxtb	r3, r3
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d106      	bne.n	8014e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f7ec fa9c 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2224      	movs	r2, #36	; 0x24
 8014e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	68da      	ldr	r2, [r3, #12]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f000 f973 	bl	801515c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	691a      	ldr	r2, [r3, #16]
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	695a      	ldr	r2, [r3, #20]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	68da      	ldr	r2, [r3, #12]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2220      	movs	r2, #32
 8014eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2220      	movs	r2, #32
 8014eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8014ec2:	2300      	movs	r3, #0
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b08a      	sub	sp, #40	; 0x28
 8014ed0:	af02      	add	r7, sp, #8
 8014ed2:	60f8      	str	r0, [r7, #12]
 8014ed4:	60b9      	str	r1, [r7, #8]
 8014ed6:	603b      	str	r3, [r7, #0]
 8014ed8:	4613      	mov	r3, r2
 8014eda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8014edc:	2300      	movs	r3, #0
 8014ede:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014ee6:	b2db      	uxtb	r3, r3
 8014ee8:	2b20      	cmp	r3, #32
 8014eea:	d175      	bne.n	8014fd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8014eec:	68bb      	ldr	r3, [r7, #8]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d002      	beq.n	8014ef8 <HAL_UART_Transmit+0x2c>
 8014ef2:	88fb      	ldrh	r3, [r7, #6]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d101      	bne.n	8014efc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8014ef8:	2301      	movs	r3, #1
 8014efa:	e06e      	b.n	8014fda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	2200      	movs	r2, #0
 8014f00:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	2221      	movs	r2, #33	; 0x21
 8014f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014f0a:	f7fe fbbd 	bl	8013688 <HAL_GetTick>
 8014f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	88fa      	ldrh	r2, [r7, #6]
 8014f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	88fa      	ldrh	r2, [r7, #6]
 8014f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	689b      	ldr	r3, [r3, #8]
 8014f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f24:	d108      	bne.n	8014f38 <HAL_UART_Transmit+0x6c>
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	691b      	ldr	r3, [r3, #16]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d104      	bne.n	8014f38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	61bb      	str	r3, [r7, #24]
 8014f36:	e003      	b.n	8014f40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014f40:	e02e      	b.n	8014fa0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	9300      	str	r3, [sp, #0]
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	2180      	movs	r1, #128	; 0x80
 8014f4c:	68f8      	ldr	r0, [r7, #12]
 8014f4e:	f000 f848 	bl	8014fe2 <UART_WaitOnFlagUntilTimeout>
 8014f52:	4603      	mov	r3, r0
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d005      	beq.n	8014f64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2220      	movs	r2, #32
 8014f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8014f60:	2303      	movs	r3, #3
 8014f62:	e03a      	b.n	8014fda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8014f64:	69fb      	ldr	r3, [r7, #28]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d10b      	bne.n	8014f82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014f6a:	69bb      	ldr	r3, [r7, #24]
 8014f6c:	881b      	ldrh	r3, [r3, #0]
 8014f6e:	461a      	mov	r2, r3
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8014f7a:	69bb      	ldr	r3, [r7, #24]
 8014f7c:	3302      	adds	r3, #2
 8014f7e:	61bb      	str	r3, [r7, #24]
 8014f80:	e007      	b.n	8014f92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	781a      	ldrb	r2, [r3, #0]
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8014f8c:	69fb      	ldr	r3, [r7, #28]
 8014f8e:	3301      	adds	r3, #1
 8014f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014f96:	b29b      	uxth	r3, r3
 8014f98:	3b01      	subs	r3, #1
 8014f9a:	b29a      	uxth	r2, r3
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014fa4:	b29b      	uxth	r3, r3
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d1cb      	bne.n	8014f42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	9300      	str	r3, [sp, #0]
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	2140      	movs	r1, #64	; 0x40
 8014fb4:	68f8      	ldr	r0, [r7, #12]
 8014fb6:	f000 f814 	bl	8014fe2 <UART_WaitOnFlagUntilTimeout>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d005      	beq.n	8014fcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	2220      	movs	r2, #32
 8014fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8014fc8:	2303      	movs	r3, #3
 8014fca:	e006      	b.n	8014fda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	2220      	movs	r2, #32
 8014fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	e000      	b.n	8014fda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8014fd8:	2302      	movs	r3, #2
  }
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	3720      	adds	r7, #32
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}

08014fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014fe2:	b580      	push	{r7, lr}
 8014fe4:	b086      	sub	sp, #24
 8014fe6:	af00      	add	r7, sp, #0
 8014fe8:	60f8      	str	r0, [r7, #12]
 8014fea:	60b9      	str	r1, [r7, #8]
 8014fec:	603b      	str	r3, [r7, #0]
 8014fee:	4613      	mov	r3, r2
 8014ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014ff2:	e03b      	b.n	801506c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014ff4:	6a3b      	ldr	r3, [r7, #32]
 8014ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ffa:	d037      	beq.n	801506c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ffc:	f7fe fb44 	bl	8013688 <HAL_GetTick>
 8015000:	4602      	mov	r2, r0
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	1ad3      	subs	r3, r2, r3
 8015006:	6a3a      	ldr	r2, [r7, #32]
 8015008:	429a      	cmp	r2, r3
 801500a:	d302      	bcc.n	8015012 <UART_WaitOnFlagUntilTimeout+0x30>
 801500c:	6a3b      	ldr	r3, [r7, #32]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d101      	bne.n	8015016 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015012:	2303      	movs	r3, #3
 8015014:	e03a      	b.n	801508c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68db      	ldr	r3, [r3, #12]
 801501c:	f003 0304 	and.w	r3, r3, #4
 8015020:	2b00      	cmp	r3, #0
 8015022:	d023      	beq.n	801506c <UART_WaitOnFlagUntilTimeout+0x8a>
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	2b80      	cmp	r3, #128	; 0x80
 8015028:	d020      	beq.n	801506c <UART_WaitOnFlagUntilTimeout+0x8a>
 801502a:	68bb      	ldr	r3, [r7, #8]
 801502c:	2b40      	cmp	r3, #64	; 0x40
 801502e:	d01d      	beq.n	801506c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	f003 0308 	and.w	r3, r3, #8
 801503a:	2b08      	cmp	r3, #8
 801503c:	d116      	bne.n	801506c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 801503e:	2300      	movs	r3, #0
 8015040:	617b      	str	r3, [r7, #20]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	617b      	str	r3, [r7, #20]
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	617b      	str	r3, [r7, #20]
 8015052:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	f000 f81d 	bl	8015094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	2208      	movs	r2, #8
 801505e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2200      	movs	r2, #0
 8015064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8015068:	2301      	movs	r3, #1
 801506a:	e00f      	b.n	801508c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	4013      	ands	r3, r2
 8015076:	68ba      	ldr	r2, [r7, #8]
 8015078:	429a      	cmp	r2, r3
 801507a:	bf0c      	ite	eq
 801507c:	2301      	moveq	r3, #1
 801507e:	2300      	movne	r3, #0
 8015080:	b2db      	uxtb	r3, r3
 8015082:	461a      	mov	r2, r3
 8015084:	79fb      	ldrb	r3, [r7, #7]
 8015086:	429a      	cmp	r2, r3
 8015088:	d0b4      	beq.n	8014ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801508a:	2300      	movs	r3, #0
}
 801508c:	4618      	mov	r0, r3
 801508e:	3718      	adds	r7, #24
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}

08015094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015094:	b480      	push	{r7}
 8015096:	b095      	sub	sp, #84	; 0x54
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	330c      	adds	r3, #12
 80150a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150a6:	e853 3f00 	ldrex	r3, [r3]
 80150aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80150ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80150b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	330c      	adds	r3, #12
 80150ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80150bc:	643a      	str	r2, [r7, #64]	; 0x40
 80150be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80150c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80150c4:	e841 2300 	strex	r3, r2, [r1]
 80150c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80150ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d1e5      	bne.n	801509c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	3314      	adds	r3, #20
 80150d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150d8:	6a3b      	ldr	r3, [r7, #32]
 80150da:	e853 3f00 	ldrex	r3, [r3]
 80150de:	61fb      	str	r3, [r7, #28]
   return(result);
 80150e0:	69fb      	ldr	r3, [r7, #28]
 80150e2:	f023 0301 	bic.w	r3, r3, #1
 80150e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	3314      	adds	r3, #20
 80150ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80150f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80150f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80150f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150f8:	e841 2300 	strex	r3, r2, [r1]
 80150fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80150fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015100:	2b00      	cmp	r3, #0
 8015102:	d1e5      	bne.n	80150d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015108:	2b01      	cmp	r3, #1
 801510a:	d119      	bne.n	8015140 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	330c      	adds	r3, #12
 8015112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	e853 3f00 	ldrex	r3, [r3]
 801511a:	60bb      	str	r3, [r7, #8]
   return(result);
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	f023 0310 	bic.w	r3, r3, #16
 8015122:	647b      	str	r3, [r7, #68]	; 0x44
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	330c      	adds	r3, #12
 801512a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801512c:	61ba      	str	r2, [r7, #24]
 801512e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015130:	6979      	ldr	r1, [r7, #20]
 8015132:	69ba      	ldr	r2, [r7, #24]
 8015134:	e841 2300 	strex	r3, r2, [r1]
 8015138:	613b      	str	r3, [r7, #16]
   return(result);
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d1e5      	bne.n	801510c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2220      	movs	r2, #32
 8015144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	2200      	movs	r2, #0
 801514c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801514e:	bf00      	nop
 8015150:	3754      	adds	r7, #84	; 0x54
 8015152:	46bd      	mov	sp, r7
 8015154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015158:	4770      	bx	lr
	...

0801515c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801515c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015160:	b0c0      	sub	sp, #256	; 0x100
 8015162:	af00      	add	r7, sp, #0
 8015164:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	691b      	ldr	r3, [r3, #16]
 8015170:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8015174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015178:	68d9      	ldr	r1, [r3, #12]
 801517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801517e:	681a      	ldr	r2, [r3, #0]
 8015180:	ea40 0301 	orr.w	r3, r0, r1
 8015184:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801518a:	689a      	ldr	r2, [r3, #8]
 801518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015190:	691b      	ldr	r3, [r3, #16]
 8015192:	431a      	orrs	r2, r3
 8015194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015198:	695b      	ldr	r3, [r3, #20]
 801519a:	431a      	orrs	r2, r3
 801519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151a0:	69db      	ldr	r3, [r3, #28]
 80151a2:	4313      	orrs	r3, r2
 80151a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80151a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	68db      	ldr	r3, [r3, #12]
 80151b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80151b4:	f021 010c 	bic.w	r1, r1, #12
 80151b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80151c2:	430b      	orrs	r3, r1
 80151c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80151c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	695b      	ldr	r3, [r3, #20]
 80151ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80151d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151d6:	6999      	ldr	r1, [r3, #24]
 80151d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	ea40 0301 	orr.w	r3, r0, r1
 80151e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80151e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151e8:	681a      	ldr	r2, [r3, #0]
 80151ea:	4b8f      	ldr	r3, [pc, #572]	; (8015428 <UART_SetConfig+0x2cc>)
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d005      	beq.n	80151fc <UART_SetConfig+0xa0>
 80151f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	4b8d      	ldr	r3, [pc, #564]	; (801542c <UART_SetConfig+0x2d0>)
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d104      	bne.n	8015206 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80151fc:	f7ff f9c8 	bl	8014590 <HAL_RCC_GetPCLK2Freq>
 8015200:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8015204:	e003      	b.n	801520e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015206:	f7ff f9af 	bl	8014568 <HAL_RCC_GetPCLK1Freq>
 801520a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015212:	69db      	ldr	r3, [r3, #28]
 8015214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015218:	f040 810c 	bne.w	8015434 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801521c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015220:	2200      	movs	r2, #0
 8015222:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8015226:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801522a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801522e:	4622      	mov	r2, r4
 8015230:	462b      	mov	r3, r5
 8015232:	1891      	adds	r1, r2, r2
 8015234:	65b9      	str	r1, [r7, #88]	; 0x58
 8015236:	415b      	adcs	r3, r3
 8015238:	65fb      	str	r3, [r7, #92]	; 0x5c
 801523a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801523e:	4621      	mov	r1, r4
 8015240:	eb12 0801 	adds.w	r8, r2, r1
 8015244:	4629      	mov	r1, r5
 8015246:	eb43 0901 	adc.w	r9, r3, r1
 801524a:	f04f 0200 	mov.w	r2, #0
 801524e:	f04f 0300 	mov.w	r3, #0
 8015252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8015256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801525a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801525e:	4690      	mov	r8, r2
 8015260:	4699      	mov	r9, r3
 8015262:	4623      	mov	r3, r4
 8015264:	eb18 0303 	adds.w	r3, r8, r3
 8015268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801526c:	462b      	mov	r3, r5
 801526e:	eb49 0303 	adc.w	r3, r9, r3
 8015272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	2200      	movs	r2, #0
 801527e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8015282:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8015286:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801528a:	460b      	mov	r3, r1
 801528c:	18db      	adds	r3, r3, r3
 801528e:	653b      	str	r3, [r7, #80]	; 0x50
 8015290:	4613      	mov	r3, r2
 8015292:	eb42 0303 	adc.w	r3, r2, r3
 8015296:	657b      	str	r3, [r7, #84]	; 0x54
 8015298:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801529c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80152a0:	f7eb fca4 	bl	8000bec <__aeabi_uldivmod>
 80152a4:	4602      	mov	r2, r0
 80152a6:	460b      	mov	r3, r1
 80152a8:	4b61      	ldr	r3, [pc, #388]	; (8015430 <UART_SetConfig+0x2d4>)
 80152aa:	fba3 2302 	umull	r2, r3, r3, r2
 80152ae:	095b      	lsrs	r3, r3, #5
 80152b0:	011c      	lsls	r4, r3, #4
 80152b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80152b6:	2200      	movs	r2, #0
 80152b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80152bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80152c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80152c4:	4642      	mov	r2, r8
 80152c6:	464b      	mov	r3, r9
 80152c8:	1891      	adds	r1, r2, r2
 80152ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80152cc:	415b      	adcs	r3, r3
 80152ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80152d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80152d4:	4641      	mov	r1, r8
 80152d6:	eb12 0a01 	adds.w	sl, r2, r1
 80152da:	4649      	mov	r1, r9
 80152dc:	eb43 0b01 	adc.w	fp, r3, r1
 80152e0:	f04f 0200 	mov.w	r2, #0
 80152e4:	f04f 0300 	mov.w	r3, #0
 80152e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80152ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80152f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80152f4:	4692      	mov	sl, r2
 80152f6:	469b      	mov	fp, r3
 80152f8:	4643      	mov	r3, r8
 80152fa:	eb1a 0303 	adds.w	r3, sl, r3
 80152fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015302:	464b      	mov	r3, r9
 8015304:	eb4b 0303 	adc.w	r3, fp, r3
 8015308:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015310:	685b      	ldr	r3, [r3, #4]
 8015312:	2200      	movs	r2, #0
 8015314:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015318:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801531c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8015320:	460b      	mov	r3, r1
 8015322:	18db      	adds	r3, r3, r3
 8015324:	643b      	str	r3, [r7, #64]	; 0x40
 8015326:	4613      	mov	r3, r2
 8015328:	eb42 0303 	adc.w	r3, r2, r3
 801532c:	647b      	str	r3, [r7, #68]	; 0x44
 801532e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015332:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8015336:	f7eb fc59 	bl	8000bec <__aeabi_uldivmod>
 801533a:	4602      	mov	r2, r0
 801533c:	460b      	mov	r3, r1
 801533e:	4611      	mov	r1, r2
 8015340:	4b3b      	ldr	r3, [pc, #236]	; (8015430 <UART_SetConfig+0x2d4>)
 8015342:	fba3 2301 	umull	r2, r3, r3, r1
 8015346:	095b      	lsrs	r3, r3, #5
 8015348:	2264      	movs	r2, #100	; 0x64
 801534a:	fb02 f303 	mul.w	r3, r2, r3
 801534e:	1acb      	subs	r3, r1, r3
 8015350:	00db      	lsls	r3, r3, #3
 8015352:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8015356:	4b36      	ldr	r3, [pc, #216]	; (8015430 <UART_SetConfig+0x2d4>)
 8015358:	fba3 2302 	umull	r2, r3, r3, r2
 801535c:	095b      	lsrs	r3, r3, #5
 801535e:	005b      	lsls	r3, r3, #1
 8015360:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015364:	441c      	add	r4, r3
 8015366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801536a:	2200      	movs	r2, #0
 801536c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015370:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8015374:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8015378:	4642      	mov	r2, r8
 801537a:	464b      	mov	r3, r9
 801537c:	1891      	adds	r1, r2, r2
 801537e:	63b9      	str	r1, [r7, #56]	; 0x38
 8015380:	415b      	adcs	r3, r3
 8015382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015384:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015388:	4641      	mov	r1, r8
 801538a:	1851      	adds	r1, r2, r1
 801538c:	6339      	str	r1, [r7, #48]	; 0x30
 801538e:	4649      	mov	r1, r9
 8015390:	414b      	adcs	r3, r1
 8015392:	637b      	str	r3, [r7, #52]	; 0x34
 8015394:	f04f 0200 	mov.w	r2, #0
 8015398:	f04f 0300 	mov.w	r3, #0
 801539c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80153a0:	4659      	mov	r1, fp
 80153a2:	00cb      	lsls	r3, r1, #3
 80153a4:	4651      	mov	r1, sl
 80153a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80153aa:	4651      	mov	r1, sl
 80153ac:	00ca      	lsls	r2, r1, #3
 80153ae:	4610      	mov	r0, r2
 80153b0:	4619      	mov	r1, r3
 80153b2:	4603      	mov	r3, r0
 80153b4:	4642      	mov	r2, r8
 80153b6:	189b      	adds	r3, r3, r2
 80153b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80153bc:	464b      	mov	r3, r9
 80153be:	460a      	mov	r2, r1
 80153c0:	eb42 0303 	adc.w	r3, r2, r3
 80153c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80153c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	2200      	movs	r2, #0
 80153d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80153d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80153d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80153dc:	460b      	mov	r3, r1
 80153de:	18db      	adds	r3, r3, r3
 80153e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80153e2:	4613      	mov	r3, r2
 80153e4:	eb42 0303 	adc.w	r3, r2, r3
 80153e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80153ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80153ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80153f2:	f7eb fbfb 	bl	8000bec <__aeabi_uldivmod>
 80153f6:	4602      	mov	r2, r0
 80153f8:	460b      	mov	r3, r1
 80153fa:	4b0d      	ldr	r3, [pc, #52]	; (8015430 <UART_SetConfig+0x2d4>)
 80153fc:	fba3 1302 	umull	r1, r3, r3, r2
 8015400:	095b      	lsrs	r3, r3, #5
 8015402:	2164      	movs	r1, #100	; 0x64
 8015404:	fb01 f303 	mul.w	r3, r1, r3
 8015408:	1ad3      	subs	r3, r2, r3
 801540a:	00db      	lsls	r3, r3, #3
 801540c:	3332      	adds	r3, #50	; 0x32
 801540e:	4a08      	ldr	r2, [pc, #32]	; (8015430 <UART_SetConfig+0x2d4>)
 8015410:	fba2 2303 	umull	r2, r3, r2, r3
 8015414:	095b      	lsrs	r3, r3, #5
 8015416:	f003 0207 	and.w	r2, r3, #7
 801541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	4422      	add	r2, r4
 8015422:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015424:	e106      	b.n	8015634 <UART_SetConfig+0x4d8>
 8015426:	bf00      	nop
 8015428:	40011000 	.word	0x40011000
 801542c:	40011400 	.word	0x40011400
 8015430:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015438:	2200      	movs	r2, #0
 801543a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801543e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015442:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8015446:	4642      	mov	r2, r8
 8015448:	464b      	mov	r3, r9
 801544a:	1891      	adds	r1, r2, r2
 801544c:	6239      	str	r1, [r7, #32]
 801544e:	415b      	adcs	r3, r3
 8015450:	627b      	str	r3, [r7, #36]	; 0x24
 8015452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015456:	4641      	mov	r1, r8
 8015458:	1854      	adds	r4, r2, r1
 801545a:	4649      	mov	r1, r9
 801545c:	eb43 0501 	adc.w	r5, r3, r1
 8015460:	f04f 0200 	mov.w	r2, #0
 8015464:	f04f 0300 	mov.w	r3, #0
 8015468:	00eb      	lsls	r3, r5, #3
 801546a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801546e:	00e2      	lsls	r2, r4, #3
 8015470:	4614      	mov	r4, r2
 8015472:	461d      	mov	r5, r3
 8015474:	4643      	mov	r3, r8
 8015476:	18e3      	adds	r3, r4, r3
 8015478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801547c:	464b      	mov	r3, r9
 801547e:	eb45 0303 	adc.w	r3, r5, r3
 8015482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	2200      	movs	r2, #0
 801548e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015496:	f04f 0200 	mov.w	r2, #0
 801549a:	f04f 0300 	mov.w	r3, #0
 801549e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80154a2:	4629      	mov	r1, r5
 80154a4:	008b      	lsls	r3, r1, #2
 80154a6:	4621      	mov	r1, r4
 80154a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80154ac:	4621      	mov	r1, r4
 80154ae:	008a      	lsls	r2, r1, #2
 80154b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80154b4:	f7eb fb9a 	bl	8000bec <__aeabi_uldivmod>
 80154b8:	4602      	mov	r2, r0
 80154ba:	460b      	mov	r3, r1
 80154bc:	4b60      	ldr	r3, [pc, #384]	; (8015640 <UART_SetConfig+0x4e4>)
 80154be:	fba3 2302 	umull	r2, r3, r3, r2
 80154c2:	095b      	lsrs	r3, r3, #5
 80154c4:	011c      	lsls	r4, r3, #4
 80154c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80154ca:	2200      	movs	r2, #0
 80154cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80154d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80154d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80154d8:	4642      	mov	r2, r8
 80154da:	464b      	mov	r3, r9
 80154dc:	1891      	adds	r1, r2, r2
 80154de:	61b9      	str	r1, [r7, #24]
 80154e0:	415b      	adcs	r3, r3
 80154e2:	61fb      	str	r3, [r7, #28]
 80154e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80154e8:	4641      	mov	r1, r8
 80154ea:	1851      	adds	r1, r2, r1
 80154ec:	6139      	str	r1, [r7, #16]
 80154ee:	4649      	mov	r1, r9
 80154f0:	414b      	adcs	r3, r1
 80154f2:	617b      	str	r3, [r7, #20]
 80154f4:	f04f 0200 	mov.w	r2, #0
 80154f8:	f04f 0300 	mov.w	r3, #0
 80154fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8015500:	4659      	mov	r1, fp
 8015502:	00cb      	lsls	r3, r1, #3
 8015504:	4651      	mov	r1, sl
 8015506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801550a:	4651      	mov	r1, sl
 801550c:	00ca      	lsls	r2, r1, #3
 801550e:	4610      	mov	r0, r2
 8015510:	4619      	mov	r1, r3
 8015512:	4603      	mov	r3, r0
 8015514:	4642      	mov	r2, r8
 8015516:	189b      	adds	r3, r3, r2
 8015518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801551c:	464b      	mov	r3, r9
 801551e:	460a      	mov	r2, r1
 8015520:	eb42 0303 	adc.w	r3, r2, r3
 8015524:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	2200      	movs	r2, #0
 8015530:	67bb      	str	r3, [r7, #120]	; 0x78
 8015532:	67fa      	str	r2, [r7, #124]	; 0x7c
 8015534:	f04f 0200 	mov.w	r2, #0
 8015538:	f04f 0300 	mov.w	r3, #0
 801553c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8015540:	4649      	mov	r1, r9
 8015542:	008b      	lsls	r3, r1, #2
 8015544:	4641      	mov	r1, r8
 8015546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801554a:	4641      	mov	r1, r8
 801554c:	008a      	lsls	r2, r1, #2
 801554e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8015552:	f7eb fb4b 	bl	8000bec <__aeabi_uldivmod>
 8015556:	4602      	mov	r2, r0
 8015558:	460b      	mov	r3, r1
 801555a:	4611      	mov	r1, r2
 801555c:	4b38      	ldr	r3, [pc, #224]	; (8015640 <UART_SetConfig+0x4e4>)
 801555e:	fba3 2301 	umull	r2, r3, r3, r1
 8015562:	095b      	lsrs	r3, r3, #5
 8015564:	2264      	movs	r2, #100	; 0x64
 8015566:	fb02 f303 	mul.w	r3, r2, r3
 801556a:	1acb      	subs	r3, r1, r3
 801556c:	011b      	lsls	r3, r3, #4
 801556e:	3332      	adds	r3, #50	; 0x32
 8015570:	4a33      	ldr	r2, [pc, #204]	; (8015640 <UART_SetConfig+0x4e4>)
 8015572:	fba2 2303 	umull	r2, r3, r2, r3
 8015576:	095b      	lsrs	r3, r3, #5
 8015578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801557c:	441c      	add	r4, r3
 801557e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015582:	2200      	movs	r2, #0
 8015584:	673b      	str	r3, [r7, #112]	; 0x70
 8015586:	677a      	str	r2, [r7, #116]	; 0x74
 8015588:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801558c:	4642      	mov	r2, r8
 801558e:	464b      	mov	r3, r9
 8015590:	1891      	adds	r1, r2, r2
 8015592:	60b9      	str	r1, [r7, #8]
 8015594:	415b      	adcs	r3, r3
 8015596:	60fb      	str	r3, [r7, #12]
 8015598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801559c:	4641      	mov	r1, r8
 801559e:	1851      	adds	r1, r2, r1
 80155a0:	6039      	str	r1, [r7, #0]
 80155a2:	4649      	mov	r1, r9
 80155a4:	414b      	adcs	r3, r1
 80155a6:	607b      	str	r3, [r7, #4]
 80155a8:	f04f 0200 	mov.w	r2, #0
 80155ac:	f04f 0300 	mov.w	r3, #0
 80155b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80155b4:	4659      	mov	r1, fp
 80155b6:	00cb      	lsls	r3, r1, #3
 80155b8:	4651      	mov	r1, sl
 80155ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80155be:	4651      	mov	r1, sl
 80155c0:	00ca      	lsls	r2, r1, #3
 80155c2:	4610      	mov	r0, r2
 80155c4:	4619      	mov	r1, r3
 80155c6:	4603      	mov	r3, r0
 80155c8:	4642      	mov	r2, r8
 80155ca:	189b      	adds	r3, r3, r2
 80155cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80155ce:	464b      	mov	r3, r9
 80155d0:	460a      	mov	r2, r1
 80155d2:	eb42 0303 	adc.w	r3, r2, r3
 80155d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80155d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80155dc:	685b      	ldr	r3, [r3, #4]
 80155de:	2200      	movs	r2, #0
 80155e0:	663b      	str	r3, [r7, #96]	; 0x60
 80155e2:	667a      	str	r2, [r7, #100]	; 0x64
 80155e4:	f04f 0200 	mov.w	r2, #0
 80155e8:	f04f 0300 	mov.w	r3, #0
 80155ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80155f0:	4649      	mov	r1, r9
 80155f2:	008b      	lsls	r3, r1, #2
 80155f4:	4641      	mov	r1, r8
 80155f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80155fa:	4641      	mov	r1, r8
 80155fc:	008a      	lsls	r2, r1, #2
 80155fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8015602:	f7eb faf3 	bl	8000bec <__aeabi_uldivmod>
 8015606:	4602      	mov	r2, r0
 8015608:	460b      	mov	r3, r1
 801560a:	4b0d      	ldr	r3, [pc, #52]	; (8015640 <UART_SetConfig+0x4e4>)
 801560c:	fba3 1302 	umull	r1, r3, r3, r2
 8015610:	095b      	lsrs	r3, r3, #5
 8015612:	2164      	movs	r1, #100	; 0x64
 8015614:	fb01 f303 	mul.w	r3, r1, r3
 8015618:	1ad3      	subs	r3, r2, r3
 801561a:	011b      	lsls	r3, r3, #4
 801561c:	3332      	adds	r3, #50	; 0x32
 801561e:	4a08      	ldr	r2, [pc, #32]	; (8015640 <UART_SetConfig+0x4e4>)
 8015620:	fba2 2303 	umull	r2, r3, r2, r3
 8015624:	095b      	lsrs	r3, r3, #5
 8015626:	f003 020f 	and.w	r2, r3, #15
 801562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	4422      	add	r2, r4
 8015632:	609a      	str	r2, [r3, #8]
}
 8015634:	bf00      	nop
 8015636:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801563a:	46bd      	mov	sp, r7
 801563c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015640:	51eb851f 	.word	0x51eb851f

08015644 <__assert_func>:
 8015644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015646:	4614      	mov	r4, r2
 8015648:	461a      	mov	r2, r3
 801564a:	4b09      	ldr	r3, [pc, #36]	; (8015670 <__assert_func+0x2c>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	4605      	mov	r5, r0
 8015650:	68d8      	ldr	r0, [r3, #12]
 8015652:	b14c      	cbz	r4, 8015668 <__assert_func+0x24>
 8015654:	4b07      	ldr	r3, [pc, #28]	; (8015674 <__assert_func+0x30>)
 8015656:	9100      	str	r1, [sp, #0]
 8015658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801565c:	4906      	ldr	r1, [pc, #24]	; (8015678 <__assert_func+0x34>)
 801565e:	462b      	mov	r3, r5
 8015660:	f000 ff5e 	bl	8016520 <fiprintf>
 8015664:	f001 f8e0 	bl	8016828 <abort>
 8015668:	4b04      	ldr	r3, [pc, #16]	; (801567c <__assert_func+0x38>)
 801566a:	461c      	mov	r4, r3
 801566c:	e7f3      	b.n	8015656 <__assert_func+0x12>
 801566e:	bf00      	nop
 8015670:	20000778 	.word	0x20000778
 8015674:	0801bffb 	.word	0x0801bffb
 8015678:	0801c008 	.word	0x0801c008
 801567c:	0801c036 	.word	0x0801c036

08015680 <atof>:
 8015680:	2100      	movs	r1, #0
 8015682:	f000 be11 	b.w	80162a8 <strtod>

08015686 <atol>:
 8015686:	220a      	movs	r2, #10
 8015688:	2100      	movs	r1, #0
 801568a:	f000 be9b 	b.w	80163c4 <strtol>

0801568e <sulp>:
 801568e:	b570      	push	{r4, r5, r6, lr}
 8015690:	4604      	mov	r4, r0
 8015692:	460d      	mov	r5, r1
 8015694:	ec45 4b10 	vmov	d0, r4, r5
 8015698:	4616      	mov	r6, r2
 801569a:	f002 f89b 	bl	80177d4 <__ulp>
 801569e:	ec51 0b10 	vmov	r0, r1, d0
 80156a2:	b17e      	cbz	r6, 80156c4 <sulp+0x36>
 80156a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80156a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	dd09      	ble.n	80156c4 <sulp+0x36>
 80156b0:	051b      	lsls	r3, r3, #20
 80156b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80156b6:	2400      	movs	r4, #0
 80156b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80156bc:	4622      	mov	r2, r4
 80156be:	462b      	mov	r3, r5
 80156c0:	f7ea ffb2 	bl	8000628 <__aeabi_dmul>
 80156c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080156c8 <_strtod_l>:
 80156c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156cc:	ed2d 8b02 	vpush	{d8}
 80156d0:	b09b      	sub	sp, #108	; 0x6c
 80156d2:	4604      	mov	r4, r0
 80156d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80156d6:	2200      	movs	r2, #0
 80156d8:	9216      	str	r2, [sp, #88]	; 0x58
 80156da:	460d      	mov	r5, r1
 80156dc:	f04f 0800 	mov.w	r8, #0
 80156e0:	f04f 0900 	mov.w	r9, #0
 80156e4:	460a      	mov	r2, r1
 80156e6:	9215      	str	r2, [sp, #84]	; 0x54
 80156e8:	7811      	ldrb	r1, [r2, #0]
 80156ea:	292b      	cmp	r1, #43	; 0x2b
 80156ec:	d04c      	beq.n	8015788 <_strtod_l+0xc0>
 80156ee:	d83a      	bhi.n	8015766 <_strtod_l+0x9e>
 80156f0:	290d      	cmp	r1, #13
 80156f2:	d834      	bhi.n	801575e <_strtod_l+0x96>
 80156f4:	2908      	cmp	r1, #8
 80156f6:	d834      	bhi.n	8015762 <_strtod_l+0x9a>
 80156f8:	2900      	cmp	r1, #0
 80156fa:	d03d      	beq.n	8015778 <_strtod_l+0xb0>
 80156fc:	2200      	movs	r2, #0
 80156fe:	920a      	str	r2, [sp, #40]	; 0x28
 8015700:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015702:	7832      	ldrb	r2, [r6, #0]
 8015704:	2a30      	cmp	r2, #48	; 0x30
 8015706:	f040 80b4 	bne.w	8015872 <_strtod_l+0x1aa>
 801570a:	7872      	ldrb	r2, [r6, #1]
 801570c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015710:	2a58      	cmp	r2, #88	; 0x58
 8015712:	d170      	bne.n	80157f6 <_strtod_l+0x12e>
 8015714:	9302      	str	r3, [sp, #8]
 8015716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015718:	9301      	str	r3, [sp, #4]
 801571a:	ab16      	add	r3, sp, #88	; 0x58
 801571c:	9300      	str	r3, [sp, #0]
 801571e:	4a8e      	ldr	r2, [pc, #568]	; (8015958 <_strtod_l+0x290>)
 8015720:	ab17      	add	r3, sp, #92	; 0x5c
 8015722:	a915      	add	r1, sp, #84	; 0x54
 8015724:	4620      	mov	r0, r4
 8015726:	f001 f93b 	bl	80169a0 <__gethex>
 801572a:	f010 070f 	ands.w	r7, r0, #15
 801572e:	4605      	mov	r5, r0
 8015730:	d005      	beq.n	801573e <_strtod_l+0x76>
 8015732:	2f06      	cmp	r7, #6
 8015734:	d12a      	bne.n	801578c <_strtod_l+0xc4>
 8015736:	3601      	adds	r6, #1
 8015738:	2300      	movs	r3, #0
 801573a:	9615      	str	r6, [sp, #84]	; 0x54
 801573c:	930a      	str	r3, [sp, #40]	; 0x28
 801573e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015740:	2b00      	cmp	r3, #0
 8015742:	f040 857f 	bne.w	8016244 <_strtod_l+0xb7c>
 8015746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015748:	b1db      	cbz	r3, 8015782 <_strtod_l+0xba>
 801574a:	4642      	mov	r2, r8
 801574c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015750:	ec43 2b10 	vmov	d0, r2, r3
 8015754:	b01b      	add	sp, #108	; 0x6c
 8015756:	ecbd 8b02 	vpop	{d8}
 801575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801575e:	2920      	cmp	r1, #32
 8015760:	d1cc      	bne.n	80156fc <_strtod_l+0x34>
 8015762:	3201      	adds	r2, #1
 8015764:	e7bf      	b.n	80156e6 <_strtod_l+0x1e>
 8015766:	292d      	cmp	r1, #45	; 0x2d
 8015768:	d1c8      	bne.n	80156fc <_strtod_l+0x34>
 801576a:	2101      	movs	r1, #1
 801576c:	910a      	str	r1, [sp, #40]	; 0x28
 801576e:	1c51      	adds	r1, r2, #1
 8015770:	9115      	str	r1, [sp, #84]	; 0x54
 8015772:	7852      	ldrb	r2, [r2, #1]
 8015774:	2a00      	cmp	r2, #0
 8015776:	d1c3      	bne.n	8015700 <_strtod_l+0x38>
 8015778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801577a:	9515      	str	r5, [sp, #84]	; 0x54
 801577c:	2b00      	cmp	r3, #0
 801577e:	f040 855f 	bne.w	8016240 <_strtod_l+0xb78>
 8015782:	4642      	mov	r2, r8
 8015784:	464b      	mov	r3, r9
 8015786:	e7e3      	b.n	8015750 <_strtod_l+0x88>
 8015788:	2100      	movs	r1, #0
 801578a:	e7ef      	b.n	801576c <_strtod_l+0xa4>
 801578c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801578e:	b13a      	cbz	r2, 80157a0 <_strtod_l+0xd8>
 8015790:	2135      	movs	r1, #53	; 0x35
 8015792:	a818      	add	r0, sp, #96	; 0x60
 8015794:	f002 f91b 	bl	80179ce <__copybits>
 8015798:	9916      	ldr	r1, [sp, #88]	; 0x58
 801579a:	4620      	mov	r0, r4
 801579c:	f001 fcee 	bl	801717c <_Bfree>
 80157a0:	3f01      	subs	r7, #1
 80157a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80157a4:	2f04      	cmp	r7, #4
 80157a6:	d806      	bhi.n	80157b6 <_strtod_l+0xee>
 80157a8:	e8df f007 	tbb	[pc, r7]
 80157ac:	201d0314 	.word	0x201d0314
 80157b0:	14          	.byte	0x14
 80157b1:	00          	.byte	0x00
 80157b2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80157b6:	05e9      	lsls	r1, r5, #23
 80157b8:	bf48      	it	mi
 80157ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80157be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80157c2:	0d1b      	lsrs	r3, r3, #20
 80157c4:	051b      	lsls	r3, r3, #20
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d1b9      	bne.n	801573e <_strtod_l+0x76>
 80157ca:	f000 ffe7 	bl	801679c <__errno>
 80157ce:	2322      	movs	r3, #34	; 0x22
 80157d0:	6003      	str	r3, [r0, #0]
 80157d2:	e7b4      	b.n	801573e <_strtod_l+0x76>
 80157d4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80157d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80157dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80157e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80157e4:	e7e7      	b.n	80157b6 <_strtod_l+0xee>
 80157e6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015960 <_strtod_l+0x298>
 80157ea:	e7e4      	b.n	80157b6 <_strtod_l+0xee>
 80157ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80157f0:	f04f 38ff 	mov.w	r8, #4294967295
 80157f4:	e7df      	b.n	80157b6 <_strtod_l+0xee>
 80157f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157f8:	1c5a      	adds	r2, r3, #1
 80157fa:	9215      	str	r2, [sp, #84]	; 0x54
 80157fc:	785b      	ldrb	r3, [r3, #1]
 80157fe:	2b30      	cmp	r3, #48	; 0x30
 8015800:	d0f9      	beq.n	80157f6 <_strtod_l+0x12e>
 8015802:	2b00      	cmp	r3, #0
 8015804:	d09b      	beq.n	801573e <_strtod_l+0x76>
 8015806:	2301      	movs	r3, #1
 8015808:	f04f 0a00 	mov.w	sl, #0
 801580c:	9304      	str	r3, [sp, #16]
 801580e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015810:	930b      	str	r3, [sp, #44]	; 0x2c
 8015812:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015816:	46d3      	mov	fp, sl
 8015818:	220a      	movs	r2, #10
 801581a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801581c:	7806      	ldrb	r6, [r0, #0]
 801581e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015822:	b2d9      	uxtb	r1, r3
 8015824:	2909      	cmp	r1, #9
 8015826:	d926      	bls.n	8015876 <_strtod_l+0x1ae>
 8015828:	494c      	ldr	r1, [pc, #304]	; (801595c <_strtod_l+0x294>)
 801582a:	2201      	movs	r2, #1
 801582c:	f000 ff5e 	bl	80166ec <strncmp>
 8015830:	2800      	cmp	r0, #0
 8015832:	d030      	beq.n	8015896 <_strtod_l+0x1ce>
 8015834:	2000      	movs	r0, #0
 8015836:	4632      	mov	r2, r6
 8015838:	9005      	str	r0, [sp, #20]
 801583a:	465e      	mov	r6, fp
 801583c:	4603      	mov	r3, r0
 801583e:	2a65      	cmp	r2, #101	; 0x65
 8015840:	d001      	beq.n	8015846 <_strtod_l+0x17e>
 8015842:	2a45      	cmp	r2, #69	; 0x45
 8015844:	d113      	bne.n	801586e <_strtod_l+0x1a6>
 8015846:	b91e      	cbnz	r6, 8015850 <_strtod_l+0x188>
 8015848:	9a04      	ldr	r2, [sp, #16]
 801584a:	4302      	orrs	r2, r0
 801584c:	d094      	beq.n	8015778 <_strtod_l+0xb0>
 801584e:	2600      	movs	r6, #0
 8015850:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015852:	1c6a      	adds	r2, r5, #1
 8015854:	9215      	str	r2, [sp, #84]	; 0x54
 8015856:	786a      	ldrb	r2, [r5, #1]
 8015858:	2a2b      	cmp	r2, #43	; 0x2b
 801585a:	d074      	beq.n	8015946 <_strtod_l+0x27e>
 801585c:	2a2d      	cmp	r2, #45	; 0x2d
 801585e:	d078      	beq.n	8015952 <_strtod_l+0x28a>
 8015860:	f04f 0c00 	mov.w	ip, #0
 8015864:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015868:	2909      	cmp	r1, #9
 801586a:	d97f      	bls.n	801596c <_strtod_l+0x2a4>
 801586c:	9515      	str	r5, [sp, #84]	; 0x54
 801586e:	2700      	movs	r7, #0
 8015870:	e09e      	b.n	80159b0 <_strtod_l+0x2e8>
 8015872:	2300      	movs	r3, #0
 8015874:	e7c8      	b.n	8015808 <_strtod_l+0x140>
 8015876:	f1bb 0f08 	cmp.w	fp, #8
 801587a:	bfd8      	it	le
 801587c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801587e:	f100 0001 	add.w	r0, r0, #1
 8015882:	bfda      	itte	le
 8015884:	fb02 3301 	mlale	r3, r2, r1, r3
 8015888:	9309      	strle	r3, [sp, #36]	; 0x24
 801588a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801588e:	f10b 0b01 	add.w	fp, fp, #1
 8015892:	9015      	str	r0, [sp, #84]	; 0x54
 8015894:	e7c1      	b.n	801581a <_strtod_l+0x152>
 8015896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015898:	1c5a      	adds	r2, r3, #1
 801589a:	9215      	str	r2, [sp, #84]	; 0x54
 801589c:	785a      	ldrb	r2, [r3, #1]
 801589e:	f1bb 0f00 	cmp.w	fp, #0
 80158a2:	d037      	beq.n	8015914 <_strtod_l+0x24c>
 80158a4:	9005      	str	r0, [sp, #20]
 80158a6:	465e      	mov	r6, fp
 80158a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80158ac:	2b09      	cmp	r3, #9
 80158ae:	d912      	bls.n	80158d6 <_strtod_l+0x20e>
 80158b0:	2301      	movs	r3, #1
 80158b2:	e7c4      	b.n	801583e <_strtod_l+0x176>
 80158b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158b6:	1c5a      	adds	r2, r3, #1
 80158b8:	9215      	str	r2, [sp, #84]	; 0x54
 80158ba:	785a      	ldrb	r2, [r3, #1]
 80158bc:	3001      	adds	r0, #1
 80158be:	2a30      	cmp	r2, #48	; 0x30
 80158c0:	d0f8      	beq.n	80158b4 <_strtod_l+0x1ec>
 80158c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80158c6:	2b08      	cmp	r3, #8
 80158c8:	f200 84c1 	bhi.w	801624e <_strtod_l+0xb86>
 80158cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158ce:	9005      	str	r0, [sp, #20]
 80158d0:	2000      	movs	r0, #0
 80158d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80158d4:	4606      	mov	r6, r0
 80158d6:	3a30      	subs	r2, #48	; 0x30
 80158d8:	f100 0301 	add.w	r3, r0, #1
 80158dc:	d014      	beq.n	8015908 <_strtod_l+0x240>
 80158de:	9905      	ldr	r1, [sp, #20]
 80158e0:	4419      	add	r1, r3
 80158e2:	9105      	str	r1, [sp, #20]
 80158e4:	4633      	mov	r3, r6
 80158e6:	eb00 0c06 	add.w	ip, r0, r6
 80158ea:	210a      	movs	r1, #10
 80158ec:	4563      	cmp	r3, ip
 80158ee:	d113      	bne.n	8015918 <_strtod_l+0x250>
 80158f0:	1833      	adds	r3, r6, r0
 80158f2:	2b08      	cmp	r3, #8
 80158f4:	f106 0601 	add.w	r6, r6, #1
 80158f8:	4406      	add	r6, r0
 80158fa:	dc1a      	bgt.n	8015932 <_strtod_l+0x26a>
 80158fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158fe:	230a      	movs	r3, #10
 8015900:	fb03 2301 	mla	r3, r3, r1, r2
 8015904:	9309      	str	r3, [sp, #36]	; 0x24
 8015906:	2300      	movs	r3, #0
 8015908:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801590a:	1c51      	adds	r1, r2, #1
 801590c:	9115      	str	r1, [sp, #84]	; 0x54
 801590e:	7852      	ldrb	r2, [r2, #1]
 8015910:	4618      	mov	r0, r3
 8015912:	e7c9      	b.n	80158a8 <_strtod_l+0x1e0>
 8015914:	4658      	mov	r0, fp
 8015916:	e7d2      	b.n	80158be <_strtod_l+0x1f6>
 8015918:	2b08      	cmp	r3, #8
 801591a:	f103 0301 	add.w	r3, r3, #1
 801591e:	dc03      	bgt.n	8015928 <_strtod_l+0x260>
 8015920:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015922:	434f      	muls	r7, r1
 8015924:	9709      	str	r7, [sp, #36]	; 0x24
 8015926:	e7e1      	b.n	80158ec <_strtod_l+0x224>
 8015928:	2b10      	cmp	r3, #16
 801592a:	bfd8      	it	le
 801592c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015930:	e7dc      	b.n	80158ec <_strtod_l+0x224>
 8015932:	2e10      	cmp	r6, #16
 8015934:	bfdc      	itt	le
 8015936:	230a      	movle	r3, #10
 8015938:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801593c:	e7e3      	b.n	8015906 <_strtod_l+0x23e>
 801593e:	2300      	movs	r3, #0
 8015940:	9305      	str	r3, [sp, #20]
 8015942:	2301      	movs	r3, #1
 8015944:	e780      	b.n	8015848 <_strtod_l+0x180>
 8015946:	f04f 0c00 	mov.w	ip, #0
 801594a:	1caa      	adds	r2, r5, #2
 801594c:	9215      	str	r2, [sp, #84]	; 0x54
 801594e:	78aa      	ldrb	r2, [r5, #2]
 8015950:	e788      	b.n	8015864 <_strtod_l+0x19c>
 8015952:	f04f 0c01 	mov.w	ip, #1
 8015956:	e7f8      	b.n	801594a <_strtod_l+0x282>
 8015958:	0801c048 	.word	0x0801c048
 801595c:	0801c037 	.word	0x0801c037
 8015960:	7ff00000 	.word	0x7ff00000
 8015964:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015966:	1c51      	adds	r1, r2, #1
 8015968:	9115      	str	r1, [sp, #84]	; 0x54
 801596a:	7852      	ldrb	r2, [r2, #1]
 801596c:	2a30      	cmp	r2, #48	; 0x30
 801596e:	d0f9      	beq.n	8015964 <_strtod_l+0x29c>
 8015970:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015974:	2908      	cmp	r1, #8
 8015976:	f63f af7a 	bhi.w	801586e <_strtod_l+0x1a6>
 801597a:	3a30      	subs	r2, #48	; 0x30
 801597c:	9208      	str	r2, [sp, #32]
 801597e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015980:	920c      	str	r2, [sp, #48]	; 0x30
 8015982:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015984:	1c57      	adds	r7, r2, #1
 8015986:	9715      	str	r7, [sp, #84]	; 0x54
 8015988:	7852      	ldrb	r2, [r2, #1]
 801598a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801598e:	f1be 0f09 	cmp.w	lr, #9
 8015992:	d938      	bls.n	8015a06 <_strtod_l+0x33e>
 8015994:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015996:	1a7f      	subs	r7, r7, r1
 8015998:	2f08      	cmp	r7, #8
 801599a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801599e:	dc03      	bgt.n	80159a8 <_strtod_l+0x2e0>
 80159a0:	9908      	ldr	r1, [sp, #32]
 80159a2:	428f      	cmp	r7, r1
 80159a4:	bfa8      	it	ge
 80159a6:	460f      	movge	r7, r1
 80159a8:	f1bc 0f00 	cmp.w	ip, #0
 80159ac:	d000      	beq.n	80159b0 <_strtod_l+0x2e8>
 80159ae:	427f      	negs	r7, r7
 80159b0:	2e00      	cmp	r6, #0
 80159b2:	d14f      	bne.n	8015a54 <_strtod_l+0x38c>
 80159b4:	9904      	ldr	r1, [sp, #16]
 80159b6:	4301      	orrs	r1, r0
 80159b8:	f47f aec1 	bne.w	801573e <_strtod_l+0x76>
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f47f aedb 	bne.w	8015778 <_strtod_l+0xb0>
 80159c2:	2a69      	cmp	r2, #105	; 0x69
 80159c4:	d029      	beq.n	8015a1a <_strtod_l+0x352>
 80159c6:	dc26      	bgt.n	8015a16 <_strtod_l+0x34e>
 80159c8:	2a49      	cmp	r2, #73	; 0x49
 80159ca:	d026      	beq.n	8015a1a <_strtod_l+0x352>
 80159cc:	2a4e      	cmp	r2, #78	; 0x4e
 80159ce:	f47f aed3 	bne.w	8015778 <_strtod_l+0xb0>
 80159d2:	499b      	ldr	r1, [pc, #620]	; (8015c40 <_strtod_l+0x578>)
 80159d4:	a815      	add	r0, sp, #84	; 0x54
 80159d6:	f001 fa23 	bl	8016e20 <__match>
 80159da:	2800      	cmp	r0, #0
 80159dc:	f43f aecc 	beq.w	8015778 <_strtod_l+0xb0>
 80159e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	2b28      	cmp	r3, #40	; 0x28
 80159e6:	d12f      	bne.n	8015a48 <_strtod_l+0x380>
 80159e8:	4996      	ldr	r1, [pc, #600]	; (8015c44 <_strtod_l+0x57c>)
 80159ea:	aa18      	add	r2, sp, #96	; 0x60
 80159ec:	a815      	add	r0, sp, #84	; 0x54
 80159ee:	f001 fa2b 	bl	8016e48 <__hexnan>
 80159f2:	2805      	cmp	r0, #5
 80159f4:	d128      	bne.n	8015a48 <_strtod_l+0x380>
 80159f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80159fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015a00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015a04:	e69b      	b.n	801573e <_strtod_l+0x76>
 8015a06:	9f08      	ldr	r7, [sp, #32]
 8015a08:	210a      	movs	r1, #10
 8015a0a:	fb01 2107 	mla	r1, r1, r7, r2
 8015a0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015a12:	9208      	str	r2, [sp, #32]
 8015a14:	e7b5      	b.n	8015982 <_strtod_l+0x2ba>
 8015a16:	2a6e      	cmp	r2, #110	; 0x6e
 8015a18:	e7d9      	b.n	80159ce <_strtod_l+0x306>
 8015a1a:	498b      	ldr	r1, [pc, #556]	; (8015c48 <_strtod_l+0x580>)
 8015a1c:	a815      	add	r0, sp, #84	; 0x54
 8015a1e:	f001 f9ff 	bl	8016e20 <__match>
 8015a22:	2800      	cmp	r0, #0
 8015a24:	f43f aea8 	beq.w	8015778 <_strtod_l+0xb0>
 8015a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a2a:	4988      	ldr	r1, [pc, #544]	; (8015c4c <_strtod_l+0x584>)
 8015a2c:	3b01      	subs	r3, #1
 8015a2e:	a815      	add	r0, sp, #84	; 0x54
 8015a30:	9315      	str	r3, [sp, #84]	; 0x54
 8015a32:	f001 f9f5 	bl	8016e20 <__match>
 8015a36:	b910      	cbnz	r0, 8015a3e <_strtod_l+0x376>
 8015a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	9315      	str	r3, [sp, #84]	; 0x54
 8015a3e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8015c5c <_strtod_l+0x594>
 8015a42:	f04f 0800 	mov.w	r8, #0
 8015a46:	e67a      	b.n	801573e <_strtod_l+0x76>
 8015a48:	4881      	ldr	r0, [pc, #516]	; (8015c50 <_strtod_l+0x588>)
 8015a4a:	f000 fee5 	bl	8016818 <nan>
 8015a4e:	ec59 8b10 	vmov	r8, r9, d0
 8015a52:	e674      	b.n	801573e <_strtod_l+0x76>
 8015a54:	9b05      	ldr	r3, [sp, #20]
 8015a56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a58:	1afb      	subs	r3, r7, r3
 8015a5a:	f1bb 0f00 	cmp.w	fp, #0
 8015a5e:	bf08      	it	eq
 8015a60:	46b3      	moveq	fp, r6
 8015a62:	2e10      	cmp	r6, #16
 8015a64:	9308      	str	r3, [sp, #32]
 8015a66:	4635      	mov	r5, r6
 8015a68:	bfa8      	it	ge
 8015a6a:	2510      	movge	r5, #16
 8015a6c:	f7ea fd62 	bl	8000534 <__aeabi_ui2d>
 8015a70:	2e09      	cmp	r6, #9
 8015a72:	4680      	mov	r8, r0
 8015a74:	4689      	mov	r9, r1
 8015a76:	dd13      	ble.n	8015aa0 <_strtod_l+0x3d8>
 8015a78:	4b76      	ldr	r3, [pc, #472]	; (8015c54 <_strtod_l+0x58c>)
 8015a7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015a7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015a82:	f7ea fdd1 	bl	8000628 <__aeabi_dmul>
 8015a86:	4680      	mov	r8, r0
 8015a88:	4650      	mov	r0, sl
 8015a8a:	4689      	mov	r9, r1
 8015a8c:	f7ea fd52 	bl	8000534 <__aeabi_ui2d>
 8015a90:	4602      	mov	r2, r0
 8015a92:	460b      	mov	r3, r1
 8015a94:	4640      	mov	r0, r8
 8015a96:	4649      	mov	r1, r9
 8015a98:	f7ea fc10 	bl	80002bc <__adddf3>
 8015a9c:	4680      	mov	r8, r0
 8015a9e:	4689      	mov	r9, r1
 8015aa0:	2e0f      	cmp	r6, #15
 8015aa2:	dc38      	bgt.n	8015b16 <_strtod_l+0x44e>
 8015aa4:	9b08      	ldr	r3, [sp, #32]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	f43f ae49 	beq.w	801573e <_strtod_l+0x76>
 8015aac:	dd24      	ble.n	8015af8 <_strtod_l+0x430>
 8015aae:	2b16      	cmp	r3, #22
 8015ab0:	dc0b      	bgt.n	8015aca <_strtod_l+0x402>
 8015ab2:	4968      	ldr	r1, [pc, #416]	; (8015c54 <_strtod_l+0x58c>)
 8015ab4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015abc:	4642      	mov	r2, r8
 8015abe:	464b      	mov	r3, r9
 8015ac0:	f7ea fdb2 	bl	8000628 <__aeabi_dmul>
 8015ac4:	4680      	mov	r8, r0
 8015ac6:	4689      	mov	r9, r1
 8015ac8:	e639      	b.n	801573e <_strtod_l+0x76>
 8015aca:	9a08      	ldr	r2, [sp, #32]
 8015acc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015ad0:	4293      	cmp	r3, r2
 8015ad2:	db20      	blt.n	8015b16 <_strtod_l+0x44e>
 8015ad4:	4c5f      	ldr	r4, [pc, #380]	; (8015c54 <_strtod_l+0x58c>)
 8015ad6:	f1c6 060f 	rsb	r6, r6, #15
 8015ada:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8015ade:	4642      	mov	r2, r8
 8015ae0:	464b      	mov	r3, r9
 8015ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ae6:	f7ea fd9f 	bl	8000628 <__aeabi_dmul>
 8015aea:	9b08      	ldr	r3, [sp, #32]
 8015aec:	1b9e      	subs	r6, r3, r6
 8015aee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015af2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015af6:	e7e3      	b.n	8015ac0 <_strtod_l+0x3f8>
 8015af8:	9b08      	ldr	r3, [sp, #32]
 8015afa:	3316      	adds	r3, #22
 8015afc:	db0b      	blt.n	8015b16 <_strtod_l+0x44e>
 8015afe:	9b05      	ldr	r3, [sp, #20]
 8015b00:	1bdf      	subs	r7, r3, r7
 8015b02:	4b54      	ldr	r3, [pc, #336]	; (8015c54 <_strtod_l+0x58c>)
 8015b04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b0c:	4640      	mov	r0, r8
 8015b0e:	4649      	mov	r1, r9
 8015b10:	f7ea feb4 	bl	800087c <__aeabi_ddiv>
 8015b14:	e7d6      	b.n	8015ac4 <_strtod_l+0x3fc>
 8015b16:	9b08      	ldr	r3, [sp, #32]
 8015b18:	1b75      	subs	r5, r6, r5
 8015b1a:	441d      	add	r5, r3
 8015b1c:	2d00      	cmp	r5, #0
 8015b1e:	dd70      	ble.n	8015c02 <_strtod_l+0x53a>
 8015b20:	f015 030f 	ands.w	r3, r5, #15
 8015b24:	d00a      	beq.n	8015b3c <_strtod_l+0x474>
 8015b26:	494b      	ldr	r1, [pc, #300]	; (8015c54 <_strtod_l+0x58c>)
 8015b28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015b2c:	4642      	mov	r2, r8
 8015b2e:	464b      	mov	r3, r9
 8015b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b34:	f7ea fd78 	bl	8000628 <__aeabi_dmul>
 8015b38:	4680      	mov	r8, r0
 8015b3a:	4689      	mov	r9, r1
 8015b3c:	f035 050f 	bics.w	r5, r5, #15
 8015b40:	d04d      	beq.n	8015bde <_strtod_l+0x516>
 8015b42:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015b46:	dd22      	ble.n	8015b8e <_strtod_l+0x4c6>
 8015b48:	2500      	movs	r5, #0
 8015b4a:	46ab      	mov	fp, r5
 8015b4c:	9509      	str	r5, [sp, #36]	; 0x24
 8015b4e:	9505      	str	r5, [sp, #20]
 8015b50:	2322      	movs	r3, #34	; 0x22
 8015b52:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8015c5c <_strtod_l+0x594>
 8015b56:	6023      	str	r3, [r4, #0]
 8015b58:	f04f 0800 	mov.w	r8, #0
 8015b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	f43f aded 	beq.w	801573e <_strtod_l+0x76>
 8015b64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015b66:	4620      	mov	r0, r4
 8015b68:	f001 fb08 	bl	801717c <_Bfree>
 8015b6c:	9905      	ldr	r1, [sp, #20]
 8015b6e:	4620      	mov	r0, r4
 8015b70:	f001 fb04 	bl	801717c <_Bfree>
 8015b74:	4659      	mov	r1, fp
 8015b76:	4620      	mov	r0, r4
 8015b78:	f001 fb00 	bl	801717c <_Bfree>
 8015b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b7e:	4620      	mov	r0, r4
 8015b80:	f001 fafc 	bl	801717c <_Bfree>
 8015b84:	4629      	mov	r1, r5
 8015b86:	4620      	mov	r0, r4
 8015b88:	f001 faf8 	bl	801717c <_Bfree>
 8015b8c:	e5d7      	b.n	801573e <_strtod_l+0x76>
 8015b8e:	4b32      	ldr	r3, [pc, #200]	; (8015c58 <_strtod_l+0x590>)
 8015b90:	9304      	str	r3, [sp, #16]
 8015b92:	2300      	movs	r3, #0
 8015b94:	112d      	asrs	r5, r5, #4
 8015b96:	4640      	mov	r0, r8
 8015b98:	4649      	mov	r1, r9
 8015b9a:	469a      	mov	sl, r3
 8015b9c:	2d01      	cmp	r5, #1
 8015b9e:	dc21      	bgt.n	8015be4 <_strtod_l+0x51c>
 8015ba0:	b10b      	cbz	r3, 8015ba6 <_strtod_l+0x4de>
 8015ba2:	4680      	mov	r8, r0
 8015ba4:	4689      	mov	r9, r1
 8015ba6:	492c      	ldr	r1, [pc, #176]	; (8015c58 <_strtod_l+0x590>)
 8015ba8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8015bac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015bb0:	4642      	mov	r2, r8
 8015bb2:	464b      	mov	r3, r9
 8015bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bb8:	f7ea fd36 	bl	8000628 <__aeabi_dmul>
 8015bbc:	4b27      	ldr	r3, [pc, #156]	; (8015c5c <_strtod_l+0x594>)
 8015bbe:	460a      	mov	r2, r1
 8015bc0:	400b      	ands	r3, r1
 8015bc2:	4927      	ldr	r1, [pc, #156]	; (8015c60 <_strtod_l+0x598>)
 8015bc4:	428b      	cmp	r3, r1
 8015bc6:	4680      	mov	r8, r0
 8015bc8:	d8be      	bhi.n	8015b48 <_strtod_l+0x480>
 8015bca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015bce:	428b      	cmp	r3, r1
 8015bd0:	bf86      	itte	hi
 8015bd2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015c64 <_strtod_l+0x59c>
 8015bd6:	f04f 38ff 	movhi.w	r8, #4294967295
 8015bda:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8015bde:	2300      	movs	r3, #0
 8015be0:	9304      	str	r3, [sp, #16]
 8015be2:	e07b      	b.n	8015cdc <_strtod_l+0x614>
 8015be4:	07ea      	lsls	r2, r5, #31
 8015be6:	d505      	bpl.n	8015bf4 <_strtod_l+0x52c>
 8015be8:	9b04      	ldr	r3, [sp, #16]
 8015bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bee:	f7ea fd1b 	bl	8000628 <__aeabi_dmul>
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	9a04      	ldr	r2, [sp, #16]
 8015bf6:	3208      	adds	r2, #8
 8015bf8:	f10a 0a01 	add.w	sl, sl, #1
 8015bfc:	106d      	asrs	r5, r5, #1
 8015bfe:	9204      	str	r2, [sp, #16]
 8015c00:	e7cc      	b.n	8015b9c <_strtod_l+0x4d4>
 8015c02:	d0ec      	beq.n	8015bde <_strtod_l+0x516>
 8015c04:	426d      	negs	r5, r5
 8015c06:	f015 020f 	ands.w	r2, r5, #15
 8015c0a:	d00a      	beq.n	8015c22 <_strtod_l+0x55a>
 8015c0c:	4b11      	ldr	r3, [pc, #68]	; (8015c54 <_strtod_l+0x58c>)
 8015c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c12:	4640      	mov	r0, r8
 8015c14:	4649      	mov	r1, r9
 8015c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1a:	f7ea fe2f 	bl	800087c <__aeabi_ddiv>
 8015c1e:	4680      	mov	r8, r0
 8015c20:	4689      	mov	r9, r1
 8015c22:	112d      	asrs	r5, r5, #4
 8015c24:	d0db      	beq.n	8015bde <_strtod_l+0x516>
 8015c26:	2d1f      	cmp	r5, #31
 8015c28:	dd1e      	ble.n	8015c68 <_strtod_l+0x5a0>
 8015c2a:	2500      	movs	r5, #0
 8015c2c:	46ab      	mov	fp, r5
 8015c2e:	9509      	str	r5, [sp, #36]	; 0x24
 8015c30:	9505      	str	r5, [sp, #20]
 8015c32:	2322      	movs	r3, #34	; 0x22
 8015c34:	f04f 0800 	mov.w	r8, #0
 8015c38:	f04f 0900 	mov.w	r9, #0
 8015c3c:	6023      	str	r3, [r4, #0]
 8015c3e:	e78d      	b.n	8015b5c <_strtod_l+0x494>
 8015c40:	0801c042 	.word	0x0801c042
 8015c44:	0801c05c 	.word	0x0801c05c
 8015c48:	0801c039 	.word	0x0801c039
 8015c4c:	0801c03c 	.word	0x0801c03c
 8015c50:	0801c036 	.word	0x0801c036
 8015c54:	0801c2b0 	.word	0x0801c2b0
 8015c58:	0801c288 	.word	0x0801c288
 8015c5c:	7ff00000 	.word	0x7ff00000
 8015c60:	7ca00000 	.word	0x7ca00000
 8015c64:	7fefffff 	.word	0x7fefffff
 8015c68:	f015 0310 	ands.w	r3, r5, #16
 8015c6c:	bf18      	it	ne
 8015c6e:	236a      	movne	r3, #106	; 0x6a
 8015c70:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8016014 <_strtod_l+0x94c>
 8015c74:	9304      	str	r3, [sp, #16]
 8015c76:	4640      	mov	r0, r8
 8015c78:	4649      	mov	r1, r9
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	07ea      	lsls	r2, r5, #31
 8015c7e:	d504      	bpl.n	8015c8a <_strtod_l+0x5c2>
 8015c80:	e9da 2300 	ldrd	r2, r3, [sl]
 8015c84:	f7ea fcd0 	bl	8000628 <__aeabi_dmul>
 8015c88:	2301      	movs	r3, #1
 8015c8a:	106d      	asrs	r5, r5, #1
 8015c8c:	f10a 0a08 	add.w	sl, sl, #8
 8015c90:	d1f4      	bne.n	8015c7c <_strtod_l+0x5b4>
 8015c92:	b10b      	cbz	r3, 8015c98 <_strtod_l+0x5d0>
 8015c94:	4680      	mov	r8, r0
 8015c96:	4689      	mov	r9, r1
 8015c98:	9b04      	ldr	r3, [sp, #16]
 8015c9a:	b1bb      	cbz	r3, 8015ccc <_strtod_l+0x604>
 8015c9c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015ca0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	4649      	mov	r1, r9
 8015ca8:	dd10      	ble.n	8015ccc <_strtod_l+0x604>
 8015caa:	2b1f      	cmp	r3, #31
 8015cac:	f340 811e 	ble.w	8015eec <_strtod_l+0x824>
 8015cb0:	2b34      	cmp	r3, #52	; 0x34
 8015cb2:	bfde      	ittt	le
 8015cb4:	f04f 33ff 	movle.w	r3, #4294967295
 8015cb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015cbc:	4093      	lslle	r3, r2
 8015cbe:	f04f 0800 	mov.w	r8, #0
 8015cc2:	bfcc      	ite	gt
 8015cc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015cc8:	ea03 0901 	andle.w	r9, r3, r1
 8015ccc:	2200      	movs	r2, #0
 8015cce:	2300      	movs	r3, #0
 8015cd0:	4640      	mov	r0, r8
 8015cd2:	4649      	mov	r1, r9
 8015cd4:	f7ea ff10 	bl	8000af8 <__aeabi_dcmpeq>
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	d1a6      	bne.n	8015c2a <_strtod_l+0x562>
 8015cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cde:	9300      	str	r3, [sp, #0]
 8015ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ce2:	4633      	mov	r3, r6
 8015ce4:	465a      	mov	r2, fp
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f001 fab0 	bl	801724c <__s2b>
 8015cec:	9009      	str	r0, [sp, #36]	; 0x24
 8015cee:	2800      	cmp	r0, #0
 8015cf0:	f43f af2a 	beq.w	8015b48 <_strtod_l+0x480>
 8015cf4:	9a08      	ldr	r2, [sp, #32]
 8015cf6:	9b05      	ldr	r3, [sp, #20]
 8015cf8:	2a00      	cmp	r2, #0
 8015cfa:	eba3 0307 	sub.w	r3, r3, r7
 8015cfe:	bfa8      	it	ge
 8015d00:	2300      	movge	r3, #0
 8015d02:	930c      	str	r3, [sp, #48]	; 0x30
 8015d04:	2500      	movs	r5, #0
 8015d06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8015d0c:	46ab      	mov	fp, r5
 8015d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d10:	4620      	mov	r0, r4
 8015d12:	6859      	ldr	r1, [r3, #4]
 8015d14:	f001 f9f2 	bl	80170fc <_Balloc>
 8015d18:	9005      	str	r0, [sp, #20]
 8015d1a:	2800      	cmp	r0, #0
 8015d1c:	f43f af18 	beq.w	8015b50 <_strtod_l+0x488>
 8015d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d22:	691a      	ldr	r2, [r3, #16]
 8015d24:	3202      	adds	r2, #2
 8015d26:	f103 010c 	add.w	r1, r3, #12
 8015d2a:	0092      	lsls	r2, r2, #2
 8015d2c:	300c      	adds	r0, #12
 8015d2e:	f000 fd62 	bl	80167f6 <memcpy>
 8015d32:	ec49 8b10 	vmov	d0, r8, r9
 8015d36:	aa18      	add	r2, sp, #96	; 0x60
 8015d38:	a917      	add	r1, sp, #92	; 0x5c
 8015d3a:	4620      	mov	r0, r4
 8015d3c:	f001 fdba 	bl	80178b4 <__d2b>
 8015d40:	ec49 8b18 	vmov	d8, r8, r9
 8015d44:	9016      	str	r0, [sp, #88]	; 0x58
 8015d46:	2800      	cmp	r0, #0
 8015d48:	f43f af02 	beq.w	8015b50 <_strtod_l+0x488>
 8015d4c:	2101      	movs	r1, #1
 8015d4e:	4620      	mov	r0, r4
 8015d50:	f001 fb14 	bl	801737c <__i2b>
 8015d54:	4683      	mov	fp, r0
 8015d56:	2800      	cmp	r0, #0
 8015d58:	f43f aefa 	beq.w	8015b50 <_strtod_l+0x488>
 8015d5c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015d5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015d60:	2e00      	cmp	r6, #0
 8015d62:	bfab      	itete	ge
 8015d64:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8015d66:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015d68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015d6a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8015d6e:	bfac      	ite	ge
 8015d70:	eb06 0a03 	addge.w	sl, r6, r3
 8015d74:	1b9f      	sublt	r7, r3, r6
 8015d76:	9b04      	ldr	r3, [sp, #16]
 8015d78:	1af6      	subs	r6, r6, r3
 8015d7a:	4416      	add	r6, r2
 8015d7c:	4ba0      	ldr	r3, [pc, #640]	; (8016000 <_strtod_l+0x938>)
 8015d7e:	3e01      	subs	r6, #1
 8015d80:	429e      	cmp	r6, r3
 8015d82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015d86:	f280 80c4 	bge.w	8015f12 <_strtod_l+0x84a>
 8015d8a:	1b9b      	subs	r3, r3, r6
 8015d8c:	2b1f      	cmp	r3, #31
 8015d8e:	eba2 0203 	sub.w	r2, r2, r3
 8015d92:	f04f 0101 	mov.w	r1, #1
 8015d96:	f300 80b0 	bgt.w	8015efa <_strtod_l+0x832>
 8015d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8015d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8015da0:	2300      	movs	r3, #0
 8015da2:	930d      	str	r3, [sp, #52]	; 0x34
 8015da4:	eb0a 0602 	add.w	r6, sl, r2
 8015da8:	9b04      	ldr	r3, [sp, #16]
 8015daa:	45b2      	cmp	sl, r6
 8015dac:	4417      	add	r7, r2
 8015dae:	441f      	add	r7, r3
 8015db0:	4653      	mov	r3, sl
 8015db2:	bfa8      	it	ge
 8015db4:	4633      	movge	r3, r6
 8015db6:	42bb      	cmp	r3, r7
 8015db8:	bfa8      	it	ge
 8015dba:	463b      	movge	r3, r7
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	bfc2      	ittt	gt
 8015dc0:	1af6      	subgt	r6, r6, r3
 8015dc2:	1aff      	subgt	r7, r7, r3
 8015dc4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	dd17      	ble.n	8015dfe <_strtod_l+0x736>
 8015dce:	4659      	mov	r1, fp
 8015dd0:	461a      	mov	r2, r3
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	f001 fb92 	bl	80174fc <__pow5mult>
 8015dd8:	4683      	mov	fp, r0
 8015dda:	2800      	cmp	r0, #0
 8015ddc:	f43f aeb8 	beq.w	8015b50 <_strtod_l+0x488>
 8015de0:	4601      	mov	r1, r0
 8015de2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015de4:	4620      	mov	r0, r4
 8015de6:	f001 fadf 	bl	80173a8 <__multiply>
 8015dea:	900b      	str	r0, [sp, #44]	; 0x2c
 8015dec:	2800      	cmp	r0, #0
 8015dee:	f43f aeaf 	beq.w	8015b50 <_strtod_l+0x488>
 8015df2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015df4:	4620      	mov	r0, r4
 8015df6:	f001 f9c1 	bl	801717c <_Bfree>
 8015dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dfc:	9316      	str	r3, [sp, #88]	; 0x58
 8015dfe:	2e00      	cmp	r6, #0
 8015e00:	f300 808c 	bgt.w	8015f1c <_strtod_l+0x854>
 8015e04:	9b08      	ldr	r3, [sp, #32]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	dd08      	ble.n	8015e1c <_strtod_l+0x754>
 8015e0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015e0c:	9905      	ldr	r1, [sp, #20]
 8015e0e:	4620      	mov	r0, r4
 8015e10:	f001 fb74 	bl	80174fc <__pow5mult>
 8015e14:	9005      	str	r0, [sp, #20]
 8015e16:	2800      	cmp	r0, #0
 8015e18:	f43f ae9a 	beq.w	8015b50 <_strtod_l+0x488>
 8015e1c:	2f00      	cmp	r7, #0
 8015e1e:	dd08      	ble.n	8015e32 <_strtod_l+0x76a>
 8015e20:	9905      	ldr	r1, [sp, #20]
 8015e22:	463a      	mov	r2, r7
 8015e24:	4620      	mov	r0, r4
 8015e26:	f001 fbc3 	bl	80175b0 <__lshift>
 8015e2a:	9005      	str	r0, [sp, #20]
 8015e2c:	2800      	cmp	r0, #0
 8015e2e:	f43f ae8f 	beq.w	8015b50 <_strtod_l+0x488>
 8015e32:	f1ba 0f00 	cmp.w	sl, #0
 8015e36:	dd08      	ble.n	8015e4a <_strtod_l+0x782>
 8015e38:	4659      	mov	r1, fp
 8015e3a:	4652      	mov	r2, sl
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	f001 fbb7 	bl	80175b0 <__lshift>
 8015e42:	4683      	mov	fp, r0
 8015e44:	2800      	cmp	r0, #0
 8015e46:	f43f ae83 	beq.w	8015b50 <_strtod_l+0x488>
 8015e4a:	9a05      	ldr	r2, [sp, #20]
 8015e4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015e4e:	4620      	mov	r0, r4
 8015e50:	f001 fc36 	bl	80176c0 <__mdiff>
 8015e54:	4605      	mov	r5, r0
 8015e56:	2800      	cmp	r0, #0
 8015e58:	f43f ae7a 	beq.w	8015b50 <_strtod_l+0x488>
 8015e5c:	68c3      	ldr	r3, [r0, #12]
 8015e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e60:	2300      	movs	r3, #0
 8015e62:	60c3      	str	r3, [r0, #12]
 8015e64:	4659      	mov	r1, fp
 8015e66:	f001 fc0f 	bl	8017688 <__mcmp>
 8015e6a:	2800      	cmp	r0, #0
 8015e6c:	da60      	bge.n	8015f30 <_strtod_l+0x868>
 8015e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e70:	ea53 0308 	orrs.w	r3, r3, r8
 8015e74:	f040 8084 	bne.w	8015f80 <_strtod_l+0x8b8>
 8015e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d17f      	bne.n	8015f80 <_strtod_l+0x8b8>
 8015e80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015e84:	0d1b      	lsrs	r3, r3, #20
 8015e86:	051b      	lsls	r3, r3, #20
 8015e88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015e8c:	d978      	bls.n	8015f80 <_strtod_l+0x8b8>
 8015e8e:	696b      	ldr	r3, [r5, #20]
 8015e90:	b913      	cbnz	r3, 8015e98 <_strtod_l+0x7d0>
 8015e92:	692b      	ldr	r3, [r5, #16]
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	dd73      	ble.n	8015f80 <_strtod_l+0x8b8>
 8015e98:	4629      	mov	r1, r5
 8015e9a:	2201      	movs	r2, #1
 8015e9c:	4620      	mov	r0, r4
 8015e9e:	f001 fb87 	bl	80175b0 <__lshift>
 8015ea2:	4659      	mov	r1, fp
 8015ea4:	4605      	mov	r5, r0
 8015ea6:	f001 fbef 	bl	8017688 <__mcmp>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	dd68      	ble.n	8015f80 <_strtod_l+0x8b8>
 8015eae:	9904      	ldr	r1, [sp, #16]
 8015eb0:	4a54      	ldr	r2, [pc, #336]	; (8016004 <_strtod_l+0x93c>)
 8015eb2:	464b      	mov	r3, r9
 8015eb4:	2900      	cmp	r1, #0
 8015eb6:	f000 8084 	beq.w	8015fc2 <_strtod_l+0x8fa>
 8015eba:	ea02 0109 	and.w	r1, r2, r9
 8015ebe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015ec2:	dc7e      	bgt.n	8015fc2 <_strtod_l+0x8fa>
 8015ec4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015ec8:	f77f aeb3 	ble.w	8015c32 <_strtod_l+0x56a>
 8015ecc:	4b4e      	ldr	r3, [pc, #312]	; (8016008 <_strtod_l+0x940>)
 8015ece:	4640      	mov	r0, r8
 8015ed0:	4649      	mov	r1, r9
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	f7ea fba8 	bl	8000628 <__aeabi_dmul>
 8015ed8:	4b4a      	ldr	r3, [pc, #296]	; (8016004 <_strtod_l+0x93c>)
 8015eda:	400b      	ands	r3, r1
 8015edc:	4680      	mov	r8, r0
 8015ede:	4689      	mov	r9, r1
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	f47f ae3f 	bne.w	8015b64 <_strtod_l+0x49c>
 8015ee6:	2322      	movs	r3, #34	; 0x22
 8015ee8:	6023      	str	r3, [r4, #0]
 8015eea:	e63b      	b.n	8015b64 <_strtod_l+0x49c>
 8015eec:	f04f 32ff 	mov.w	r2, #4294967295
 8015ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8015ef4:	ea03 0808 	and.w	r8, r3, r8
 8015ef8:	e6e8      	b.n	8015ccc <_strtod_l+0x604>
 8015efa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015efe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015f02:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015f06:	36e2      	adds	r6, #226	; 0xe2
 8015f08:	fa01 f306 	lsl.w	r3, r1, r6
 8015f0c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015f10:	e748      	b.n	8015da4 <_strtod_l+0x6dc>
 8015f12:	2100      	movs	r1, #0
 8015f14:	2301      	movs	r3, #1
 8015f16:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8015f1a:	e743      	b.n	8015da4 <_strtod_l+0x6dc>
 8015f1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015f1e:	4632      	mov	r2, r6
 8015f20:	4620      	mov	r0, r4
 8015f22:	f001 fb45 	bl	80175b0 <__lshift>
 8015f26:	9016      	str	r0, [sp, #88]	; 0x58
 8015f28:	2800      	cmp	r0, #0
 8015f2a:	f47f af6b 	bne.w	8015e04 <_strtod_l+0x73c>
 8015f2e:	e60f      	b.n	8015b50 <_strtod_l+0x488>
 8015f30:	46ca      	mov	sl, r9
 8015f32:	d171      	bne.n	8016018 <_strtod_l+0x950>
 8015f34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015f3a:	b352      	cbz	r2, 8015f92 <_strtod_l+0x8ca>
 8015f3c:	4a33      	ldr	r2, [pc, #204]	; (801600c <_strtod_l+0x944>)
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d12a      	bne.n	8015f98 <_strtod_l+0x8d0>
 8015f42:	9b04      	ldr	r3, [sp, #16]
 8015f44:	4641      	mov	r1, r8
 8015f46:	b1fb      	cbz	r3, 8015f88 <_strtod_l+0x8c0>
 8015f48:	4b2e      	ldr	r3, [pc, #184]	; (8016004 <_strtod_l+0x93c>)
 8015f4a:	ea09 0303 	and.w	r3, r9, r3
 8015f4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015f52:	f04f 32ff 	mov.w	r2, #4294967295
 8015f56:	d81a      	bhi.n	8015f8e <_strtod_l+0x8c6>
 8015f58:	0d1b      	lsrs	r3, r3, #20
 8015f5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8015f62:	4299      	cmp	r1, r3
 8015f64:	d118      	bne.n	8015f98 <_strtod_l+0x8d0>
 8015f66:	4b2a      	ldr	r3, [pc, #168]	; (8016010 <_strtod_l+0x948>)
 8015f68:	459a      	cmp	sl, r3
 8015f6a:	d102      	bne.n	8015f72 <_strtod_l+0x8aa>
 8015f6c:	3101      	adds	r1, #1
 8015f6e:	f43f adef 	beq.w	8015b50 <_strtod_l+0x488>
 8015f72:	4b24      	ldr	r3, [pc, #144]	; (8016004 <_strtod_l+0x93c>)
 8015f74:	ea0a 0303 	and.w	r3, sl, r3
 8015f78:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8015f7c:	f04f 0800 	mov.w	r8, #0
 8015f80:	9b04      	ldr	r3, [sp, #16]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d1a2      	bne.n	8015ecc <_strtod_l+0x804>
 8015f86:	e5ed      	b.n	8015b64 <_strtod_l+0x49c>
 8015f88:	f04f 33ff 	mov.w	r3, #4294967295
 8015f8c:	e7e9      	b.n	8015f62 <_strtod_l+0x89a>
 8015f8e:	4613      	mov	r3, r2
 8015f90:	e7e7      	b.n	8015f62 <_strtod_l+0x89a>
 8015f92:	ea53 0308 	orrs.w	r3, r3, r8
 8015f96:	d08a      	beq.n	8015eae <_strtod_l+0x7e6>
 8015f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f9a:	b1e3      	cbz	r3, 8015fd6 <_strtod_l+0x90e>
 8015f9c:	ea13 0f0a 	tst.w	r3, sl
 8015fa0:	d0ee      	beq.n	8015f80 <_strtod_l+0x8b8>
 8015fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fa4:	9a04      	ldr	r2, [sp, #16]
 8015fa6:	4640      	mov	r0, r8
 8015fa8:	4649      	mov	r1, r9
 8015faa:	b1c3      	cbz	r3, 8015fde <_strtod_l+0x916>
 8015fac:	f7ff fb6f 	bl	801568e <sulp>
 8015fb0:	4602      	mov	r2, r0
 8015fb2:	460b      	mov	r3, r1
 8015fb4:	ec51 0b18 	vmov	r0, r1, d8
 8015fb8:	f7ea f980 	bl	80002bc <__adddf3>
 8015fbc:	4680      	mov	r8, r0
 8015fbe:	4689      	mov	r9, r1
 8015fc0:	e7de      	b.n	8015f80 <_strtod_l+0x8b8>
 8015fc2:	4013      	ands	r3, r2
 8015fc4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015fc8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015fcc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015fd0:	f04f 38ff 	mov.w	r8, #4294967295
 8015fd4:	e7d4      	b.n	8015f80 <_strtod_l+0x8b8>
 8015fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fd8:	ea13 0f08 	tst.w	r3, r8
 8015fdc:	e7e0      	b.n	8015fa0 <_strtod_l+0x8d8>
 8015fde:	f7ff fb56 	bl	801568e <sulp>
 8015fe2:	4602      	mov	r2, r0
 8015fe4:	460b      	mov	r3, r1
 8015fe6:	ec51 0b18 	vmov	r0, r1, d8
 8015fea:	f7ea f965 	bl	80002b8 <__aeabi_dsub>
 8015fee:	2200      	movs	r2, #0
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	4680      	mov	r8, r0
 8015ff4:	4689      	mov	r9, r1
 8015ff6:	f7ea fd7f 	bl	8000af8 <__aeabi_dcmpeq>
 8015ffa:	2800      	cmp	r0, #0
 8015ffc:	d0c0      	beq.n	8015f80 <_strtod_l+0x8b8>
 8015ffe:	e618      	b.n	8015c32 <_strtod_l+0x56a>
 8016000:	fffffc02 	.word	0xfffffc02
 8016004:	7ff00000 	.word	0x7ff00000
 8016008:	39500000 	.word	0x39500000
 801600c:	000fffff 	.word	0x000fffff
 8016010:	7fefffff 	.word	0x7fefffff
 8016014:	0801c070 	.word	0x0801c070
 8016018:	4659      	mov	r1, fp
 801601a:	4628      	mov	r0, r5
 801601c:	f001 fca4 	bl	8017968 <__ratio>
 8016020:	ec57 6b10 	vmov	r6, r7, d0
 8016024:	ee10 0a10 	vmov	r0, s0
 8016028:	2200      	movs	r2, #0
 801602a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801602e:	4639      	mov	r1, r7
 8016030:	f7ea fd76 	bl	8000b20 <__aeabi_dcmple>
 8016034:	2800      	cmp	r0, #0
 8016036:	d071      	beq.n	801611c <_strtod_l+0xa54>
 8016038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801603a:	2b00      	cmp	r3, #0
 801603c:	d17c      	bne.n	8016138 <_strtod_l+0xa70>
 801603e:	f1b8 0f00 	cmp.w	r8, #0
 8016042:	d15a      	bne.n	80160fa <_strtod_l+0xa32>
 8016044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016048:	2b00      	cmp	r3, #0
 801604a:	d15d      	bne.n	8016108 <_strtod_l+0xa40>
 801604c:	4b90      	ldr	r3, [pc, #576]	; (8016290 <_strtod_l+0xbc8>)
 801604e:	2200      	movs	r2, #0
 8016050:	4630      	mov	r0, r6
 8016052:	4639      	mov	r1, r7
 8016054:	f7ea fd5a 	bl	8000b0c <__aeabi_dcmplt>
 8016058:	2800      	cmp	r0, #0
 801605a:	d15c      	bne.n	8016116 <_strtod_l+0xa4e>
 801605c:	4630      	mov	r0, r6
 801605e:	4639      	mov	r1, r7
 8016060:	4b8c      	ldr	r3, [pc, #560]	; (8016294 <_strtod_l+0xbcc>)
 8016062:	2200      	movs	r2, #0
 8016064:	f7ea fae0 	bl	8000628 <__aeabi_dmul>
 8016068:	4606      	mov	r6, r0
 801606a:	460f      	mov	r7, r1
 801606c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016070:	9606      	str	r6, [sp, #24]
 8016072:	9307      	str	r3, [sp, #28]
 8016074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016078:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801607c:	4b86      	ldr	r3, [pc, #536]	; (8016298 <_strtod_l+0xbd0>)
 801607e:	ea0a 0303 	and.w	r3, sl, r3
 8016082:	930d      	str	r3, [sp, #52]	; 0x34
 8016084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016086:	4b85      	ldr	r3, [pc, #532]	; (801629c <_strtod_l+0xbd4>)
 8016088:	429a      	cmp	r2, r3
 801608a:	f040 8090 	bne.w	80161ae <_strtod_l+0xae6>
 801608e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016092:	ec49 8b10 	vmov	d0, r8, r9
 8016096:	f001 fb9d 	bl	80177d4 <__ulp>
 801609a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801609e:	ec51 0b10 	vmov	r0, r1, d0
 80160a2:	f7ea fac1 	bl	8000628 <__aeabi_dmul>
 80160a6:	4642      	mov	r2, r8
 80160a8:	464b      	mov	r3, r9
 80160aa:	f7ea f907 	bl	80002bc <__adddf3>
 80160ae:	460b      	mov	r3, r1
 80160b0:	4979      	ldr	r1, [pc, #484]	; (8016298 <_strtod_l+0xbd0>)
 80160b2:	4a7b      	ldr	r2, [pc, #492]	; (80162a0 <_strtod_l+0xbd8>)
 80160b4:	4019      	ands	r1, r3
 80160b6:	4291      	cmp	r1, r2
 80160b8:	4680      	mov	r8, r0
 80160ba:	d944      	bls.n	8016146 <_strtod_l+0xa7e>
 80160bc:	ee18 2a90 	vmov	r2, s17
 80160c0:	4b78      	ldr	r3, [pc, #480]	; (80162a4 <_strtod_l+0xbdc>)
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d104      	bne.n	80160d0 <_strtod_l+0xa08>
 80160c6:	ee18 3a10 	vmov	r3, s16
 80160ca:	3301      	adds	r3, #1
 80160cc:	f43f ad40 	beq.w	8015b50 <_strtod_l+0x488>
 80160d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80162a4 <_strtod_l+0xbdc>
 80160d4:	f04f 38ff 	mov.w	r8, #4294967295
 80160d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80160da:	4620      	mov	r0, r4
 80160dc:	f001 f84e 	bl	801717c <_Bfree>
 80160e0:	9905      	ldr	r1, [sp, #20]
 80160e2:	4620      	mov	r0, r4
 80160e4:	f001 f84a 	bl	801717c <_Bfree>
 80160e8:	4659      	mov	r1, fp
 80160ea:	4620      	mov	r0, r4
 80160ec:	f001 f846 	bl	801717c <_Bfree>
 80160f0:	4629      	mov	r1, r5
 80160f2:	4620      	mov	r0, r4
 80160f4:	f001 f842 	bl	801717c <_Bfree>
 80160f8:	e609      	b.n	8015d0e <_strtod_l+0x646>
 80160fa:	f1b8 0f01 	cmp.w	r8, #1
 80160fe:	d103      	bne.n	8016108 <_strtod_l+0xa40>
 8016100:	f1b9 0f00 	cmp.w	r9, #0
 8016104:	f43f ad95 	beq.w	8015c32 <_strtod_l+0x56a>
 8016108:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8016260 <_strtod_l+0xb98>
 801610c:	4f60      	ldr	r7, [pc, #384]	; (8016290 <_strtod_l+0xbc8>)
 801610e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016112:	2600      	movs	r6, #0
 8016114:	e7ae      	b.n	8016074 <_strtod_l+0x9ac>
 8016116:	4f5f      	ldr	r7, [pc, #380]	; (8016294 <_strtod_l+0xbcc>)
 8016118:	2600      	movs	r6, #0
 801611a:	e7a7      	b.n	801606c <_strtod_l+0x9a4>
 801611c:	4b5d      	ldr	r3, [pc, #372]	; (8016294 <_strtod_l+0xbcc>)
 801611e:	4630      	mov	r0, r6
 8016120:	4639      	mov	r1, r7
 8016122:	2200      	movs	r2, #0
 8016124:	f7ea fa80 	bl	8000628 <__aeabi_dmul>
 8016128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801612a:	4606      	mov	r6, r0
 801612c:	460f      	mov	r7, r1
 801612e:	2b00      	cmp	r3, #0
 8016130:	d09c      	beq.n	801606c <_strtod_l+0x9a4>
 8016132:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016136:	e79d      	b.n	8016074 <_strtod_l+0x9ac>
 8016138:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8016268 <_strtod_l+0xba0>
 801613c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016140:	ec57 6b17 	vmov	r6, r7, d7
 8016144:	e796      	b.n	8016074 <_strtod_l+0x9ac>
 8016146:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801614a:	9b04      	ldr	r3, [sp, #16]
 801614c:	46ca      	mov	sl, r9
 801614e:	2b00      	cmp	r3, #0
 8016150:	d1c2      	bne.n	80160d8 <_strtod_l+0xa10>
 8016152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016158:	0d1b      	lsrs	r3, r3, #20
 801615a:	051b      	lsls	r3, r3, #20
 801615c:	429a      	cmp	r2, r3
 801615e:	d1bb      	bne.n	80160d8 <_strtod_l+0xa10>
 8016160:	4630      	mov	r0, r6
 8016162:	4639      	mov	r1, r7
 8016164:	f7ea fd5a 	bl	8000c1c <__aeabi_d2lz>
 8016168:	f7ea fa30 	bl	80005cc <__aeabi_l2d>
 801616c:	4602      	mov	r2, r0
 801616e:	460b      	mov	r3, r1
 8016170:	4630      	mov	r0, r6
 8016172:	4639      	mov	r1, r7
 8016174:	f7ea f8a0 	bl	80002b8 <__aeabi_dsub>
 8016178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801617a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801617e:	ea43 0308 	orr.w	r3, r3, r8
 8016182:	4313      	orrs	r3, r2
 8016184:	4606      	mov	r6, r0
 8016186:	460f      	mov	r7, r1
 8016188:	d054      	beq.n	8016234 <_strtod_l+0xb6c>
 801618a:	a339      	add	r3, pc, #228	; (adr r3, 8016270 <_strtod_l+0xba8>)
 801618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016190:	f7ea fcbc 	bl	8000b0c <__aeabi_dcmplt>
 8016194:	2800      	cmp	r0, #0
 8016196:	f47f ace5 	bne.w	8015b64 <_strtod_l+0x49c>
 801619a:	a337      	add	r3, pc, #220	; (adr r3, 8016278 <_strtod_l+0xbb0>)
 801619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a0:	4630      	mov	r0, r6
 80161a2:	4639      	mov	r1, r7
 80161a4:	f7ea fcd0 	bl	8000b48 <__aeabi_dcmpgt>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	d095      	beq.n	80160d8 <_strtod_l+0xa10>
 80161ac:	e4da      	b.n	8015b64 <_strtod_l+0x49c>
 80161ae:	9b04      	ldr	r3, [sp, #16]
 80161b0:	b333      	cbz	r3, 8016200 <_strtod_l+0xb38>
 80161b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80161b8:	d822      	bhi.n	8016200 <_strtod_l+0xb38>
 80161ba:	a331      	add	r3, pc, #196	; (adr r3, 8016280 <_strtod_l+0xbb8>)
 80161bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c0:	4630      	mov	r0, r6
 80161c2:	4639      	mov	r1, r7
 80161c4:	f7ea fcac 	bl	8000b20 <__aeabi_dcmple>
 80161c8:	b1a0      	cbz	r0, 80161f4 <_strtod_l+0xb2c>
 80161ca:	4639      	mov	r1, r7
 80161cc:	4630      	mov	r0, r6
 80161ce:	f7ea fced 	bl	8000bac <__aeabi_d2uiz>
 80161d2:	2801      	cmp	r0, #1
 80161d4:	bf38      	it	cc
 80161d6:	2001      	movcc	r0, #1
 80161d8:	f7ea f9ac 	bl	8000534 <__aeabi_ui2d>
 80161dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161de:	4606      	mov	r6, r0
 80161e0:	460f      	mov	r7, r1
 80161e2:	bb23      	cbnz	r3, 801622e <_strtod_l+0xb66>
 80161e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161e8:	9010      	str	r0, [sp, #64]	; 0x40
 80161ea:	9311      	str	r3, [sp, #68]	; 0x44
 80161ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80161f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80161f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80161f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80161fc:	1a9b      	subs	r3, r3, r2
 80161fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8016200:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016204:	eeb0 0a48 	vmov.f32	s0, s16
 8016208:	eef0 0a68 	vmov.f32	s1, s17
 801620c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016210:	f001 fae0 	bl	80177d4 <__ulp>
 8016214:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016218:	ec53 2b10 	vmov	r2, r3, d0
 801621c:	f7ea fa04 	bl	8000628 <__aeabi_dmul>
 8016220:	ec53 2b18 	vmov	r2, r3, d8
 8016224:	f7ea f84a 	bl	80002bc <__adddf3>
 8016228:	4680      	mov	r8, r0
 801622a:	4689      	mov	r9, r1
 801622c:	e78d      	b.n	801614a <_strtod_l+0xa82>
 801622e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016232:	e7db      	b.n	80161ec <_strtod_l+0xb24>
 8016234:	a314      	add	r3, pc, #80	; (adr r3, 8016288 <_strtod_l+0xbc0>)
 8016236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801623a:	f7ea fc67 	bl	8000b0c <__aeabi_dcmplt>
 801623e:	e7b3      	b.n	80161a8 <_strtod_l+0xae0>
 8016240:	2300      	movs	r3, #0
 8016242:	930a      	str	r3, [sp, #40]	; 0x28
 8016244:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016248:	6013      	str	r3, [r2, #0]
 801624a:	f7ff ba7c 	b.w	8015746 <_strtod_l+0x7e>
 801624e:	2a65      	cmp	r2, #101	; 0x65
 8016250:	f43f ab75 	beq.w	801593e <_strtod_l+0x276>
 8016254:	2a45      	cmp	r2, #69	; 0x45
 8016256:	f43f ab72 	beq.w	801593e <_strtod_l+0x276>
 801625a:	2301      	movs	r3, #1
 801625c:	f7ff bbaa 	b.w	80159b4 <_strtod_l+0x2ec>
 8016260:	00000000 	.word	0x00000000
 8016264:	bff00000 	.word	0xbff00000
 8016268:	00000000 	.word	0x00000000
 801626c:	3ff00000 	.word	0x3ff00000
 8016270:	94a03595 	.word	0x94a03595
 8016274:	3fdfffff 	.word	0x3fdfffff
 8016278:	35afe535 	.word	0x35afe535
 801627c:	3fe00000 	.word	0x3fe00000
 8016280:	ffc00000 	.word	0xffc00000
 8016284:	41dfffff 	.word	0x41dfffff
 8016288:	94a03595 	.word	0x94a03595
 801628c:	3fcfffff 	.word	0x3fcfffff
 8016290:	3ff00000 	.word	0x3ff00000
 8016294:	3fe00000 	.word	0x3fe00000
 8016298:	7ff00000 	.word	0x7ff00000
 801629c:	7fe00000 	.word	0x7fe00000
 80162a0:	7c9fffff 	.word	0x7c9fffff
 80162a4:	7fefffff 	.word	0x7fefffff

080162a8 <strtod>:
 80162a8:	460a      	mov	r2, r1
 80162aa:	4601      	mov	r1, r0
 80162ac:	4802      	ldr	r0, [pc, #8]	; (80162b8 <strtod+0x10>)
 80162ae:	4b03      	ldr	r3, [pc, #12]	; (80162bc <strtod+0x14>)
 80162b0:	6800      	ldr	r0, [r0, #0]
 80162b2:	f7ff ba09 	b.w	80156c8 <_strtod_l>
 80162b6:	bf00      	nop
 80162b8:	20000778 	.word	0x20000778
 80162bc:	200005c0 	.word	0x200005c0

080162c0 <_strtol_l.constprop.0>:
 80162c0:	2b01      	cmp	r3, #1
 80162c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162c6:	d001      	beq.n	80162cc <_strtol_l.constprop.0+0xc>
 80162c8:	2b24      	cmp	r3, #36	; 0x24
 80162ca:	d906      	bls.n	80162da <_strtol_l.constprop.0+0x1a>
 80162cc:	f000 fa66 	bl	801679c <__errno>
 80162d0:	2316      	movs	r3, #22
 80162d2:	6003      	str	r3, [r0, #0]
 80162d4:	2000      	movs	r0, #0
 80162d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80163c0 <_strtol_l.constprop.0+0x100>
 80162de:	460d      	mov	r5, r1
 80162e0:	462e      	mov	r6, r5
 80162e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80162e6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80162ea:	f017 0708 	ands.w	r7, r7, #8
 80162ee:	d1f7      	bne.n	80162e0 <_strtol_l.constprop.0+0x20>
 80162f0:	2c2d      	cmp	r4, #45	; 0x2d
 80162f2:	d132      	bne.n	801635a <_strtol_l.constprop.0+0x9a>
 80162f4:	782c      	ldrb	r4, [r5, #0]
 80162f6:	2701      	movs	r7, #1
 80162f8:	1cb5      	adds	r5, r6, #2
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d05b      	beq.n	80163b6 <_strtol_l.constprop.0+0xf6>
 80162fe:	2b10      	cmp	r3, #16
 8016300:	d109      	bne.n	8016316 <_strtol_l.constprop.0+0x56>
 8016302:	2c30      	cmp	r4, #48	; 0x30
 8016304:	d107      	bne.n	8016316 <_strtol_l.constprop.0+0x56>
 8016306:	782c      	ldrb	r4, [r5, #0]
 8016308:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801630c:	2c58      	cmp	r4, #88	; 0x58
 801630e:	d14d      	bne.n	80163ac <_strtol_l.constprop.0+0xec>
 8016310:	786c      	ldrb	r4, [r5, #1]
 8016312:	2310      	movs	r3, #16
 8016314:	3502      	adds	r5, #2
 8016316:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801631a:	f108 38ff 	add.w	r8, r8, #4294967295
 801631e:	f04f 0e00 	mov.w	lr, #0
 8016322:	fbb8 f9f3 	udiv	r9, r8, r3
 8016326:	4676      	mov	r6, lr
 8016328:	fb03 8a19 	mls	sl, r3, r9, r8
 801632c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016330:	f1bc 0f09 	cmp.w	ip, #9
 8016334:	d816      	bhi.n	8016364 <_strtol_l.constprop.0+0xa4>
 8016336:	4664      	mov	r4, ip
 8016338:	42a3      	cmp	r3, r4
 801633a:	dd24      	ble.n	8016386 <_strtol_l.constprop.0+0xc6>
 801633c:	f1be 3fff 	cmp.w	lr, #4294967295
 8016340:	d008      	beq.n	8016354 <_strtol_l.constprop.0+0x94>
 8016342:	45b1      	cmp	r9, r6
 8016344:	d31c      	bcc.n	8016380 <_strtol_l.constprop.0+0xc0>
 8016346:	d101      	bne.n	801634c <_strtol_l.constprop.0+0x8c>
 8016348:	45a2      	cmp	sl, r4
 801634a:	db19      	blt.n	8016380 <_strtol_l.constprop.0+0xc0>
 801634c:	fb06 4603 	mla	r6, r6, r3, r4
 8016350:	f04f 0e01 	mov.w	lr, #1
 8016354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016358:	e7e8      	b.n	801632c <_strtol_l.constprop.0+0x6c>
 801635a:	2c2b      	cmp	r4, #43	; 0x2b
 801635c:	bf04      	itt	eq
 801635e:	782c      	ldrbeq	r4, [r5, #0]
 8016360:	1cb5      	addeq	r5, r6, #2
 8016362:	e7ca      	b.n	80162fa <_strtol_l.constprop.0+0x3a>
 8016364:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016368:	f1bc 0f19 	cmp.w	ip, #25
 801636c:	d801      	bhi.n	8016372 <_strtol_l.constprop.0+0xb2>
 801636e:	3c37      	subs	r4, #55	; 0x37
 8016370:	e7e2      	b.n	8016338 <_strtol_l.constprop.0+0x78>
 8016372:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016376:	f1bc 0f19 	cmp.w	ip, #25
 801637a:	d804      	bhi.n	8016386 <_strtol_l.constprop.0+0xc6>
 801637c:	3c57      	subs	r4, #87	; 0x57
 801637e:	e7db      	b.n	8016338 <_strtol_l.constprop.0+0x78>
 8016380:	f04f 3eff 	mov.w	lr, #4294967295
 8016384:	e7e6      	b.n	8016354 <_strtol_l.constprop.0+0x94>
 8016386:	f1be 3fff 	cmp.w	lr, #4294967295
 801638a:	d105      	bne.n	8016398 <_strtol_l.constprop.0+0xd8>
 801638c:	2322      	movs	r3, #34	; 0x22
 801638e:	6003      	str	r3, [r0, #0]
 8016390:	4646      	mov	r6, r8
 8016392:	b942      	cbnz	r2, 80163a6 <_strtol_l.constprop.0+0xe6>
 8016394:	4630      	mov	r0, r6
 8016396:	e79e      	b.n	80162d6 <_strtol_l.constprop.0+0x16>
 8016398:	b107      	cbz	r7, 801639c <_strtol_l.constprop.0+0xdc>
 801639a:	4276      	negs	r6, r6
 801639c:	2a00      	cmp	r2, #0
 801639e:	d0f9      	beq.n	8016394 <_strtol_l.constprop.0+0xd4>
 80163a0:	f1be 0f00 	cmp.w	lr, #0
 80163a4:	d000      	beq.n	80163a8 <_strtol_l.constprop.0+0xe8>
 80163a6:	1e69      	subs	r1, r5, #1
 80163a8:	6011      	str	r1, [r2, #0]
 80163aa:	e7f3      	b.n	8016394 <_strtol_l.constprop.0+0xd4>
 80163ac:	2430      	movs	r4, #48	; 0x30
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d1b1      	bne.n	8016316 <_strtol_l.constprop.0+0x56>
 80163b2:	2308      	movs	r3, #8
 80163b4:	e7af      	b.n	8016316 <_strtol_l.constprop.0+0x56>
 80163b6:	2c30      	cmp	r4, #48	; 0x30
 80163b8:	d0a5      	beq.n	8016306 <_strtol_l.constprop.0+0x46>
 80163ba:	230a      	movs	r3, #10
 80163bc:	e7ab      	b.n	8016316 <_strtol_l.constprop.0+0x56>
 80163be:	bf00      	nop
 80163c0:	0801c099 	.word	0x0801c099

080163c4 <strtol>:
 80163c4:	4613      	mov	r3, r2
 80163c6:	460a      	mov	r2, r1
 80163c8:	4601      	mov	r1, r0
 80163ca:	4802      	ldr	r0, [pc, #8]	; (80163d4 <strtol+0x10>)
 80163cc:	6800      	ldr	r0, [r0, #0]
 80163ce:	f7ff bf77 	b.w	80162c0 <_strtol_l.constprop.0>
 80163d2:	bf00      	nop
 80163d4:	20000778 	.word	0x20000778

080163d8 <std>:
 80163d8:	2300      	movs	r3, #0
 80163da:	b510      	push	{r4, lr}
 80163dc:	4604      	mov	r4, r0
 80163de:	e9c0 3300 	strd	r3, r3, [r0]
 80163e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80163e6:	6083      	str	r3, [r0, #8]
 80163e8:	8181      	strh	r1, [r0, #12]
 80163ea:	6643      	str	r3, [r0, #100]	; 0x64
 80163ec:	81c2      	strh	r2, [r0, #14]
 80163ee:	6183      	str	r3, [r0, #24]
 80163f0:	4619      	mov	r1, r3
 80163f2:	2208      	movs	r2, #8
 80163f4:	305c      	adds	r0, #92	; 0x5c
 80163f6:	f000 f964 	bl	80166c2 <memset>
 80163fa:	4b0d      	ldr	r3, [pc, #52]	; (8016430 <std+0x58>)
 80163fc:	6263      	str	r3, [r4, #36]	; 0x24
 80163fe:	4b0d      	ldr	r3, [pc, #52]	; (8016434 <std+0x5c>)
 8016400:	62a3      	str	r3, [r4, #40]	; 0x28
 8016402:	4b0d      	ldr	r3, [pc, #52]	; (8016438 <std+0x60>)
 8016404:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016406:	4b0d      	ldr	r3, [pc, #52]	; (801643c <std+0x64>)
 8016408:	6323      	str	r3, [r4, #48]	; 0x30
 801640a:	4b0d      	ldr	r3, [pc, #52]	; (8016440 <std+0x68>)
 801640c:	6224      	str	r4, [r4, #32]
 801640e:	429c      	cmp	r4, r3
 8016410:	d006      	beq.n	8016420 <std+0x48>
 8016412:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016416:	4294      	cmp	r4, r2
 8016418:	d002      	beq.n	8016420 <std+0x48>
 801641a:	33d0      	adds	r3, #208	; 0xd0
 801641c:	429c      	cmp	r4, r3
 801641e:	d105      	bne.n	801642c <std+0x54>
 8016420:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016428:	f000 b9e2 	b.w	80167f0 <__retarget_lock_init_recursive>
 801642c:	bd10      	pop	{r4, pc}
 801642e:	bf00      	nop
 8016430:	080165e9 	.word	0x080165e9
 8016434:	0801660b 	.word	0x0801660b
 8016438:	08016643 	.word	0x08016643
 801643c:	08016667 	.word	0x08016667
 8016440:	20008858 	.word	0x20008858

08016444 <stdio_exit_handler>:
 8016444:	4a02      	ldr	r2, [pc, #8]	; (8016450 <stdio_exit_handler+0xc>)
 8016446:	4903      	ldr	r1, [pc, #12]	; (8016454 <stdio_exit_handler+0x10>)
 8016448:	4803      	ldr	r0, [pc, #12]	; (8016458 <stdio_exit_handler+0x14>)
 801644a:	f000 b87b 	b.w	8016544 <_fwalk_sglue>
 801644e:	bf00      	nop
 8016450:	200005b4 	.word	0x200005b4
 8016454:	080183d5 	.word	0x080183d5
 8016458:	2000072c 	.word	0x2000072c

0801645c <cleanup_stdio>:
 801645c:	6841      	ldr	r1, [r0, #4]
 801645e:	4b0c      	ldr	r3, [pc, #48]	; (8016490 <cleanup_stdio+0x34>)
 8016460:	4299      	cmp	r1, r3
 8016462:	b510      	push	{r4, lr}
 8016464:	4604      	mov	r4, r0
 8016466:	d001      	beq.n	801646c <cleanup_stdio+0x10>
 8016468:	f001 ffb4 	bl	80183d4 <_fflush_r>
 801646c:	68a1      	ldr	r1, [r4, #8]
 801646e:	4b09      	ldr	r3, [pc, #36]	; (8016494 <cleanup_stdio+0x38>)
 8016470:	4299      	cmp	r1, r3
 8016472:	d002      	beq.n	801647a <cleanup_stdio+0x1e>
 8016474:	4620      	mov	r0, r4
 8016476:	f001 ffad 	bl	80183d4 <_fflush_r>
 801647a:	68e1      	ldr	r1, [r4, #12]
 801647c:	4b06      	ldr	r3, [pc, #24]	; (8016498 <cleanup_stdio+0x3c>)
 801647e:	4299      	cmp	r1, r3
 8016480:	d004      	beq.n	801648c <cleanup_stdio+0x30>
 8016482:	4620      	mov	r0, r4
 8016484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016488:	f001 bfa4 	b.w	80183d4 <_fflush_r>
 801648c:	bd10      	pop	{r4, pc}
 801648e:	bf00      	nop
 8016490:	20008858 	.word	0x20008858
 8016494:	200088c0 	.word	0x200088c0
 8016498:	20008928 	.word	0x20008928

0801649c <global_stdio_init.part.0>:
 801649c:	b510      	push	{r4, lr}
 801649e:	4b0b      	ldr	r3, [pc, #44]	; (80164cc <global_stdio_init.part.0+0x30>)
 80164a0:	4c0b      	ldr	r4, [pc, #44]	; (80164d0 <global_stdio_init.part.0+0x34>)
 80164a2:	4a0c      	ldr	r2, [pc, #48]	; (80164d4 <global_stdio_init.part.0+0x38>)
 80164a4:	601a      	str	r2, [r3, #0]
 80164a6:	4620      	mov	r0, r4
 80164a8:	2200      	movs	r2, #0
 80164aa:	2104      	movs	r1, #4
 80164ac:	f7ff ff94 	bl	80163d8 <std>
 80164b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80164b4:	2201      	movs	r2, #1
 80164b6:	2109      	movs	r1, #9
 80164b8:	f7ff ff8e 	bl	80163d8 <std>
 80164bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80164c0:	2202      	movs	r2, #2
 80164c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164c6:	2112      	movs	r1, #18
 80164c8:	f7ff bf86 	b.w	80163d8 <std>
 80164cc:	20008990 	.word	0x20008990
 80164d0:	20008858 	.word	0x20008858
 80164d4:	08016445 	.word	0x08016445

080164d8 <__sfp_lock_acquire>:
 80164d8:	4801      	ldr	r0, [pc, #4]	; (80164e0 <__sfp_lock_acquire+0x8>)
 80164da:	f000 b98a 	b.w	80167f2 <__retarget_lock_acquire_recursive>
 80164de:	bf00      	nop
 80164e0:	20008999 	.word	0x20008999

080164e4 <__sfp_lock_release>:
 80164e4:	4801      	ldr	r0, [pc, #4]	; (80164ec <__sfp_lock_release+0x8>)
 80164e6:	f000 b985 	b.w	80167f4 <__retarget_lock_release_recursive>
 80164ea:	bf00      	nop
 80164ec:	20008999 	.word	0x20008999

080164f0 <__sinit>:
 80164f0:	b510      	push	{r4, lr}
 80164f2:	4604      	mov	r4, r0
 80164f4:	f7ff fff0 	bl	80164d8 <__sfp_lock_acquire>
 80164f8:	6a23      	ldr	r3, [r4, #32]
 80164fa:	b11b      	cbz	r3, 8016504 <__sinit+0x14>
 80164fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016500:	f7ff bff0 	b.w	80164e4 <__sfp_lock_release>
 8016504:	4b04      	ldr	r3, [pc, #16]	; (8016518 <__sinit+0x28>)
 8016506:	6223      	str	r3, [r4, #32]
 8016508:	4b04      	ldr	r3, [pc, #16]	; (801651c <__sinit+0x2c>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d1f5      	bne.n	80164fc <__sinit+0xc>
 8016510:	f7ff ffc4 	bl	801649c <global_stdio_init.part.0>
 8016514:	e7f2      	b.n	80164fc <__sinit+0xc>
 8016516:	bf00      	nop
 8016518:	0801645d 	.word	0x0801645d
 801651c:	20008990 	.word	0x20008990

08016520 <fiprintf>:
 8016520:	b40e      	push	{r1, r2, r3}
 8016522:	b503      	push	{r0, r1, lr}
 8016524:	4601      	mov	r1, r0
 8016526:	ab03      	add	r3, sp, #12
 8016528:	4805      	ldr	r0, [pc, #20]	; (8016540 <fiprintf+0x20>)
 801652a:	f853 2b04 	ldr.w	r2, [r3], #4
 801652e:	6800      	ldr	r0, [r0, #0]
 8016530:	9301      	str	r3, [sp, #4]
 8016532:	f001 fc1f 	bl	8017d74 <_vfiprintf_r>
 8016536:	b002      	add	sp, #8
 8016538:	f85d eb04 	ldr.w	lr, [sp], #4
 801653c:	b003      	add	sp, #12
 801653e:	4770      	bx	lr
 8016540:	20000778 	.word	0x20000778

08016544 <_fwalk_sglue>:
 8016544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016548:	4607      	mov	r7, r0
 801654a:	4688      	mov	r8, r1
 801654c:	4614      	mov	r4, r2
 801654e:	2600      	movs	r6, #0
 8016550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016554:	f1b9 0901 	subs.w	r9, r9, #1
 8016558:	d505      	bpl.n	8016566 <_fwalk_sglue+0x22>
 801655a:	6824      	ldr	r4, [r4, #0]
 801655c:	2c00      	cmp	r4, #0
 801655e:	d1f7      	bne.n	8016550 <_fwalk_sglue+0xc>
 8016560:	4630      	mov	r0, r6
 8016562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016566:	89ab      	ldrh	r3, [r5, #12]
 8016568:	2b01      	cmp	r3, #1
 801656a:	d907      	bls.n	801657c <_fwalk_sglue+0x38>
 801656c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016570:	3301      	adds	r3, #1
 8016572:	d003      	beq.n	801657c <_fwalk_sglue+0x38>
 8016574:	4629      	mov	r1, r5
 8016576:	4638      	mov	r0, r7
 8016578:	47c0      	blx	r8
 801657a:	4306      	orrs	r6, r0
 801657c:	3568      	adds	r5, #104	; 0x68
 801657e:	e7e9      	b.n	8016554 <_fwalk_sglue+0x10>

08016580 <sniprintf>:
 8016580:	b40c      	push	{r2, r3}
 8016582:	b530      	push	{r4, r5, lr}
 8016584:	4b17      	ldr	r3, [pc, #92]	; (80165e4 <sniprintf+0x64>)
 8016586:	1e0c      	subs	r4, r1, #0
 8016588:	681d      	ldr	r5, [r3, #0]
 801658a:	b09d      	sub	sp, #116	; 0x74
 801658c:	da08      	bge.n	80165a0 <sniprintf+0x20>
 801658e:	238b      	movs	r3, #139	; 0x8b
 8016590:	602b      	str	r3, [r5, #0]
 8016592:	f04f 30ff 	mov.w	r0, #4294967295
 8016596:	b01d      	add	sp, #116	; 0x74
 8016598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801659c:	b002      	add	sp, #8
 801659e:	4770      	bx	lr
 80165a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80165a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165a8:	bf14      	ite	ne
 80165aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80165ae:	4623      	moveq	r3, r4
 80165b0:	9304      	str	r3, [sp, #16]
 80165b2:	9307      	str	r3, [sp, #28]
 80165b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165b8:	9002      	str	r0, [sp, #8]
 80165ba:	9006      	str	r0, [sp, #24]
 80165bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80165c2:	ab21      	add	r3, sp, #132	; 0x84
 80165c4:	a902      	add	r1, sp, #8
 80165c6:	4628      	mov	r0, r5
 80165c8:	9301      	str	r3, [sp, #4]
 80165ca:	f001 faab 	bl	8017b24 <_svfiprintf_r>
 80165ce:	1c43      	adds	r3, r0, #1
 80165d0:	bfbc      	itt	lt
 80165d2:	238b      	movlt	r3, #139	; 0x8b
 80165d4:	602b      	strlt	r3, [r5, #0]
 80165d6:	2c00      	cmp	r4, #0
 80165d8:	d0dd      	beq.n	8016596 <sniprintf+0x16>
 80165da:	9b02      	ldr	r3, [sp, #8]
 80165dc:	2200      	movs	r2, #0
 80165de:	701a      	strb	r2, [r3, #0]
 80165e0:	e7d9      	b.n	8016596 <sniprintf+0x16>
 80165e2:	bf00      	nop
 80165e4:	20000778 	.word	0x20000778

080165e8 <__sread>:
 80165e8:	b510      	push	{r4, lr}
 80165ea:	460c      	mov	r4, r1
 80165ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165f0:	f000 f8b0 	bl	8016754 <_read_r>
 80165f4:	2800      	cmp	r0, #0
 80165f6:	bfab      	itete	ge
 80165f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80165fa:	89a3      	ldrhlt	r3, [r4, #12]
 80165fc:	181b      	addge	r3, r3, r0
 80165fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016602:	bfac      	ite	ge
 8016604:	6563      	strge	r3, [r4, #84]	; 0x54
 8016606:	81a3      	strhlt	r3, [r4, #12]
 8016608:	bd10      	pop	{r4, pc}

0801660a <__swrite>:
 801660a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801660e:	461f      	mov	r7, r3
 8016610:	898b      	ldrh	r3, [r1, #12]
 8016612:	05db      	lsls	r3, r3, #23
 8016614:	4605      	mov	r5, r0
 8016616:	460c      	mov	r4, r1
 8016618:	4616      	mov	r6, r2
 801661a:	d505      	bpl.n	8016628 <__swrite+0x1e>
 801661c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016620:	2302      	movs	r3, #2
 8016622:	2200      	movs	r2, #0
 8016624:	f000 f884 	bl	8016730 <_lseek_r>
 8016628:	89a3      	ldrh	r3, [r4, #12]
 801662a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801662e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016632:	81a3      	strh	r3, [r4, #12]
 8016634:	4632      	mov	r2, r6
 8016636:	463b      	mov	r3, r7
 8016638:	4628      	mov	r0, r5
 801663a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801663e:	f000 b89b 	b.w	8016778 <_write_r>

08016642 <__sseek>:
 8016642:	b510      	push	{r4, lr}
 8016644:	460c      	mov	r4, r1
 8016646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801664a:	f000 f871 	bl	8016730 <_lseek_r>
 801664e:	1c43      	adds	r3, r0, #1
 8016650:	89a3      	ldrh	r3, [r4, #12]
 8016652:	bf15      	itete	ne
 8016654:	6560      	strne	r0, [r4, #84]	; 0x54
 8016656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801665a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801665e:	81a3      	strheq	r3, [r4, #12]
 8016660:	bf18      	it	ne
 8016662:	81a3      	strhne	r3, [r4, #12]
 8016664:	bd10      	pop	{r4, pc}

08016666 <__sclose>:
 8016666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801666a:	f000 b851 	b.w	8016710 <_close_r>

0801666e <memcmp>:
 801666e:	b510      	push	{r4, lr}
 8016670:	3901      	subs	r1, #1
 8016672:	4402      	add	r2, r0
 8016674:	4290      	cmp	r0, r2
 8016676:	d101      	bne.n	801667c <memcmp+0xe>
 8016678:	2000      	movs	r0, #0
 801667a:	e005      	b.n	8016688 <memcmp+0x1a>
 801667c:	7803      	ldrb	r3, [r0, #0]
 801667e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016682:	42a3      	cmp	r3, r4
 8016684:	d001      	beq.n	801668a <memcmp+0x1c>
 8016686:	1b18      	subs	r0, r3, r4
 8016688:	bd10      	pop	{r4, pc}
 801668a:	3001      	adds	r0, #1
 801668c:	e7f2      	b.n	8016674 <memcmp+0x6>

0801668e <memmove>:
 801668e:	4288      	cmp	r0, r1
 8016690:	b510      	push	{r4, lr}
 8016692:	eb01 0402 	add.w	r4, r1, r2
 8016696:	d902      	bls.n	801669e <memmove+0x10>
 8016698:	4284      	cmp	r4, r0
 801669a:	4623      	mov	r3, r4
 801669c:	d807      	bhi.n	80166ae <memmove+0x20>
 801669e:	1e43      	subs	r3, r0, #1
 80166a0:	42a1      	cmp	r1, r4
 80166a2:	d008      	beq.n	80166b6 <memmove+0x28>
 80166a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80166a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80166ac:	e7f8      	b.n	80166a0 <memmove+0x12>
 80166ae:	4402      	add	r2, r0
 80166b0:	4601      	mov	r1, r0
 80166b2:	428a      	cmp	r2, r1
 80166b4:	d100      	bne.n	80166b8 <memmove+0x2a>
 80166b6:	bd10      	pop	{r4, pc}
 80166b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80166bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80166c0:	e7f7      	b.n	80166b2 <memmove+0x24>

080166c2 <memset>:
 80166c2:	4402      	add	r2, r0
 80166c4:	4603      	mov	r3, r0
 80166c6:	4293      	cmp	r3, r2
 80166c8:	d100      	bne.n	80166cc <memset+0xa>
 80166ca:	4770      	bx	lr
 80166cc:	f803 1b01 	strb.w	r1, [r3], #1
 80166d0:	e7f9      	b.n	80166c6 <memset+0x4>

080166d2 <strchr>:
 80166d2:	b2c9      	uxtb	r1, r1
 80166d4:	4603      	mov	r3, r0
 80166d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166da:	b11a      	cbz	r2, 80166e4 <strchr+0x12>
 80166dc:	428a      	cmp	r2, r1
 80166de:	d1f9      	bne.n	80166d4 <strchr+0x2>
 80166e0:	4618      	mov	r0, r3
 80166e2:	4770      	bx	lr
 80166e4:	2900      	cmp	r1, #0
 80166e6:	bf18      	it	ne
 80166e8:	2300      	movne	r3, #0
 80166ea:	e7f9      	b.n	80166e0 <strchr+0xe>

080166ec <strncmp>:
 80166ec:	b510      	push	{r4, lr}
 80166ee:	b16a      	cbz	r2, 801670c <strncmp+0x20>
 80166f0:	3901      	subs	r1, #1
 80166f2:	1884      	adds	r4, r0, r2
 80166f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80166fc:	429a      	cmp	r2, r3
 80166fe:	d103      	bne.n	8016708 <strncmp+0x1c>
 8016700:	42a0      	cmp	r0, r4
 8016702:	d001      	beq.n	8016708 <strncmp+0x1c>
 8016704:	2a00      	cmp	r2, #0
 8016706:	d1f5      	bne.n	80166f4 <strncmp+0x8>
 8016708:	1ad0      	subs	r0, r2, r3
 801670a:	bd10      	pop	{r4, pc}
 801670c:	4610      	mov	r0, r2
 801670e:	e7fc      	b.n	801670a <strncmp+0x1e>

08016710 <_close_r>:
 8016710:	b538      	push	{r3, r4, r5, lr}
 8016712:	4d06      	ldr	r5, [pc, #24]	; (801672c <_close_r+0x1c>)
 8016714:	2300      	movs	r3, #0
 8016716:	4604      	mov	r4, r0
 8016718:	4608      	mov	r0, r1
 801671a:	602b      	str	r3, [r5, #0]
 801671c:	f7ea ff0f 	bl	800153e <_close>
 8016720:	1c43      	adds	r3, r0, #1
 8016722:	d102      	bne.n	801672a <_close_r+0x1a>
 8016724:	682b      	ldr	r3, [r5, #0]
 8016726:	b103      	cbz	r3, 801672a <_close_r+0x1a>
 8016728:	6023      	str	r3, [r4, #0]
 801672a:	bd38      	pop	{r3, r4, r5, pc}
 801672c:	20008994 	.word	0x20008994

08016730 <_lseek_r>:
 8016730:	b538      	push	{r3, r4, r5, lr}
 8016732:	4d07      	ldr	r5, [pc, #28]	; (8016750 <_lseek_r+0x20>)
 8016734:	4604      	mov	r4, r0
 8016736:	4608      	mov	r0, r1
 8016738:	4611      	mov	r1, r2
 801673a:	2200      	movs	r2, #0
 801673c:	602a      	str	r2, [r5, #0]
 801673e:	461a      	mov	r2, r3
 8016740:	f7ea ff24 	bl	800158c <_lseek>
 8016744:	1c43      	adds	r3, r0, #1
 8016746:	d102      	bne.n	801674e <_lseek_r+0x1e>
 8016748:	682b      	ldr	r3, [r5, #0]
 801674a:	b103      	cbz	r3, 801674e <_lseek_r+0x1e>
 801674c:	6023      	str	r3, [r4, #0]
 801674e:	bd38      	pop	{r3, r4, r5, pc}
 8016750:	20008994 	.word	0x20008994

08016754 <_read_r>:
 8016754:	b538      	push	{r3, r4, r5, lr}
 8016756:	4d07      	ldr	r5, [pc, #28]	; (8016774 <_read_r+0x20>)
 8016758:	4604      	mov	r4, r0
 801675a:	4608      	mov	r0, r1
 801675c:	4611      	mov	r1, r2
 801675e:	2200      	movs	r2, #0
 8016760:	602a      	str	r2, [r5, #0]
 8016762:	461a      	mov	r2, r3
 8016764:	f7ea feb2 	bl	80014cc <_read>
 8016768:	1c43      	adds	r3, r0, #1
 801676a:	d102      	bne.n	8016772 <_read_r+0x1e>
 801676c:	682b      	ldr	r3, [r5, #0]
 801676e:	b103      	cbz	r3, 8016772 <_read_r+0x1e>
 8016770:	6023      	str	r3, [r4, #0]
 8016772:	bd38      	pop	{r3, r4, r5, pc}
 8016774:	20008994 	.word	0x20008994

08016778 <_write_r>:
 8016778:	b538      	push	{r3, r4, r5, lr}
 801677a:	4d07      	ldr	r5, [pc, #28]	; (8016798 <_write_r+0x20>)
 801677c:	4604      	mov	r4, r0
 801677e:	4608      	mov	r0, r1
 8016780:	4611      	mov	r1, r2
 8016782:	2200      	movs	r2, #0
 8016784:	602a      	str	r2, [r5, #0]
 8016786:	461a      	mov	r2, r3
 8016788:	f7ea febd 	bl	8001506 <_write>
 801678c:	1c43      	adds	r3, r0, #1
 801678e:	d102      	bne.n	8016796 <_write_r+0x1e>
 8016790:	682b      	ldr	r3, [r5, #0]
 8016792:	b103      	cbz	r3, 8016796 <_write_r+0x1e>
 8016794:	6023      	str	r3, [r4, #0]
 8016796:	bd38      	pop	{r3, r4, r5, pc}
 8016798:	20008994 	.word	0x20008994

0801679c <__errno>:
 801679c:	4b01      	ldr	r3, [pc, #4]	; (80167a4 <__errno+0x8>)
 801679e:	6818      	ldr	r0, [r3, #0]
 80167a0:	4770      	bx	lr
 80167a2:	bf00      	nop
 80167a4:	20000778 	.word	0x20000778

080167a8 <__libc_init_array>:
 80167a8:	b570      	push	{r4, r5, r6, lr}
 80167aa:	4d0d      	ldr	r5, [pc, #52]	; (80167e0 <__libc_init_array+0x38>)
 80167ac:	4c0d      	ldr	r4, [pc, #52]	; (80167e4 <__libc_init_array+0x3c>)
 80167ae:	1b64      	subs	r4, r4, r5
 80167b0:	10a4      	asrs	r4, r4, #2
 80167b2:	2600      	movs	r6, #0
 80167b4:	42a6      	cmp	r6, r4
 80167b6:	d109      	bne.n	80167cc <__libc_init_array+0x24>
 80167b8:	4d0b      	ldr	r5, [pc, #44]	; (80167e8 <__libc_init_array+0x40>)
 80167ba:	4c0c      	ldr	r4, [pc, #48]	; (80167ec <__libc_init_array+0x44>)
 80167bc:	f001 fff6 	bl	80187ac <_init>
 80167c0:	1b64      	subs	r4, r4, r5
 80167c2:	10a4      	asrs	r4, r4, #2
 80167c4:	2600      	movs	r6, #0
 80167c6:	42a6      	cmp	r6, r4
 80167c8:	d105      	bne.n	80167d6 <__libc_init_array+0x2e>
 80167ca:	bd70      	pop	{r4, r5, r6, pc}
 80167cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80167d0:	4798      	blx	r3
 80167d2:	3601      	adds	r6, #1
 80167d4:	e7ee      	b.n	80167b4 <__libc_init_array+0xc>
 80167d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80167da:	4798      	blx	r3
 80167dc:	3601      	adds	r6, #1
 80167de:	e7f2      	b.n	80167c6 <__libc_init_array+0x1e>
 80167e0:	0801c3c0 	.word	0x0801c3c0
 80167e4:	0801c3c0 	.word	0x0801c3c0
 80167e8:	0801c3c0 	.word	0x0801c3c0
 80167ec:	0801c3c4 	.word	0x0801c3c4

080167f0 <__retarget_lock_init_recursive>:
 80167f0:	4770      	bx	lr

080167f2 <__retarget_lock_acquire_recursive>:
 80167f2:	4770      	bx	lr

080167f4 <__retarget_lock_release_recursive>:
 80167f4:	4770      	bx	lr

080167f6 <memcpy>:
 80167f6:	440a      	add	r2, r1
 80167f8:	4291      	cmp	r1, r2
 80167fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80167fe:	d100      	bne.n	8016802 <memcpy+0xc>
 8016800:	4770      	bx	lr
 8016802:	b510      	push	{r4, lr}
 8016804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016808:	f803 4f01 	strb.w	r4, [r3, #1]!
 801680c:	4291      	cmp	r1, r2
 801680e:	d1f9      	bne.n	8016804 <memcpy+0xe>
 8016810:	bd10      	pop	{r4, pc}
 8016812:	0000      	movs	r0, r0
 8016814:	0000      	movs	r0, r0
	...

08016818 <nan>:
 8016818:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016820 <nan+0x8>
 801681c:	4770      	bx	lr
 801681e:	bf00      	nop
 8016820:	00000000 	.word	0x00000000
 8016824:	7ff80000 	.word	0x7ff80000

08016828 <abort>:
 8016828:	b508      	push	{r3, lr}
 801682a:	2006      	movs	r0, #6
 801682c:	f001 feb8 	bl	80185a0 <raise>
 8016830:	2001      	movs	r0, #1
 8016832:	f7ea fe41 	bl	80014b8 <_exit>
	...

08016838 <_free_r>:
 8016838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801683a:	2900      	cmp	r1, #0
 801683c:	d044      	beq.n	80168c8 <_free_r+0x90>
 801683e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016842:	9001      	str	r0, [sp, #4]
 8016844:	2b00      	cmp	r3, #0
 8016846:	f1a1 0404 	sub.w	r4, r1, #4
 801684a:	bfb8      	it	lt
 801684c:	18e4      	addlt	r4, r4, r3
 801684e:	f000 fc49 	bl	80170e4 <__malloc_lock>
 8016852:	4a1e      	ldr	r2, [pc, #120]	; (80168cc <_free_r+0x94>)
 8016854:	9801      	ldr	r0, [sp, #4]
 8016856:	6813      	ldr	r3, [r2, #0]
 8016858:	b933      	cbnz	r3, 8016868 <_free_r+0x30>
 801685a:	6063      	str	r3, [r4, #4]
 801685c:	6014      	str	r4, [r2, #0]
 801685e:	b003      	add	sp, #12
 8016860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016864:	f000 bc44 	b.w	80170f0 <__malloc_unlock>
 8016868:	42a3      	cmp	r3, r4
 801686a:	d908      	bls.n	801687e <_free_r+0x46>
 801686c:	6825      	ldr	r5, [r4, #0]
 801686e:	1961      	adds	r1, r4, r5
 8016870:	428b      	cmp	r3, r1
 8016872:	bf01      	itttt	eq
 8016874:	6819      	ldreq	r1, [r3, #0]
 8016876:	685b      	ldreq	r3, [r3, #4]
 8016878:	1949      	addeq	r1, r1, r5
 801687a:	6021      	streq	r1, [r4, #0]
 801687c:	e7ed      	b.n	801685a <_free_r+0x22>
 801687e:	461a      	mov	r2, r3
 8016880:	685b      	ldr	r3, [r3, #4]
 8016882:	b10b      	cbz	r3, 8016888 <_free_r+0x50>
 8016884:	42a3      	cmp	r3, r4
 8016886:	d9fa      	bls.n	801687e <_free_r+0x46>
 8016888:	6811      	ldr	r1, [r2, #0]
 801688a:	1855      	adds	r5, r2, r1
 801688c:	42a5      	cmp	r5, r4
 801688e:	d10b      	bne.n	80168a8 <_free_r+0x70>
 8016890:	6824      	ldr	r4, [r4, #0]
 8016892:	4421      	add	r1, r4
 8016894:	1854      	adds	r4, r2, r1
 8016896:	42a3      	cmp	r3, r4
 8016898:	6011      	str	r1, [r2, #0]
 801689a:	d1e0      	bne.n	801685e <_free_r+0x26>
 801689c:	681c      	ldr	r4, [r3, #0]
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	6053      	str	r3, [r2, #4]
 80168a2:	440c      	add	r4, r1
 80168a4:	6014      	str	r4, [r2, #0]
 80168a6:	e7da      	b.n	801685e <_free_r+0x26>
 80168a8:	d902      	bls.n	80168b0 <_free_r+0x78>
 80168aa:	230c      	movs	r3, #12
 80168ac:	6003      	str	r3, [r0, #0]
 80168ae:	e7d6      	b.n	801685e <_free_r+0x26>
 80168b0:	6825      	ldr	r5, [r4, #0]
 80168b2:	1961      	adds	r1, r4, r5
 80168b4:	428b      	cmp	r3, r1
 80168b6:	bf04      	itt	eq
 80168b8:	6819      	ldreq	r1, [r3, #0]
 80168ba:	685b      	ldreq	r3, [r3, #4]
 80168bc:	6063      	str	r3, [r4, #4]
 80168be:	bf04      	itt	eq
 80168c0:	1949      	addeq	r1, r1, r5
 80168c2:	6021      	streq	r1, [r4, #0]
 80168c4:	6054      	str	r4, [r2, #4]
 80168c6:	e7ca      	b.n	801685e <_free_r+0x26>
 80168c8:	b003      	add	sp, #12
 80168ca:	bd30      	pop	{r4, r5, pc}
 80168cc:	2000899c 	.word	0x2000899c

080168d0 <rshift>:
 80168d0:	6903      	ldr	r3, [r0, #16]
 80168d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80168d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80168de:	f100 0414 	add.w	r4, r0, #20
 80168e2:	dd45      	ble.n	8016970 <rshift+0xa0>
 80168e4:	f011 011f 	ands.w	r1, r1, #31
 80168e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80168ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80168f0:	d10c      	bne.n	801690c <rshift+0x3c>
 80168f2:	f100 0710 	add.w	r7, r0, #16
 80168f6:	4629      	mov	r1, r5
 80168f8:	42b1      	cmp	r1, r6
 80168fa:	d334      	bcc.n	8016966 <rshift+0x96>
 80168fc:	1a9b      	subs	r3, r3, r2
 80168fe:	009b      	lsls	r3, r3, #2
 8016900:	1eea      	subs	r2, r5, #3
 8016902:	4296      	cmp	r6, r2
 8016904:	bf38      	it	cc
 8016906:	2300      	movcc	r3, #0
 8016908:	4423      	add	r3, r4
 801690a:	e015      	b.n	8016938 <rshift+0x68>
 801690c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016910:	f1c1 0820 	rsb	r8, r1, #32
 8016914:	40cf      	lsrs	r7, r1
 8016916:	f105 0e04 	add.w	lr, r5, #4
 801691a:	46a1      	mov	r9, r4
 801691c:	4576      	cmp	r6, lr
 801691e:	46f4      	mov	ip, lr
 8016920:	d815      	bhi.n	801694e <rshift+0x7e>
 8016922:	1a9a      	subs	r2, r3, r2
 8016924:	0092      	lsls	r2, r2, #2
 8016926:	3a04      	subs	r2, #4
 8016928:	3501      	adds	r5, #1
 801692a:	42ae      	cmp	r6, r5
 801692c:	bf38      	it	cc
 801692e:	2200      	movcc	r2, #0
 8016930:	18a3      	adds	r3, r4, r2
 8016932:	50a7      	str	r7, [r4, r2]
 8016934:	b107      	cbz	r7, 8016938 <rshift+0x68>
 8016936:	3304      	adds	r3, #4
 8016938:	1b1a      	subs	r2, r3, r4
 801693a:	42a3      	cmp	r3, r4
 801693c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016940:	bf08      	it	eq
 8016942:	2300      	moveq	r3, #0
 8016944:	6102      	str	r2, [r0, #16]
 8016946:	bf08      	it	eq
 8016948:	6143      	streq	r3, [r0, #20]
 801694a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801694e:	f8dc c000 	ldr.w	ip, [ip]
 8016952:	fa0c fc08 	lsl.w	ip, ip, r8
 8016956:	ea4c 0707 	orr.w	r7, ip, r7
 801695a:	f849 7b04 	str.w	r7, [r9], #4
 801695e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016962:	40cf      	lsrs	r7, r1
 8016964:	e7da      	b.n	801691c <rshift+0x4c>
 8016966:	f851 cb04 	ldr.w	ip, [r1], #4
 801696a:	f847 cf04 	str.w	ip, [r7, #4]!
 801696e:	e7c3      	b.n	80168f8 <rshift+0x28>
 8016970:	4623      	mov	r3, r4
 8016972:	e7e1      	b.n	8016938 <rshift+0x68>

08016974 <__hexdig_fun>:
 8016974:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016978:	2b09      	cmp	r3, #9
 801697a:	d802      	bhi.n	8016982 <__hexdig_fun+0xe>
 801697c:	3820      	subs	r0, #32
 801697e:	b2c0      	uxtb	r0, r0
 8016980:	4770      	bx	lr
 8016982:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016986:	2b05      	cmp	r3, #5
 8016988:	d801      	bhi.n	801698e <__hexdig_fun+0x1a>
 801698a:	3847      	subs	r0, #71	; 0x47
 801698c:	e7f7      	b.n	801697e <__hexdig_fun+0xa>
 801698e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016992:	2b05      	cmp	r3, #5
 8016994:	d801      	bhi.n	801699a <__hexdig_fun+0x26>
 8016996:	3827      	subs	r0, #39	; 0x27
 8016998:	e7f1      	b.n	801697e <__hexdig_fun+0xa>
 801699a:	2000      	movs	r0, #0
 801699c:	4770      	bx	lr
	...

080169a0 <__gethex>:
 80169a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a4:	4617      	mov	r7, r2
 80169a6:	680a      	ldr	r2, [r1, #0]
 80169a8:	b085      	sub	sp, #20
 80169aa:	f102 0b02 	add.w	fp, r2, #2
 80169ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80169b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80169b6:	4681      	mov	r9, r0
 80169b8:	468a      	mov	sl, r1
 80169ba:	9302      	str	r3, [sp, #8]
 80169bc:	32fe      	adds	r2, #254	; 0xfe
 80169be:	eb02 030b 	add.w	r3, r2, fp
 80169c2:	46d8      	mov	r8, fp
 80169c4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80169c8:	9301      	str	r3, [sp, #4]
 80169ca:	2830      	cmp	r0, #48	; 0x30
 80169cc:	d0f7      	beq.n	80169be <__gethex+0x1e>
 80169ce:	f7ff ffd1 	bl	8016974 <__hexdig_fun>
 80169d2:	4604      	mov	r4, r0
 80169d4:	2800      	cmp	r0, #0
 80169d6:	d138      	bne.n	8016a4a <__gethex+0xaa>
 80169d8:	49a7      	ldr	r1, [pc, #668]	; (8016c78 <__gethex+0x2d8>)
 80169da:	2201      	movs	r2, #1
 80169dc:	4640      	mov	r0, r8
 80169de:	f7ff fe85 	bl	80166ec <strncmp>
 80169e2:	4606      	mov	r6, r0
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d169      	bne.n	8016abc <__gethex+0x11c>
 80169e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80169ec:	465d      	mov	r5, fp
 80169ee:	f7ff ffc1 	bl	8016974 <__hexdig_fun>
 80169f2:	2800      	cmp	r0, #0
 80169f4:	d064      	beq.n	8016ac0 <__gethex+0x120>
 80169f6:	465a      	mov	r2, fp
 80169f8:	7810      	ldrb	r0, [r2, #0]
 80169fa:	2830      	cmp	r0, #48	; 0x30
 80169fc:	4690      	mov	r8, r2
 80169fe:	f102 0201 	add.w	r2, r2, #1
 8016a02:	d0f9      	beq.n	80169f8 <__gethex+0x58>
 8016a04:	f7ff ffb6 	bl	8016974 <__hexdig_fun>
 8016a08:	2301      	movs	r3, #1
 8016a0a:	fab0 f480 	clz	r4, r0
 8016a0e:	0964      	lsrs	r4, r4, #5
 8016a10:	465e      	mov	r6, fp
 8016a12:	9301      	str	r3, [sp, #4]
 8016a14:	4642      	mov	r2, r8
 8016a16:	4615      	mov	r5, r2
 8016a18:	3201      	adds	r2, #1
 8016a1a:	7828      	ldrb	r0, [r5, #0]
 8016a1c:	f7ff ffaa 	bl	8016974 <__hexdig_fun>
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d1f8      	bne.n	8016a16 <__gethex+0x76>
 8016a24:	4994      	ldr	r1, [pc, #592]	; (8016c78 <__gethex+0x2d8>)
 8016a26:	2201      	movs	r2, #1
 8016a28:	4628      	mov	r0, r5
 8016a2a:	f7ff fe5f 	bl	80166ec <strncmp>
 8016a2e:	b978      	cbnz	r0, 8016a50 <__gethex+0xb0>
 8016a30:	b946      	cbnz	r6, 8016a44 <__gethex+0xa4>
 8016a32:	1c6e      	adds	r6, r5, #1
 8016a34:	4632      	mov	r2, r6
 8016a36:	4615      	mov	r5, r2
 8016a38:	3201      	adds	r2, #1
 8016a3a:	7828      	ldrb	r0, [r5, #0]
 8016a3c:	f7ff ff9a 	bl	8016974 <__hexdig_fun>
 8016a40:	2800      	cmp	r0, #0
 8016a42:	d1f8      	bne.n	8016a36 <__gethex+0x96>
 8016a44:	1b73      	subs	r3, r6, r5
 8016a46:	009e      	lsls	r6, r3, #2
 8016a48:	e004      	b.n	8016a54 <__gethex+0xb4>
 8016a4a:	2400      	movs	r4, #0
 8016a4c:	4626      	mov	r6, r4
 8016a4e:	e7e1      	b.n	8016a14 <__gethex+0x74>
 8016a50:	2e00      	cmp	r6, #0
 8016a52:	d1f7      	bne.n	8016a44 <__gethex+0xa4>
 8016a54:	782b      	ldrb	r3, [r5, #0]
 8016a56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016a5a:	2b50      	cmp	r3, #80	; 0x50
 8016a5c:	d13d      	bne.n	8016ada <__gethex+0x13a>
 8016a5e:	786b      	ldrb	r3, [r5, #1]
 8016a60:	2b2b      	cmp	r3, #43	; 0x2b
 8016a62:	d02f      	beq.n	8016ac4 <__gethex+0x124>
 8016a64:	2b2d      	cmp	r3, #45	; 0x2d
 8016a66:	d031      	beq.n	8016acc <__gethex+0x12c>
 8016a68:	1c69      	adds	r1, r5, #1
 8016a6a:	f04f 0b00 	mov.w	fp, #0
 8016a6e:	7808      	ldrb	r0, [r1, #0]
 8016a70:	f7ff ff80 	bl	8016974 <__hexdig_fun>
 8016a74:	1e42      	subs	r2, r0, #1
 8016a76:	b2d2      	uxtb	r2, r2
 8016a78:	2a18      	cmp	r2, #24
 8016a7a:	d82e      	bhi.n	8016ada <__gethex+0x13a>
 8016a7c:	f1a0 0210 	sub.w	r2, r0, #16
 8016a80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016a84:	f7ff ff76 	bl	8016974 <__hexdig_fun>
 8016a88:	f100 3cff 	add.w	ip, r0, #4294967295
 8016a8c:	fa5f fc8c 	uxtb.w	ip, ip
 8016a90:	f1bc 0f18 	cmp.w	ip, #24
 8016a94:	d91d      	bls.n	8016ad2 <__gethex+0x132>
 8016a96:	f1bb 0f00 	cmp.w	fp, #0
 8016a9a:	d000      	beq.n	8016a9e <__gethex+0xfe>
 8016a9c:	4252      	negs	r2, r2
 8016a9e:	4416      	add	r6, r2
 8016aa0:	f8ca 1000 	str.w	r1, [sl]
 8016aa4:	b1dc      	cbz	r4, 8016ade <__gethex+0x13e>
 8016aa6:	9b01      	ldr	r3, [sp, #4]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	bf14      	ite	ne
 8016aac:	f04f 0800 	movne.w	r8, #0
 8016ab0:	f04f 0806 	moveq.w	r8, #6
 8016ab4:	4640      	mov	r0, r8
 8016ab6:	b005      	add	sp, #20
 8016ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016abc:	4645      	mov	r5, r8
 8016abe:	4626      	mov	r6, r4
 8016ac0:	2401      	movs	r4, #1
 8016ac2:	e7c7      	b.n	8016a54 <__gethex+0xb4>
 8016ac4:	f04f 0b00 	mov.w	fp, #0
 8016ac8:	1ca9      	adds	r1, r5, #2
 8016aca:	e7d0      	b.n	8016a6e <__gethex+0xce>
 8016acc:	f04f 0b01 	mov.w	fp, #1
 8016ad0:	e7fa      	b.n	8016ac8 <__gethex+0x128>
 8016ad2:	230a      	movs	r3, #10
 8016ad4:	fb03 0002 	mla	r0, r3, r2, r0
 8016ad8:	e7d0      	b.n	8016a7c <__gethex+0xdc>
 8016ada:	4629      	mov	r1, r5
 8016adc:	e7e0      	b.n	8016aa0 <__gethex+0x100>
 8016ade:	eba5 0308 	sub.w	r3, r5, r8
 8016ae2:	3b01      	subs	r3, #1
 8016ae4:	4621      	mov	r1, r4
 8016ae6:	2b07      	cmp	r3, #7
 8016ae8:	dc0a      	bgt.n	8016b00 <__gethex+0x160>
 8016aea:	4648      	mov	r0, r9
 8016aec:	f000 fb06 	bl	80170fc <_Balloc>
 8016af0:	4604      	mov	r4, r0
 8016af2:	b940      	cbnz	r0, 8016b06 <__gethex+0x166>
 8016af4:	4b61      	ldr	r3, [pc, #388]	; (8016c7c <__gethex+0x2dc>)
 8016af6:	4602      	mov	r2, r0
 8016af8:	21e4      	movs	r1, #228	; 0xe4
 8016afa:	4861      	ldr	r0, [pc, #388]	; (8016c80 <__gethex+0x2e0>)
 8016afc:	f7fe fda2 	bl	8015644 <__assert_func>
 8016b00:	3101      	adds	r1, #1
 8016b02:	105b      	asrs	r3, r3, #1
 8016b04:	e7ef      	b.n	8016ae6 <__gethex+0x146>
 8016b06:	f100 0a14 	add.w	sl, r0, #20
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	495a      	ldr	r1, [pc, #360]	; (8016c78 <__gethex+0x2d8>)
 8016b0e:	f8cd a004 	str.w	sl, [sp, #4]
 8016b12:	469b      	mov	fp, r3
 8016b14:	45a8      	cmp	r8, r5
 8016b16:	d342      	bcc.n	8016b9e <__gethex+0x1fe>
 8016b18:	9801      	ldr	r0, [sp, #4]
 8016b1a:	f840 bb04 	str.w	fp, [r0], #4
 8016b1e:	eba0 000a 	sub.w	r0, r0, sl
 8016b22:	1080      	asrs	r0, r0, #2
 8016b24:	6120      	str	r0, [r4, #16]
 8016b26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016b2a:	4658      	mov	r0, fp
 8016b2c:	f000 fbd8 	bl	80172e0 <__hi0bits>
 8016b30:	683d      	ldr	r5, [r7, #0]
 8016b32:	eba8 0000 	sub.w	r0, r8, r0
 8016b36:	42a8      	cmp	r0, r5
 8016b38:	dd59      	ble.n	8016bee <__gethex+0x24e>
 8016b3a:	eba0 0805 	sub.w	r8, r0, r5
 8016b3e:	4641      	mov	r1, r8
 8016b40:	4620      	mov	r0, r4
 8016b42:	f000 ff67 	bl	8017a14 <__any_on>
 8016b46:	4683      	mov	fp, r0
 8016b48:	b1b8      	cbz	r0, 8016b7a <__gethex+0x1da>
 8016b4a:	f108 33ff 	add.w	r3, r8, #4294967295
 8016b4e:	1159      	asrs	r1, r3, #5
 8016b50:	f003 021f 	and.w	r2, r3, #31
 8016b54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016b58:	f04f 0b01 	mov.w	fp, #1
 8016b5c:	fa0b f202 	lsl.w	r2, fp, r2
 8016b60:	420a      	tst	r2, r1
 8016b62:	d00a      	beq.n	8016b7a <__gethex+0x1da>
 8016b64:	455b      	cmp	r3, fp
 8016b66:	dd06      	ble.n	8016b76 <__gethex+0x1d6>
 8016b68:	f1a8 0102 	sub.w	r1, r8, #2
 8016b6c:	4620      	mov	r0, r4
 8016b6e:	f000 ff51 	bl	8017a14 <__any_on>
 8016b72:	2800      	cmp	r0, #0
 8016b74:	d138      	bne.n	8016be8 <__gethex+0x248>
 8016b76:	f04f 0b02 	mov.w	fp, #2
 8016b7a:	4641      	mov	r1, r8
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	f7ff fea7 	bl	80168d0 <rshift>
 8016b82:	4446      	add	r6, r8
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	42b3      	cmp	r3, r6
 8016b88:	da41      	bge.n	8016c0e <__gethex+0x26e>
 8016b8a:	4621      	mov	r1, r4
 8016b8c:	4648      	mov	r0, r9
 8016b8e:	f000 faf5 	bl	801717c <_Bfree>
 8016b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b94:	2300      	movs	r3, #0
 8016b96:	6013      	str	r3, [r2, #0]
 8016b98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016b9c:	e78a      	b.n	8016ab4 <__gethex+0x114>
 8016b9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8016ba2:	2a2e      	cmp	r2, #46	; 0x2e
 8016ba4:	d014      	beq.n	8016bd0 <__gethex+0x230>
 8016ba6:	2b20      	cmp	r3, #32
 8016ba8:	d106      	bne.n	8016bb8 <__gethex+0x218>
 8016baa:	9b01      	ldr	r3, [sp, #4]
 8016bac:	f843 bb04 	str.w	fp, [r3], #4
 8016bb0:	f04f 0b00 	mov.w	fp, #0
 8016bb4:	9301      	str	r3, [sp, #4]
 8016bb6:	465b      	mov	r3, fp
 8016bb8:	7828      	ldrb	r0, [r5, #0]
 8016bba:	9303      	str	r3, [sp, #12]
 8016bbc:	f7ff feda 	bl	8016974 <__hexdig_fun>
 8016bc0:	9b03      	ldr	r3, [sp, #12]
 8016bc2:	f000 000f 	and.w	r0, r0, #15
 8016bc6:	4098      	lsls	r0, r3
 8016bc8:	ea4b 0b00 	orr.w	fp, fp, r0
 8016bcc:	3304      	adds	r3, #4
 8016bce:	e7a1      	b.n	8016b14 <__gethex+0x174>
 8016bd0:	45a8      	cmp	r8, r5
 8016bd2:	d8e8      	bhi.n	8016ba6 <__gethex+0x206>
 8016bd4:	2201      	movs	r2, #1
 8016bd6:	4628      	mov	r0, r5
 8016bd8:	9303      	str	r3, [sp, #12]
 8016bda:	f7ff fd87 	bl	80166ec <strncmp>
 8016bde:	4926      	ldr	r1, [pc, #152]	; (8016c78 <__gethex+0x2d8>)
 8016be0:	9b03      	ldr	r3, [sp, #12]
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d1df      	bne.n	8016ba6 <__gethex+0x206>
 8016be6:	e795      	b.n	8016b14 <__gethex+0x174>
 8016be8:	f04f 0b03 	mov.w	fp, #3
 8016bec:	e7c5      	b.n	8016b7a <__gethex+0x1da>
 8016bee:	da0b      	bge.n	8016c08 <__gethex+0x268>
 8016bf0:	eba5 0800 	sub.w	r8, r5, r0
 8016bf4:	4621      	mov	r1, r4
 8016bf6:	4642      	mov	r2, r8
 8016bf8:	4648      	mov	r0, r9
 8016bfa:	f000 fcd9 	bl	80175b0 <__lshift>
 8016bfe:	eba6 0608 	sub.w	r6, r6, r8
 8016c02:	4604      	mov	r4, r0
 8016c04:	f100 0a14 	add.w	sl, r0, #20
 8016c08:	f04f 0b00 	mov.w	fp, #0
 8016c0c:	e7ba      	b.n	8016b84 <__gethex+0x1e4>
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	42b3      	cmp	r3, r6
 8016c12:	dd73      	ble.n	8016cfc <__gethex+0x35c>
 8016c14:	1b9e      	subs	r6, r3, r6
 8016c16:	42b5      	cmp	r5, r6
 8016c18:	dc34      	bgt.n	8016c84 <__gethex+0x2e4>
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	2b02      	cmp	r3, #2
 8016c1e:	d023      	beq.n	8016c68 <__gethex+0x2c8>
 8016c20:	2b03      	cmp	r3, #3
 8016c22:	d025      	beq.n	8016c70 <__gethex+0x2d0>
 8016c24:	2b01      	cmp	r3, #1
 8016c26:	d115      	bne.n	8016c54 <__gethex+0x2b4>
 8016c28:	42b5      	cmp	r5, r6
 8016c2a:	d113      	bne.n	8016c54 <__gethex+0x2b4>
 8016c2c:	2d01      	cmp	r5, #1
 8016c2e:	d10b      	bne.n	8016c48 <__gethex+0x2a8>
 8016c30:	9a02      	ldr	r2, [sp, #8]
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	6013      	str	r3, [r2, #0]
 8016c36:	2301      	movs	r3, #1
 8016c38:	6123      	str	r3, [r4, #16]
 8016c3a:	f8ca 3000 	str.w	r3, [sl]
 8016c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c40:	f04f 0862 	mov.w	r8, #98	; 0x62
 8016c44:	601c      	str	r4, [r3, #0]
 8016c46:	e735      	b.n	8016ab4 <__gethex+0x114>
 8016c48:	1e69      	subs	r1, r5, #1
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	f000 fee2 	bl	8017a14 <__any_on>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	d1ed      	bne.n	8016c30 <__gethex+0x290>
 8016c54:	4621      	mov	r1, r4
 8016c56:	4648      	mov	r0, r9
 8016c58:	f000 fa90 	bl	801717c <_Bfree>
 8016c5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016c5e:	2300      	movs	r3, #0
 8016c60:	6013      	str	r3, [r2, #0]
 8016c62:	f04f 0850 	mov.w	r8, #80	; 0x50
 8016c66:	e725      	b.n	8016ab4 <__gethex+0x114>
 8016c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d1f2      	bne.n	8016c54 <__gethex+0x2b4>
 8016c6e:	e7df      	b.n	8016c30 <__gethex+0x290>
 8016c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d1dc      	bne.n	8016c30 <__gethex+0x290>
 8016c76:	e7ed      	b.n	8016c54 <__gethex+0x2b4>
 8016c78:	0801c037 	.word	0x0801c037
 8016c7c:	0801c1a1 	.word	0x0801c1a1
 8016c80:	0801c1b2 	.word	0x0801c1b2
 8016c84:	f106 38ff 	add.w	r8, r6, #4294967295
 8016c88:	f1bb 0f00 	cmp.w	fp, #0
 8016c8c:	d133      	bne.n	8016cf6 <__gethex+0x356>
 8016c8e:	f1b8 0f00 	cmp.w	r8, #0
 8016c92:	d004      	beq.n	8016c9e <__gethex+0x2fe>
 8016c94:	4641      	mov	r1, r8
 8016c96:	4620      	mov	r0, r4
 8016c98:	f000 febc 	bl	8017a14 <__any_on>
 8016c9c:	4683      	mov	fp, r0
 8016c9e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016ca8:	f008 081f 	and.w	r8, r8, #31
 8016cac:	fa03 f308 	lsl.w	r3, r3, r8
 8016cb0:	4213      	tst	r3, r2
 8016cb2:	4631      	mov	r1, r6
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	bf18      	it	ne
 8016cb8:	f04b 0b02 	orrne.w	fp, fp, #2
 8016cbc:	1bad      	subs	r5, r5, r6
 8016cbe:	f7ff fe07 	bl	80168d0 <rshift>
 8016cc2:	687e      	ldr	r6, [r7, #4]
 8016cc4:	f04f 0802 	mov.w	r8, #2
 8016cc8:	f1bb 0f00 	cmp.w	fp, #0
 8016ccc:	d04a      	beq.n	8016d64 <__gethex+0x3c4>
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	2b02      	cmp	r3, #2
 8016cd2:	d016      	beq.n	8016d02 <__gethex+0x362>
 8016cd4:	2b03      	cmp	r3, #3
 8016cd6:	d018      	beq.n	8016d0a <__gethex+0x36a>
 8016cd8:	2b01      	cmp	r3, #1
 8016cda:	d109      	bne.n	8016cf0 <__gethex+0x350>
 8016cdc:	f01b 0f02 	tst.w	fp, #2
 8016ce0:	d006      	beq.n	8016cf0 <__gethex+0x350>
 8016ce2:	f8da 3000 	ldr.w	r3, [sl]
 8016ce6:	ea4b 0b03 	orr.w	fp, fp, r3
 8016cea:	f01b 0f01 	tst.w	fp, #1
 8016cee:	d10f      	bne.n	8016d10 <__gethex+0x370>
 8016cf0:	f048 0810 	orr.w	r8, r8, #16
 8016cf4:	e036      	b.n	8016d64 <__gethex+0x3c4>
 8016cf6:	f04f 0b01 	mov.w	fp, #1
 8016cfa:	e7d0      	b.n	8016c9e <__gethex+0x2fe>
 8016cfc:	f04f 0801 	mov.w	r8, #1
 8016d00:	e7e2      	b.n	8016cc8 <__gethex+0x328>
 8016d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d04:	f1c3 0301 	rsb	r3, r3, #1
 8016d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d0ef      	beq.n	8016cf0 <__gethex+0x350>
 8016d10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016d14:	f104 0214 	add.w	r2, r4, #20
 8016d18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016d1c:	9301      	str	r3, [sp, #4]
 8016d1e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8016d22:	2300      	movs	r3, #0
 8016d24:	4694      	mov	ip, r2
 8016d26:	f852 1b04 	ldr.w	r1, [r2], #4
 8016d2a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8016d2e:	d01e      	beq.n	8016d6e <__gethex+0x3ce>
 8016d30:	3101      	adds	r1, #1
 8016d32:	f8cc 1000 	str.w	r1, [ip]
 8016d36:	f1b8 0f02 	cmp.w	r8, #2
 8016d3a:	f104 0214 	add.w	r2, r4, #20
 8016d3e:	d13d      	bne.n	8016dbc <__gethex+0x41c>
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	3b01      	subs	r3, #1
 8016d44:	42ab      	cmp	r3, r5
 8016d46:	d10b      	bne.n	8016d60 <__gethex+0x3c0>
 8016d48:	1169      	asrs	r1, r5, #5
 8016d4a:	2301      	movs	r3, #1
 8016d4c:	f005 051f 	and.w	r5, r5, #31
 8016d50:	fa03 f505 	lsl.w	r5, r3, r5
 8016d54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d58:	421d      	tst	r5, r3
 8016d5a:	bf18      	it	ne
 8016d5c:	f04f 0801 	movne.w	r8, #1
 8016d60:	f048 0820 	orr.w	r8, r8, #32
 8016d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d66:	601c      	str	r4, [r3, #0]
 8016d68:	9b02      	ldr	r3, [sp, #8]
 8016d6a:	601e      	str	r6, [r3, #0]
 8016d6c:	e6a2      	b.n	8016ab4 <__gethex+0x114>
 8016d6e:	4290      	cmp	r0, r2
 8016d70:	f842 3c04 	str.w	r3, [r2, #-4]
 8016d74:	d8d6      	bhi.n	8016d24 <__gethex+0x384>
 8016d76:	68a2      	ldr	r2, [r4, #8]
 8016d78:	4593      	cmp	fp, r2
 8016d7a:	db17      	blt.n	8016dac <__gethex+0x40c>
 8016d7c:	6861      	ldr	r1, [r4, #4]
 8016d7e:	4648      	mov	r0, r9
 8016d80:	3101      	adds	r1, #1
 8016d82:	f000 f9bb 	bl	80170fc <_Balloc>
 8016d86:	4682      	mov	sl, r0
 8016d88:	b918      	cbnz	r0, 8016d92 <__gethex+0x3f2>
 8016d8a:	4b1b      	ldr	r3, [pc, #108]	; (8016df8 <__gethex+0x458>)
 8016d8c:	4602      	mov	r2, r0
 8016d8e:	2184      	movs	r1, #132	; 0x84
 8016d90:	e6b3      	b.n	8016afa <__gethex+0x15a>
 8016d92:	6922      	ldr	r2, [r4, #16]
 8016d94:	3202      	adds	r2, #2
 8016d96:	f104 010c 	add.w	r1, r4, #12
 8016d9a:	0092      	lsls	r2, r2, #2
 8016d9c:	300c      	adds	r0, #12
 8016d9e:	f7ff fd2a 	bl	80167f6 <memcpy>
 8016da2:	4621      	mov	r1, r4
 8016da4:	4648      	mov	r0, r9
 8016da6:	f000 f9e9 	bl	801717c <_Bfree>
 8016daa:	4654      	mov	r4, sl
 8016dac:	6922      	ldr	r2, [r4, #16]
 8016dae:	1c51      	adds	r1, r2, #1
 8016db0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016db4:	6121      	str	r1, [r4, #16]
 8016db6:	2101      	movs	r1, #1
 8016db8:	6151      	str	r1, [r2, #20]
 8016dba:	e7bc      	b.n	8016d36 <__gethex+0x396>
 8016dbc:	6921      	ldr	r1, [r4, #16]
 8016dbe:	4559      	cmp	r1, fp
 8016dc0:	dd0b      	ble.n	8016dda <__gethex+0x43a>
 8016dc2:	2101      	movs	r1, #1
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	f7ff fd83 	bl	80168d0 <rshift>
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	3601      	adds	r6, #1
 8016dce:	42b3      	cmp	r3, r6
 8016dd0:	f6ff aedb 	blt.w	8016b8a <__gethex+0x1ea>
 8016dd4:	f04f 0801 	mov.w	r8, #1
 8016dd8:	e7c2      	b.n	8016d60 <__gethex+0x3c0>
 8016dda:	f015 051f 	ands.w	r5, r5, #31
 8016dde:	d0f9      	beq.n	8016dd4 <__gethex+0x434>
 8016de0:	9b01      	ldr	r3, [sp, #4]
 8016de2:	441a      	add	r2, r3
 8016de4:	f1c5 0520 	rsb	r5, r5, #32
 8016de8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016dec:	f000 fa78 	bl	80172e0 <__hi0bits>
 8016df0:	42a8      	cmp	r0, r5
 8016df2:	dbe6      	blt.n	8016dc2 <__gethex+0x422>
 8016df4:	e7ee      	b.n	8016dd4 <__gethex+0x434>
 8016df6:	bf00      	nop
 8016df8:	0801c1a1 	.word	0x0801c1a1

08016dfc <L_shift>:
 8016dfc:	f1c2 0208 	rsb	r2, r2, #8
 8016e00:	0092      	lsls	r2, r2, #2
 8016e02:	b570      	push	{r4, r5, r6, lr}
 8016e04:	f1c2 0620 	rsb	r6, r2, #32
 8016e08:	6843      	ldr	r3, [r0, #4]
 8016e0a:	6804      	ldr	r4, [r0, #0]
 8016e0c:	fa03 f506 	lsl.w	r5, r3, r6
 8016e10:	432c      	orrs	r4, r5
 8016e12:	40d3      	lsrs	r3, r2
 8016e14:	6004      	str	r4, [r0, #0]
 8016e16:	f840 3f04 	str.w	r3, [r0, #4]!
 8016e1a:	4288      	cmp	r0, r1
 8016e1c:	d3f4      	bcc.n	8016e08 <L_shift+0xc>
 8016e1e:	bd70      	pop	{r4, r5, r6, pc}

08016e20 <__match>:
 8016e20:	b530      	push	{r4, r5, lr}
 8016e22:	6803      	ldr	r3, [r0, #0]
 8016e24:	3301      	adds	r3, #1
 8016e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e2a:	b914      	cbnz	r4, 8016e32 <__match+0x12>
 8016e2c:	6003      	str	r3, [r0, #0]
 8016e2e:	2001      	movs	r0, #1
 8016e30:	bd30      	pop	{r4, r5, pc}
 8016e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016e3a:	2d19      	cmp	r5, #25
 8016e3c:	bf98      	it	ls
 8016e3e:	3220      	addls	r2, #32
 8016e40:	42a2      	cmp	r2, r4
 8016e42:	d0f0      	beq.n	8016e26 <__match+0x6>
 8016e44:	2000      	movs	r0, #0
 8016e46:	e7f3      	b.n	8016e30 <__match+0x10>

08016e48 <__hexnan>:
 8016e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e4c:	680b      	ldr	r3, [r1, #0]
 8016e4e:	6801      	ldr	r1, [r0, #0]
 8016e50:	115e      	asrs	r6, r3, #5
 8016e52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016e56:	f013 031f 	ands.w	r3, r3, #31
 8016e5a:	b087      	sub	sp, #28
 8016e5c:	bf18      	it	ne
 8016e5e:	3604      	addne	r6, #4
 8016e60:	2500      	movs	r5, #0
 8016e62:	1f37      	subs	r7, r6, #4
 8016e64:	4682      	mov	sl, r0
 8016e66:	4690      	mov	r8, r2
 8016e68:	9301      	str	r3, [sp, #4]
 8016e6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8016e6e:	46b9      	mov	r9, r7
 8016e70:	463c      	mov	r4, r7
 8016e72:	9502      	str	r5, [sp, #8]
 8016e74:	46ab      	mov	fp, r5
 8016e76:	784a      	ldrb	r2, [r1, #1]
 8016e78:	1c4b      	adds	r3, r1, #1
 8016e7a:	9303      	str	r3, [sp, #12]
 8016e7c:	b342      	cbz	r2, 8016ed0 <__hexnan+0x88>
 8016e7e:	4610      	mov	r0, r2
 8016e80:	9105      	str	r1, [sp, #20]
 8016e82:	9204      	str	r2, [sp, #16]
 8016e84:	f7ff fd76 	bl	8016974 <__hexdig_fun>
 8016e88:	2800      	cmp	r0, #0
 8016e8a:	d14f      	bne.n	8016f2c <__hexnan+0xe4>
 8016e8c:	9a04      	ldr	r2, [sp, #16]
 8016e8e:	9905      	ldr	r1, [sp, #20]
 8016e90:	2a20      	cmp	r2, #32
 8016e92:	d818      	bhi.n	8016ec6 <__hexnan+0x7e>
 8016e94:	9b02      	ldr	r3, [sp, #8]
 8016e96:	459b      	cmp	fp, r3
 8016e98:	dd13      	ble.n	8016ec2 <__hexnan+0x7a>
 8016e9a:	454c      	cmp	r4, r9
 8016e9c:	d206      	bcs.n	8016eac <__hexnan+0x64>
 8016e9e:	2d07      	cmp	r5, #7
 8016ea0:	dc04      	bgt.n	8016eac <__hexnan+0x64>
 8016ea2:	462a      	mov	r2, r5
 8016ea4:	4649      	mov	r1, r9
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f7ff ffa8 	bl	8016dfc <L_shift>
 8016eac:	4544      	cmp	r4, r8
 8016eae:	d950      	bls.n	8016f52 <__hexnan+0x10a>
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	f1a4 0904 	sub.w	r9, r4, #4
 8016eb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8016eba:	f8cd b008 	str.w	fp, [sp, #8]
 8016ebe:	464c      	mov	r4, r9
 8016ec0:	461d      	mov	r5, r3
 8016ec2:	9903      	ldr	r1, [sp, #12]
 8016ec4:	e7d7      	b.n	8016e76 <__hexnan+0x2e>
 8016ec6:	2a29      	cmp	r2, #41	; 0x29
 8016ec8:	d155      	bne.n	8016f76 <__hexnan+0x12e>
 8016eca:	3102      	adds	r1, #2
 8016ecc:	f8ca 1000 	str.w	r1, [sl]
 8016ed0:	f1bb 0f00 	cmp.w	fp, #0
 8016ed4:	d04f      	beq.n	8016f76 <__hexnan+0x12e>
 8016ed6:	454c      	cmp	r4, r9
 8016ed8:	d206      	bcs.n	8016ee8 <__hexnan+0xa0>
 8016eda:	2d07      	cmp	r5, #7
 8016edc:	dc04      	bgt.n	8016ee8 <__hexnan+0xa0>
 8016ede:	462a      	mov	r2, r5
 8016ee0:	4649      	mov	r1, r9
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	f7ff ff8a 	bl	8016dfc <L_shift>
 8016ee8:	4544      	cmp	r4, r8
 8016eea:	d934      	bls.n	8016f56 <__hexnan+0x10e>
 8016eec:	f1a8 0204 	sub.w	r2, r8, #4
 8016ef0:	4623      	mov	r3, r4
 8016ef2:	f853 1b04 	ldr.w	r1, [r3], #4
 8016ef6:	f842 1f04 	str.w	r1, [r2, #4]!
 8016efa:	429f      	cmp	r7, r3
 8016efc:	d2f9      	bcs.n	8016ef2 <__hexnan+0xaa>
 8016efe:	1b3b      	subs	r3, r7, r4
 8016f00:	f023 0303 	bic.w	r3, r3, #3
 8016f04:	3304      	adds	r3, #4
 8016f06:	3e03      	subs	r6, #3
 8016f08:	3401      	adds	r4, #1
 8016f0a:	42a6      	cmp	r6, r4
 8016f0c:	bf38      	it	cc
 8016f0e:	2304      	movcc	r3, #4
 8016f10:	4443      	add	r3, r8
 8016f12:	2200      	movs	r2, #0
 8016f14:	f843 2b04 	str.w	r2, [r3], #4
 8016f18:	429f      	cmp	r7, r3
 8016f1a:	d2fb      	bcs.n	8016f14 <__hexnan+0xcc>
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	b91b      	cbnz	r3, 8016f28 <__hexnan+0xe0>
 8016f20:	4547      	cmp	r7, r8
 8016f22:	d126      	bne.n	8016f72 <__hexnan+0x12a>
 8016f24:	2301      	movs	r3, #1
 8016f26:	603b      	str	r3, [r7, #0]
 8016f28:	2005      	movs	r0, #5
 8016f2a:	e025      	b.n	8016f78 <__hexnan+0x130>
 8016f2c:	3501      	adds	r5, #1
 8016f2e:	2d08      	cmp	r5, #8
 8016f30:	f10b 0b01 	add.w	fp, fp, #1
 8016f34:	dd06      	ble.n	8016f44 <__hexnan+0xfc>
 8016f36:	4544      	cmp	r4, r8
 8016f38:	d9c3      	bls.n	8016ec2 <__hexnan+0x7a>
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016f40:	2501      	movs	r5, #1
 8016f42:	3c04      	subs	r4, #4
 8016f44:	6822      	ldr	r2, [r4, #0]
 8016f46:	f000 000f 	and.w	r0, r0, #15
 8016f4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016f4e:	6020      	str	r0, [r4, #0]
 8016f50:	e7b7      	b.n	8016ec2 <__hexnan+0x7a>
 8016f52:	2508      	movs	r5, #8
 8016f54:	e7b5      	b.n	8016ec2 <__hexnan+0x7a>
 8016f56:	9b01      	ldr	r3, [sp, #4]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d0df      	beq.n	8016f1c <__hexnan+0xd4>
 8016f5c:	f1c3 0320 	rsb	r3, r3, #32
 8016f60:	f04f 32ff 	mov.w	r2, #4294967295
 8016f64:	40da      	lsrs	r2, r3
 8016f66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016f6a:	4013      	ands	r3, r2
 8016f6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8016f70:	e7d4      	b.n	8016f1c <__hexnan+0xd4>
 8016f72:	3f04      	subs	r7, #4
 8016f74:	e7d2      	b.n	8016f1c <__hexnan+0xd4>
 8016f76:	2004      	movs	r0, #4
 8016f78:	b007      	add	sp, #28
 8016f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016f80 <sbrk_aligned>:
 8016f80:	b570      	push	{r4, r5, r6, lr}
 8016f82:	4e0e      	ldr	r6, [pc, #56]	; (8016fbc <sbrk_aligned+0x3c>)
 8016f84:	460c      	mov	r4, r1
 8016f86:	6831      	ldr	r1, [r6, #0]
 8016f88:	4605      	mov	r5, r0
 8016f8a:	b911      	cbnz	r1, 8016f92 <sbrk_aligned+0x12>
 8016f8c:	f001 fb24 	bl	80185d8 <_sbrk_r>
 8016f90:	6030      	str	r0, [r6, #0]
 8016f92:	4621      	mov	r1, r4
 8016f94:	4628      	mov	r0, r5
 8016f96:	f001 fb1f 	bl	80185d8 <_sbrk_r>
 8016f9a:	1c43      	adds	r3, r0, #1
 8016f9c:	d00a      	beq.n	8016fb4 <sbrk_aligned+0x34>
 8016f9e:	1cc4      	adds	r4, r0, #3
 8016fa0:	f024 0403 	bic.w	r4, r4, #3
 8016fa4:	42a0      	cmp	r0, r4
 8016fa6:	d007      	beq.n	8016fb8 <sbrk_aligned+0x38>
 8016fa8:	1a21      	subs	r1, r4, r0
 8016faa:	4628      	mov	r0, r5
 8016fac:	f001 fb14 	bl	80185d8 <_sbrk_r>
 8016fb0:	3001      	adds	r0, #1
 8016fb2:	d101      	bne.n	8016fb8 <sbrk_aligned+0x38>
 8016fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8016fb8:	4620      	mov	r0, r4
 8016fba:	bd70      	pop	{r4, r5, r6, pc}
 8016fbc:	200089a0 	.word	0x200089a0

08016fc0 <_malloc_r>:
 8016fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fc4:	1ccd      	adds	r5, r1, #3
 8016fc6:	f025 0503 	bic.w	r5, r5, #3
 8016fca:	3508      	adds	r5, #8
 8016fcc:	2d0c      	cmp	r5, #12
 8016fce:	bf38      	it	cc
 8016fd0:	250c      	movcc	r5, #12
 8016fd2:	2d00      	cmp	r5, #0
 8016fd4:	4607      	mov	r7, r0
 8016fd6:	db01      	blt.n	8016fdc <_malloc_r+0x1c>
 8016fd8:	42a9      	cmp	r1, r5
 8016fda:	d905      	bls.n	8016fe8 <_malloc_r+0x28>
 8016fdc:	230c      	movs	r3, #12
 8016fde:	603b      	str	r3, [r7, #0]
 8016fe0:	2600      	movs	r6, #0
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fe8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80170bc <_malloc_r+0xfc>
 8016fec:	f000 f87a 	bl	80170e4 <__malloc_lock>
 8016ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8016ff4:	461c      	mov	r4, r3
 8016ff6:	bb5c      	cbnz	r4, 8017050 <_malloc_r+0x90>
 8016ff8:	4629      	mov	r1, r5
 8016ffa:	4638      	mov	r0, r7
 8016ffc:	f7ff ffc0 	bl	8016f80 <sbrk_aligned>
 8017000:	1c43      	adds	r3, r0, #1
 8017002:	4604      	mov	r4, r0
 8017004:	d155      	bne.n	80170b2 <_malloc_r+0xf2>
 8017006:	f8d8 4000 	ldr.w	r4, [r8]
 801700a:	4626      	mov	r6, r4
 801700c:	2e00      	cmp	r6, #0
 801700e:	d145      	bne.n	801709c <_malloc_r+0xdc>
 8017010:	2c00      	cmp	r4, #0
 8017012:	d048      	beq.n	80170a6 <_malloc_r+0xe6>
 8017014:	6823      	ldr	r3, [r4, #0]
 8017016:	4631      	mov	r1, r6
 8017018:	4638      	mov	r0, r7
 801701a:	eb04 0903 	add.w	r9, r4, r3
 801701e:	f001 fadb 	bl	80185d8 <_sbrk_r>
 8017022:	4581      	cmp	r9, r0
 8017024:	d13f      	bne.n	80170a6 <_malloc_r+0xe6>
 8017026:	6821      	ldr	r1, [r4, #0]
 8017028:	1a6d      	subs	r5, r5, r1
 801702a:	4629      	mov	r1, r5
 801702c:	4638      	mov	r0, r7
 801702e:	f7ff ffa7 	bl	8016f80 <sbrk_aligned>
 8017032:	3001      	adds	r0, #1
 8017034:	d037      	beq.n	80170a6 <_malloc_r+0xe6>
 8017036:	6823      	ldr	r3, [r4, #0]
 8017038:	442b      	add	r3, r5
 801703a:	6023      	str	r3, [r4, #0]
 801703c:	f8d8 3000 	ldr.w	r3, [r8]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d038      	beq.n	80170b6 <_malloc_r+0xf6>
 8017044:	685a      	ldr	r2, [r3, #4]
 8017046:	42a2      	cmp	r2, r4
 8017048:	d12b      	bne.n	80170a2 <_malloc_r+0xe2>
 801704a:	2200      	movs	r2, #0
 801704c:	605a      	str	r2, [r3, #4]
 801704e:	e00f      	b.n	8017070 <_malloc_r+0xb0>
 8017050:	6822      	ldr	r2, [r4, #0]
 8017052:	1b52      	subs	r2, r2, r5
 8017054:	d41f      	bmi.n	8017096 <_malloc_r+0xd6>
 8017056:	2a0b      	cmp	r2, #11
 8017058:	d917      	bls.n	801708a <_malloc_r+0xca>
 801705a:	1961      	adds	r1, r4, r5
 801705c:	42a3      	cmp	r3, r4
 801705e:	6025      	str	r5, [r4, #0]
 8017060:	bf18      	it	ne
 8017062:	6059      	strne	r1, [r3, #4]
 8017064:	6863      	ldr	r3, [r4, #4]
 8017066:	bf08      	it	eq
 8017068:	f8c8 1000 	streq.w	r1, [r8]
 801706c:	5162      	str	r2, [r4, r5]
 801706e:	604b      	str	r3, [r1, #4]
 8017070:	4638      	mov	r0, r7
 8017072:	f104 060b 	add.w	r6, r4, #11
 8017076:	f000 f83b 	bl	80170f0 <__malloc_unlock>
 801707a:	f026 0607 	bic.w	r6, r6, #7
 801707e:	1d23      	adds	r3, r4, #4
 8017080:	1af2      	subs	r2, r6, r3
 8017082:	d0ae      	beq.n	8016fe2 <_malloc_r+0x22>
 8017084:	1b9b      	subs	r3, r3, r6
 8017086:	50a3      	str	r3, [r4, r2]
 8017088:	e7ab      	b.n	8016fe2 <_malloc_r+0x22>
 801708a:	42a3      	cmp	r3, r4
 801708c:	6862      	ldr	r2, [r4, #4]
 801708e:	d1dd      	bne.n	801704c <_malloc_r+0x8c>
 8017090:	f8c8 2000 	str.w	r2, [r8]
 8017094:	e7ec      	b.n	8017070 <_malloc_r+0xb0>
 8017096:	4623      	mov	r3, r4
 8017098:	6864      	ldr	r4, [r4, #4]
 801709a:	e7ac      	b.n	8016ff6 <_malloc_r+0x36>
 801709c:	4634      	mov	r4, r6
 801709e:	6876      	ldr	r6, [r6, #4]
 80170a0:	e7b4      	b.n	801700c <_malloc_r+0x4c>
 80170a2:	4613      	mov	r3, r2
 80170a4:	e7cc      	b.n	8017040 <_malloc_r+0x80>
 80170a6:	230c      	movs	r3, #12
 80170a8:	603b      	str	r3, [r7, #0]
 80170aa:	4638      	mov	r0, r7
 80170ac:	f000 f820 	bl	80170f0 <__malloc_unlock>
 80170b0:	e797      	b.n	8016fe2 <_malloc_r+0x22>
 80170b2:	6025      	str	r5, [r4, #0]
 80170b4:	e7dc      	b.n	8017070 <_malloc_r+0xb0>
 80170b6:	605b      	str	r3, [r3, #4]
 80170b8:	deff      	udf	#255	; 0xff
 80170ba:	bf00      	nop
 80170bc:	2000899c 	.word	0x2000899c

080170c0 <__ascii_mbtowc>:
 80170c0:	b082      	sub	sp, #8
 80170c2:	b901      	cbnz	r1, 80170c6 <__ascii_mbtowc+0x6>
 80170c4:	a901      	add	r1, sp, #4
 80170c6:	b142      	cbz	r2, 80170da <__ascii_mbtowc+0x1a>
 80170c8:	b14b      	cbz	r3, 80170de <__ascii_mbtowc+0x1e>
 80170ca:	7813      	ldrb	r3, [r2, #0]
 80170cc:	600b      	str	r3, [r1, #0]
 80170ce:	7812      	ldrb	r2, [r2, #0]
 80170d0:	1e10      	subs	r0, r2, #0
 80170d2:	bf18      	it	ne
 80170d4:	2001      	movne	r0, #1
 80170d6:	b002      	add	sp, #8
 80170d8:	4770      	bx	lr
 80170da:	4610      	mov	r0, r2
 80170dc:	e7fb      	b.n	80170d6 <__ascii_mbtowc+0x16>
 80170de:	f06f 0001 	mvn.w	r0, #1
 80170e2:	e7f8      	b.n	80170d6 <__ascii_mbtowc+0x16>

080170e4 <__malloc_lock>:
 80170e4:	4801      	ldr	r0, [pc, #4]	; (80170ec <__malloc_lock+0x8>)
 80170e6:	f7ff bb84 	b.w	80167f2 <__retarget_lock_acquire_recursive>
 80170ea:	bf00      	nop
 80170ec:	20008998 	.word	0x20008998

080170f0 <__malloc_unlock>:
 80170f0:	4801      	ldr	r0, [pc, #4]	; (80170f8 <__malloc_unlock+0x8>)
 80170f2:	f7ff bb7f 	b.w	80167f4 <__retarget_lock_release_recursive>
 80170f6:	bf00      	nop
 80170f8:	20008998 	.word	0x20008998

080170fc <_Balloc>:
 80170fc:	b570      	push	{r4, r5, r6, lr}
 80170fe:	69c6      	ldr	r6, [r0, #28]
 8017100:	4604      	mov	r4, r0
 8017102:	460d      	mov	r5, r1
 8017104:	b976      	cbnz	r6, 8017124 <_Balloc+0x28>
 8017106:	2010      	movs	r0, #16
 8017108:	f001 fa8c 	bl	8018624 <malloc>
 801710c:	4602      	mov	r2, r0
 801710e:	61e0      	str	r0, [r4, #28]
 8017110:	b920      	cbnz	r0, 801711c <_Balloc+0x20>
 8017112:	4b18      	ldr	r3, [pc, #96]	; (8017174 <_Balloc+0x78>)
 8017114:	4818      	ldr	r0, [pc, #96]	; (8017178 <_Balloc+0x7c>)
 8017116:	216b      	movs	r1, #107	; 0x6b
 8017118:	f7fe fa94 	bl	8015644 <__assert_func>
 801711c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017120:	6006      	str	r6, [r0, #0]
 8017122:	60c6      	str	r6, [r0, #12]
 8017124:	69e6      	ldr	r6, [r4, #28]
 8017126:	68f3      	ldr	r3, [r6, #12]
 8017128:	b183      	cbz	r3, 801714c <_Balloc+0x50>
 801712a:	69e3      	ldr	r3, [r4, #28]
 801712c:	68db      	ldr	r3, [r3, #12]
 801712e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017132:	b9b8      	cbnz	r0, 8017164 <_Balloc+0x68>
 8017134:	2101      	movs	r1, #1
 8017136:	fa01 f605 	lsl.w	r6, r1, r5
 801713a:	1d72      	adds	r2, r6, #5
 801713c:	0092      	lsls	r2, r2, #2
 801713e:	4620      	mov	r0, r4
 8017140:	f001 fa5a 	bl	80185f8 <_calloc_r>
 8017144:	b160      	cbz	r0, 8017160 <_Balloc+0x64>
 8017146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801714a:	e00e      	b.n	801716a <_Balloc+0x6e>
 801714c:	2221      	movs	r2, #33	; 0x21
 801714e:	2104      	movs	r1, #4
 8017150:	4620      	mov	r0, r4
 8017152:	f001 fa51 	bl	80185f8 <_calloc_r>
 8017156:	69e3      	ldr	r3, [r4, #28]
 8017158:	60f0      	str	r0, [r6, #12]
 801715a:	68db      	ldr	r3, [r3, #12]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d1e4      	bne.n	801712a <_Balloc+0x2e>
 8017160:	2000      	movs	r0, #0
 8017162:	bd70      	pop	{r4, r5, r6, pc}
 8017164:	6802      	ldr	r2, [r0, #0]
 8017166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801716a:	2300      	movs	r3, #0
 801716c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017170:	e7f7      	b.n	8017162 <_Balloc+0x66>
 8017172:	bf00      	nop
 8017174:	0801c212 	.word	0x0801c212
 8017178:	0801c229 	.word	0x0801c229

0801717c <_Bfree>:
 801717c:	b570      	push	{r4, r5, r6, lr}
 801717e:	69c6      	ldr	r6, [r0, #28]
 8017180:	4605      	mov	r5, r0
 8017182:	460c      	mov	r4, r1
 8017184:	b976      	cbnz	r6, 80171a4 <_Bfree+0x28>
 8017186:	2010      	movs	r0, #16
 8017188:	f001 fa4c 	bl	8018624 <malloc>
 801718c:	4602      	mov	r2, r0
 801718e:	61e8      	str	r0, [r5, #28]
 8017190:	b920      	cbnz	r0, 801719c <_Bfree+0x20>
 8017192:	4b09      	ldr	r3, [pc, #36]	; (80171b8 <_Bfree+0x3c>)
 8017194:	4809      	ldr	r0, [pc, #36]	; (80171bc <_Bfree+0x40>)
 8017196:	218f      	movs	r1, #143	; 0x8f
 8017198:	f7fe fa54 	bl	8015644 <__assert_func>
 801719c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80171a0:	6006      	str	r6, [r0, #0]
 80171a2:	60c6      	str	r6, [r0, #12]
 80171a4:	b13c      	cbz	r4, 80171b6 <_Bfree+0x3a>
 80171a6:	69eb      	ldr	r3, [r5, #28]
 80171a8:	6862      	ldr	r2, [r4, #4]
 80171aa:	68db      	ldr	r3, [r3, #12]
 80171ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80171b0:	6021      	str	r1, [r4, #0]
 80171b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80171b6:	bd70      	pop	{r4, r5, r6, pc}
 80171b8:	0801c212 	.word	0x0801c212
 80171bc:	0801c229 	.word	0x0801c229

080171c0 <__multadd>:
 80171c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171c4:	690d      	ldr	r5, [r1, #16]
 80171c6:	4607      	mov	r7, r0
 80171c8:	460c      	mov	r4, r1
 80171ca:	461e      	mov	r6, r3
 80171cc:	f101 0c14 	add.w	ip, r1, #20
 80171d0:	2000      	movs	r0, #0
 80171d2:	f8dc 3000 	ldr.w	r3, [ip]
 80171d6:	b299      	uxth	r1, r3
 80171d8:	fb02 6101 	mla	r1, r2, r1, r6
 80171dc:	0c1e      	lsrs	r6, r3, #16
 80171de:	0c0b      	lsrs	r3, r1, #16
 80171e0:	fb02 3306 	mla	r3, r2, r6, r3
 80171e4:	b289      	uxth	r1, r1
 80171e6:	3001      	adds	r0, #1
 80171e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80171ec:	4285      	cmp	r5, r0
 80171ee:	f84c 1b04 	str.w	r1, [ip], #4
 80171f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80171f6:	dcec      	bgt.n	80171d2 <__multadd+0x12>
 80171f8:	b30e      	cbz	r6, 801723e <__multadd+0x7e>
 80171fa:	68a3      	ldr	r3, [r4, #8]
 80171fc:	42ab      	cmp	r3, r5
 80171fe:	dc19      	bgt.n	8017234 <__multadd+0x74>
 8017200:	6861      	ldr	r1, [r4, #4]
 8017202:	4638      	mov	r0, r7
 8017204:	3101      	adds	r1, #1
 8017206:	f7ff ff79 	bl	80170fc <_Balloc>
 801720a:	4680      	mov	r8, r0
 801720c:	b928      	cbnz	r0, 801721a <__multadd+0x5a>
 801720e:	4602      	mov	r2, r0
 8017210:	4b0c      	ldr	r3, [pc, #48]	; (8017244 <__multadd+0x84>)
 8017212:	480d      	ldr	r0, [pc, #52]	; (8017248 <__multadd+0x88>)
 8017214:	21ba      	movs	r1, #186	; 0xba
 8017216:	f7fe fa15 	bl	8015644 <__assert_func>
 801721a:	6922      	ldr	r2, [r4, #16]
 801721c:	3202      	adds	r2, #2
 801721e:	f104 010c 	add.w	r1, r4, #12
 8017222:	0092      	lsls	r2, r2, #2
 8017224:	300c      	adds	r0, #12
 8017226:	f7ff fae6 	bl	80167f6 <memcpy>
 801722a:	4621      	mov	r1, r4
 801722c:	4638      	mov	r0, r7
 801722e:	f7ff ffa5 	bl	801717c <_Bfree>
 8017232:	4644      	mov	r4, r8
 8017234:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017238:	3501      	adds	r5, #1
 801723a:	615e      	str	r6, [r3, #20]
 801723c:	6125      	str	r5, [r4, #16]
 801723e:	4620      	mov	r0, r4
 8017240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017244:	0801c1a1 	.word	0x0801c1a1
 8017248:	0801c229 	.word	0x0801c229

0801724c <__s2b>:
 801724c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017250:	460c      	mov	r4, r1
 8017252:	4615      	mov	r5, r2
 8017254:	461f      	mov	r7, r3
 8017256:	2209      	movs	r2, #9
 8017258:	3308      	adds	r3, #8
 801725a:	4606      	mov	r6, r0
 801725c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017260:	2100      	movs	r1, #0
 8017262:	2201      	movs	r2, #1
 8017264:	429a      	cmp	r2, r3
 8017266:	db09      	blt.n	801727c <__s2b+0x30>
 8017268:	4630      	mov	r0, r6
 801726a:	f7ff ff47 	bl	80170fc <_Balloc>
 801726e:	b940      	cbnz	r0, 8017282 <__s2b+0x36>
 8017270:	4602      	mov	r2, r0
 8017272:	4b19      	ldr	r3, [pc, #100]	; (80172d8 <__s2b+0x8c>)
 8017274:	4819      	ldr	r0, [pc, #100]	; (80172dc <__s2b+0x90>)
 8017276:	21d3      	movs	r1, #211	; 0xd3
 8017278:	f7fe f9e4 	bl	8015644 <__assert_func>
 801727c:	0052      	lsls	r2, r2, #1
 801727e:	3101      	adds	r1, #1
 8017280:	e7f0      	b.n	8017264 <__s2b+0x18>
 8017282:	9b08      	ldr	r3, [sp, #32]
 8017284:	6143      	str	r3, [r0, #20]
 8017286:	2d09      	cmp	r5, #9
 8017288:	f04f 0301 	mov.w	r3, #1
 801728c:	6103      	str	r3, [r0, #16]
 801728e:	dd16      	ble.n	80172be <__s2b+0x72>
 8017290:	f104 0909 	add.w	r9, r4, #9
 8017294:	46c8      	mov	r8, r9
 8017296:	442c      	add	r4, r5
 8017298:	f818 3b01 	ldrb.w	r3, [r8], #1
 801729c:	4601      	mov	r1, r0
 801729e:	3b30      	subs	r3, #48	; 0x30
 80172a0:	220a      	movs	r2, #10
 80172a2:	4630      	mov	r0, r6
 80172a4:	f7ff ff8c 	bl	80171c0 <__multadd>
 80172a8:	45a0      	cmp	r8, r4
 80172aa:	d1f5      	bne.n	8017298 <__s2b+0x4c>
 80172ac:	f1a5 0408 	sub.w	r4, r5, #8
 80172b0:	444c      	add	r4, r9
 80172b2:	1b2d      	subs	r5, r5, r4
 80172b4:	1963      	adds	r3, r4, r5
 80172b6:	42bb      	cmp	r3, r7
 80172b8:	db04      	blt.n	80172c4 <__s2b+0x78>
 80172ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172be:	340a      	adds	r4, #10
 80172c0:	2509      	movs	r5, #9
 80172c2:	e7f6      	b.n	80172b2 <__s2b+0x66>
 80172c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80172c8:	4601      	mov	r1, r0
 80172ca:	3b30      	subs	r3, #48	; 0x30
 80172cc:	220a      	movs	r2, #10
 80172ce:	4630      	mov	r0, r6
 80172d0:	f7ff ff76 	bl	80171c0 <__multadd>
 80172d4:	e7ee      	b.n	80172b4 <__s2b+0x68>
 80172d6:	bf00      	nop
 80172d8:	0801c1a1 	.word	0x0801c1a1
 80172dc:	0801c229 	.word	0x0801c229

080172e0 <__hi0bits>:
 80172e0:	0c03      	lsrs	r3, r0, #16
 80172e2:	041b      	lsls	r3, r3, #16
 80172e4:	b9d3      	cbnz	r3, 801731c <__hi0bits+0x3c>
 80172e6:	0400      	lsls	r0, r0, #16
 80172e8:	2310      	movs	r3, #16
 80172ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80172ee:	bf04      	itt	eq
 80172f0:	0200      	lsleq	r0, r0, #8
 80172f2:	3308      	addeq	r3, #8
 80172f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80172f8:	bf04      	itt	eq
 80172fa:	0100      	lsleq	r0, r0, #4
 80172fc:	3304      	addeq	r3, #4
 80172fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017302:	bf04      	itt	eq
 8017304:	0080      	lsleq	r0, r0, #2
 8017306:	3302      	addeq	r3, #2
 8017308:	2800      	cmp	r0, #0
 801730a:	db05      	blt.n	8017318 <__hi0bits+0x38>
 801730c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017310:	f103 0301 	add.w	r3, r3, #1
 8017314:	bf08      	it	eq
 8017316:	2320      	moveq	r3, #32
 8017318:	4618      	mov	r0, r3
 801731a:	4770      	bx	lr
 801731c:	2300      	movs	r3, #0
 801731e:	e7e4      	b.n	80172ea <__hi0bits+0xa>

08017320 <__lo0bits>:
 8017320:	6803      	ldr	r3, [r0, #0]
 8017322:	f013 0207 	ands.w	r2, r3, #7
 8017326:	d00c      	beq.n	8017342 <__lo0bits+0x22>
 8017328:	07d9      	lsls	r1, r3, #31
 801732a:	d422      	bmi.n	8017372 <__lo0bits+0x52>
 801732c:	079a      	lsls	r2, r3, #30
 801732e:	bf49      	itett	mi
 8017330:	085b      	lsrmi	r3, r3, #1
 8017332:	089b      	lsrpl	r3, r3, #2
 8017334:	6003      	strmi	r3, [r0, #0]
 8017336:	2201      	movmi	r2, #1
 8017338:	bf5c      	itt	pl
 801733a:	6003      	strpl	r3, [r0, #0]
 801733c:	2202      	movpl	r2, #2
 801733e:	4610      	mov	r0, r2
 8017340:	4770      	bx	lr
 8017342:	b299      	uxth	r1, r3
 8017344:	b909      	cbnz	r1, 801734a <__lo0bits+0x2a>
 8017346:	0c1b      	lsrs	r3, r3, #16
 8017348:	2210      	movs	r2, #16
 801734a:	b2d9      	uxtb	r1, r3
 801734c:	b909      	cbnz	r1, 8017352 <__lo0bits+0x32>
 801734e:	3208      	adds	r2, #8
 8017350:	0a1b      	lsrs	r3, r3, #8
 8017352:	0719      	lsls	r1, r3, #28
 8017354:	bf04      	itt	eq
 8017356:	091b      	lsreq	r3, r3, #4
 8017358:	3204      	addeq	r2, #4
 801735a:	0799      	lsls	r1, r3, #30
 801735c:	bf04      	itt	eq
 801735e:	089b      	lsreq	r3, r3, #2
 8017360:	3202      	addeq	r2, #2
 8017362:	07d9      	lsls	r1, r3, #31
 8017364:	d403      	bmi.n	801736e <__lo0bits+0x4e>
 8017366:	085b      	lsrs	r3, r3, #1
 8017368:	f102 0201 	add.w	r2, r2, #1
 801736c:	d003      	beq.n	8017376 <__lo0bits+0x56>
 801736e:	6003      	str	r3, [r0, #0]
 8017370:	e7e5      	b.n	801733e <__lo0bits+0x1e>
 8017372:	2200      	movs	r2, #0
 8017374:	e7e3      	b.n	801733e <__lo0bits+0x1e>
 8017376:	2220      	movs	r2, #32
 8017378:	e7e1      	b.n	801733e <__lo0bits+0x1e>
	...

0801737c <__i2b>:
 801737c:	b510      	push	{r4, lr}
 801737e:	460c      	mov	r4, r1
 8017380:	2101      	movs	r1, #1
 8017382:	f7ff febb 	bl	80170fc <_Balloc>
 8017386:	4602      	mov	r2, r0
 8017388:	b928      	cbnz	r0, 8017396 <__i2b+0x1a>
 801738a:	4b05      	ldr	r3, [pc, #20]	; (80173a0 <__i2b+0x24>)
 801738c:	4805      	ldr	r0, [pc, #20]	; (80173a4 <__i2b+0x28>)
 801738e:	f240 1145 	movw	r1, #325	; 0x145
 8017392:	f7fe f957 	bl	8015644 <__assert_func>
 8017396:	2301      	movs	r3, #1
 8017398:	6144      	str	r4, [r0, #20]
 801739a:	6103      	str	r3, [r0, #16]
 801739c:	bd10      	pop	{r4, pc}
 801739e:	bf00      	nop
 80173a0:	0801c1a1 	.word	0x0801c1a1
 80173a4:	0801c229 	.word	0x0801c229

080173a8 <__multiply>:
 80173a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ac:	4691      	mov	r9, r2
 80173ae:	690a      	ldr	r2, [r1, #16]
 80173b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80173b4:	429a      	cmp	r2, r3
 80173b6:	bfb8      	it	lt
 80173b8:	460b      	movlt	r3, r1
 80173ba:	460c      	mov	r4, r1
 80173bc:	bfbc      	itt	lt
 80173be:	464c      	movlt	r4, r9
 80173c0:	4699      	movlt	r9, r3
 80173c2:	6927      	ldr	r7, [r4, #16]
 80173c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80173c8:	68a3      	ldr	r3, [r4, #8]
 80173ca:	6861      	ldr	r1, [r4, #4]
 80173cc:	eb07 060a 	add.w	r6, r7, sl
 80173d0:	42b3      	cmp	r3, r6
 80173d2:	b085      	sub	sp, #20
 80173d4:	bfb8      	it	lt
 80173d6:	3101      	addlt	r1, #1
 80173d8:	f7ff fe90 	bl	80170fc <_Balloc>
 80173dc:	b930      	cbnz	r0, 80173ec <__multiply+0x44>
 80173de:	4602      	mov	r2, r0
 80173e0:	4b44      	ldr	r3, [pc, #272]	; (80174f4 <__multiply+0x14c>)
 80173e2:	4845      	ldr	r0, [pc, #276]	; (80174f8 <__multiply+0x150>)
 80173e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80173e8:	f7fe f92c 	bl	8015644 <__assert_func>
 80173ec:	f100 0514 	add.w	r5, r0, #20
 80173f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80173f4:	462b      	mov	r3, r5
 80173f6:	2200      	movs	r2, #0
 80173f8:	4543      	cmp	r3, r8
 80173fa:	d321      	bcc.n	8017440 <__multiply+0x98>
 80173fc:	f104 0314 	add.w	r3, r4, #20
 8017400:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017404:	f109 0314 	add.w	r3, r9, #20
 8017408:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801740c:	9202      	str	r2, [sp, #8]
 801740e:	1b3a      	subs	r2, r7, r4
 8017410:	3a15      	subs	r2, #21
 8017412:	f022 0203 	bic.w	r2, r2, #3
 8017416:	3204      	adds	r2, #4
 8017418:	f104 0115 	add.w	r1, r4, #21
 801741c:	428f      	cmp	r7, r1
 801741e:	bf38      	it	cc
 8017420:	2204      	movcc	r2, #4
 8017422:	9201      	str	r2, [sp, #4]
 8017424:	9a02      	ldr	r2, [sp, #8]
 8017426:	9303      	str	r3, [sp, #12]
 8017428:	429a      	cmp	r2, r3
 801742a:	d80c      	bhi.n	8017446 <__multiply+0x9e>
 801742c:	2e00      	cmp	r6, #0
 801742e:	dd03      	ble.n	8017438 <__multiply+0x90>
 8017430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017434:	2b00      	cmp	r3, #0
 8017436:	d05b      	beq.n	80174f0 <__multiply+0x148>
 8017438:	6106      	str	r6, [r0, #16]
 801743a:	b005      	add	sp, #20
 801743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017440:	f843 2b04 	str.w	r2, [r3], #4
 8017444:	e7d8      	b.n	80173f8 <__multiply+0x50>
 8017446:	f8b3 a000 	ldrh.w	sl, [r3]
 801744a:	f1ba 0f00 	cmp.w	sl, #0
 801744e:	d024      	beq.n	801749a <__multiply+0xf2>
 8017450:	f104 0e14 	add.w	lr, r4, #20
 8017454:	46a9      	mov	r9, r5
 8017456:	f04f 0c00 	mov.w	ip, #0
 801745a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801745e:	f8d9 1000 	ldr.w	r1, [r9]
 8017462:	fa1f fb82 	uxth.w	fp, r2
 8017466:	b289      	uxth	r1, r1
 8017468:	fb0a 110b 	mla	r1, sl, fp, r1
 801746c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017470:	f8d9 2000 	ldr.w	r2, [r9]
 8017474:	4461      	add	r1, ip
 8017476:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801747a:	fb0a c20b 	mla	r2, sl, fp, ip
 801747e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017482:	b289      	uxth	r1, r1
 8017484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017488:	4577      	cmp	r7, lr
 801748a:	f849 1b04 	str.w	r1, [r9], #4
 801748e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017492:	d8e2      	bhi.n	801745a <__multiply+0xb2>
 8017494:	9a01      	ldr	r2, [sp, #4]
 8017496:	f845 c002 	str.w	ip, [r5, r2]
 801749a:	9a03      	ldr	r2, [sp, #12]
 801749c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80174a0:	3304      	adds	r3, #4
 80174a2:	f1b9 0f00 	cmp.w	r9, #0
 80174a6:	d021      	beq.n	80174ec <__multiply+0x144>
 80174a8:	6829      	ldr	r1, [r5, #0]
 80174aa:	f104 0c14 	add.w	ip, r4, #20
 80174ae:	46ae      	mov	lr, r5
 80174b0:	f04f 0a00 	mov.w	sl, #0
 80174b4:	f8bc b000 	ldrh.w	fp, [ip]
 80174b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80174bc:	fb09 220b 	mla	r2, r9, fp, r2
 80174c0:	4452      	add	r2, sl
 80174c2:	b289      	uxth	r1, r1
 80174c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80174c8:	f84e 1b04 	str.w	r1, [lr], #4
 80174cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80174d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80174d4:	f8be 1000 	ldrh.w	r1, [lr]
 80174d8:	fb09 110a 	mla	r1, r9, sl, r1
 80174dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80174e0:	4567      	cmp	r7, ip
 80174e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80174e6:	d8e5      	bhi.n	80174b4 <__multiply+0x10c>
 80174e8:	9a01      	ldr	r2, [sp, #4]
 80174ea:	50a9      	str	r1, [r5, r2]
 80174ec:	3504      	adds	r5, #4
 80174ee:	e799      	b.n	8017424 <__multiply+0x7c>
 80174f0:	3e01      	subs	r6, #1
 80174f2:	e79b      	b.n	801742c <__multiply+0x84>
 80174f4:	0801c1a1 	.word	0x0801c1a1
 80174f8:	0801c229 	.word	0x0801c229

080174fc <__pow5mult>:
 80174fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017500:	4615      	mov	r5, r2
 8017502:	f012 0203 	ands.w	r2, r2, #3
 8017506:	4606      	mov	r6, r0
 8017508:	460f      	mov	r7, r1
 801750a:	d007      	beq.n	801751c <__pow5mult+0x20>
 801750c:	4c25      	ldr	r4, [pc, #148]	; (80175a4 <__pow5mult+0xa8>)
 801750e:	3a01      	subs	r2, #1
 8017510:	2300      	movs	r3, #0
 8017512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017516:	f7ff fe53 	bl	80171c0 <__multadd>
 801751a:	4607      	mov	r7, r0
 801751c:	10ad      	asrs	r5, r5, #2
 801751e:	d03d      	beq.n	801759c <__pow5mult+0xa0>
 8017520:	69f4      	ldr	r4, [r6, #28]
 8017522:	b97c      	cbnz	r4, 8017544 <__pow5mult+0x48>
 8017524:	2010      	movs	r0, #16
 8017526:	f001 f87d 	bl	8018624 <malloc>
 801752a:	4602      	mov	r2, r0
 801752c:	61f0      	str	r0, [r6, #28]
 801752e:	b928      	cbnz	r0, 801753c <__pow5mult+0x40>
 8017530:	4b1d      	ldr	r3, [pc, #116]	; (80175a8 <__pow5mult+0xac>)
 8017532:	481e      	ldr	r0, [pc, #120]	; (80175ac <__pow5mult+0xb0>)
 8017534:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017538:	f7fe f884 	bl	8015644 <__assert_func>
 801753c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017540:	6004      	str	r4, [r0, #0]
 8017542:	60c4      	str	r4, [r0, #12]
 8017544:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801754c:	b94c      	cbnz	r4, 8017562 <__pow5mult+0x66>
 801754e:	f240 2171 	movw	r1, #625	; 0x271
 8017552:	4630      	mov	r0, r6
 8017554:	f7ff ff12 	bl	801737c <__i2b>
 8017558:	2300      	movs	r3, #0
 801755a:	f8c8 0008 	str.w	r0, [r8, #8]
 801755e:	4604      	mov	r4, r0
 8017560:	6003      	str	r3, [r0, #0]
 8017562:	f04f 0900 	mov.w	r9, #0
 8017566:	07eb      	lsls	r3, r5, #31
 8017568:	d50a      	bpl.n	8017580 <__pow5mult+0x84>
 801756a:	4639      	mov	r1, r7
 801756c:	4622      	mov	r2, r4
 801756e:	4630      	mov	r0, r6
 8017570:	f7ff ff1a 	bl	80173a8 <__multiply>
 8017574:	4639      	mov	r1, r7
 8017576:	4680      	mov	r8, r0
 8017578:	4630      	mov	r0, r6
 801757a:	f7ff fdff 	bl	801717c <_Bfree>
 801757e:	4647      	mov	r7, r8
 8017580:	106d      	asrs	r5, r5, #1
 8017582:	d00b      	beq.n	801759c <__pow5mult+0xa0>
 8017584:	6820      	ldr	r0, [r4, #0]
 8017586:	b938      	cbnz	r0, 8017598 <__pow5mult+0x9c>
 8017588:	4622      	mov	r2, r4
 801758a:	4621      	mov	r1, r4
 801758c:	4630      	mov	r0, r6
 801758e:	f7ff ff0b 	bl	80173a8 <__multiply>
 8017592:	6020      	str	r0, [r4, #0]
 8017594:	f8c0 9000 	str.w	r9, [r0]
 8017598:	4604      	mov	r4, r0
 801759a:	e7e4      	b.n	8017566 <__pow5mult+0x6a>
 801759c:	4638      	mov	r0, r7
 801759e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175a2:	bf00      	nop
 80175a4:	0801c378 	.word	0x0801c378
 80175a8:	0801c212 	.word	0x0801c212
 80175ac:	0801c229 	.word	0x0801c229

080175b0 <__lshift>:
 80175b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175b4:	460c      	mov	r4, r1
 80175b6:	6849      	ldr	r1, [r1, #4]
 80175b8:	6923      	ldr	r3, [r4, #16]
 80175ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80175be:	68a3      	ldr	r3, [r4, #8]
 80175c0:	4607      	mov	r7, r0
 80175c2:	4691      	mov	r9, r2
 80175c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80175c8:	f108 0601 	add.w	r6, r8, #1
 80175cc:	42b3      	cmp	r3, r6
 80175ce:	db0b      	blt.n	80175e8 <__lshift+0x38>
 80175d0:	4638      	mov	r0, r7
 80175d2:	f7ff fd93 	bl	80170fc <_Balloc>
 80175d6:	4605      	mov	r5, r0
 80175d8:	b948      	cbnz	r0, 80175ee <__lshift+0x3e>
 80175da:	4602      	mov	r2, r0
 80175dc:	4b28      	ldr	r3, [pc, #160]	; (8017680 <__lshift+0xd0>)
 80175de:	4829      	ldr	r0, [pc, #164]	; (8017684 <__lshift+0xd4>)
 80175e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80175e4:	f7fe f82e 	bl	8015644 <__assert_func>
 80175e8:	3101      	adds	r1, #1
 80175ea:	005b      	lsls	r3, r3, #1
 80175ec:	e7ee      	b.n	80175cc <__lshift+0x1c>
 80175ee:	2300      	movs	r3, #0
 80175f0:	f100 0114 	add.w	r1, r0, #20
 80175f4:	f100 0210 	add.w	r2, r0, #16
 80175f8:	4618      	mov	r0, r3
 80175fa:	4553      	cmp	r3, sl
 80175fc:	db33      	blt.n	8017666 <__lshift+0xb6>
 80175fe:	6920      	ldr	r0, [r4, #16]
 8017600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017604:	f104 0314 	add.w	r3, r4, #20
 8017608:	f019 091f 	ands.w	r9, r9, #31
 801760c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017614:	d02b      	beq.n	801766e <__lshift+0xbe>
 8017616:	f1c9 0e20 	rsb	lr, r9, #32
 801761a:	468a      	mov	sl, r1
 801761c:	2200      	movs	r2, #0
 801761e:	6818      	ldr	r0, [r3, #0]
 8017620:	fa00 f009 	lsl.w	r0, r0, r9
 8017624:	4310      	orrs	r0, r2
 8017626:	f84a 0b04 	str.w	r0, [sl], #4
 801762a:	f853 2b04 	ldr.w	r2, [r3], #4
 801762e:	459c      	cmp	ip, r3
 8017630:	fa22 f20e 	lsr.w	r2, r2, lr
 8017634:	d8f3      	bhi.n	801761e <__lshift+0x6e>
 8017636:	ebac 0304 	sub.w	r3, ip, r4
 801763a:	3b15      	subs	r3, #21
 801763c:	f023 0303 	bic.w	r3, r3, #3
 8017640:	3304      	adds	r3, #4
 8017642:	f104 0015 	add.w	r0, r4, #21
 8017646:	4584      	cmp	ip, r0
 8017648:	bf38      	it	cc
 801764a:	2304      	movcc	r3, #4
 801764c:	50ca      	str	r2, [r1, r3]
 801764e:	b10a      	cbz	r2, 8017654 <__lshift+0xa4>
 8017650:	f108 0602 	add.w	r6, r8, #2
 8017654:	3e01      	subs	r6, #1
 8017656:	4638      	mov	r0, r7
 8017658:	612e      	str	r6, [r5, #16]
 801765a:	4621      	mov	r1, r4
 801765c:	f7ff fd8e 	bl	801717c <_Bfree>
 8017660:	4628      	mov	r0, r5
 8017662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017666:	f842 0f04 	str.w	r0, [r2, #4]!
 801766a:	3301      	adds	r3, #1
 801766c:	e7c5      	b.n	80175fa <__lshift+0x4a>
 801766e:	3904      	subs	r1, #4
 8017670:	f853 2b04 	ldr.w	r2, [r3], #4
 8017674:	f841 2f04 	str.w	r2, [r1, #4]!
 8017678:	459c      	cmp	ip, r3
 801767a:	d8f9      	bhi.n	8017670 <__lshift+0xc0>
 801767c:	e7ea      	b.n	8017654 <__lshift+0xa4>
 801767e:	bf00      	nop
 8017680:	0801c1a1 	.word	0x0801c1a1
 8017684:	0801c229 	.word	0x0801c229

08017688 <__mcmp>:
 8017688:	b530      	push	{r4, r5, lr}
 801768a:	6902      	ldr	r2, [r0, #16]
 801768c:	690c      	ldr	r4, [r1, #16]
 801768e:	1b12      	subs	r2, r2, r4
 8017690:	d10e      	bne.n	80176b0 <__mcmp+0x28>
 8017692:	f100 0314 	add.w	r3, r0, #20
 8017696:	3114      	adds	r1, #20
 8017698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801769c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80176a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80176a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80176a8:	42a5      	cmp	r5, r4
 80176aa:	d003      	beq.n	80176b4 <__mcmp+0x2c>
 80176ac:	d305      	bcc.n	80176ba <__mcmp+0x32>
 80176ae:	2201      	movs	r2, #1
 80176b0:	4610      	mov	r0, r2
 80176b2:	bd30      	pop	{r4, r5, pc}
 80176b4:	4283      	cmp	r3, r0
 80176b6:	d3f3      	bcc.n	80176a0 <__mcmp+0x18>
 80176b8:	e7fa      	b.n	80176b0 <__mcmp+0x28>
 80176ba:	f04f 32ff 	mov.w	r2, #4294967295
 80176be:	e7f7      	b.n	80176b0 <__mcmp+0x28>

080176c0 <__mdiff>:
 80176c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176c4:	460c      	mov	r4, r1
 80176c6:	4606      	mov	r6, r0
 80176c8:	4611      	mov	r1, r2
 80176ca:	4620      	mov	r0, r4
 80176cc:	4690      	mov	r8, r2
 80176ce:	f7ff ffdb 	bl	8017688 <__mcmp>
 80176d2:	1e05      	subs	r5, r0, #0
 80176d4:	d110      	bne.n	80176f8 <__mdiff+0x38>
 80176d6:	4629      	mov	r1, r5
 80176d8:	4630      	mov	r0, r6
 80176da:	f7ff fd0f 	bl	80170fc <_Balloc>
 80176de:	b930      	cbnz	r0, 80176ee <__mdiff+0x2e>
 80176e0:	4b3a      	ldr	r3, [pc, #232]	; (80177cc <__mdiff+0x10c>)
 80176e2:	4602      	mov	r2, r0
 80176e4:	f240 2137 	movw	r1, #567	; 0x237
 80176e8:	4839      	ldr	r0, [pc, #228]	; (80177d0 <__mdiff+0x110>)
 80176ea:	f7fd ffab 	bl	8015644 <__assert_func>
 80176ee:	2301      	movs	r3, #1
 80176f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80176f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176f8:	bfa4      	itt	ge
 80176fa:	4643      	movge	r3, r8
 80176fc:	46a0      	movge	r8, r4
 80176fe:	4630      	mov	r0, r6
 8017700:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017704:	bfa6      	itte	ge
 8017706:	461c      	movge	r4, r3
 8017708:	2500      	movge	r5, #0
 801770a:	2501      	movlt	r5, #1
 801770c:	f7ff fcf6 	bl	80170fc <_Balloc>
 8017710:	b920      	cbnz	r0, 801771c <__mdiff+0x5c>
 8017712:	4b2e      	ldr	r3, [pc, #184]	; (80177cc <__mdiff+0x10c>)
 8017714:	4602      	mov	r2, r0
 8017716:	f240 2145 	movw	r1, #581	; 0x245
 801771a:	e7e5      	b.n	80176e8 <__mdiff+0x28>
 801771c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017720:	6926      	ldr	r6, [r4, #16]
 8017722:	60c5      	str	r5, [r0, #12]
 8017724:	f104 0914 	add.w	r9, r4, #20
 8017728:	f108 0514 	add.w	r5, r8, #20
 801772c:	f100 0e14 	add.w	lr, r0, #20
 8017730:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017734:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017738:	f108 0210 	add.w	r2, r8, #16
 801773c:	46f2      	mov	sl, lr
 801773e:	2100      	movs	r1, #0
 8017740:	f859 3b04 	ldr.w	r3, [r9], #4
 8017744:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017748:	fa11 f88b 	uxtah	r8, r1, fp
 801774c:	b299      	uxth	r1, r3
 801774e:	0c1b      	lsrs	r3, r3, #16
 8017750:	eba8 0801 	sub.w	r8, r8, r1
 8017754:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017758:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801775c:	fa1f f888 	uxth.w	r8, r8
 8017760:	1419      	asrs	r1, r3, #16
 8017762:	454e      	cmp	r6, r9
 8017764:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017768:	f84a 3b04 	str.w	r3, [sl], #4
 801776c:	d8e8      	bhi.n	8017740 <__mdiff+0x80>
 801776e:	1b33      	subs	r3, r6, r4
 8017770:	3b15      	subs	r3, #21
 8017772:	f023 0303 	bic.w	r3, r3, #3
 8017776:	3304      	adds	r3, #4
 8017778:	3415      	adds	r4, #21
 801777a:	42a6      	cmp	r6, r4
 801777c:	bf38      	it	cc
 801777e:	2304      	movcc	r3, #4
 8017780:	441d      	add	r5, r3
 8017782:	4473      	add	r3, lr
 8017784:	469e      	mov	lr, r3
 8017786:	462e      	mov	r6, r5
 8017788:	4566      	cmp	r6, ip
 801778a:	d30e      	bcc.n	80177aa <__mdiff+0xea>
 801778c:	f10c 0203 	add.w	r2, ip, #3
 8017790:	1b52      	subs	r2, r2, r5
 8017792:	f022 0203 	bic.w	r2, r2, #3
 8017796:	3d03      	subs	r5, #3
 8017798:	45ac      	cmp	ip, r5
 801779a:	bf38      	it	cc
 801779c:	2200      	movcc	r2, #0
 801779e:	4413      	add	r3, r2
 80177a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80177a4:	b17a      	cbz	r2, 80177c6 <__mdiff+0x106>
 80177a6:	6107      	str	r7, [r0, #16]
 80177a8:	e7a4      	b.n	80176f4 <__mdiff+0x34>
 80177aa:	f856 8b04 	ldr.w	r8, [r6], #4
 80177ae:	fa11 f288 	uxtah	r2, r1, r8
 80177b2:	1414      	asrs	r4, r2, #16
 80177b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80177b8:	b292      	uxth	r2, r2
 80177ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80177be:	f84e 2b04 	str.w	r2, [lr], #4
 80177c2:	1421      	asrs	r1, r4, #16
 80177c4:	e7e0      	b.n	8017788 <__mdiff+0xc8>
 80177c6:	3f01      	subs	r7, #1
 80177c8:	e7ea      	b.n	80177a0 <__mdiff+0xe0>
 80177ca:	bf00      	nop
 80177cc:	0801c1a1 	.word	0x0801c1a1
 80177d0:	0801c229 	.word	0x0801c229

080177d4 <__ulp>:
 80177d4:	b082      	sub	sp, #8
 80177d6:	ed8d 0b00 	vstr	d0, [sp]
 80177da:	9a01      	ldr	r2, [sp, #4]
 80177dc:	4b0f      	ldr	r3, [pc, #60]	; (801781c <__ulp+0x48>)
 80177de:	4013      	ands	r3, r2
 80177e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	dc08      	bgt.n	80177fa <__ulp+0x26>
 80177e8:	425b      	negs	r3, r3
 80177ea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80177ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80177f2:	da04      	bge.n	80177fe <__ulp+0x2a>
 80177f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80177f8:	4113      	asrs	r3, r2
 80177fa:	2200      	movs	r2, #0
 80177fc:	e008      	b.n	8017810 <__ulp+0x3c>
 80177fe:	f1a2 0314 	sub.w	r3, r2, #20
 8017802:	2b1e      	cmp	r3, #30
 8017804:	bfda      	itte	le
 8017806:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801780a:	40da      	lsrle	r2, r3
 801780c:	2201      	movgt	r2, #1
 801780e:	2300      	movs	r3, #0
 8017810:	4619      	mov	r1, r3
 8017812:	4610      	mov	r0, r2
 8017814:	ec41 0b10 	vmov	d0, r0, r1
 8017818:	b002      	add	sp, #8
 801781a:	4770      	bx	lr
 801781c:	7ff00000 	.word	0x7ff00000

08017820 <__b2d>:
 8017820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017824:	6906      	ldr	r6, [r0, #16]
 8017826:	f100 0814 	add.w	r8, r0, #20
 801782a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801782e:	1f37      	subs	r7, r6, #4
 8017830:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017834:	4610      	mov	r0, r2
 8017836:	f7ff fd53 	bl	80172e0 <__hi0bits>
 801783a:	f1c0 0320 	rsb	r3, r0, #32
 801783e:	280a      	cmp	r0, #10
 8017840:	600b      	str	r3, [r1, #0]
 8017842:	491b      	ldr	r1, [pc, #108]	; (80178b0 <__b2d+0x90>)
 8017844:	dc15      	bgt.n	8017872 <__b2d+0x52>
 8017846:	f1c0 0c0b 	rsb	ip, r0, #11
 801784a:	fa22 f30c 	lsr.w	r3, r2, ip
 801784e:	45b8      	cmp	r8, r7
 8017850:	ea43 0501 	orr.w	r5, r3, r1
 8017854:	bf34      	ite	cc
 8017856:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801785a:	2300      	movcs	r3, #0
 801785c:	3015      	adds	r0, #21
 801785e:	fa02 f000 	lsl.w	r0, r2, r0
 8017862:	fa23 f30c 	lsr.w	r3, r3, ip
 8017866:	4303      	orrs	r3, r0
 8017868:	461c      	mov	r4, r3
 801786a:	ec45 4b10 	vmov	d0, r4, r5
 801786e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017872:	45b8      	cmp	r8, r7
 8017874:	bf3a      	itte	cc
 8017876:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801787a:	f1a6 0708 	subcc.w	r7, r6, #8
 801787e:	2300      	movcs	r3, #0
 8017880:	380b      	subs	r0, #11
 8017882:	d012      	beq.n	80178aa <__b2d+0x8a>
 8017884:	f1c0 0120 	rsb	r1, r0, #32
 8017888:	fa23 f401 	lsr.w	r4, r3, r1
 801788c:	4082      	lsls	r2, r0
 801788e:	4322      	orrs	r2, r4
 8017890:	4547      	cmp	r7, r8
 8017892:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8017896:	bf8c      	ite	hi
 8017898:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801789c:	2200      	movls	r2, #0
 801789e:	4083      	lsls	r3, r0
 80178a0:	40ca      	lsrs	r2, r1
 80178a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80178a6:	4313      	orrs	r3, r2
 80178a8:	e7de      	b.n	8017868 <__b2d+0x48>
 80178aa:	ea42 0501 	orr.w	r5, r2, r1
 80178ae:	e7db      	b.n	8017868 <__b2d+0x48>
 80178b0:	3ff00000 	.word	0x3ff00000

080178b4 <__d2b>:
 80178b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80178b8:	460f      	mov	r7, r1
 80178ba:	2101      	movs	r1, #1
 80178bc:	ec59 8b10 	vmov	r8, r9, d0
 80178c0:	4616      	mov	r6, r2
 80178c2:	f7ff fc1b 	bl	80170fc <_Balloc>
 80178c6:	4604      	mov	r4, r0
 80178c8:	b930      	cbnz	r0, 80178d8 <__d2b+0x24>
 80178ca:	4602      	mov	r2, r0
 80178cc:	4b24      	ldr	r3, [pc, #144]	; (8017960 <__d2b+0xac>)
 80178ce:	4825      	ldr	r0, [pc, #148]	; (8017964 <__d2b+0xb0>)
 80178d0:	f240 310f 	movw	r1, #783	; 0x30f
 80178d4:	f7fd feb6 	bl	8015644 <__assert_func>
 80178d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80178dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80178e0:	bb2d      	cbnz	r5, 801792e <__d2b+0x7a>
 80178e2:	9301      	str	r3, [sp, #4]
 80178e4:	f1b8 0300 	subs.w	r3, r8, #0
 80178e8:	d026      	beq.n	8017938 <__d2b+0x84>
 80178ea:	4668      	mov	r0, sp
 80178ec:	9300      	str	r3, [sp, #0]
 80178ee:	f7ff fd17 	bl	8017320 <__lo0bits>
 80178f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80178f6:	b1e8      	cbz	r0, 8017934 <__d2b+0x80>
 80178f8:	f1c0 0320 	rsb	r3, r0, #32
 80178fc:	fa02 f303 	lsl.w	r3, r2, r3
 8017900:	430b      	orrs	r3, r1
 8017902:	40c2      	lsrs	r2, r0
 8017904:	6163      	str	r3, [r4, #20]
 8017906:	9201      	str	r2, [sp, #4]
 8017908:	9b01      	ldr	r3, [sp, #4]
 801790a:	61a3      	str	r3, [r4, #24]
 801790c:	2b00      	cmp	r3, #0
 801790e:	bf14      	ite	ne
 8017910:	2202      	movne	r2, #2
 8017912:	2201      	moveq	r2, #1
 8017914:	6122      	str	r2, [r4, #16]
 8017916:	b1bd      	cbz	r5, 8017948 <__d2b+0x94>
 8017918:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801791c:	4405      	add	r5, r0
 801791e:	603d      	str	r5, [r7, #0]
 8017920:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017924:	6030      	str	r0, [r6, #0]
 8017926:	4620      	mov	r0, r4
 8017928:	b003      	add	sp, #12
 801792a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801792e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017932:	e7d6      	b.n	80178e2 <__d2b+0x2e>
 8017934:	6161      	str	r1, [r4, #20]
 8017936:	e7e7      	b.n	8017908 <__d2b+0x54>
 8017938:	a801      	add	r0, sp, #4
 801793a:	f7ff fcf1 	bl	8017320 <__lo0bits>
 801793e:	9b01      	ldr	r3, [sp, #4]
 8017940:	6163      	str	r3, [r4, #20]
 8017942:	3020      	adds	r0, #32
 8017944:	2201      	movs	r2, #1
 8017946:	e7e5      	b.n	8017914 <__d2b+0x60>
 8017948:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801794c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017950:	6038      	str	r0, [r7, #0]
 8017952:	6918      	ldr	r0, [r3, #16]
 8017954:	f7ff fcc4 	bl	80172e0 <__hi0bits>
 8017958:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801795c:	e7e2      	b.n	8017924 <__d2b+0x70>
 801795e:	bf00      	nop
 8017960:	0801c1a1 	.word	0x0801c1a1
 8017964:	0801c229 	.word	0x0801c229

08017968 <__ratio>:
 8017968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801796c:	4688      	mov	r8, r1
 801796e:	4669      	mov	r1, sp
 8017970:	4681      	mov	r9, r0
 8017972:	f7ff ff55 	bl	8017820 <__b2d>
 8017976:	a901      	add	r1, sp, #4
 8017978:	4640      	mov	r0, r8
 801797a:	ec55 4b10 	vmov	r4, r5, d0
 801797e:	f7ff ff4f 	bl	8017820 <__b2d>
 8017982:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017986:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801798a:	eba3 0c02 	sub.w	ip, r3, r2
 801798e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017992:	1a9b      	subs	r3, r3, r2
 8017994:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017998:	ec51 0b10 	vmov	r0, r1, d0
 801799c:	2b00      	cmp	r3, #0
 801799e:	bfd6      	itet	le
 80179a0:	460a      	movle	r2, r1
 80179a2:	462a      	movgt	r2, r5
 80179a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80179a8:	468b      	mov	fp, r1
 80179aa:	462f      	mov	r7, r5
 80179ac:	bfd4      	ite	le
 80179ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80179b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80179b6:	4620      	mov	r0, r4
 80179b8:	ee10 2a10 	vmov	r2, s0
 80179bc:	465b      	mov	r3, fp
 80179be:	4639      	mov	r1, r7
 80179c0:	f7e8 ff5c 	bl	800087c <__aeabi_ddiv>
 80179c4:	ec41 0b10 	vmov	d0, r0, r1
 80179c8:	b003      	add	sp, #12
 80179ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179ce <__copybits>:
 80179ce:	3901      	subs	r1, #1
 80179d0:	b570      	push	{r4, r5, r6, lr}
 80179d2:	1149      	asrs	r1, r1, #5
 80179d4:	6914      	ldr	r4, [r2, #16]
 80179d6:	3101      	adds	r1, #1
 80179d8:	f102 0314 	add.w	r3, r2, #20
 80179dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80179e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80179e4:	1f05      	subs	r5, r0, #4
 80179e6:	42a3      	cmp	r3, r4
 80179e8:	d30c      	bcc.n	8017a04 <__copybits+0x36>
 80179ea:	1aa3      	subs	r3, r4, r2
 80179ec:	3b11      	subs	r3, #17
 80179ee:	f023 0303 	bic.w	r3, r3, #3
 80179f2:	3211      	adds	r2, #17
 80179f4:	42a2      	cmp	r2, r4
 80179f6:	bf88      	it	hi
 80179f8:	2300      	movhi	r3, #0
 80179fa:	4418      	add	r0, r3
 80179fc:	2300      	movs	r3, #0
 80179fe:	4288      	cmp	r0, r1
 8017a00:	d305      	bcc.n	8017a0e <__copybits+0x40>
 8017a02:	bd70      	pop	{r4, r5, r6, pc}
 8017a04:	f853 6b04 	ldr.w	r6, [r3], #4
 8017a08:	f845 6f04 	str.w	r6, [r5, #4]!
 8017a0c:	e7eb      	b.n	80179e6 <__copybits+0x18>
 8017a0e:	f840 3b04 	str.w	r3, [r0], #4
 8017a12:	e7f4      	b.n	80179fe <__copybits+0x30>

08017a14 <__any_on>:
 8017a14:	f100 0214 	add.w	r2, r0, #20
 8017a18:	6900      	ldr	r0, [r0, #16]
 8017a1a:	114b      	asrs	r3, r1, #5
 8017a1c:	4298      	cmp	r0, r3
 8017a1e:	b510      	push	{r4, lr}
 8017a20:	db11      	blt.n	8017a46 <__any_on+0x32>
 8017a22:	dd0a      	ble.n	8017a3a <__any_on+0x26>
 8017a24:	f011 011f 	ands.w	r1, r1, #31
 8017a28:	d007      	beq.n	8017a3a <__any_on+0x26>
 8017a2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017a2e:	fa24 f001 	lsr.w	r0, r4, r1
 8017a32:	fa00 f101 	lsl.w	r1, r0, r1
 8017a36:	428c      	cmp	r4, r1
 8017a38:	d10b      	bne.n	8017a52 <__any_on+0x3e>
 8017a3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017a3e:	4293      	cmp	r3, r2
 8017a40:	d803      	bhi.n	8017a4a <__any_on+0x36>
 8017a42:	2000      	movs	r0, #0
 8017a44:	bd10      	pop	{r4, pc}
 8017a46:	4603      	mov	r3, r0
 8017a48:	e7f7      	b.n	8017a3a <__any_on+0x26>
 8017a4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017a4e:	2900      	cmp	r1, #0
 8017a50:	d0f5      	beq.n	8017a3e <__any_on+0x2a>
 8017a52:	2001      	movs	r0, #1
 8017a54:	e7f6      	b.n	8017a44 <__any_on+0x30>

08017a56 <__ascii_wctomb>:
 8017a56:	b149      	cbz	r1, 8017a6c <__ascii_wctomb+0x16>
 8017a58:	2aff      	cmp	r2, #255	; 0xff
 8017a5a:	bf85      	ittet	hi
 8017a5c:	238a      	movhi	r3, #138	; 0x8a
 8017a5e:	6003      	strhi	r3, [r0, #0]
 8017a60:	700a      	strbls	r2, [r1, #0]
 8017a62:	f04f 30ff 	movhi.w	r0, #4294967295
 8017a66:	bf98      	it	ls
 8017a68:	2001      	movls	r0, #1
 8017a6a:	4770      	bx	lr
 8017a6c:	4608      	mov	r0, r1
 8017a6e:	4770      	bx	lr

08017a70 <__ssputs_r>:
 8017a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a74:	688e      	ldr	r6, [r1, #8]
 8017a76:	461f      	mov	r7, r3
 8017a78:	42be      	cmp	r6, r7
 8017a7a:	680b      	ldr	r3, [r1, #0]
 8017a7c:	4682      	mov	sl, r0
 8017a7e:	460c      	mov	r4, r1
 8017a80:	4690      	mov	r8, r2
 8017a82:	d82c      	bhi.n	8017ade <__ssputs_r+0x6e>
 8017a84:	898a      	ldrh	r2, [r1, #12]
 8017a86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a8a:	d026      	beq.n	8017ada <__ssputs_r+0x6a>
 8017a8c:	6965      	ldr	r5, [r4, #20]
 8017a8e:	6909      	ldr	r1, [r1, #16]
 8017a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a94:	eba3 0901 	sub.w	r9, r3, r1
 8017a98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a9c:	1c7b      	adds	r3, r7, #1
 8017a9e:	444b      	add	r3, r9
 8017aa0:	106d      	asrs	r5, r5, #1
 8017aa2:	429d      	cmp	r5, r3
 8017aa4:	bf38      	it	cc
 8017aa6:	461d      	movcc	r5, r3
 8017aa8:	0553      	lsls	r3, r2, #21
 8017aaa:	d527      	bpl.n	8017afc <__ssputs_r+0x8c>
 8017aac:	4629      	mov	r1, r5
 8017aae:	f7ff fa87 	bl	8016fc0 <_malloc_r>
 8017ab2:	4606      	mov	r6, r0
 8017ab4:	b360      	cbz	r0, 8017b10 <__ssputs_r+0xa0>
 8017ab6:	6921      	ldr	r1, [r4, #16]
 8017ab8:	464a      	mov	r2, r9
 8017aba:	f7fe fe9c 	bl	80167f6 <memcpy>
 8017abe:	89a3      	ldrh	r3, [r4, #12]
 8017ac0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ac8:	81a3      	strh	r3, [r4, #12]
 8017aca:	6126      	str	r6, [r4, #16]
 8017acc:	6165      	str	r5, [r4, #20]
 8017ace:	444e      	add	r6, r9
 8017ad0:	eba5 0509 	sub.w	r5, r5, r9
 8017ad4:	6026      	str	r6, [r4, #0]
 8017ad6:	60a5      	str	r5, [r4, #8]
 8017ad8:	463e      	mov	r6, r7
 8017ada:	42be      	cmp	r6, r7
 8017adc:	d900      	bls.n	8017ae0 <__ssputs_r+0x70>
 8017ade:	463e      	mov	r6, r7
 8017ae0:	6820      	ldr	r0, [r4, #0]
 8017ae2:	4632      	mov	r2, r6
 8017ae4:	4641      	mov	r1, r8
 8017ae6:	f7fe fdd2 	bl	801668e <memmove>
 8017aea:	68a3      	ldr	r3, [r4, #8]
 8017aec:	1b9b      	subs	r3, r3, r6
 8017aee:	60a3      	str	r3, [r4, #8]
 8017af0:	6823      	ldr	r3, [r4, #0]
 8017af2:	4433      	add	r3, r6
 8017af4:	6023      	str	r3, [r4, #0]
 8017af6:	2000      	movs	r0, #0
 8017af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017afc:	462a      	mov	r2, r5
 8017afe:	f000 fd99 	bl	8018634 <_realloc_r>
 8017b02:	4606      	mov	r6, r0
 8017b04:	2800      	cmp	r0, #0
 8017b06:	d1e0      	bne.n	8017aca <__ssputs_r+0x5a>
 8017b08:	6921      	ldr	r1, [r4, #16]
 8017b0a:	4650      	mov	r0, sl
 8017b0c:	f7fe fe94 	bl	8016838 <_free_r>
 8017b10:	230c      	movs	r3, #12
 8017b12:	f8ca 3000 	str.w	r3, [sl]
 8017b16:	89a3      	ldrh	r3, [r4, #12]
 8017b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b1c:	81a3      	strh	r3, [r4, #12]
 8017b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8017b22:	e7e9      	b.n	8017af8 <__ssputs_r+0x88>

08017b24 <_svfiprintf_r>:
 8017b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b28:	4698      	mov	r8, r3
 8017b2a:	898b      	ldrh	r3, [r1, #12]
 8017b2c:	061b      	lsls	r3, r3, #24
 8017b2e:	b09d      	sub	sp, #116	; 0x74
 8017b30:	4607      	mov	r7, r0
 8017b32:	460d      	mov	r5, r1
 8017b34:	4614      	mov	r4, r2
 8017b36:	d50e      	bpl.n	8017b56 <_svfiprintf_r+0x32>
 8017b38:	690b      	ldr	r3, [r1, #16]
 8017b3a:	b963      	cbnz	r3, 8017b56 <_svfiprintf_r+0x32>
 8017b3c:	2140      	movs	r1, #64	; 0x40
 8017b3e:	f7ff fa3f 	bl	8016fc0 <_malloc_r>
 8017b42:	6028      	str	r0, [r5, #0]
 8017b44:	6128      	str	r0, [r5, #16]
 8017b46:	b920      	cbnz	r0, 8017b52 <_svfiprintf_r+0x2e>
 8017b48:	230c      	movs	r3, #12
 8017b4a:	603b      	str	r3, [r7, #0]
 8017b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b50:	e0d0      	b.n	8017cf4 <_svfiprintf_r+0x1d0>
 8017b52:	2340      	movs	r3, #64	; 0x40
 8017b54:	616b      	str	r3, [r5, #20]
 8017b56:	2300      	movs	r3, #0
 8017b58:	9309      	str	r3, [sp, #36]	; 0x24
 8017b5a:	2320      	movs	r3, #32
 8017b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b64:	2330      	movs	r3, #48	; 0x30
 8017b66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017d0c <_svfiprintf_r+0x1e8>
 8017b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b6e:	f04f 0901 	mov.w	r9, #1
 8017b72:	4623      	mov	r3, r4
 8017b74:	469a      	mov	sl, r3
 8017b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b7a:	b10a      	cbz	r2, 8017b80 <_svfiprintf_r+0x5c>
 8017b7c:	2a25      	cmp	r2, #37	; 0x25
 8017b7e:	d1f9      	bne.n	8017b74 <_svfiprintf_r+0x50>
 8017b80:	ebba 0b04 	subs.w	fp, sl, r4
 8017b84:	d00b      	beq.n	8017b9e <_svfiprintf_r+0x7a>
 8017b86:	465b      	mov	r3, fp
 8017b88:	4622      	mov	r2, r4
 8017b8a:	4629      	mov	r1, r5
 8017b8c:	4638      	mov	r0, r7
 8017b8e:	f7ff ff6f 	bl	8017a70 <__ssputs_r>
 8017b92:	3001      	adds	r0, #1
 8017b94:	f000 80a9 	beq.w	8017cea <_svfiprintf_r+0x1c6>
 8017b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b9a:	445a      	add	r2, fp
 8017b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8017b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	f000 80a1 	beq.w	8017cea <_svfiprintf_r+0x1c6>
 8017ba8:	2300      	movs	r3, #0
 8017baa:	f04f 32ff 	mov.w	r2, #4294967295
 8017bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bb2:	f10a 0a01 	add.w	sl, sl, #1
 8017bb6:	9304      	str	r3, [sp, #16]
 8017bb8:	9307      	str	r3, [sp, #28]
 8017bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8017bc0:	4654      	mov	r4, sl
 8017bc2:	2205      	movs	r2, #5
 8017bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bc8:	4850      	ldr	r0, [pc, #320]	; (8017d0c <_svfiprintf_r+0x1e8>)
 8017bca:	f7e8 fb21 	bl	8000210 <memchr>
 8017bce:	9a04      	ldr	r2, [sp, #16]
 8017bd0:	b9d8      	cbnz	r0, 8017c0a <_svfiprintf_r+0xe6>
 8017bd2:	06d0      	lsls	r0, r2, #27
 8017bd4:	bf44      	itt	mi
 8017bd6:	2320      	movmi	r3, #32
 8017bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bdc:	0711      	lsls	r1, r2, #28
 8017bde:	bf44      	itt	mi
 8017be0:	232b      	movmi	r3, #43	; 0x2b
 8017be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017be6:	f89a 3000 	ldrb.w	r3, [sl]
 8017bea:	2b2a      	cmp	r3, #42	; 0x2a
 8017bec:	d015      	beq.n	8017c1a <_svfiprintf_r+0xf6>
 8017bee:	9a07      	ldr	r2, [sp, #28]
 8017bf0:	4654      	mov	r4, sl
 8017bf2:	2000      	movs	r0, #0
 8017bf4:	f04f 0c0a 	mov.w	ip, #10
 8017bf8:	4621      	mov	r1, r4
 8017bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bfe:	3b30      	subs	r3, #48	; 0x30
 8017c00:	2b09      	cmp	r3, #9
 8017c02:	d94d      	bls.n	8017ca0 <_svfiprintf_r+0x17c>
 8017c04:	b1b0      	cbz	r0, 8017c34 <_svfiprintf_r+0x110>
 8017c06:	9207      	str	r2, [sp, #28]
 8017c08:	e014      	b.n	8017c34 <_svfiprintf_r+0x110>
 8017c0a:	eba0 0308 	sub.w	r3, r0, r8
 8017c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8017c12:	4313      	orrs	r3, r2
 8017c14:	9304      	str	r3, [sp, #16]
 8017c16:	46a2      	mov	sl, r4
 8017c18:	e7d2      	b.n	8017bc0 <_svfiprintf_r+0x9c>
 8017c1a:	9b03      	ldr	r3, [sp, #12]
 8017c1c:	1d19      	adds	r1, r3, #4
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	9103      	str	r1, [sp, #12]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	bfbb      	ittet	lt
 8017c26:	425b      	neglt	r3, r3
 8017c28:	f042 0202 	orrlt.w	r2, r2, #2
 8017c2c:	9307      	strge	r3, [sp, #28]
 8017c2e:	9307      	strlt	r3, [sp, #28]
 8017c30:	bfb8      	it	lt
 8017c32:	9204      	strlt	r2, [sp, #16]
 8017c34:	7823      	ldrb	r3, [r4, #0]
 8017c36:	2b2e      	cmp	r3, #46	; 0x2e
 8017c38:	d10c      	bne.n	8017c54 <_svfiprintf_r+0x130>
 8017c3a:	7863      	ldrb	r3, [r4, #1]
 8017c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8017c3e:	d134      	bne.n	8017caa <_svfiprintf_r+0x186>
 8017c40:	9b03      	ldr	r3, [sp, #12]
 8017c42:	1d1a      	adds	r2, r3, #4
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	9203      	str	r2, [sp, #12]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	bfb8      	it	lt
 8017c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c50:	3402      	adds	r4, #2
 8017c52:	9305      	str	r3, [sp, #20]
 8017c54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017d1c <_svfiprintf_r+0x1f8>
 8017c58:	7821      	ldrb	r1, [r4, #0]
 8017c5a:	2203      	movs	r2, #3
 8017c5c:	4650      	mov	r0, sl
 8017c5e:	f7e8 fad7 	bl	8000210 <memchr>
 8017c62:	b138      	cbz	r0, 8017c74 <_svfiprintf_r+0x150>
 8017c64:	9b04      	ldr	r3, [sp, #16]
 8017c66:	eba0 000a 	sub.w	r0, r0, sl
 8017c6a:	2240      	movs	r2, #64	; 0x40
 8017c6c:	4082      	lsls	r2, r0
 8017c6e:	4313      	orrs	r3, r2
 8017c70:	3401      	adds	r4, #1
 8017c72:	9304      	str	r3, [sp, #16]
 8017c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c78:	4825      	ldr	r0, [pc, #148]	; (8017d10 <_svfiprintf_r+0x1ec>)
 8017c7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c7e:	2206      	movs	r2, #6
 8017c80:	f7e8 fac6 	bl	8000210 <memchr>
 8017c84:	2800      	cmp	r0, #0
 8017c86:	d038      	beq.n	8017cfa <_svfiprintf_r+0x1d6>
 8017c88:	4b22      	ldr	r3, [pc, #136]	; (8017d14 <_svfiprintf_r+0x1f0>)
 8017c8a:	bb1b      	cbnz	r3, 8017cd4 <_svfiprintf_r+0x1b0>
 8017c8c:	9b03      	ldr	r3, [sp, #12]
 8017c8e:	3307      	adds	r3, #7
 8017c90:	f023 0307 	bic.w	r3, r3, #7
 8017c94:	3308      	adds	r3, #8
 8017c96:	9303      	str	r3, [sp, #12]
 8017c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c9a:	4433      	add	r3, r6
 8017c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c9e:	e768      	b.n	8017b72 <_svfiprintf_r+0x4e>
 8017ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ca4:	460c      	mov	r4, r1
 8017ca6:	2001      	movs	r0, #1
 8017ca8:	e7a6      	b.n	8017bf8 <_svfiprintf_r+0xd4>
 8017caa:	2300      	movs	r3, #0
 8017cac:	3401      	adds	r4, #1
 8017cae:	9305      	str	r3, [sp, #20]
 8017cb0:	4619      	mov	r1, r3
 8017cb2:	f04f 0c0a 	mov.w	ip, #10
 8017cb6:	4620      	mov	r0, r4
 8017cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cbc:	3a30      	subs	r2, #48	; 0x30
 8017cbe:	2a09      	cmp	r2, #9
 8017cc0:	d903      	bls.n	8017cca <_svfiprintf_r+0x1a6>
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d0c6      	beq.n	8017c54 <_svfiprintf_r+0x130>
 8017cc6:	9105      	str	r1, [sp, #20]
 8017cc8:	e7c4      	b.n	8017c54 <_svfiprintf_r+0x130>
 8017cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8017cce:	4604      	mov	r4, r0
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	e7f0      	b.n	8017cb6 <_svfiprintf_r+0x192>
 8017cd4:	ab03      	add	r3, sp, #12
 8017cd6:	9300      	str	r3, [sp, #0]
 8017cd8:	462a      	mov	r2, r5
 8017cda:	4b0f      	ldr	r3, [pc, #60]	; (8017d18 <_svfiprintf_r+0x1f4>)
 8017cdc:	a904      	add	r1, sp, #16
 8017cde:	4638      	mov	r0, r7
 8017ce0:	f3af 8000 	nop.w
 8017ce4:	1c42      	adds	r2, r0, #1
 8017ce6:	4606      	mov	r6, r0
 8017ce8:	d1d6      	bne.n	8017c98 <_svfiprintf_r+0x174>
 8017cea:	89ab      	ldrh	r3, [r5, #12]
 8017cec:	065b      	lsls	r3, r3, #25
 8017cee:	f53f af2d 	bmi.w	8017b4c <_svfiprintf_r+0x28>
 8017cf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017cf4:	b01d      	add	sp, #116	; 0x74
 8017cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cfa:	ab03      	add	r3, sp, #12
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	462a      	mov	r2, r5
 8017d00:	4b05      	ldr	r3, [pc, #20]	; (8017d18 <_svfiprintf_r+0x1f4>)
 8017d02:	a904      	add	r1, sp, #16
 8017d04:	4638      	mov	r0, r7
 8017d06:	f000 f9bd 	bl	8018084 <_printf_i>
 8017d0a:	e7eb      	b.n	8017ce4 <_svfiprintf_r+0x1c0>
 8017d0c:	0801c384 	.word	0x0801c384
 8017d10:	0801c38e 	.word	0x0801c38e
 8017d14:	00000000 	.word	0x00000000
 8017d18:	08017a71 	.word	0x08017a71
 8017d1c:	0801c38a 	.word	0x0801c38a

08017d20 <__sfputc_r>:
 8017d20:	6893      	ldr	r3, [r2, #8]
 8017d22:	3b01      	subs	r3, #1
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	b410      	push	{r4}
 8017d28:	6093      	str	r3, [r2, #8]
 8017d2a:	da08      	bge.n	8017d3e <__sfputc_r+0x1e>
 8017d2c:	6994      	ldr	r4, [r2, #24]
 8017d2e:	42a3      	cmp	r3, r4
 8017d30:	db01      	blt.n	8017d36 <__sfputc_r+0x16>
 8017d32:	290a      	cmp	r1, #10
 8017d34:	d103      	bne.n	8017d3e <__sfputc_r+0x1e>
 8017d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d3a:	f000 bb73 	b.w	8018424 <__swbuf_r>
 8017d3e:	6813      	ldr	r3, [r2, #0]
 8017d40:	1c58      	adds	r0, r3, #1
 8017d42:	6010      	str	r0, [r2, #0]
 8017d44:	7019      	strb	r1, [r3, #0]
 8017d46:	4608      	mov	r0, r1
 8017d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d4c:	4770      	bx	lr

08017d4e <__sfputs_r>:
 8017d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d50:	4606      	mov	r6, r0
 8017d52:	460f      	mov	r7, r1
 8017d54:	4614      	mov	r4, r2
 8017d56:	18d5      	adds	r5, r2, r3
 8017d58:	42ac      	cmp	r4, r5
 8017d5a:	d101      	bne.n	8017d60 <__sfputs_r+0x12>
 8017d5c:	2000      	movs	r0, #0
 8017d5e:	e007      	b.n	8017d70 <__sfputs_r+0x22>
 8017d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d64:	463a      	mov	r2, r7
 8017d66:	4630      	mov	r0, r6
 8017d68:	f7ff ffda 	bl	8017d20 <__sfputc_r>
 8017d6c:	1c43      	adds	r3, r0, #1
 8017d6e:	d1f3      	bne.n	8017d58 <__sfputs_r+0xa>
 8017d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d74 <_vfiprintf_r>:
 8017d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d78:	460d      	mov	r5, r1
 8017d7a:	b09d      	sub	sp, #116	; 0x74
 8017d7c:	4614      	mov	r4, r2
 8017d7e:	4698      	mov	r8, r3
 8017d80:	4606      	mov	r6, r0
 8017d82:	b118      	cbz	r0, 8017d8c <_vfiprintf_r+0x18>
 8017d84:	6a03      	ldr	r3, [r0, #32]
 8017d86:	b90b      	cbnz	r3, 8017d8c <_vfiprintf_r+0x18>
 8017d88:	f7fe fbb2 	bl	80164f0 <__sinit>
 8017d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d8e:	07d9      	lsls	r1, r3, #31
 8017d90:	d405      	bmi.n	8017d9e <_vfiprintf_r+0x2a>
 8017d92:	89ab      	ldrh	r3, [r5, #12]
 8017d94:	059a      	lsls	r2, r3, #22
 8017d96:	d402      	bmi.n	8017d9e <_vfiprintf_r+0x2a>
 8017d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d9a:	f7fe fd2a 	bl	80167f2 <__retarget_lock_acquire_recursive>
 8017d9e:	89ab      	ldrh	r3, [r5, #12]
 8017da0:	071b      	lsls	r3, r3, #28
 8017da2:	d501      	bpl.n	8017da8 <_vfiprintf_r+0x34>
 8017da4:	692b      	ldr	r3, [r5, #16]
 8017da6:	b99b      	cbnz	r3, 8017dd0 <_vfiprintf_r+0x5c>
 8017da8:	4629      	mov	r1, r5
 8017daa:	4630      	mov	r0, r6
 8017dac:	f000 fb78 	bl	80184a0 <__swsetup_r>
 8017db0:	b170      	cbz	r0, 8017dd0 <_vfiprintf_r+0x5c>
 8017db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017db4:	07dc      	lsls	r4, r3, #31
 8017db6:	d504      	bpl.n	8017dc2 <_vfiprintf_r+0x4e>
 8017db8:	f04f 30ff 	mov.w	r0, #4294967295
 8017dbc:	b01d      	add	sp, #116	; 0x74
 8017dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dc2:	89ab      	ldrh	r3, [r5, #12]
 8017dc4:	0598      	lsls	r0, r3, #22
 8017dc6:	d4f7      	bmi.n	8017db8 <_vfiprintf_r+0x44>
 8017dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017dca:	f7fe fd13 	bl	80167f4 <__retarget_lock_release_recursive>
 8017dce:	e7f3      	b.n	8017db8 <_vfiprintf_r+0x44>
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8017dd4:	2320      	movs	r3, #32
 8017dd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8017dde:	2330      	movs	r3, #48	; 0x30
 8017de0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017f94 <_vfiprintf_r+0x220>
 8017de4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017de8:	f04f 0901 	mov.w	r9, #1
 8017dec:	4623      	mov	r3, r4
 8017dee:	469a      	mov	sl, r3
 8017df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017df4:	b10a      	cbz	r2, 8017dfa <_vfiprintf_r+0x86>
 8017df6:	2a25      	cmp	r2, #37	; 0x25
 8017df8:	d1f9      	bne.n	8017dee <_vfiprintf_r+0x7a>
 8017dfa:	ebba 0b04 	subs.w	fp, sl, r4
 8017dfe:	d00b      	beq.n	8017e18 <_vfiprintf_r+0xa4>
 8017e00:	465b      	mov	r3, fp
 8017e02:	4622      	mov	r2, r4
 8017e04:	4629      	mov	r1, r5
 8017e06:	4630      	mov	r0, r6
 8017e08:	f7ff ffa1 	bl	8017d4e <__sfputs_r>
 8017e0c:	3001      	adds	r0, #1
 8017e0e:	f000 80a9 	beq.w	8017f64 <_vfiprintf_r+0x1f0>
 8017e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e14:	445a      	add	r2, fp
 8017e16:	9209      	str	r2, [sp, #36]	; 0x24
 8017e18:	f89a 3000 	ldrb.w	r3, [sl]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	f000 80a1 	beq.w	8017f64 <_vfiprintf_r+0x1f0>
 8017e22:	2300      	movs	r3, #0
 8017e24:	f04f 32ff 	mov.w	r2, #4294967295
 8017e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e2c:	f10a 0a01 	add.w	sl, sl, #1
 8017e30:	9304      	str	r3, [sp, #16]
 8017e32:	9307      	str	r3, [sp, #28]
 8017e34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e38:	931a      	str	r3, [sp, #104]	; 0x68
 8017e3a:	4654      	mov	r4, sl
 8017e3c:	2205      	movs	r2, #5
 8017e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e42:	4854      	ldr	r0, [pc, #336]	; (8017f94 <_vfiprintf_r+0x220>)
 8017e44:	f7e8 f9e4 	bl	8000210 <memchr>
 8017e48:	9a04      	ldr	r2, [sp, #16]
 8017e4a:	b9d8      	cbnz	r0, 8017e84 <_vfiprintf_r+0x110>
 8017e4c:	06d1      	lsls	r1, r2, #27
 8017e4e:	bf44      	itt	mi
 8017e50:	2320      	movmi	r3, #32
 8017e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e56:	0713      	lsls	r3, r2, #28
 8017e58:	bf44      	itt	mi
 8017e5a:	232b      	movmi	r3, #43	; 0x2b
 8017e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e60:	f89a 3000 	ldrb.w	r3, [sl]
 8017e64:	2b2a      	cmp	r3, #42	; 0x2a
 8017e66:	d015      	beq.n	8017e94 <_vfiprintf_r+0x120>
 8017e68:	9a07      	ldr	r2, [sp, #28]
 8017e6a:	4654      	mov	r4, sl
 8017e6c:	2000      	movs	r0, #0
 8017e6e:	f04f 0c0a 	mov.w	ip, #10
 8017e72:	4621      	mov	r1, r4
 8017e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e78:	3b30      	subs	r3, #48	; 0x30
 8017e7a:	2b09      	cmp	r3, #9
 8017e7c:	d94d      	bls.n	8017f1a <_vfiprintf_r+0x1a6>
 8017e7e:	b1b0      	cbz	r0, 8017eae <_vfiprintf_r+0x13a>
 8017e80:	9207      	str	r2, [sp, #28]
 8017e82:	e014      	b.n	8017eae <_vfiprintf_r+0x13a>
 8017e84:	eba0 0308 	sub.w	r3, r0, r8
 8017e88:	fa09 f303 	lsl.w	r3, r9, r3
 8017e8c:	4313      	orrs	r3, r2
 8017e8e:	9304      	str	r3, [sp, #16]
 8017e90:	46a2      	mov	sl, r4
 8017e92:	e7d2      	b.n	8017e3a <_vfiprintf_r+0xc6>
 8017e94:	9b03      	ldr	r3, [sp, #12]
 8017e96:	1d19      	adds	r1, r3, #4
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	9103      	str	r1, [sp, #12]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	bfbb      	ittet	lt
 8017ea0:	425b      	neglt	r3, r3
 8017ea2:	f042 0202 	orrlt.w	r2, r2, #2
 8017ea6:	9307      	strge	r3, [sp, #28]
 8017ea8:	9307      	strlt	r3, [sp, #28]
 8017eaa:	bfb8      	it	lt
 8017eac:	9204      	strlt	r2, [sp, #16]
 8017eae:	7823      	ldrb	r3, [r4, #0]
 8017eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8017eb2:	d10c      	bne.n	8017ece <_vfiprintf_r+0x15a>
 8017eb4:	7863      	ldrb	r3, [r4, #1]
 8017eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8017eb8:	d134      	bne.n	8017f24 <_vfiprintf_r+0x1b0>
 8017eba:	9b03      	ldr	r3, [sp, #12]
 8017ebc:	1d1a      	adds	r2, r3, #4
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	9203      	str	r2, [sp, #12]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	bfb8      	it	lt
 8017ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8017eca:	3402      	adds	r4, #2
 8017ecc:	9305      	str	r3, [sp, #20]
 8017ece:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017fa4 <_vfiprintf_r+0x230>
 8017ed2:	7821      	ldrb	r1, [r4, #0]
 8017ed4:	2203      	movs	r2, #3
 8017ed6:	4650      	mov	r0, sl
 8017ed8:	f7e8 f99a 	bl	8000210 <memchr>
 8017edc:	b138      	cbz	r0, 8017eee <_vfiprintf_r+0x17a>
 8017ede:	9b04      	ldr	r3, [sp, #16]
 8017ee0:	eba0 000a 	sub.w	r0, r0, sl
 8017ee4:	2240      	movs	r2, #64	; 0x40
 8017ee6:	4082      	lsls	r2, r0
 8017ee8:	4313      	orrs	r3, r2
 8017eea:	3401      	adds	r4, #1
 8017eec:	9304      	str	r3, [sp, #16]
 8017eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ef2:	4829      	ldr	r0, [pc, #164]	; (8017f98 <_vfiprintf_r+0x224>)
 8017ef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ef8:	2206      	movs	r2, #6
 8017efa:	f7e8 f989 	bl	8000210 <memchr>
 8017efe:	2800      	cmp	r0, #0
 8017f00:	d03f      	beq.n	8017f82 <_vfiprintf_r+0x20e>
 8017f02:	4b26      	ldr	r3, [pc, #152]	; (8017f9c <_vfiprintf_r+0x228>)
 8017f04:	bb1b      	cbnz	r3, 8017f4e <_vfiprintf_r+0x1da>
 8017f06:	9b03      	ldr	r3, [sp, #12]
 8017f08:	3307      	adds	r3, #7
 8017f0a:	f023 0307 	bic.w	r3, r3, #7
 8017f0e:	3308      	adds	r3, #8
 8017f10:	9303      	str	r3, [sp, #12]
 8017f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f14:	443b      	add	r3, r7
 8017f16:	9309      	str	r3, [sp, #36]	; 0x24
 8017f18:	e768      	b.n	8017dec <_vfiprintf_r+0x78>
 8017f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f1e:	460c      	mov	r4, r1
 8017f20:	2001      	movs	r0, #1
 8017f22:	e7a6      	b.n	8017e72 <_vfiprintf_r+0xfe>
 8017f24:	2300      	movs	r3, #0
 8017f26:	3401      	adds	r4, #1
 8017f28:	9305      	str	r3, [sp, #20]
 8017f2a:	4619      	mov	r1, r3
 8017f2c:	f04f 0c0a 	mov.w	ip, #10
 8017f30:	4620      	mov	r0, r4
 8017f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f36:	3a30      	subs	r2, #48	; 0x30
 8017f38:	2a09      	cmp	r2, #9
 8017f3a:	d903      	bls.n	8017f44 <_vfiprintf_r+0x1d0>
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d0c6      	beq.n	8017ece <_vfiprintf_r+0x15a>
 8017f40:	9105      	str	r1, [sp, #20]
 8017f42:	e7c4      	b.n	8017ece <_vfiprintf_r+0x15a>
 8017f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f48:	4604      	mov	r4, r0
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	e7f0      	b.n	8017f30 <_vfiprintf_r+0x1bc>
 8017f4e:	ab03      	add	r3, sp, #12
 8017f50:	9300      	str	r3, [sp, #0]
 8017f52:	462a      	mov	r2, r5
 8017f54:	4b12      	ldr	r3, [pc, #72]	; (8017fa0 <_vfiprintf_r+0x22c>)
 8017f56:	a904      	add	r1, sp, #16
 8017f58:	4630      	mov	r0, r6
 8017f5a:	f3af 8000 	nop.w
 8017f5e:	4607      	mov	r7, r0
 8017f60:	1c78      	adds	r0, r7, #1
 8017f62:	d1d6      	bne.n	8017f12 <_vfiprintf_r+0x19e>
 8017f64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f66:	07d9      	lsls	r1, r3, #31
 8017f68:	d405      	bmi.n	8017f76 <_vfiprintf_r+0x202>
 8017f6a:	89ab      	ldrh	r3, [r5, #12]
 8017f6c:	059a      	lsls	r2, r3, #22
 8017f6e:	d402      	bmi.n	8017f76 <_vfiprintf_r+0x202>
 8017f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f72:	f7fe fc3f 	bl	80167f4 <__retarget_lock_release_recursive>
 8017f76:	89ab      	ldrh	r3, [r5, #12]
 8017f78:	065b      	lsls	r3, r3, #25
 8017f7a:	f53f af1d 	bmi.w	8017db8 <_vfiprintf_r+0x44>
 8017f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f80:	e71c      	b.n	8017dbc <_vfiprintf_r+0x48>
 8017f82:	ab03      	add	r3, sp, #12
 8017f84:	9300      	str	r3, [sp, #0]
 8017f86:	462a      	mov	r2, r5
 8017f88:	4b05      	ldr	r3, [pc, #20]	; (8017fa0 <_vfiprintf_r+0x22c>)
 8017f8a:	a904      	add	r1, sp, #16
 8017f8c:	4630      	mov	r0, r6
 8017f8e:	f000 f879 	bl	8018084 <_printf_i>
 8017f92:	e7e4      	b.n	8017f5e <_vfiprintf_r+0x1ea>
 8017f94:	0801c384 	.word	0x0801c384
 8017f98:	0801c38e 	.word	0x0801c38e
 8017f9c:	00000000 	.word	0x00000000
 8017fa0:	08017d4f 	.word	0x08017d4f
 8017fa4:	0801c38a 	.word	0x0801c38a

08017fa8 <_printf_common>:
 8017fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fac:	4616      	mov	r6, r2
 8017fae:	4699      	mov	r9, r3
 8017fb0:	688a      	ldr	r2, [r1, #8]
 8017fb2:	690b      	ldr	r3, [r1, #16]
 8017fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017fb8:	4293      	cmp	r3, r2
 8017fba:	bfb8      	it	lt
 8017fbc:	4613      	movlt	r3, r2
 8017fbe:	6033      	str	r3, [r6, #0]
 8017fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017fc4:	4607      	mov	r7, r0
 8017fc6:	460c      	mov	r4, r1
 8017fc8:	b10a      	cbz	r2, 8017fce <_printf_common+0x26>
 8017fca:	3301      	adds	r3, #1
 8017fcc:	6033      	str	r3, [r6, #0]
 8017fce:	6823      	ldr	r3, [r4, #0]
 8017fd0:	0699      	lsls	r1, r3, #26
 8017fd2:	bf42      	ittt	mi
 8017fd4:	6833      	ldrmi	r3, [r6, #0]
 8017fd6:	3302      	addmi	r3, #2
 8017fd8:	6033      	strmi	r3, [r6, #0]
 8017fda:	6825      	ldr	r5, [r4, #0]
 8017fdc:	f015 0506 	ands.w	r5, r5, #6
 8017fe0:	d106      	bne.n	8017ff0 <_printf_common+0x48>
 8017fe2:	f104 0a19 	add.w	sl, r4, #25
 8017fe6:	68e3      	ldr	r3, [r4, #12]
 8017fe8:	6832      	ldr	r2, [r6, #0]
 8017fea:	1a9b      	subs	r3, r3, r2
 8017fec:	42ab      	cmp	r3, r5
 8017fee:	dc26      	bgt.n	801803e <_printf_common+0x96>
 8017ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ff4:	1e13      	subs	r3, r2, #0
 8017ff6:	6822      	ldr	r2, [r4, #0]
 8017ff8:	bf18      	it	ne
 8017ffa:	2301      	movne	r3, #1
 8017ffc:	0692      	lsls	r2, r2, #26
 8017ffe:	d42b      	bmi.n	8018058 <_printf_common+0xb0>
 8018000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018004:	4649      	mov	r1, r9
 8018006:	4638      	mov	r0, r7
 8018008:	47c0      	blx	r8
 801800a:	3001      	adds	r0, #1
 801800c:	d01e      	beq.n	801804c <_printf_common+0xa4>
 801800e:	6823      	ldr	r3, [r4, #0]
 8018010:	6922      	ldr	r2, [r4, #16]
 8018012:	f003 0306 	and.w	r3, r3, #6
 8018016:	2b04      	cmp	r3, #4
 8018018:	bf02      	ittt	eq
 801801a:	68e5      	ldreq	r5, [r4, #12]
 801801c:	6833      	ldreq	r3, [r6, #0]
 801801e:	1aed      	subeq	r5, r5, r3
 8018020:	68a3      	ldr	r3, [r4, #8]
 8018022:	bf0c      	ite	eq
 8018024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018028:	2500      	movne	r5, #0
 801802a:	4293      	cmp	r3, r2
 801802c:	bfc4      	itt	gt
 801802e:	1a9b      	subgt	r3, r3, r2
 8018030:	18ed      	addgt	r5, r5, r3
 8018032:	2600      	movs	r6, #0
 8018034:	341a      	adds	r4, #26
 8018036:	42b5      	cmp	r5, r6
 8018038:	d11a      	bne.n	8018070 <_printf_common+0xc8>
 801803a:	2000      	movs	r0, #0
 801803c:	e008      	b.n	8018050 <_printf_common+0xa8>
 801803e:	2301      	movs	r3, #1
 8018040:	4652      	mov	r2, sl
 8018042:	4649      	mov	r1, r9
 8018044:	4638      	mov	r0, r7
 8018046:	47c0      	blx	r8
 8018048:	3001      	adds	r0, #1
 801804a:	d103      	bne.n	8018054 <_printf_common+0xac>
 801804c:	f04f 30ff 	mov.w	r0, #4294967295
 8018050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018054:	3501      	adds	r5, #1
 8018056:	e7c6      	b.n	8017fe6 <_printf_common+0x3e>
 8018058:	18e1      	adds	r1, r4, r3
 801805a:	1c5a      	adds	r2, r3, #1
 801805c:	2030      	movs	r0, #48	; 0x30
 801805e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018062:	4422      	add	r2, r4
 8018064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801806c:	3302      	adds	r3, #2
 801806e:	e7c7      	b.n	8018000 <_printf_common+0x58>
 8018070:	2301      	movs	r3, #1
 8018072:	4622      	mov	r2, r4
 8018074:	4649      	mov	r1, r9
 8018076:	4638      	mov	r0, r7
 8018078:	47c0      	blx	r8
 801807a:	3001      	adds	r0, #1
 801807c:	d0e6      	beq.n	801804c <_printf_common+0xa4>
 801807e:	3601      	adds	r6, #1
 8018080:	e7d9      	b.n	8018036 <_printf_common+0x8e>
	...

08018084 <_printf_i>:
 8018084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018088:	7e0f      	ldrb	r7, [r1, #24]
 801808a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801808c:	2f78      	cmp	r7, #120	; 0x78
 801808e:	4691      	mov	r9, r2
 8018090:	4680      	mov	r8, r0
 8018092:	460c      	mov	r4, r1
 8018094:	469a      	mov	sl, r3
 8018096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801809a:	d807      	bhi.n	80180ac <_printf_i+0x28>
 801809c:	2f62      	cmp	r7, #98	; 0x62
 801809e:	d80a      	bhi.n	80180b6 <_printf_i+0x32>
 80180a0:	2f00      	cmp	r7, #0
 80180a2:	f000 80d4 	beq.w	801824e <_printf_i+0x1ca>
 80180a6:	2f58      	cmp	r7, #88	; 0x58
 80180a8:	f000 80c0 	beq.w	801822c <_printf_i+0x1a8>
 80180ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80180b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80180b4:	e03a      	b.n	801812c <_printf_i+0xa8>
 80180b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80180ba:	2b15      	cmp	r3, #21
 80180bc:	d8f6      	bhi.n	80180ac <_printf_i+0x28>
 80180be:	a101      	add	r1, pc, #4	; (adr r1, 80180c4 <_printf_i+0x40>)
 80180c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80180c4:	0801811d 	.word	0x0801811d
 80180c8:	08018131 	.word	0x08018131
 80180cc:	080180ad 	.word	0x080180ad
 80180d0:	080180ad 	.word	0x080180ad
 80180d4:	080180ad 	.word	0x080180ad
 80180d8:	080180ad 	.word	0x080180ad
 80180dc:	08018131 	.word	0x08018131
 80180e0:	080180ad 	.word	0x080180ad
 80180e4:	080180ad 	.word	0x080180ad
 80180e8:	080180ad 	.word	0x080180ad
 80180ec:	080180ad 	.word	0x080180ad
 80180f0:	08018235 	.word	0x08018235
 80180f4:	0801815d 	.word	0x0801815d
 80180f8:	080181ef 	.word	0x080181ef
 80180fc:	080180ad 	.word	0x080180ad
 8018100:	080180ad 	.word	0x080180ad
 8018104:	08018257 	.word	0x08018257
 8018108:	080180ad 	.word	0x080180ad
 801810c:	0801815d 	.word	0x0801815d
 8018110:	080180ad 	.word	0x080180ad
 8018114:	080180ad 	.word	0x080180ad
 8018118:	080181f7 	.word	0x080181f7
 801811c:	682b      	ldr	r3, [r5, #0]
 801811e:	1d1a      	adds	r2, r3, #4
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	602a      	str	r2, [r5, #0]
 8018124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801812c:	2301      	movs	r3, #1
 801812e:	e09f      	b.n	8018270 <_printf_i+0x1ec>
 8018130:	6820      	ldr	r0, [r4, #0]
 8018132:	682b      	ldr	r3, [r5, #0]
 8018134:	0607      	lsls	r7, r0, #24
 8018136:	f103 0104 	add.w	r1, r3, #4
 801813a:	6029      	str	r1, [r5, #0]
 801813c:	d501      	bpl.n	8018142 <_printf_i+0xbe>
 801813e:	681e      	ldr	r6, [r3, #0]
 8018140:	e003      	b.n	801814a <_printf_i+0xc6>
 8018142:	0646      	lsls	r6, r0, #25
 8018144:	d5fb      	bpl.n	801813e <_printf_i+0xba>
 8018146:	f9b3 6000 	ldrsh.w	r6, [r3]
 801814a:	2e00      	cmp	r6, #0
 801814c:	da03      	bge.n	8018156 <_printf_i+0xd2>
 801814e:	232d      	movs	r3, #45	; 0x2d
 8018150:	4276      	negs	r6, r6
 8018152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018156:	485a      	ldr	r0, [pc, #360]	; (80182c0 <_printf_i+0x23c>)
 8018158:	230a      	movs	r3, #10
 801815a:	e012      	b.n	8018182 <_printf_i+0xfe>
 801815c:	682b      	ldr	r3, [r5, #0]
 801815e:	6820      	ldr	r0, [r4, #0]
 8018160:	1d19      	adds	r1, r3, #4
 8018162:	6029      	str	r1, [r5, #0]
 8018164:	0605      	lsls	r5, r0, #24
 8018166:	d501      	bpl.n	801816c <_printf_i+0xe8>
 8018168:	681e      	ldr	r6, [r3, #0]
 801816a:	e002      	b.n	8018172 <_printf_i+0xee>
 801816c:	0641      	lsls	r1, r0, #25
 801816e:	d5fb      	bpl.n	8018168 <_printf_i+0xe4>
 8018170:	881e      	ldrh	r6, [r3, #0]
 8018172:	4853      	ldr	r0, [pc, #332]	; (80182c0 <_printf_i+0x23c>)
 8018174:	2f6f      	cmp	r7, #111	; 0x6f
 8018176:	bf0c      	ite	eq
 8018178:	2308      	moveq	r3, #8
 801817a:	230a      	movne	r3, #10
 801817c:	2100      	movs	r1, #0
 801817e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018182:	6865      	ldr	r5, [r4, #4]
 8018184:	60a5      	str	r5, [r4, #8]
 8018186:	2d00      	cmp	r5, #0
 8018188:	bfa2      	ittt	ge
 801818a:	6821      	ldrge	r1, [r4, #0]
 801818c:	f021 0104 	bicge.w	r1, r1, #4
 8018190:	6021      	strge	r1, [r4, #0]
 8018192:	b90e      	cbnz	r6, 8018198 <_printf_i+0x114>
 8018194:	2d00      	cmp	r5, #0
 8018196:	d04b      	beq.n	8018230 <_printf_i+0x1ac>
 8018198:	4615      	mov	r5, r2
 801819a:	fbb6 f1f3 	udiv	r1, r6, r3
 801819e:	fb03 6711 	mls	r7, r3, r1, r6
 80181a2:	5dc7      	ldrb	r7, [r0, r7]
 80181a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80181a8:	4637      	mov	r7, r6
 80181aa:	42bb      	cmp	r3, r7
 80181ac:	460e      	mov	r6, r1
 80181ae:	d9f4      	bls.n	801819a <_printf_i+0x116>
 80181b0:	2b08      	cmp	r3, #8
 80181b2:	d10b      	bne.n	80181cc <_printf_i+0x148>
 80181b4:	6823      	ldr	r3, [r4, #0]
 80181b6:	07de      	lsls	r6, r3, #31
 80181b8:	d508      	bpl.n	80181cc <_printf_i+0x148>
 80181ba:	6923      	ldr	r3, [r4, #16]
 80181bc:	6861      	ldr	r1, [r4, #4]
 80181be:	4299      	cmp	r1, r3
 80181c0:	bfde      	ittt	le
 80181c2:	2330      	movle	r3, #48	; 0x30
 80181c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80181c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80181cc:	1b52      	subs	r2, r2, r5
 80181ce:	6122      	str	r2, [r4, #16]
 80181d0:	f8cd a000 	str.w	sl, [sp]
 80181d4:	464b      	mov	r3, r9
 80181d6:	aa03      	add	r2, sp, #12
 80181d8:	4621      	mov	r1, r4
 80181da:	4640      	mov	r0, r8
 80181dc:	f7ff fee4 	bl	8017fa8 <_printf_common>
 80181e0:	3001      	adds	r0, #1
 80181e2:	d14a      	bne.n	801827a <_printf_i+0x1f6>
 80181e4:	f04f 30ff 	mov.w	r0, #4294967295
 80181e8:	b004      	add	sp, #16
 80181ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ee:	6823      	ldr	r3, [r4, #0]
 80181f0:	f043 0320 	orr.w	r3, r3, #32
 80181f4:	6023      	str	r3, [r4, #0]
 80181f6:	4833      	ldr	r0, [pc, #204]	; (80182c4 <_printf_i+0x240>)
 80181f8:	2778      	movs	r7, #120	; 0x78
 80181fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80181fe:	6823      	ldr	r3, [r4, #0]
 8018200:	6829      	ldr	r1, [r5, #0]
 8018202:	061f      	lsls	r7, r3, #24
 8018204:	f851 6b04 	ldr.w	r6, [r1], #4
 8018208:	d402      	bmi.n	8018210 <_printf_i+0x18c>
 801820a:	065f      	lsls	r7, r3, #25
 801820c:	bf48      	it	mi
 801820e:	b2b6      	uxthmi	r6, r6
 8018210:	07df      	lsls	r7, r3, #31
 8018212:	bf48      	it	mi
 8018214:	f043 0320 	orrmi.w	r3, r3, #32
 8018218:	6029      	str	r1, [r5, #0]
 801821a:	bf48      	it	mi
 801821c:	6023      	strmi	r3, [r4, #0]
 801821e:	b91e      	cbnz	r6, 8018228 <_printf_i+0x1a4>
 8018220:	6823      	ldr	r3, [r4, #0]
 8018222:	f023 0320 	bic.w	r3, r3, #32
 8018226:	6023      	str	r3, [r4, #0]
 8018228:	2310      	movs	r3, #16
 801822a:	e7a7      	b.n	801817c <_printf_i+0xf8>
 801822c:	4824      	ldr	r0, [pc, #144]	; (80182c0 <_printf_i+0x23c>)
 801822e:	e7e4      	b.n	80181fa <_printf_i+0x176>
 8018230:	4615      	mov	r5, r2
 8018232:	e7bd      	b.n	80181b0 <_printf_i+0x12c>
 8018234:	682b      	ldr	r3, [r5, #0]
 8018236:	6826      	ldr	r6, [r4, #0]
 8018238:	6961      	ldr	r1, [r4, #20]
 801823a:	1d18      	adds	r0, r3, #4
 801823c:	6028      	str	r0, [r5, #0]
 801823e:	0635      	lsls	r5, r6, #24
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	d501      	bpl.n	8018248 <_printf_i+0x1c4>
 8018244:	6019      	str	r1, [r3, #0]
 8018246:	e002      	b.n	801824e <_printf_i+0x1ca>
 8018248:	0670      	lsls	r0, r6, #25
 801824a:	d5fb      	bpl.n	8018244 <_printf_i+0x1c0>
 801824c:	8019      	strh	r1, [r3, #0]
 801824e:	2300      	movs	r3, #0
 8018250:	6123      	str	r3, [r4, #16]
 8018252:	4615      	mov	r5, r2
 8018254:	e7bc      	b.n	80181d0 <_printf_i+0x14c>
 8018256:	682b      	ldr	r3, [r5, #0]
 8018258:	1d1a      	adds	r2, r3, #4
 801825a:	602a      	str	r2, [r5, #0]
 801825c:	681d      	ldr	r5, [r3, #0]
 801825e:	6862      	ldr	r2, [r4, #4]
 8018260:	2100      	movs	r1, #0
 8018262:	4628      	mov	r0, r5
 8018264:	f7e7 ffd4 	bl	8000210 <memchr>
 8018268:	b108      	cbz	r0, 801826e <_printf_i+0x1ea>
 801826a:	1b40      	subs	r0, r0, r5
 801826c:	6060      	str	r0, [r4, #4]
 801826e:	6863      	ldr	r3, [r4, #4]
 8018270:	6123      	str	r3, [r4, #16]
 8018272:	2300      	movs	r3, #0
 8018274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018278:	e7aa      	b.n	80181d0 <_printf_i+0x14c>
 801827a:	6923      	ldr	r3, [r4, #16]
 801827c:	462a      	mov	r2, r5
 801827e:	4649      	mov	r1, r9
 8018280:	4640      	mov	r0, r8
 8018282:	47d0      	blx	sl
 8018284:	3001      	adds	r0, #1
 8018286:	d0ad      	beq.n	80181e4 <_printf_i+0x160>
 8018288:	6823      	ldr	r3, [r4, #0]
 801828a:	079b      	lsls	r3, r3, #30
 801828c:	d413      	bmi.n	80182b6 <_printf_i+0x232>
 801828e:	68e0      	ldr	r0, [r4, #12]
 8018290:	9b03      	ldr	r3, [sp, #12]
 8018292:	4298      	cmp	r0, r3
 8018294:	bfb8      	it	lt
 8018296:	4618      	movlt	r0, r3
 8018298:	e7a6      	b.n	80181e8 <_printf_i+0x164>
 801829a:	2301      	movs	r3, #1
 801829c:	4632      	mov	r2, r6
 801829e:	4649      	mov	r1, r9
 80182a0:	4640      	mov	r0, r8
 80182a2:	47d0      	blx	sl
 80182a4:	3001      	adds	r0, #1
 80182a6:	d09d      	beq.n	80181e4 <_printf_i+0x160>
 80182a8:	3501      	adds	r5, #1
 80182aa:	68e3      	ldr	r3, [r4, #12]
 80182ac:	9903      	ldr	r1, [sp, #12]
 80182ae:	1a5b      	subs	r3, r3, r1
 80182b0:	42ab      	cmp	r3, r5
 80182b2:	dcf2      	bgt.n	801829a <_printf_i+0x216>
 80182b4:	e7eb      	b.n	801828e <_printf_i+0x20a>
 80182b6:	2500      	movs	r5, #0
 80182b8:	f104 0619 	add.w	r6, r4, #25
 80182bc:	e7f5      	b.n	80182aa <_printf_i+0x226>
 80182be:	bf00      	nop
 80182c0:	0801c395 	.word	0x0801c395
 80182c4:	0801c3a6 	.word	0x0801c3a6

080182c8 <__sflush_r>:
 80182c8:	898a      	ldrh	r2, [r1, #12]
 80182ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ce:	4605      	mov	r5, r0
 80182d0:	0710      	lsls	r0, r2, #28
 80182d2:	460c      	mov	r4, r1
 80182d4:	d458      	bmi.n	8018388 <__sflush_r+0xc0>
 80182d6:	684b      	ldr	r3, [r1, #4]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	dc05      	bgt.n	80182e8 <__sflush_r+0x20>
 80182dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80182de:	2b00      	cmp	r3, #0
 80182e0:	dc02      	bgt.n	80182e8 <__sflush_r+0x20>
 80182e2:	2000      	movs	r0, #0
 80182e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80182ea:	2e00      	cmp	r6, #0
 80182ec:	d0f9      	beq.n	80182e2 <__sflush_r+0x1a>
 80182ee:	2300      	movs	r3, #0
 80182f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80182f4:	682f      	ldr	r7, [r5, #0]
 80182f6:	6a21      	ldr	r1, [r4, #32]
 80182f8:	602b      	str	r3, [r5, #0]
 80182fa:	d032      	beq.n	8018362 <__sflush_r+0x9a>
 80182fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80182fe:	89a3      	ldrh	r3, [r4, #12]
 8018300:	075a      	lsls	r2, r3, #29
 8018302:	d505      	bpl.n	8018310 <__sflush_r+0x48>
 8018304:	6863      	ldr	r3, [r4, #4]
 8018306:	1ac0      	subs	r0, r0, r3
 8018308:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801830a:	b10b      	cbz	r3, 8018310 <__sflush_r+0x48>
 801830c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801830e:	1ac0      	subs	r0, r0, r3
 8018310:	2300      	movs	r3, #0
 8018312:	4602      	mov	r2, r0
 8018314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018316:	6a21      	ldr	r1, [r4, #32]
 8018318:	4628      	mov	r0, r5
 801831a:	47b0      	blx	r6
 801831c:	1c43      	adds	r3, r0, #1
 801831e:	89a3      	ldrh	r3, [r4, #12]
 8018320:	d106      	bne.n	8018330 <__sflush_r+0x68>
 8018322:	6829      	ldr	r1, [r5, #0]
 8018324:	291d      	cmp	r1, #29
 8018326:	d82b      	bhi.n	8018380 <__sflush_r+0xb8>
 8018328:	4a29      	ldr	r2, [pc, #164]	; (80183d0 <__sflush_r+0x108>)
 801832a:	410a      	asrs	r2, r1
 801832c:	07d6      	lsls	r6, r2, #31
 801832e:	d427      	bmi.n	8018380 <__sflush_r+0xb8>
 8018330:	2200      	movs	r2, #0
 8018332:	6062      	str	r2, [r4, #4]
 8018334:	04d9      	lsls	r1, r3, #19
 8018336:	6922      	ldr	r2, [r4, #16]
 8018338:	6022      	str	r2, [r4, #0]
 801833a:	d504      	bpl.n	8018346 <__sflush_r+0x7e>
 801833c:	1c42      	adds	r2, r0, #1
 801833e:	d101      	bne.n	8018344 <__sflush_r+0x7c>
 8018340:	682b      	ldr	r3, [r5, #0]
 8018342:	b903      	cbnz	r3, 8018346 <__sflush_r+0x7e>
 8018344:	6560      	str	r0, [r4, #84]	; 0x54
 8018346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018348:	602f      	str	r7, [r5, #0]
 801834a:	2900      	cmp	r1, #0
 801834c:	d0c9      	beq.n	80182e2 <__sflush_r+0x1a>
 801834e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018352:	4299      	cmp	r1, r3
 8018354:	d002      	beq.n	801835c <__sflush_r+0x94>
 8018356:	4628      	mov	r0, r5
 8018358:	f7fe fa6e 	bl	8016838 <_free_r>
 801835c:	2000      	movs	r0, #0
 801835e:	6360      	str	r0, [r4, #52]	; 0x34
 8018360:	e7c0      	b.n	80182e4 <__sflush_r+0x1c>
 8018362:	2301      	movs	r3, #1
 8018364:	4628      	mov	r0, r5
 8018366:	47b0      	blx	r6
 8018368:	1c41      	adds	r1, r0, #1
 801836a:	d1c8      	bne.n	80182fe <__sflush_r+0x36>
 801836c:	682b      	ldr	r3, [r5, #0]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d0c5      	beq.n	80182fe <__sflush_r+0x36>
 8018372:	2b1d      	cmp	r3, #29
 8018374:	d001      	beq.n	801837a <__sflush_r+0xb2>
 8018376:	2b16      	cmp	r3, #22
 8018378:	d101      	bne.n	801837e <__sflush_r+0xb6>
 801837a:	602f      	str	r7, [r5, #0]
 801837c:	e7b1      	b.n	80182e2 <__sflush_r+0x1a>
 801837e:	89a3      	ldrh	r3, [r4, #12]
 8018380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018384:	81a3      	strh	r3, [r4, #12]
 8018386:	e7ad      	b.n	80182e4 <__sflush_r+0x1c>
 8018388:	690f      	ldr	r7, [r1, #16]
 801838a:	2f00      	cmp	r7, #0
 801838c:	d0a9      	beq.n	80182e2 <__sflush_r+0x1a>
 801838e:	0793      	lsls	r3, r2, #30
 8018390:	680e      	ldr	r6, [r1, #0]
 8018392:	bf08      	it	eq
 8018394:	694b      	ldreq	r3, [r1, #20]
 8018396:	600f      	str	r7, [r1, #0]
 8018398:	bf18      	it	ne
 801839a:	2300      	movne	r3, #0
 801839c:	eba6 0807 	sub.w	r8, r6, r7
 80183a0:	608b      	str	r3, [r1, #8]
 80183a2:	f1b8 0f00 	cmp.w	r8, #0
 80183a6:	dd9c      	ble.n	80182e2 <__sflush_r+0x1a>
 80183a8:	6a21      	ldr	r1, [r4, #32]
 80183aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80183ac:	4643      	mov	r3, r8
 80183ae:	463a      	mov	r2, r7
 80183b0:	4628      	mov	r0, r5
 80183b2:	47b0      	blx	r6
 80183b4:	2800      	cmp	r0, #0
 80183b6:	dc06      	bgt.n	80183c6 <__sflush_r+0xfe>
 80183b8:	89a3      	ldrh	r3, [r4, #12]
 80183ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183be:	81a3      	strh	r3, [r4, #12]
 80183c0:	f04f 30ff 	mov.w	r0, #4294967295
 80183c4:	e78e      	b.n	80182e4 <__sflush_r+0x1c>
 80183c6:	4407      	add	r7, r0
 80183c8:	eba8 0800 	sub.w	r8, r8, r0
 80183cc:	e7e9      	b.n	80183a2 <__sflush_r+0xda>
 80183ce:	bf00      	nop
 80183d0:	dfbffffe 	.word	0xdfbffffe

080183d4 <_fflush_r>:
 80183d4:	b538      	push	{r3, r4, r5, lr}
 80183d6:	690b      	ldr	r3, [r1, #16]
 80183d8:	4605      	mov	r5, r0
 80183da:	460c      	mov	r4, r1
 80183dc:	b913      	cbnz	r3, 80183e4 <_fflush_r+0x10>
 80183de:	2500      	movs	r5, #0
 80183e0:	4628      	mov	r0, r5
 80183e2:	bd38      	pop	{r3, r4, r5, pc}
 80183e4:	b118      	cbz	r0, 80183ee <_fflush_r+0x1a>
 80183e6:	6a03      	ldr	r3, [r0, #32]
 80183e8:	b90b      	cbnz	r3, 80183ee <_fflush_r+0x1a>
 80183ea:	f7fe f881 	bl	80164f0 <__sinit>
 80183ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d0f3      	beq.n	80183de <_fflush_r+0xa>
 80183f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80183f8:	07d0      	lsls	r0, r2, #31
 80183fa:	d404      	bmi.n	8018406 <_fflush_r+0x32>
 80183fc:	0599      	lsls	r1, r3, #22
 80183fe:	d402      	bmi.n	8018406 <_fflush_r+0x32>
 8018400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018402:	f7fe f9f6 	bl	80167f2 <__retarget_lock_acquire_recursive>
 8018406:	4628      	mov	r0, r5
 8018408:	4621      	mov	r1, r4
 801840a:	f7ff ff5d 	bl	80182c8 <__sflush_r>
 801840e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018410:	07da      	lsls	r2, r3, #31
 8018412:	4605      	mov	r5, r0
 8018414:	d4e4      	bmi.n	80183e0 <_fflush_r+0xc>
 8018416:	89a3      	ldrh	r3, [r4, #12]
 8018418:	059b      	lsls	r3, r3, #22
 801841a:	d4e1      	bmi.n	80183e0 <_fflush_r+0xc>
 801841c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801841e:	f7fe f9e9 	bl	80167f4 <__retarget_lock_release_recursive>
 8018422:	e7dd      	b.n	80183e0 <_fflush_r+0xc>

08018424 <__swbuf_r>:
 8018424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018426:	460e      	mov	r6, r1
 8018428:	4614      	mov	r4, r2
 801842a:	4605      	mov	r5, r0
 801842c:	b118      	cbz	r0, 8018436 <__swbuf_r+0x12>
 801842e:	6a03      	ldr	r3, [r0, #32]
 8018430:	b90b      	cbnz	r3, 8018436 <__swbuf_r+0x12>
 8018432:	f7fe f85d 	bl	80164f0 <__sinit>
 8018436:	69a3      	ldr	r3, [r4, #24]
 8018438:	60a3      	str	r3, [r4, #8]
 801843a:	89a3      	ldrh	r3, [r4, #12]
 801843c:	071a      	lsls	r2, r3, #28
 801843e:	d525      	bpl.n	801848c <__swbuf_r+0x68>
 8018440:	6923      	ldr	r3, [r4, #16]
 8018442:	b31b      	cbz	r3, 801848c <__swbuf_r+0x68>
 8018444:	6823      	ldr	r3, [r4, #0]
 8018446:	6922      	ldr	r2, [r4, #16]
 8018448:	1a98      	subs	r0, r3, r2
 801844a:	6963      	ldr	r3, [r4, #20]
 801844c:	b2f6      	uxtb	r6, r6
 801844e:	4283      	cmp	r3, r0
 8018450:	4637      	mov	r7, r6
 8018452:	dc04      	bgt.n	801845e <__swbuf_r+0x3a>
 8018454:	4621      	mov	r1, r4
 8018456:	4628      	mov	r0, r5
 8018458:	f7ff ffbc 	bl	80183d4 <_fflush_r>
 801845c:	b9e0      	cbnz	r0, 8018498 <__swbuf_r+0x74>
 801845e:	68a3      	ldr	r3, [r4, #8]
 8018460:	3b01      	subs	r3, #1
 8018462:	60a3      	str	r3, [r4, #8]
 8018464:	6823      	ldr	r3, [r4, #0]
 8018466:	1c5a      	adds	r2, r3, #1
 8018468:	6022      	str	r2, [r4, #0]
 801846a:	701e      	strb	r6, [r3, #0]
 801846c:	6962      	ldr	r2, [r4, #20]
 801846e:	1c43      	adds	r3, r0, #1
 8018470:	429a      	cmp	r2, r3
 8018472:	d004      	beq.n	801847e <__swbuf_r+0x5a>
 8018474:	89a3      	ldrh	r3, [r4, #12]
 8018476:	07db      	lsls	r3, r3, #31
 8018478:	d506      	bpl.n	8018488 <__swbuf_r+0x64>
 801847a:	2e0a      	cmp	r6, #10
 801847c:	d104      	bne.n	8018488 <__swbuf_r+0x64>
 801847e:	4621      	mov	r1, r4
 8018480:	4628      	mov	r0, r5
 8018482:	f7ff ffa7 	bl	80183d4 <_fflush_r>
 8018486:	b938      	cbnz	r0, 8018498 <__swbuf_r+0x74>
 8018488:	4638      	mov	r0, r7
 801848a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801848c:	4621      	mov	r1, r4
 801848e:	4628      	mov	r0, r5
 8018490:	f000 f806 	bl	80184a0 <__swsetup_r>
 8018494:	2800      	cmp	r0, #0
 8018496:	d0d5      	beq.n	8018444 <__swbuf_r+0x20>
 8018498:	f04f 37ff 	mov.w	r7, #4294967295
 801849c:	e7f4      	b.n	8018488 <__swbuf_r+0x64>
	...

080184a0 <__swsetup_r>:
 80184a0:	b538      	push	{r3, r4, r5, lr}
 80184a2:	4b2a      	ldr	r3, [pc, #168]	; (801854c <__swsetup_r+0xac>)
 80184a4:	4605      	mov	r5, r0
 80184a6:	6818      	ldr	r0, [r3, #0]
 80184a8:	460c      	mov	r4, r1
 80184aa:	b118      	cbz	r0, 80184b4 <__swsetup_r+0x14>
 80184ac:	6a03      	ldr	r3, [r0, #32]
 80184ae:	b90b      	cbnz	r3, 80184b4 <__swsetup_r+0x14>
 80184b0:	f7fe f81e 	bl	80164f0 <__sinit>
 80184b4:	89a3      	ldrh	r3, [r4, #12]
 80184b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80184ba:	0718      	lsls	r0, r3, #28
 80184bc:	d422      	bmi.n	8018504 <__swsetup_r+0x64>
 80184be:	06d9      	lsls	r1, r3, #27
 80184c0:	d407      	bmi.n	80184d2 <__swsetup_r+0x32>
 80184c2:	2309      	movs	r3, #9
 80184c4:	602b      	str	r3, [r5, #0]
 80184c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80184ca:	81a3      	strh	r3, [r4, #12]
 80184cc:	f04f 30ff 	mov.w	r0, #4294967295
 80184d0:	e034      	b.n	801853c <__swsetup_r+0x9c>
 80184d2:	0758      	lsls	r0, r3, #29
 80184d4:	d512      	bpl.n	80184fc <__swsetup_r+0x5c>
 80184d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184d8:	b141      	cbz	r1, 80184ec <__swsetup_r+0x4c>
 80184da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184de:	4299      	cmp	r1, r3
 80184e0:	d002      	beq.n	80184e8 <__swsetup_r+0x48>
 80184e2:	4628      	mov	r0, r5
 80184e4:	f7fe f9a8 	bl	8016838 <_free_r>
 80184e8:	2300      	movs	r3, #0
 80184ea:	6363      	str	r3, [r4, #52]	; 0x34
 80184ec:	89a3      	ldrh	r3, [r4, #12]
 80184ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80184f2:	81a3      	strh	r3, [r4, #12]
 80184f4:	2300      	movs	r3, #0
 80184f6:	6063      	str	r3, [r4, #4]
 80184f8:	6923      	ldr	r3, [r4, #16]
 80184fa:	6023      	str	r3, [r4, #0]
 80184fc:	89a3      	ldrh	r3, [r4, #12]
 80184fe:	f043 0308 	orr.w	r3, r3, #8
 8018502:	81a3      	strh	r3, [r4, #12]
 8018504:	6923      	ldr	r3, [r4, #16]
 8018506:	b94b      	cbnz	r3, 801851c <__swsetup_r+0x7c>
 8018508:	89a3      	ldrh	r3, [r4, #12]
 801850a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801850e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018512:	d003      	beq.n	801851c <__swsetup_r+0x7c>
 8018514:	4621      	mov	r1, r4
 8018516:	4628      	mov	r0, r5
 8018518:	f000 f8e1 	bl	80186de <__smakebuf_r>
 801851c:	89a0      	ldrh	r0, [r4, #12]
 801851e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018522:	f010 0301 	ands.w	r3, r0, #1
 8018526:	d00a      	beq.n	801853e <__swsetup_r+0x9e>
 8018528:	2300      	movs	r3, #0
 801852a:	60a3      	str	r3, [r4, #8]
 801852c:	6963      	ldr	r3, [r4, #20]
 801852e:	425b      	negs	r3, r3
 8018530:	61a3      	str	r3, [r4, #24]
 8018532:	6923      	ldr	r3, [r4, #16]
 8018534:	b943      	cbnz	r3, 8018548 <__swsetup_r+0xa8>
 8018536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801853a:	d1c4      	bne.n	80184c6 <__swsetup_r+0x26>
 801853c:	bd38      	pop	{r3, r4, r5, pc}
 801853e:	0781      	lsls	r1, r0, #30
 8018540:	bf58      	it	pl
 8018542:	6963      	ldrpl	r3, [r4, #20]
 8018544:	60a3      	str	r3, [r4, #8]
 8018546:	e7f4      	b.n	8018532 <__swsetup_r+0x92>
 8018548:	2000      	movs	r0, #0
 801854a:	e7f7      	b.n	801853c <__swsetup_r+0x9c>
 801854c:	20000778 	.word	0x20000778

08018550 <_raise_r>:
 8018550:	291f      	cmp	r1, #31
 8018552:	b538      	push	{r3, r4, r5, lr}
 8018554:	4604      	mov	r4, r0
 8018556:	460d      	mov	r5, r1
 8018558:	d904      	bls.n	8018564 <_raise_r+0x14>
 801855a:	2316      	movs	r3, #22
 801855c:	6003      	str	r3, [r0, #0]
 801855e:	f04f 30ff 	mov.w	r0, #4294967295
 8018562:	bd38      	pop	{r3, r4, r5, pc}
 8018564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018566:	b112      	cbz	r2, 801856e <_raise_r+0x1e>
 8018568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801856c:	b94b      	cbnz	r3, 8018582 <_raise_r+0x32>
 801856e:	4620      	mov	r0, r4
 8018570:	f000 f830 	bl	80185d4 <_getpid_r>
 8018574:	462a      	mov	r2, r5
 8018576:	4601      	mov	r1, r0
 8018578:	4620      	mov	r0, r4
 801857a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801857e:	f000 b817 	b.w	80185b0 <_kill_r>
 8018582:	2b01      	cmp	r3, #1
 8018584:	d00a      	beq.n	801859c <_raise_r+0x4c>
 8018586:	1c59      	adds	r1, r3, #1
 8018588:	d103      	bne.n	8018592 <_raise_r+0x42>
 801858a:	2316      	movs	r3, #22
 801858c:	6003      	str	r3, [r0, #0]
 801858e:	2001      	movs	r0, #1
 8018590:	e7e7      	b.n	8018562 <_raise_r+0x12>
 8018592:	2400      	movs	r4, #0
 8018594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018598:	4628      	mov	r0, r5
 801859a:	4798      	blx	r3
 801859c:	2000      	movs	r0, #0
 801859e:	e7e0      	b.n	8018562 <_raise_r+0x12>

080185a0 <raise>:
 80185a0:	4b02      	ldr	r3, [pc, #8]	; (80185ac <raise+0xc>)
 80185a2:	4601      	mov	r1, r0
 80185a4:	6818      	ldr	r0, [r3, #0]
 80185a6:	f7ff bfd3 	b.w	8018550 <_raise_r>
 80185aa:	bf00      	nop
 80185ac:	20000778 	.word	0x20000778

080185b0 <_kill_r>:
 80185b0:	b538      	push	{r3, r4, r5, lr}
 80185b2:	4d07      	ldr	r5, [pc, #28]	; (80185d0 <_kill_r+0x20>)
 80185b4:	2300      	movs	r3, #0
 80185b6:	4604      	mov	r4, r0
 80185b8:	4608      	mov	r0, r1
 80185ba:	4611      	mov	r1, r2
 80185bc:	602b      	str	r3, [r5, #0]
 80185be:	f7e8 ff6b 	bl	8001498 <_kill>
 80185c2:	1c43      	adds	r3, r0, #1
 80185c4:	d102      	bne.n	80185cc <_kill_r+0x1c>
 80185c6:	682b      	ldr	r3, [r5, #0]
 80185c8:	b103      	cbz	r3, 80185cc <_kill_r+0x1c>
 80185ca:	6023      	str	r3, [r4, #0]
 80185cc:	bd38      	pop	{r3, r4, r5, pc}
 80185ce:	bf00      	nop
 80185d0:	20008994 	.word	0x20008994

080185d4 <_getpid_r>:
 80185d4:	f7e8 bf58 	b.w	8001488 <_getpid>

080185d8 <_sbrk_r>:
 80185d8:	b538      	push	{r3, r4, r5, lr}
 80185da:	4d06      	ldr	r5, [pc, #24]	; (80185f4 <_sbrk_r+0x1c>)
 80185dc:	2300      	movs	r3, #0
 80185de:	4604      	mov	r4, r0
 80185e0:	4608      	mov	r0, r1
 80185e2:	602b      	str	r3, [r5, #0]
 80185e4:	f7e8 ffe0 	bl	80015a8 <_sbrk>
 80185e8:	1c43      	adds	r3, r0, #1
 80185ea:	d102      	bne.n	80185f2 <_sbrk_r+0x1a>
 80185ec:	682b      	ldr	r3, [r5, #0]
 80185ee:	b103      	cbz	r3, 80185f2 <_sbrk_r+0x1a>
 80185f0:	6023      	str	r3, [r4, #0]
 80185f2:	bd38      	pop	{r3, r4, r5, pc}
 80185f4:	20008994 	.word	0x20008994

080185f8 <_calloc_r>:
 80185f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80185fa:	fba1 2402 	umull	r2, r4, r1, r2
 80185fe:	b94c      	cbnz	r4, 8018614 <_calloc_r+0x1c>
 8018600:	4611      	mov	r1, r2
 8018602:	9201      	str	r2, [sp, #4]
 8018604:	f7fe fcdc 	bl	8016fc0 <_malloc_r>
 8018608:	9a01      	ldr	r2, [sp, #4]
 801860a:	4605      	mov	r5, r0
 801860c:	b930      	cbnz	r0, 801861c <_calloc_r+0x24>
 801860e:	4628      	mov	r0, r5
 8018610:	b003      	add	sp, #12
 8018612:	bd30      	pop	{r4, r5, pc}
 8018614:	220c      	movs	r2, #12
 8018616:	6002      	str	r2, [r0, #0]
 8018618:	2500      	movs	r5, #0
 801861a:	e7f8      	b.n	801860e <_calloc_r+0x16>
 801861c:	4621      	mov	r1, r4
 801861e:	f7fe f850 	bl	80166c2 <memset>
 8018622:	e7f4      	b.n	801860e <_calloc_r+0x16>

08018624 <malloc>:
 8018624:	4b02      	ldr	r3, [pc, #8]	; (8018630 <malloc+0xc>)
 8018626:	4601      	mov	r1, r0
 8018628:	6818      	ldr	r0, [r3, #0]
 801862a:	f7fe bcc9 	b.w	8016fc0 <_malloc_r>
 801862e:	bf00      	nop
 8018630:	20000778 	.word	0x20000778

08018634 <_realloc_r>:
 8018634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018638:	4680      	mov	r8, r0
 801863a:	4614      	mov	r4, r2
 801863c:	460e      	mov	r6, r1
 801863e:	b921      	cbnz	r1, 801864a <_realloc_r+0x16>
 8018640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018644:	4611      	mov	r1, r2
 8018646:	f7fe bcbb 	b.w	8016fc0 <_malloc_r>
 801864a:	b92a      	cbnz	r2, 8018658 <_realloc_r+0x24>
 801864c:	f7fe f8f4 	bl	8016838 <_free_r>
 8018650:	4625      	mov	r5, r4
 8018652:	4628      	mov	r0, r5
 8018654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018658:	f000 f8a0 	bl	801879c <_malloc_usable_size_r>
 801865c:	4284      	cmp	r4, r0
 801865e:	4607      	mov	r7, r0
 8018660:	d802      	bhi.n	8018668 <_realloc_r+0x34>
 8018662:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018666:	d812      	bhi.n	801868e <_realloc_r+0x5a>
 8018668:	4621      	mov	r1, r4
 801866a:	4640      	mov	r0, r8
 801866c:	f7fe fca8 	bl	8016fc0 <_malloc_r>
 8018670:	4605      	mov	r5, r0
 8018672:	2800      	cmp	r0, #0
 8018674:	d0ed      	beq.n	8018652 <_realloc_r+0x1e>
 8018676:	42bc      	cmp	r4, r7
 8018678:	4622      	mov	r2, r4
 801867a:	4631      	mov	r1, r6
 801867c:	bf28      	it	cs
 801867e:	463a      	movcs	r2, r7
 8018680:	f7fe f8b9 	bl	80167f6 <memcpy>
 8018684:	4631      	mov	r1, r6
 8018686:	4640      	mov	r0, r8
 8018688:	f7fe f8d6 	bl	8016838 <_free_r>
 801868c:	e7e1      	b.n	8018652 <_realloc_r+0x1e>
 801868e:	4635      	mov	r5, r6
 8018690:	e7df      	b.n	8018652 <_realloc_r+0x1e>

08018692 <__swhatbuf_r>:
 8018692:	b570      	push	{r4, r5, r6, lr}
 8018694:	460c      	mov	r4, r1
 8018696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801869a:	2900      	cmp	r1, #0
 801869c:	b096      	sub	sp, #88	; 0x58
 801869e:	4615      	mov	r5, r2
 80186a0:	461e      	mov	r6, r3
 80186a2:	da0d      	bge.n	80186c0 <__swhatbuf_r+0x2e>
 80186a4:	89a3      	ldrh	r3, [r4, #12]
 80186a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80186aa:	f04f 0100 	mov.w	r1, #0
 80186ae:	bf0c      	ite	eq
 80186b0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80186b4:	2340      	movne	r3, #64	; 0x40
 80186b6:	2000      	movs	r0, #0
 80186b8:	6031      	str	r1, [r6, #0]
 80186ba:	602b      	str	r3, [r5, #0]
 80186bc:	b016      	add	sp, #88	; 0x58
 80186be:	bd70      	pop	{r4, r5, r6, pc}
 80186c0:	466a      	mov	r2, sp
 80186c2:	f000 f849 	bl	8018758 <_fstat_r>
 80186c6:	2800      	cmp	r0, #0
 80186c8:	dbec      	blt.n	80186a4 <__swhatbuf_r+0x12>
 80186ca:	9901      	ldr	r1, [sp, #4]
 80186cc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80186d0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80186d4:	4259      	negs	r1, r3
 80186d6:	4159      	adcs	r1, r3
 80186d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80186dc:	e7eb      	b.n	80186b6 <__swhatbuf_r+0x24>

080186de <__smakebuf_r>:
 80186de:	898b      	ldrh	r3, [r1, #12]
 80186e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80186e2:	079d      	lsls	r5, r3, #30
 80186e4:	4606      	mov	r6, r0
 80186e6:	460c      	mov	r4, r1
 80186e8:	d507      	bpl.n	80186fa <__smakebuf_r+0x1c>
 80186ea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80186ee:	6023      	str	r3, [r4, #0]
 80186f0:	6123      	str	r3, [r4, #16]
 80186f2:	2301      	movs	r3, #1
 80186f4:	6163      	str	r3, [r4, #20]
 80186f6:	b002      	add	sp, #8
 80186f8:	bd70      	pop	{r4, r5, r6, pc}
 80186fa:	ab01      	add	r3, sp, #4
 80186fc:	466a      	mov	r2, sp
 80186fe:	f7ff ffc8 	bl	8018692 <__swhatbuf_r>
 8018702:	9900      	ldr	r1, [sp, #0]
 8018704:	4605      	mov	r5, r0
 8018706:	4630      	mov	r0, r6
 8018708:	f7fe fc5a 	bl	8016fc0 <_malloc_r>
 801870c:	b948      	cbnz	r0, 8018722 <__smakebuf_r+0x44>
 801870e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018712:	059a      	lsls	r2, r3, #22
 8018714:	d4ef      	bmi.n	80186f6 <__smakebuf_r+0x18>
 8018716:	f023 0303 	bic.w	r3, r3, #3
 801871a:	f043 0302 	orr.w	r3, r3, #2
 801871e:	81a3      	strh	r3, [r4, #12]
 8018720:	e7e3      	b.n	80186ea <__smakebuf_r+0xc>
 8018722:	89a3      	ldrh	r3, [r4, #12]
 8018724:	6020      	str	r0, [r4, #0]
 8018726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801872a:	81a3      	strh	r3, [r4, #12]
 801872c:	9b00      	ldr	r3, [sp, #0]
 801872e:	6163      	str	r3, [r4, #20]
 8018730:	9b01      	ldr	r3, [sp, #4]
 8018732:	6120      	str	r0, [r4, #16]
 8018734:	b15b      	cbz	r3, 801874e <__smakebuf_r+0x70>
 8018736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801873a:	4630      	mov	r0, r6
 801873c:	f000 f81e 	bl	801877c <_isatty_r>
 8018740:	b128      	cbz	r0, 801874e <__smakebuf_r+0x70>
 8018742:	89a3      	ldrh	r3, [r4, #12]
 8018744:	f023 0303 	bic.w	r3, r3, #3
 8018748:	f043 0301 	orr.w	r3, r3, #1
 801874c:	81a3      	strh	r3, [r4, #12]
 801874e:	89a3      	ldrh	r3, [r4, #12]
 8018750:	431d      	orrs	r5, r3
 8018752:	81a5      	strh	r5, [r4, #12]
 8018754:	e7cf      	b.n	80186f6 <__smakebuf_r+0x18>
	...

08018758 <_fstat_r>:
 8018758:	b538      	push	{r3, r4, r5, lr}
 801875a:	4d07      	ldr	r5, [pc, #28]	; (8018778 <_fstat_r+0x20>)
 801875c:	2300      	movs	r3, #0
 801875e:	4604      	mov	r4, r0
 8018760:	4608      	mov	r0, r1
 8018762:	4611      	mov	r1, r2
 8018764:	602b      	str	r3, [r5, #0]
 8018766:	f7e8 fef6 	bl	8001556 <_fstat>
 801876a:	1c43      	adds	r3, r0, #1
 801876c:	d102      	bne.n	8018774 <_fstat_r+0x1c>
 801876e:	682b      	ldr	r3, [r5, #0]
 8018770:	b103      	cbz	r3, 8018774 <_fstat_r+0x1c>
 8018772:	6023      	str	r3, [r4, #0]
 8018774:	bd38      	pop	{r3, r4, r5, pc}
 8018776:	bf00      	nop
 8018778:	20008994 	.word	0x20008994

0801877c <_isatty_r>:
 801877c:	b538      	push	{r3, r4, r5, lr}
 801877e:	4d06      	ldr	r5, [pc, #24]	; (8018798 <_isatty_r+0x1c>)
 8018780:	2300      	movs	r3, #0
 8018782:	4604      	mov	r4, r0
 8018784:	4608      	mov	r0, r1
 8018786:	602b      	str	r3, [r5, #0]
 8018788:	f7e8 fef5 	bl	8001576 <_isatty>
 801878c:	1c43      	adds	r3, r0, #1
 801878e:	d102      	bne.n	8018796 <_isatty_r+0x1a>
 8018790:	682b      	ldr	r3, [r5, #0]
 8018792:	b103      	cbz	r3, 8018796 <_isatty_r+0x1a>
 8018794:	6023      	str	r3, [r4, #0]
 8018796:	bd38      	pop	{r3, r4, r5, pc}
 8018798:	20008994 	.word	0x20008994

0801879c <_malloc_usable_size_r>:
 801879c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187a0:	1f18      	subs	r0, r3, #4
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	bfbc      	itt	lt
 80187a6:	580b      	ldrlt	r3, [r1, r0]
 80187a8:	18c0      	addlt	r0, r0, r3
 80187aa:	4770      	bx	lr

080187ac <_init>:
 80187ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ae:	bf00      	nop
 80187b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187b2:	bc08      	pop	{r3}
 80187b4:	469e      	mov	lr, r3
 80187b6:	4770      	bx	lr

080187b8 <_fini>:
 80187b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ba:	bf00      	nop
 80187bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187be:	bc08      	pop	{r3}
 80187c0:	469e      	mov	lr, r3
 80187c2:	4770      	bx	lr
